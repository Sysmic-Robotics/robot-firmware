
STM32F7_PCB_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff0  08007ff0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff8  08007ff8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004264  20000074  08008074  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042d8  08008074  000242d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2f7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c5d  00000000  00000000  0003a399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  0003dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  0003f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000537f  00000000  00000000  00040db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c04e  00000000  00000000  0004612f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a89  00000000  00000000  0006217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062ec  00000000  00000000  00165c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f38 	.word	0x08007f38

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08007f38 	.word	0x08007f38

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f001 fe52 	bl	80021f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8cb 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fb53 	bl	8000bfc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000556:	f000 f9b5 	bl	80008c4 <MX_SPI1_Init>
  MX_I2C1_Init();
 800055a:	f000 f933 	bl	80007c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800055e:	f000 f971 	bl	8000844 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000562:	f000 f9f1 	bl	8000948 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000566:	f000 fa43 	bl	80009f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800056a:	f000 fa97 	bl	8000a9c <MX_TIM5_Init>
  MX_TIM8_Init();
 800056e:	f000 faeb 	bl	8000b48 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	/* Define wheels angles in motor.h */
	kinematic[0][0] = sin(WHEEL_ANGlE_1); kinematic[0][1] = -cos(WHEEL_ANGlE_1); kinematic[0][2] = -ROBOT_RADIO;
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <main+0x15c>)
 8000574:	4a4b      	ldr	r2, [pc, #300]	; (80006a4 <main+0x160>)
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	4b49      	ldr	r3, [pc, #292]	; (80006a0 <main+0x15c>)
 800057a:	4a4b      	ldr	r2, [pc, #300]	; (80006a8 <main+0x164>)
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <main+0x15c>)
 8000580:	4a4a      	ldr	r2, [pc, #296]	; (80006ac <main+0x168>)
 8000582:	609a      	str	r2, [r3, #8]
	kinematic[1][0] = sin(WHEEL_ANGlE_2); kinematic[1][1] = -cos(WHEEL_ANGlE_2); kinematic[1][2] = -ROBOT_RADIO;
 8000584:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <main+0x15c>)
 8000586:	4a4a      	ldr	r2, [pc, #296]	; (80006b0 <main+0x16c>)
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <main+0x15c>)
 800058c:	4a49      	ldr	r2, [pc, #292]	; (80006b4 <main+0x170>)
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <main+0x15c>)
 8000592:	4a46      	ldr	r2, [pc, #280]	; (80006ac <main+0x168>)
 8000594:	615a      	str	r2, [r3, #20]
	kinematic[2][0] = sin(WHEEL_ANGlE_3); kinematic[2][1] = -cos(WHEEL_ANGlE_3); kinematic[2][2] = -ROBOT_RADIO;
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <main+0x15c>)
 8000598:	4a47      	ldr	r2, [pc, #284]	; (80006b8 <main+0x174>)
 800059a:	619a      	str	r2, [r3, #24]
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <main+0x15c>)
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <main+0x170>)
 80005a0:	61da      	str	r2, [r3, #28]
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <main+0x15c>)
 80005a4:	4a41      	ldr	r2, [pc, #260]	; (80006ac <main+0x168>)
 80005a6:	621a      	str	r2, [r3, #32]
	kinematic[3][0] = sin(WHEEL_ANGlE_4); kinematic[3][1] = -cos(WHEEL_ANGlE_4); kinematic[3][2] = -ROBOT_RADIO;
 80005a8:	4b3d      	ldr	r3, [pc, #244]	; (80006a0 <main+0x15c>)
 80005aa:	4a44      	ldr	r2, [pc, #272]	; (80006bc <main+0x178>)
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <main+0x15c>)
 80005b0:	4a3d      	ldr	r2, [pc, #244]	; (80006a8 <main+0x164>)
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <main+0x15c>)
 80005b6:	4a3d      	ldr	r2, [pc, #244]	; (80006ac <main+0x168>)
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c

	for (uint8_t i = 0; i < 10; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80005c0:	e016      	b.n	80005f0 <main+0xac>
	{
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	483e      	ldr	r0, [pc, #248]	; (80006c0 <main+0x17c>)
 80005c8:	f007 faa4 	bl	8007b14 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	483b      	ldr	r0, [pc, #236]	; (80006c0 <main+0x17c>)
 80005d2:	f007 fa9f 	bl	8007b14 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4839      	ldr	r0, [pc, #228]	; (80006c0 <main+0x17c>)
 80005dc:	f007 fa9a 	bl	8007b14 <Board_LedToggle>
		HAL_Delay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f001 fe33 	bl	800224c <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++)
 80005e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005ea:	3301      	adds	r3, #1
 80005ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80005f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f4:	2b09      	cmp	r3, #9
 80005f6:	d9e4      	bls.n	80005c2 <main+0x7e>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of kickQueue */
  osMessageQDef(kickQueue, 16, uint16_t);
 80005f8:	4a32      	ldr	r2, [pc, #200]	; (80006c4 <main+0x180>)
 80005fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
  kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 8000606:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f004 ff75 	bl	80054fc <osMessageCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <main+0x184>)
 8000616:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(nrf24Check, 16, uint16_t);
 8000618:	4a2a      	ldr	r2, [pc, #168]	; (80006c4 <main+0x180>)
 800061a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e883 0003 	stmia.w	r3, {r0, r1}
  nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 8000626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f004 ff65 	bl	80054fc <osMessageCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <main+0x188>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of driveTask */
  osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <main+0x18c>)
 800063a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	682b      	ldr	r3, [r5, #0]
 8000646:	6023      	str	r3, [r4, #0]
  driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8000648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 ff19 	bl	8005486 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <main+0x190>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of radioTask */
  osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <main+0x194>)
 800065c:	f107 0414 	add.w	r4, r7, #20
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	682b      	ldr	r3, [r5, #0]
 8000668:	6023      	str	r3, [r4, #0]
  radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f004 ff08 	bl	8005486 <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a18      	ldr	r2, [pc, #96]	; (80006dc <main+0x198>)
 800067a:	6013      	str	r3, [r2, #0]

  /* definition and creation of kickTask */
  osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x19c>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	682b      	ldr	r3, [r5, #0]
 8000688:	6023      	str	r3, [r4, #0]
  kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 800068a:	463b      	mov	r3, r7
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fef9 	bl	8005486 <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <main+0x1a0>)
 8000698:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069a:	f004 fedd 	bl	8005458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800069e:	e7fe      	b.n	800069e <main+0x15a>
 80006a0:	20000308 	.word	0x20000308
 80006a4:	3f51b3f3 	.word	0x3f51b3f3
 80006a8:	bf12d5e8 	.word	0xbf12d5e8
 80006ac:	bda83e42 	.word	0xbda83e42
 80006b0:	3f441b7d 	.word	0x3f441b7d
 80006b4:	3f248dbb 	.word	0x3f248dbb
 80006b8:	bf441b7d 	.word	0xbf441b7d
 80006bc:	bf51b3f3 	.word	0xbf51b3f3
 80006c0:	40022000 	.word	0x40022000
 80006c4:	08007f74 	.word	0x08007f74
 80006c8:	200002c8 	.word	0x200002c8
 80006cc:	200002cc 	.word	0x200002cc
 80006d0:	08007f7c 	.word	0x08007f7c
 80006d4:	200002bc 	.word	0x200002bc
 80006d8:	08007f90 	.word	0x08007f90
 80006dc:	200002c0 	.word	0x200002c0
 80006e0:	08007fa4 	.word	0x08007fa4
 80006e4:	200002c4 	.word	0x200002c4

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 fbf0 	bl	8007edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <SystemClock_Config+0xd8>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000754:	23d8      	movs	r3, #216	; 0xd8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fcd7 	bl	800311c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000774:	f001 f84a 	bl	800180c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f002 fc80 	bl	800307c <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000782:	f001 f843 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2107      	movs	r1, #7
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 ff67 	bl	8003678 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007b0:	f001 f82c 	bl	800180c <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	; 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C1_Init+0x74>)
 8000800:	f002 f822 	bl	8002848 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 ffff 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C1_Init+0x74>)
 8000812:	f002 fb9b 	bl	8002f4c <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 fff6 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C1_Init+0x74>)
 8000824:	f002 fbdd 	bl	8002fe2 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 ffed 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000090 	.word	0x20000090
 800083c:	40005400 	.word	0x40005400
 8000840:	6000030d 	.word	0x6000030d

08000844 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C2_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C2_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C2_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000880:	f001 ffe2 	bl	8002848 <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 ffbf 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000892:	f002 fb5b 	bl	8002f4c <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 ffb6 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2C2_Init+0x74>)
 80008a4:	f002 fb9d 	bl	8002fe2 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 ffad 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000dc 	.word	0x200000dc
 80008bc:	40005800 	.word	0x40005800
 80008c0:	6000030d 	.word	0x6000030d

080008c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <MX_SPI1_Init+0x80>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x7c>)
 80008fa:	2218      	movs	r2, #24
 80008fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_SPI1_Init+0x7c>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x7c>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_SPI1_Init+0x7c>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x7c>)
 8000912:	2207      	movs	r2, #7
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI1_Init+0x7c>)
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x7c>)
 800091e:	2208      	movs	r2, #8
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_SPI1_Init+0x7c>)
 8000924:	f003 fd14 	bl	8004350 <HAL_SPI_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 ff6d 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <MX_SPI1_Init+0x7c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093a:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000128 	.word	0x20000128
 8000944:	40013000 	.word	0x40013000

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2224      	movs	r2, #36	; 0x24
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f007 fac0 	bl	8007edc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM2_Init+0xa4>)
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM2_Init+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800098e:	2303      	movs	r3, #3
 8000990:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000996:	2301      	movs	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a6:	2301      	movs	r3, #1
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_TIM2_Init+0xa4>)
 80009ba:	f004 f9e9 	bl	8004d90 <HAL_TIM_Encoder_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80009c4:	f000 ff22 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_TIM2_Init+0xa4>)
 80009d6:	f004 fc69 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80009e0:	f000 ff14 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000018c 	.word	0x2000018c

080009f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	2224      	movs	r2, #36	; 0x24
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 fa6c 	bl	8007edc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <MX_TIM3_Init+0xa8>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a34:	2303      	movs	r3, #3
 8000a36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a60:	f004 f996 	bl	8004d90 <HAL_TIM_Encoder_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000a6a:	f000 fecf 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_TIM3_Init+0xa4>)
 8000a7c:	f004 fc16 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000a86:	f000 fec1 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	; 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200001d8 	.word	0x200001d8
 8000a98:	40000400 	.word	0x40000400

08000a9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2224      	movs	r2, #36	; 0x24
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fa16 	bl	8007edc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <MX_TIM5_Init+0xa8>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000af8:	2301      	movs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000b0c:	f004 f940 	bl	8004d90 <HAL_TIM_Encoder_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000b16:	f000 fe79 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_TIM5_Init+0xa4>)
 8000b28:	f004 fbc0 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000b32:	f000 fe6b 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	; 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000224 	.word	0x20000224
 8000b44:	40000c00 	.word	0x40000c00

08000b48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2224      	movs	r2, #36	; 0x24
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f007 f9c0 	bl	8007edc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b68:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <MX_TIM8_Init+0xb0>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000bbe:	f004 f8e7 	bl	8004d90 <HAL_TIM_Encoder_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000bc8:	f000 fe20 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_TIM8_Init+0xac>)
 8000bde:	f004 fb65 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000be8:	f000 fe10 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000270 	.word	0x20000270
 8000bf8:	40010400 	.word	0x40010400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b090      	sub	sp, #64	; 0x40
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c12:	4bb3      	ldr	r3, [pc, #716]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4ab2      	ldr	r2, [pc, #712]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4bb0      	ldr	r3, [pc, #704]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c2a:	4bad      	ldr	r3, [pc, #692]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4aac      	ldr	r2, [pc, #688]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4baa      	ldr	r3, [pc, #680]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	4ba7      	ldr	r3, [pc, #668]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4aa6      	ldr	r2, [pc, #664]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4ba4      	ldr	r3, [pc, #656]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	623b      	str	r3, [r7, #32]
 8000c58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4ba1      	ldr	r3, [pc, #644]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4aa0      	ldr	r2, [pc, #640]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b9e      	ldr	r3, [pc, #632]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b9b      	ldr	r3, [pc, #620]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a9a      	ldr	r2, [pc, #616]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b98      	ldr	r3, [pc, #608]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b95      	ldr	r3, [pc, #596]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a94      	ldr	r2, [pc, #592]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b92      	ldr	r3, [pc, #584]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ca2:	4b8f      	ldr	r3, [pc, #572]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a8e      	ldr	r2, [pc, #568]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b8c      	ldr	r3, [pc, #560]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b89      	ldr	r3, [pc, #548]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a88      	ldr	r2, [pc, #544]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b86      	ldr	r3, [pc, #536]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd2:	4b83      	ldr	r3, [pc, #524]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a82      	ldr	r2, [pc, #520]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b80      	ldr	r3, [pc, #512]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cea:	4b7d      	ldr	r3, [pc, #500]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a7c      	ldr	r2, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b7a      	ldr	r3, [pc, #488]	; (8000ee0 <MX_GPIO_Init+0x2e4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000d08:	4876      	ldr	r0, [pc, #472]	; (8000ee4 <MX_GPIO_Init+0x2e8>)
 8000d0a:	f001 fd69 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f640 0138 	movw	r1, #2104	; 0x838
 8000d14:	4874      	ldr	r0, [pc, #464]	; (8000ee8 <MX_GPIO_Init+0x2ec>)
 8000d16:	f001 fd63 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	4872      	ldr	r0, [pc, #456]	; (8000eec <MX_GPIO_Init+0x2f0>)
 8000d22:	f001 fd5d 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000d2c:	4870      	ldr	r0, [pc, #448]	; (8000ef0 <MX_GPIO_Init+0x2f4>)
 8000d2e:	f001 fd57 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d38:	486e      	ldr	r0, [pc, #440]	; (8000ef4 <MX_GPIO_Init+0x2f8>)
 8000d3a:	f001 fd51 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000d44:	486c      	ldr	r0, [pc, #432]	; (8000ef8 <MX_GPIO_Init+0x2fc>)
 8000d46:	f001 fd4b 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	486b      	ldr	r0, [pc, #428]	; (8000efc <MX_GPIO_Init+0x300>)
 8000d50:	f001 fd46 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8000d5a:	4869      	ldr	r0, [pc, #420]	; (8000f00 <MX_GPIO_Init+0x304>)
 8000d5c:	f001 fd40 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	21c0      	movs	r1, #192	; 0xc0
 8000d64:	4867      	ldr	r0, [pc, #412]	; (8000f04 <MX_GPIO_Init+0x308>)
 8000d66:	f001 fd3b 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d6a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4858      	ldr	r0, [pc, #352]	; (8000ee4 <MX_GPIO_Init+0x2e8>)
 8000d84:	f001 fb68 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8000d88:	f640 0338 	movw	r3, #2104	; 0x838
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4851      	ldr	r0, [pc, #324]	; (8000ee8 <MX_GPIO_Init+0x2ec>)
 8000da2:	f001 fb59 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000da6:	2310      	movs	r3, #16
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	4853      	ldr	r0, [pc, #332]	; (8000f08 <MX_GPIO_Init+0x30c>)
 8000dba:	f001 fb4d 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <MX_GPIO_Init+0x2fc>)
 8000dd2:	f001 fb41 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4840      	ldr	r0, [pc, #256]	; (8000eec <MX_GPIO_Init+0x2f0>)
 8000dea:	f001 fb35 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <MX_GPIO_Init+0x2e8>)
 8000e04:	f001 fb28 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0x2f4>)
 8000e1c:	f001 fb1c 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	482c      	ldr	r0, [pc, #176]	; (8000eec <MX_GPIO_Init+0x2f0>)
 8000e3a:	f001 fb0d 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e3e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e54:	4619      	mov	r1, r3
 8000e56:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <MX_GPIO_Init+0x2f4>)
 8000e58:	f001 fafe 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <MX_GPIO_Init+0x2f8>)
 8000e76:	f001 faef 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0x2fc>)
 8000e94:	f001 fae0 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_GPIO_Init+0x300>)
 8000eb0:	f001 fad2 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000eb4:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_GPIO_Init+0x304>)
 8000ece:	f001 fac3 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e016      	b.n	8000f0c <MX_GPIO_Init+0x310>
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40022400 	.word	0x40022400
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40022800 	.word	0x40022800
 8000f08:	40021c00 	.word	0x40021c00
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_GPIO_Init+0x32c>)
 8000f1a:	f001 fa9d 	bl	8002458 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3740      	adds	r7, #64	; 0x40
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40022800 	.word	0x40022800

08000f2c <setSpeed>:

/* USER CODE BEGIN 4 */
float v_vel[3];
void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8000f38:	4bb1      	ldr	r3, [pc, #708]	; (8001200 <setSpeed+0x2d4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3e:	4bb0      	ldr	r3, [pc, #704]	; (8001200 <setSpeed+0x2d4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	da16      	bge.n	8000f7e <setSpeed+0x52>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3304      	adds	r3, #4
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f66:	4313      	orrs	r3, r2
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f70:	eeb1 7a67 	vneg.f32	s14, s15
 8000f74:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001204 <setSpeed+0x2d8>
 8000f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7c:	e013      	b.n	8000fa6 <setSpeed+0x7a>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f94:	4313      	orrs	r3, r2
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9e:	eddf 6a99 	vldr	s13, [pc, #612]	; 8001204 <setSpeed+0x2d8>
 8000fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa6:	4b96      	ldr	r3, [pc, #600]	; (8001200 <setSpeed+0x2d4>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da16      	bge.n	8000fe6 <setSpeed+0xba>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd8:	eeb1 7a67 	vneg.f32	s14, s15
 8000fdc:	eddf 6a89 	vldr	s13, [pc, #548]	; 8001204 <setSpeed+0x2d8>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	e013      	b.n	800100e <setSpeed+0xe2>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001006:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8001204 <setSpeed+0x2d8>
 800100a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100e:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <setSpeed+0x2d4>)
 8001010:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 1000.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 1000.0f;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3303      	adds	r3, #3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	da16      	bge.n	800104e <setSpeed+0x122>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3304      	adds	r3, #4
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	01db      	lsls	r3, r3, #7
 8001028:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3303      	adds	r3, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001036:	4313      	orrs	r3, r2
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	eeb1 7a67 	vneg.f32	s14, s15
 8001044:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001208 <setSpeed+0x2dc>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	e013      	b.n	8001076 <setSpeed+0x14a>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3304      	adds	r3, #4
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	01db      	lsls	r3, r3, #7
 8001056:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3303      	adds	r3, #3
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001064:	4313      	orrs	r3, r2
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106e:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001208 <setSpeed+0x2dc>
 8001072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001076:	4b62      	ldr	r3, [pc, #392]	; (8001200 <setSpeed+0x2d4>)
 8001078:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 800107c:	4b60      	ldr	r3, [pc, #384]	; (8001200 <setSpeed+0x2d4>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108a:	edc7 7a08 	vstr	s15, [r7, #32]
 800108e:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <setSpeed+0x2d4>)
 8001090:	ed93 7a01 	vldr	s14, [r3, #4]
 8001094:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 80010a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b4:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 80010b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c0:	eeb0 0b47 	vmov.f64	d0, d7
 80010c4:	f006 ff14 	bl	8007ef0 <sqrt>
 80010c8:	eeb0 7b40 	vmov.f64	d7, d0
 80010cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d0:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 80010d4:	edd7 6a08 	vldr	s13, [r7, #32]
 80010d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e0:	edc7 7a05 	vstr	s15, [r7, #20]
 80010e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80010e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 80010f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800120c <setSpeed+0x2e0>
 80010fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	dd23      	ble.n	800114e <setSpeed+0x222>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <setSpeed+0x2e4>)
 8001108:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 800110a:	ed97 7a05 	vldr	s14, [r7, #20]
 800110e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 800111a:	ed97 7a04 	vldr	s14, [r7, #16]
 800111e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 800112a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800112e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	4b32      	ldr	r3, [pc, #200]	; (8001200 <setSpeed+0x2d4>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 800113c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001140:	edd7 7a07 	vldr	s15, [r7, #28]
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <setSpeed+0x2d4>)
 800114a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001154:	e04b      	b.n	80011ee <setSpeed+0x2c2>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 800115c:	2300      	movs	r3, #0
 800115e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001162:	e020      	b.n	80011a6 <setSpeed+0x27a>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8001164:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001168:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800116c:	4829      	ldr	r0, [pc, #164]	; (8001214 <setSpeed+0x2e8>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	440b      	add	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4403      	add	r3, r0
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <setSpeed+0x2d4>)
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 800119c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011a0:	3301      	adds	r3, #1
 80011a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d9da      	bls.n	8001164 <setSpeed+0x238>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 80011ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	bfcc      	ite	gt
 80011bc:	2301      	movgt	r3, #1
 80011be:	2300      	movle	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f083 0301 	eor.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4619      	mov	r1, r3
 80011ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	b2ca      	uxtb	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 80011d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	4413      	add	r3, r2
 80011e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 80011e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d9af      	bls.n	8001156 <setSpeed+0x22a>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3738      	adds	r7, #56	; 0x38
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000052c 	.word	0x2000052c
 8001204:	42c80000 	.word	0x42c80000
 8001208:	447a0000 	.word	0x447a0000
 800120c:	3e19999a 	.word	0x3e19999a
 8001210:	3e19999a 	.word	0x3e19999a
 8001214:	20000308 	.word	0x20000308

08001218 <getDribblerSpeed>:

uint8_t getDribblerSpeed(uint8_t *buffer)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	109b      	asrs	r3, r3, #2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x01;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DriveFunction>:
	* @param  argument: Not used 
	* @retval None
	*/
/* USER CODE END Header_DriveFunction */
void DriveFunction(void const * argument)
{
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b098      	sub	sp, #96	; 0x60
 8001260:	af06      	add	r7, sp, #24
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Init PID sampler */
	uint32_t timeToWait = osKernelSysTick();
 8001264:	f004 f8ff 	bl	8005466 <osKernelSysTick>
 8001268:	4603      	mov	r3, r0
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
	/* Init robotID */
	robotID = Board_GetID();
 800126c:	f006 fc62 	bl	8007b34 <Board_GetID>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4bbd      	ldr	r3, [pc, #756]	; (800156c <DriveFunction+0x310>)
 8001276:	801a      	strh	r2, [r3, #0]
	
	/* Init wheels motors DAC: 2.0[V] ref */
	MAX581x_Handler_t driveDAC;
	MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 8001278:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800127c:	2202      	movs	r2, #2
 800127e:	49bc      	ldr	r1, [pc, #752]	; (8001570 <DriveFunction+0x314>)
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fae3 	bl	800784c <MAX581x_Init>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 8001286:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f006 fb2b 	bl	80078ea <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 8001294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001298:	2200      	movs	r2, #0
 800129a:	2101      	movs	r1, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f006 fb24 	bl	80078ea <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 80012a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f006 fb1d 	bl	80078ea <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 80012b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012b4:	2200      	movs	r2, #0
 80012b6:	2103      	movs	r1, #3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f006 fb16 	bl	80078ea <MAX581x_Code>
	
	/* Init dribbler motor DAC: 2.0[V] ref */
	MAX581x_Handler_t dribblerDAC;
	MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 80012be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c2:	2202      	movs	r2, #2
 80012c4:	49ab      	ldr	r1, [pc, #684]	; (8001574 <DriveFunction+0x318>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f006 fac0 	bl	800784c <MAX581x_Init>
	MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 fb08 	bl	80078ea <MAX581x_Code>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e0:	48a5      	ldr	r0, [pc, #660]	; (8001578 <DriveFunction+0x31c>)
 80012e2:	f001 fa7d 	bl	80027e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	48a3      	ldr	r0, [pc, #652]	; (8001578 <DriveFunction+0x31c>)
 80012ec:	f001 fa78 	bl	80027e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	48a0      	ldr	r0, [pc, #640]	; (8001578 <DriveFunction+0x31c>)
 80012f6:	f001 fa73 	bl	80027e0 <HAL_GPIO_WritePin>
	
	/* Config motors GPIO and TIM */
	/* Motor 1 */
	motor[0].enablePin.GPIOx = GPIOA;
 80012fa:	4ba0      	ldr	r3, [pc, #640]	; (800157c <DriveFunction+0x320>)
 80012fc:	4aa0      	ldr	r2, [pc, #640]	; (8001580 <DriveFunction+0x324>)
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
	motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <DriveFunction+0x320>)
 8001302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001306:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	motor[0].dirPin.GPIOx = GPIOA;
 800130a:	4b9c      	ldr	r3, [pc, #624]	; (800157c <DriveFunction+0x320>)
 800130c:	4a9c      	ldr	r2, [pc, #624]	; (8001580 <DriveFunction+0x324>)
 800130e:	65da      	str	r2, [r3, #92]	; 0x5c
	motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 8001310:	4b9a      	ldr	r3, [pc, #616]	; (800157c <DriveFunction+0x320>)
 8001312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001316:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	motor[0].brakePin.GPIOx = GPIOA;
 800131a:	4b98      	ldr	r3, [pc, #608]	; (800157c <DriveFunction+0x320>)
 800131c:	4a98      	ldr	r2, [pc, #608]	; (8001580 <DriveFunction+0x324>)
 800131e:	665a      	str	r2, [r3, #100]	; 0x64
	motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 8001320:	4b96      	ldr	r3, [pc, #600]	; (800157c <DriveFunction+0x320>)
 8001322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	
	motor[0].encoder.count = &TIM3->CNT;
 800132a:	4b94      	ldr	r3, [pc, #592]	; (800157c <DriveFunction+0x320>)
 800132c:	4a95      	ldr	r2, [pc, #596]	; (8001584 <DriveFunction+0x328>)
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
	motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 8001330:	4b95      	ldr	r3, [pc, #596]	; (8001588 <DriveFunction+0x32c>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800133c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001344:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800158c <DriveFunction+0x330>
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	4b8b      	ldr	r3, [pc, #556]	; (800157c <DriveFunction+0x320>)
 800134e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 8001352:	4b8a      	ldr	r3, [pc, #552]	; (800157c <DriveFunction+0x320>)
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <DriveFunction+0x320>)
 800135c:	4a8c      	ldr	r2, [pc, #560]	; (8001590 <DriveFunction+0x334>)
 800135e:	64da      	str	r2, [r3, #76]	; 0x4c
	TIM3->CR1 = TIM_CR1_CEN;
 8001360:	4b89      	ldr	r3, [pc, #548]	; (8001588 <DriveFunction+0x32c>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
	
	/* Motor 2 */
	motor[1].enablePin.GPIOx = GPIOC;
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <DriveFunction+0x320>)
 8001368:	4a8a      	ldr	r2, [pc, #552]	; (8001594 <DriveFunction+0x338>)
 800136a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 800136e:	4b83      	ldr	r3, [pc, #524]	; (800157c <DriveFunction+0x320>)
 8001370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001374:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	motor[1].dirPin.GPIOx = GPIOC;
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <DriveFunction+0x320>)
 800137a:	4a86      	ldr	r2, [pc, #536]	; (8001594 <DriveFunction+0x338>)
 800137c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8001380:	4b7e      	ldr	r3, [pc, #504]	; (800157c <DriveFunction+0x320>)
 8001382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001386:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	motor[1].brakePin.GPIOx = GPIOD;
 800138a:	4b7c      	ldr	r3, [pc, #496]	; (800157c <DriveFunction+0x320>)
 800138c:	4a82      	ldr	r2, [pc, #520]	; (8001598 <DriveFunction+0x33c>)
 800138e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <DriveFunction+0x320>)
 8001394:	2201      	movs	r2, #1
 8001396:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	
	motor[1].encoder.count = &TIM8->CNT;
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <DriveFunction+0x320>)
 800139c:	4a7f      	ldr	r2, [pc, #508]	; (800159c <DriveFunction+0x340>)
 800139e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 80013a2:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <DriveFunction+0x344>)
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ae:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80013b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800158c <DriveFunction+0x330>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	4b6f      	ldr	r3, [pc, #444]	; (800157c <DriveFunction+0x320>)
 80013c0:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 80013c4:	4b6d      	ldr	r3, [pc, #436]	; (800157c <DriveFunction+0x320>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80013cc:	4b6b      	ldr	r3, [pc, #428]	; (800157c <DriveFunction+0x320>)
 80013ce:	4a70      	ldr	r2, [pc, #448]	; (8001590 <DriveFunction+0x334>)
 80013d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	TIM8->CR1 = TIM_CR1_CEN;
 80013d4:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <DriveFunction+0x344>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
	
	/* Motor 3 */
	motor[2].enablePin.GPIOx = GPIOK;
 80013da:	4b68      	ldr	r3, [pc, #416]	; (800157c <DriveFunction+0x320>)
 80013dc:	4a71      	ldr	r2, [pc, #452]	; (80015a4 <DriveFunction+0x348>)
 80013de:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 80013e2:	4b66      	ldr	r3, [pc, #408]	; (800157c <DriveFunction+0x320>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	motor[2].dirPin.GPIOx = GPIOG;
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <DriveFunction+0x320>)
 80013ec:	4a6e      	ldr	r2, [pc, #440]	; (80015a8 <DriveFunction+0x34c>)
 80013ee:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 80013f2:	4b62      	ldr	r3, [pc, #392]	; (800157c <DriveFunction+0x320>)
 80013f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013f8:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
	motor[2].brakePin.GPIOx = GPIOK;
 80013fc:	4b5f      	ldr	r3, [pc, #380]	; (800157c <DriveFunction+0x320>)
 80013fe:	4a69      	ldr	r2, [pc, #420]	; (80015a4 <DriveFunction+0x348>)
 8001400:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 8001404:	4b5d      	ldr	r3, [pc, #372]	; (800157c <DriveFunction+0x320>)
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	
	motor[2].encoder.count = &TIM2->CNT;
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <DriveFunction+0x320>)
 800140e:	4a67      	ldr	r2, [pc, #412]	; (80015ac <DriveFunction+0x350>)
 8001410:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 8001414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001422:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800158c <DriveFunction+0x330>
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <DriveFunction+0x320>)
 8001434:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 8001438:	4b50      	ldr	r3, [pc, #320]	; (800157c <DriveFunction+0x320>)
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8001440:	4b4e      	ldr	r3, [pc, #312]	; (800157c <DriveFunction+0x320>)
 8001442:	4a53      	ldr	r2, [pc, #332]	; (8001590 <DriveFunction+0x334>)
 8001444:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	TIM2->CR1 = TIM_CR1_CEN;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
	
	/* Motor 4 */
	motor[3].enablePin.GPIOx = GPIOF;
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <DriveFunction+0x320>)
 8001452:	4a57      	ldr	r2, [pc, #348]	; (80015b0 <DriveFunction+0x354>)
 8001454:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <DriveFunction+0x320>)
 800145a:	2220      	movs	r2, #32
 800145c:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	motor[3].dirPin.GPIOx = GPIOF;
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <DriveFunction+0x320>)
 8001462:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <DriveFunction+0x354>)
 8001464:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 8001468:	4b44      	ldr	r3, [pc, #272]	; (800157c <DriveFunction+0x320>)
 800146a:	2208      	movs	r2, #8
 800146c:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	motor[3].brakePin.GPIOx = GPIOF;
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <DriveFunction+0x320>)
 8001472:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <DriveFunction+0x354>)
 8001474:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <DriveFunction+0x320>)
 800147a:	2210      	movs	r2, #16
 800147c:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc

	motor[3].encoder.count = &TIM5->CNT;
 8001480:	4b3e      	ldr	r3, [pc, #248]	; (800157c <DriveFunction+0x320>)
 8001482:	4a4c      	ldr	r2, [pc, #304]	; (80015b4 <DriveFunction+0x358>)
 8001484:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8001488:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <DriveFunction+0x35c>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001494:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800158c <DriveFunction+0x330>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <DriveFunction+0x320>)
 80014a6:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
	motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <DriveFunction+0x320>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <DriveFunction+0x320>)
 80014b4:	4a36      	ldr	r2, [pc, #216]	; (8001590 <DriveFunction+0x334>)
 80014b6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	TIM5->CR1 = TIM_CR1_CEN;
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <DriveFunction+0x35c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
	
	/* Config PID */
	PID_Params_t pidParams;
	pidParams.Kp = 12.0f;
 80014c0:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <DriveFunction+0x360>)
 80014c2:	60fb      	str	r3, [r7, #12]
	pidParams.Ki = 4.5f;
 80014c4:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <DriveFunction+0x364>)
 80014c6:	613b      	str	r3, [r7, #16]
	pidParams.Kd = 0.0f;
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
	pidParams.outputMax = (float)(/*WHEEL_MAX_SPEED_RAD * 10.0f*/ 4095.0f);
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <DriveFunction+0x368>)
 80014d0:	61bb      	str	r3, [r7, #24]
	pidParams.outputMin = (float)(/*-WHEEL_MAX_SPEED_RAD * 10.0f*/ -4095.0f);
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <DriveFunction+0x36c>)
 80014d4:	61fb      	str	r3, [r7, #28]
	pidParams.integralMax = pidParams.outputMax / 10.0f;
 80014d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80014da:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	edc7 7a08 	vstr	s15, [r7, #32]
	pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <DriveFunction+0x370>)
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enable motors and disable brake */
	for (uint8_t i = 0; i < 4; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80014f0:	e034      	b.n	800155c <DriveFunction+0x300>
	{
		Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 80014f2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80014f6:	4613      	mov	r3, r2
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4a1f      	ldr	r2, [pc, #124]	; (800157c <DriveFunction+0x320>)
 8001500:	4413      	add	r3, r2
 8001502:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001506:	2201      	movs	r2, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f006 fb93 	bl	8007c34 <Motor_Init>
		Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 800150e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001512:	4613      	mov	r3, r2
 8001514:	015b      	lsls	r3, r3, #5
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <DriveFunction+0x320>)
 800151c:	4413      	add	r3, r2
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f006 fc33 	bl	8007d8c <Motor_SetBrake>
		PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 8001526:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800152a:	4613      	mov	r3, r2
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <DriveFunction+0x320>)
 8001534:	189d      	adds	r5, r3, r2
 8001536:	2301      	movs	r3, #1
 8001538:	9304      	str	r3, [sp, #16]
 800153a:	466c      	mov	r4, sp
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154c:	4628      	mov	r0, r5
 800154e:	f006 fa0f 	bl	8007970 <PID_Init>
	for (uint8_t i = 0; i < 4; i++)
 8001552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001556:	3301      	adds	r3, #1
 8001558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800155c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001560:	2b03      	cmp	r3, #3
 8001562:	d9c6      	bls.n	80014f2 <DriveFunction+0x296>
	}
	//Motor_Enable(&motor[0], MOTOR_STATUS_ENABLE);
	/* Infinite loop */
	for(;;)
	{						
		for (uint8_t i = 0; i < 4; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800156a:	e069      	b.n	8001640 <DriveFunction+0x3e4>
 800156c:	20000528 	.word	0x20000528
 8001570:	20000090 	.word	0x20000090
 8001574:	200000dc 	.word	0x200000dc
 8001578:	40022400 	.word	0x40022400
 800157c:	20000338 	.word	0x20000338
 8001580:	40020000 	.word	0x40020000
 8001584:	40000424 	.word	0x40000424
 8001588:	40000400 	.word	0x40000400
 800158c:	45000000 	.word	0x45000000
 8001590:	3f714639 	.word	0x3f714639
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40010424 	.word	0x40010424
 80015a0:	40010400 	.word	0x40010400
 80015a4:	40022800 	.word	0x40022800
 80015a8:	40021800 	.word	0x40021800
 80015ac:	40000024 	.word	0x40000024
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40000c24 	.word	0x40000c24
 80015b8:	40000c00 	.word	0x40000c00
 80015bc:	41400000 	.word	0x41400000
 80015c0:	40900000 	.word	0x40900000
 80015c4:	457ff000 	.word	0x457ff000
 80015c8:	c57ff000 	.word	0xc57ff000
 80015cc:	3a83126f 	.word	0x3a83126f
		{
			/* Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine */
			Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 80015d0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80015d4:	4613      	mov	r3, r2
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <DriveFunction+0x420>)
 80015de:	441a      	add	r2, r3
 80015e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015e4:	4926      	ldr	r1, [pc, #152]	; (8001680 <DriveFunction+0x424>)
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	4619      	mov	r1, r3
 80015f8:	4610      	mov	r0, r2
 80015fa:	f006 fb3d 	bl	8007c78 <Motor_CLDrive>
			
			/* TODO: make dribbler files, variable speeds */
			MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribblerSel]);
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <DriveFunction+0x428>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <DriveFunction+0x42c>)
 8001606:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f006 f96a 	bl	80078ea <MAX581x_Code>
			
			if(kickDelay >= 4000 && kickSel == 0x01)
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <DriveFunction+0x430>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800161e:	d30a      	bcc.n	8001636 <DriveFunction+0x3da>
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <DriveFunction+0x434>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <DriveFunction+0x3da>
			{
				osMessagePut(kickQueueHandle, 0, 0);
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <DriveFunction+0x438>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f003 ff75 	bl	8005520 <osMessagePut>
		for (uint8_t i = 0; i < 4; i++)
 8001636:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800163a:	3301      	adds	r3, #1
 800163c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001640:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001644:	2b03      	cmp	r3, #3
 8001646:	d9c3      	bls.n	80015d0 <DriveFunction+0x374>
			}
		}
		
		/* To check if kicker is charged */
		if(kickDelay < 4000)
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <DriveFunction+0x430>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001650:	d205      	bcs.n	800165e <DriveFunction+0x402>
		{
			kickDelay++;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <DriveFunction+0x430>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <DriveFunction+0x430>)
 800165c:	801a      	strh	r2, [r3, #0]
		}
		
		osMessagePut(nrf24CheckHandle, 0, 0);
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <DriveFunction+0x43c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f003 ff5a 	bl	8005520 <osMessagePut>
		osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 800166c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f808 	bl	8005688 <osDelayUntil>
		for (uint8_t i = 0; i < 4; i++)
 8001678:	e774      	b.n	8001564 <DriveFunction+0x308>
 800167a:	bf00      	nop
 800167c:	20000338 	.word	0x20000338
 8001680:	200002f8 	.word	0x200002f8
 8001684:	20000538 	.word	0x20000538
 8001688:	08007fc0 	.word	0x08007fc0
 800168c:	2000053a 	.word	0x2000053a
 8001690:	20000539 	.word	0x20000539
 8001694:	200002c8 	.word	0x200002c8
 8001698:	200002cc 	.word	0x200002cc

0800169c <RadioFunction>:
*/

uint16_t packageMiss = 0;
/* USER CODE END Header_RadioFunction */
void RadioFunction(void const * argument)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN RadioFunction */
	nRF24_GPIO_Init();
 80016a4:	f000 fab8 	bl	8001c18 <nRF24_GPIO_Init>
	nRF24_Init();
 80016a8:	f000 f94a 	bl	8001940 <nRF24_Init>
	nRF24_SetRXPipe(nRF24_PIPE0, nRF24_AA_OFF, 30);
 80016ac:	221e      	movs	r2, #30
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f9d7 	bl	8001a64 <nRF24_SetRXPipe>
	nRF24_DisableAA(nRF24_PIPETX);
 80016b6:	2006      	movs	r0, #6
 80016b8:	f000 fa28 	bl	8001b0c <nRF24_DisableAA>
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80016bc:	2002      	movs	r0, #2
 80016be:	f000 f991 	bl	80019e4 <nRF24_SetPowerMode>
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 f9ad 	bl	8001a22 <nRF24_SetOperationalMode>
	/*
	checkSPI = nRF24_Check();
	memset(rxAddr, 0xE7, 5);
	nRF24_SetAddr(0, rxAddr);
	*/
	nRF24_RX_ON();	
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ce:	4829      	ldr	r0, [pc, #164]	; (8001774 <RadioFunction+0xd8>)
 80016d0:	f001 f886 	bl	80027e0 <HAL_GPIO_WritePin>
	
	memset(rxBuffer, 0, 30);
 80016d4:	221e      	movs	r2, #30
 80016d6:	2100      	movs	r1, #0
 80016d8:	4827      	ldr	r0, [pc, #156]	; (8001778 <RadioFunction+0xdc>)
 80016da:	f006 fbff 	bl	8007edc <memset>
	/* Infinite loop */
	for(;;)
	{
		osMessageGet(nrf24CheckHandle, osWaitForever);
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <RadioFunction+0xe0>)
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	463b      	mov	r3, r7
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 ff59 	bl	80055a0 <osMessageGet>
		status = nRF24_GetStatus();
 80016ee:	f000 fa34 	bl	8001b5a <nRF24_GetStatus>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <RadioFunction+0xe4>)
 80016f8:	701a      	strb	r2, [r3, #0]
		
		//if(nRF24_GetStatus_RXFIFO() == nRF24_STATUS_RXFIFO_DATA)
		if(status & nRF24_FLAG_RX_DR)
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <RadioFunction+0xe4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0eb      	beq.n	80016de <RadioFunction+0x42>
		{
			nRF24_ReadPayload(rxBuffer, &rxLen);
 8001706:	491f      	ldr	r1, [pc, #124]	; (8001784 <RadioFunction+0xe8>)
 8001708:	481b      	ldr	r0, [pc, #108]	; (8001778 <RadioFunction+0xdc>)
 800170a:	f000 fa53 	bl	8001bb4 <nRF24_ReadPayload>
			nRF24_FlushRX();
 800170e:	f000 fa34 	bl	8001b7a <nRF24_FlushRX>
			nRF24_ClearIRQFlags();
 8001712:	f000 fa3a 	bl	8001b8a <nRF24_ClearIRQFlags>
						
			/* Obtain speed from nrf24L01+ packet */
			setSpeed(rxBuffer + 5 * robotID, speed, direction);
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <RadioFunction+0xec>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	461a      	mov	r2, r3
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <RadioFunction+0xdc>)
 8001726:	4413      	add	r3, r2
 8001728:	4a18      	ldr	r2, [pc, #96]	; (800178c <RadioFunction+0xf0>)
 800172a:	4919      	ldr	r1, [pc, #100]	; (8001790 <RadioFunction+0xf4>)
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fbfd 	bl	8000f2c <setSpeed>
			dribblerSel = getDribblerSpeed(rxBuffer + 5 * robotID);
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <RadioFunction+0xec>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	461a      	mov	r2, r3
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <RadioFunction+0xdc>)
 8001742:	4413      	add	r3, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fd67 	bl	8001218 <getDribblerSpeed>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <RadioFunction+0xf8>)
 8001750:	701a      	strb	r2, [r3, #0]
			kickSel = getKickerStatus(rxBuffer + 5 * robotID);		
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <RadioFunction+0xec>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	461a      	mov	r2, r3
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <RadioFunction+0xdc>)
 8001762:	4413      	add	r3, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fd69 	bl	800123c <getKickerStatus>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <RadioFunction+0xfc>)
 8001770:	701a      	strb	r2, [r3, #0]
		osMessageGet(nrf24CheckHandle, osWaitForever);
 8001772:	e7b4      	b.n	80016de <RadioFunction+0x42>
 8001774:	40021800 	.word	0x40021800
 8001778:	200002d0 	.word	0x200002d0
 800177c:	200002cc 	.word	0x200002cc
 8001780:	200002f1 	.word	0x200002f1
 8001784:	200002f0 	.word	0x200002f0
 8001788:	20000528 	.word	0x20000528
 800178c:	200002f4 	.word	0x200002f4
 8001790:	200002f8 	.word	0x200002f8
 8001794:	20000538 	.word	0x20000538
 8001798:	20000539 	.word	0x20000539

0800179c <KickFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KickFunction */
void KickFunction(void const * argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN KickFunction */
  /* Infinite loop */
  for(;;)
  {
		osMessageGet(kickQueueHandle, osWaitForever);
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <KickFunction+0x40>)
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	463b      	mov	r3, r7
 80017aa:	f04f 32ff 	mov.w	r2, #4294967295
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fef6 	bl	80055a0 <osMessageGet>
		
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <KickFunction+0x44>)
 80017bc:	f001 f810 	bl	80027e0 <HAL_GPIO_WritePin>
		osDelay(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f003 fe87 	bl	80054d4 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <KickFunction+0x44>)
 80017ce:	f001 f807 	bl	80027e0 <HAL_GPIO_WritePin>
		kickDelay = 0;
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <KickFunction+0x48>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
		osMessageGet(kickQueueHandle, osWaitForever);
 80017d8:	e7e4      	b.n	80017a4 <KickFunction+0x8>
 80017da:	bf00      	nop
 80017dc:	200002c8 	.word	0x200002c8
 80017e0:	40021400 	.word	0x40021400
 80017e4:	2000053a 	.word	0x2000053a

080017e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017fa:	f000 fd07 	bl	800220c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40010000 	.word	0x40010000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <nRF24_ReadReg>:
#include "nrf24.h"
#include <stdio.h>

uint8_t nRF24_ReadReg(uint8_t reg)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <nRF24_ReadReg+0x44>)
 800182e:	f000 ffd7 	bl	80027e0 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f9fe 	bl	8001c3c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001840:	20ff      	movs	r0, #255	; 0xff
 8001842:	f000 f9fb 	bl	8001c3c <nRF24_LL_RW>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <nRF24_ReadReg+0x44>)
 8001852:	f000 ffc5 	bl	80027e0 <HAL_GPIO_WritePin>

	return value;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021800 	.word	0x40021800

08001864 <nRF24_WriteReg>:

void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187a:	481a      	ldr	r0, [pc, #104]	; (80018e4 <nRF24_WriteReg+0x80>)
 800187c:	f000 ffb0 	bl	80027e0 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b1f      	cmp	r3, #31
 8001884:	d810      	bhi.n	80018a8 <nRF24_WriteReg+0x44>
	{
		/* This is a register access */
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	b25b      	sxtb	r3, r3
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f9cf 	bl	8001c3c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f9cb 	bl	8001c3c <nRF24_LL_RW>
 80018a6:	e013      	b.n	80018d0 <nRF24_WriteReg+0x6c>
	}
	else
	{
		/* This is a single byte command or future command/register */
		nRF24_LL_RW(reg);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f9c6 	bl	8001c3c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2be1      	cmp	r3, #225	; 0xe1
 80018b4:	d00c      	beq.n	80018d0 <nRF24_WriteReg+0x6c>
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2be2      	cmp	r3, #226	; 0xe2
 80018ba:	d009      	beq.n	80018d0 <nRF24_WriteReg+0x6c>
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2be3      	cmp	r3, #227	; 0xe3
 80018c0:	d006      	beq.n	80018d0 <nRF24_WriteReg+0x6c>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2bff      	cmp	r3, #255	; 0xff
 80018c6:	d003      	beq.n	80018d0 <nRF24_WriteReg+0x6c>
		{
			/* Send register value */
			nRF24_LL_RW(value);
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f9b6 	bl	8001c3c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <nRF24_WriteReg+0x80>)
 80018d8:	f000 ff82 	bl	80027e0 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021800 	.word	0x40021800

080018e8 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <nRF24_ReadMBReg+0x54>)
 8001900:	f000 ff6e 	bl	80027e0 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f998 	bl	8001c3c <nRF24_LL_RW>
	while (count--)
 800190c:	e007      	b.n	800191e <nRF24_ReadMBReg+0x36>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800190e:	683c      	ldr	r4, [r7, #0]
 8001910:	1c63      	adds	r3, r4, #1
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	20ff      	movs	r0, #255	; 0xff
 8001916:	f000 f991 	bl	8001c3c <nRF24_LL_RW>
 800191a:	4603      	mov	r3, r0
 800191c:	7023      	strb	r3, [r4, #0]
	while (count--)
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	71ba      	strb	r2, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f2      	bne.n	800190e <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <nRF24_ReadMBReg+0x54>)
 8001930:	f000 ff56 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	40021800 	.word	0x40021800

08001940 <nRF24_Init>:
	}
	nRF24_CSN_H();
}

void nRF24_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	/* Write to registers their initial values */
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8001944:	2108      	movs	r1, #8
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff ff8c 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800194c:	213f      	movs	r1, #63	; 0x3f
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ff88 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8001954:	2103      	movs	r1, #3
 8001956:	2002      	movs	r0, #2
 8001958:	f7ff ff84 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800195c:	2103      	movs	r1, #3
 800195e:	2003      	movs	r0, #3
 8001960:	f7ff ff80 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8001964:	2103      	movs	r1, #3
 8001966:	2004      	movs	r0, #4
 8001968:	f7ff ff7c 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800196c:	2102      	movs	r1, #2
 800196e:	2005      	movs	r0, #5
 8001970:	f7ff ff78 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8001974:	210e      	movs	r1, #14
 8001976:	2006      	movs	r0, #6
 8001978:	f7ff ff74 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800197c:	2100      	movs	r1, #0
 800197e:	2007      	movs	r0, #7
 8001980:	f7ff ff70 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8001984:	2100      	movs	r1, #0
 8001986:	2011      	movs	r0, #17
 8001988:	f7ff ff6c 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800198c:	2100      	movs	r1, #0
 800198e:	2012      	movs	r0, #18
 8001990:	f7ff ff68 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8001994:	2100      	movs	r1, #0
 8001996:	2013      	movs	r0, #19
 8001998:	f7ff ff64 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800199c:	2100      	movs	r1, #0
 800199e:	2014      	movs	r0, #20
 80019a0:	f7ff ff60 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2015      	movs	r0, #21
 80019a8:	f7ff ff5c 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2016      	movs	r0, #22
 80019b0:	f7ff ff58 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80019b4:	2100      	movs	r1, #0
 80019b6:	201c      	movs	r0, #28
 80019b8:	f7ff ff54 	bl	8001864 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80019bc:	2100      	movs	r1, #0
 80019be:	201d      	movs	r0, #29
 80019c0:	f7ff ff50 	bl	8001864 <nRF24_WriteReg>

	/* Clear the FIFO's */
	nRF24_FlushRX();
 80019c4:	f000 f8d9 	bl	8001b7a <nRF24_FlushRX>
	nRF24_FlushTX();
 80019c8:	f000 f8cf 	bl	8001b6a <nRF24_FlushTX>

	/* Clear any pending interrupt flags */
	nRF24_ClearIRQFlags();
 80019cc:	f000 f8dd 	bl	8001b8a <nRF24_ClearIRQFlags>

	/* Deassert CSN pin (chip release) */
	nRF24_CSN_H();
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	4802      	ldr	r0, [pc, #8]	; (80019e0 <nRF24_Init+0xa0>)
 80019d8:	f000 ff02 	bl	80027e0 <HAL_GPIO_WritePin>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021800 	.word	0x40021800

080019e4 <nRF24_SetPowerMode>:

	return 1;
}

void nRF24_SetPowerMode(uint8_t mode)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff ff14 	bl	800181c <nRF24_ReadReg>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d104      	bne.n	8001a08 <nRF24_SetPowerMode+0x24>
	{
		/* Set the PWR_UP bit of CONFIG register to wake the transceiver */
		/* It goes into Stanby-I mode with consumption about 26uA */
		reg |= nRF24_CONFIG_PWR_UP;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	e003      	b.n	8001a10 <nRF24_SetPowerMode+0x2c>
	} else {
		/* Clear the PWR_UP bit of CONFIG register to put the transceiver */
		/* into power down mode with consumption about 900nA */
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	f023 0302 	bic.w	r3, r3, #2
 8001a0e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	4619      	mov	r1, r3
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff ff25 	bl	8001864 <nRF24_WriteReg>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(uint8_t mode)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	/* Configure PRIM_RX bit of the CONFIG register */
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fef5 	bl	800181c <nRF24_ReadReg>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	b25a      	sxtb	r2, r3
 8001a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4619      	mov	r1, r3
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff ff04 	bl	8001864 <nRF24_WriteReg>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <nRF24_SetRXPipe>:
	reg |= data_rate;
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	71bb      	strb	r3, [r7, #6]
 8001a72:	4613      	mov	r3, r2
 8001a74:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	/* Enable the specified pipe (EN_RXADDR register) */
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7ff fed0 	bl	800181c <nRF24_ReadReg>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a94:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f7ff fee2 	bl	8001864 <nRF24_WriteReg>

	/* Set RX payload length (RX_PW_Px register) */
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <nRF24_SetRXPipe+0xa4>)
 8001aa4:	5cd2      	ldrb	r2, [r2, r3]
 8001aa6:	797b      	ldrb	r3, [r7, #5]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7ff fed7 	bl	8001864 <nRF24_WriteReg>

	/* Set auto acknowledgment for a specified pipe (EN_AA register) */
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff feb0 	bl	800181c <nRF24_ReadReg>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10a      	bne.n	8001adc <nRF24_SetRXPipe+0x78>
	{
		reg |=  (1 << pipe);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	b25a      	sxtb	r2, r3
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e00b      	b.n	8001af4 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4013      	ands	r3, r2
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	4619      	mov	r1, r3
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff feb3 	bl	8001864 <nRF24_WriteReg>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	08007fd0 	.word	0x08007fd0

08001b0c <nRF24_DisableAA>:
	reg |= (1 << pipe);
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(uint8_t pipe)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5)
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d904      	bls.n	8001b26 <nRF24_DisableAA+0x1a>
	{
		/* Disable Auto-ACK for ALL pipes */
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fea0 	bl	8001864 <nRF24_WriteReg>
		/* Clear bit in the EN_AA register */
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8001b24:	e015      	b.n	8001b52 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fe78 	bl	800181c <nRF24_ReadReg>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2201      	movs	r2, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4013      	ands	r3, r2
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fe89 	bl	8001864 <nRF24_WriteReg>
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001b5e:	2007      	movs	r0, #7
 8001b60:	f7ff fe5c 	bl	800181c <nRF24_ReadReg>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001b6e:	21ff      	movs	r1, #255	; 0xff
 8001b70:	20e1      	movs	r0, #225	; 0xe1
 8001b72:	f7ff fe77 	bl	8001864 <nRF24_WriteReg>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001b7e:	21ff      	movs	r1, #255	; 0xff
 8001b80:	20e2      	movs	r0, #226	; 0xe2
 8001b82:	f7ff fe6f 	bl	8001864 <nRF24_WriteReg>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
	uint8_t reg;

	/* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8001b90:	2007      	movs	r0, #7
 8001b92:	f7ff fe43 	bl	800181c <nRF24_ReadReg>
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001ba0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f7ff fe5c 	bl	8001864 <nRF24_WriteReg>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <nRF24_ReadPayload>:
{
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	/* Extract a payload pipe number from the STATUS register */
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f7ff fe2c 	bl	800181c <nRF24_ReadReg>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	105b      	asrs	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	73fb      	strb	r3, [r7, #15]

	/* RX FIFO empty? */
	if (pipe < 6)
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d816      	bhi.n	8001c04 <nRF24_ReadPayload+0x50>
	{
		/* Get payload length */
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <nRF24_ReadPayload+0x60>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe1d 	bl	800181c <nRF24_ReadReg>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	701a      	strb	r2, [r3, #0]

		/* Read a payload from the RX FIFO */
		if (*length)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <nRF24_ReadPayload+0x4c>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	2061      	movs	r0, #97	; 0x61
 8001bfc:	f7ff fe74 	bl	80018e8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	e003      	b.n	8001c0c <nRF24_ReadPayload+0x58>
	}

	/* The RX FIFO is empty */
	*length = 0;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8001c0a:	23ff      	movs	r3, #255	; 0xff
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	08007fd0 	.word	0x08007fd0

08001c18 <nRF24_GPIO_Init>:

#include "nrf24_hal.h"
extern SPI_HandleTypeDef hspi1;

void nRF24_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	nRF24_CSN_H();
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <nRF24_GPIO_Init+0x20>)
 8001c24:	f000 fddc 	bl	80027e0 <HAL_GPIO_WritePin>
	nRF24_CE_L();
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <nRF24_GPIO_Init+0x20>)
 8001c30:	f000 fdd6 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021800 	.word	0x40021800

08001c3c <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(uint8_t data)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData;
	HAL_SPI_TransmitReceive(&hspi1, &data, &rxData, 1, 1000);
 8001c46:	f107 020f 	add.w	r2, r7, #15
 8001c4a:	1df9      	adds	r1, r7, #7
 8001c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	4803      	ldr	r0, [pc, #12]	; (8001c64 <nRF24_LL_RW+0x28>)
 8001c56:	f002 fc26 	bl	80044a6 <HAL_SPI_TransmitReceive>
	return rxData;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
	/**
	 * In case of using LL Sysmic lib
	 * return SPI_Write(nRF24_SPI_PORT, data);
	 */
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000128 	.word	0x20000128

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	f06f 0001 	mvn.w	r0, #1
 8001ca6:	f000 fbad 	bl	8002404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0b0      	sub	sp, #192	; 0xc0
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2290      	movs	r2, #144	; 0x90
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f006 f8ff 	bl	8007edc <memset>
  if(hi2c->Instance==I2C1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_I2C_MspInit+0x138>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d13d      	bne.n	8001d64 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 ff01 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001d04:	f7ff fd82 	bl	800180c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a39      	ldr	r2, [pc, #228]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d26:	2312      	movs	r3, #18
 8001d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d42:	4619      	mov	r1, r3
 8001d44:	482c      	ldr	r0, [pc, #176]	; (8001df8 <HAL_I2C_MspInit+0x140>)
 8001d46:	f000 fb87 	bl	8002458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d62:	e041      	b.n	8001de8 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_I2C_MspInit+0x144>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d13c      	bne.n	8001de8 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d72:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 febe 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001d8a:	f7ff fd3f 	bl	800180c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d94:	f043 0320 	orr.w	r3, r3, #32
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	2312      	movs	r3, #18
 8001dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480d      	ldr	r0, [pc, #52]	; (8001e00 <HAL_I2C_MspInit+0x148>)
 8001dcc:	f000 fb44 	bl	8002458 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_I2C_MspInit+0x13c>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	bf00      	nop
 8001dea:	37c0      	adds	r7, #192	; 0xc0
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40005800 	.word	0x40005800
 8001e00:	40021400 	.word	0x40021400

08001e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_SPI_MspInit+0x7c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d127      	bne.n	8001e76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_SPI_MspInit+0x80>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e56:	23e0      	movs	r3, #224	; 0xe0
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e66:	2305      	movs	r3, #5
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_SPI_MspInit+0x84>)
 8001e72:	f000 faf1 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40013000 	.word	0x40013000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b090      	sub	sp, #64	; 0x40
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d128      	bne.n	8001f00 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	4b5b      	ldr	r3, [pc, #364]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a5a      	ldr	r2, [pc, #360]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b58      	ldr	r3, [pc, #352]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b55      	ldr	r3, [pc, #340]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b52      	ldr	r3, [pc, #328]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4849      	ldr	r0, [pc, #292]	; (8002020 <HAL_TIM_Encoder_MspInit+0x194>)
 8001efa:	f000 faad 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001efe:	e089      	b.n	8002014 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d128      	bne.n	8001f5c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a43      	ldr	r2, [pc, #268]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a3d      	ldr	r2, [pc, #244]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3a:	23c0      	movs	r3, #192	; 0xc0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	4834      	ldr	r0, [pc, #208]	; (8002028 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001f56:	f000 fa7f 	bl	8002458 <HAL_GPIO_Init>
}
 8001f5a:	e05b      	b.n	8002014 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d129      	bne.n	8001fba <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f6c:	f043 0308 	orr.w	r3, r3, #8
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481f      	ldr	r0, [pc, #124]	; (8002030 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001fb4:	f000 fa50 	bl	8002458 <HAL_GPIO_Init>
}
 8001fb8:	e02c      	b.n	8002014 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d127      	bne.n	8002014 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_TIM_Encoder_MspInit+0x190>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ff4:	2360      	movs	r3, #96	; 0x60
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002004:	2303      	movs	r3, #3
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200c:	4619      	mov	r1, r3
 800200e:	480a      	ldr	r0, [pc, #40]	; (8002038 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8002010:	f000 fa22 	bl	8002458 <HAL_GPIO_Init>
}
 8002014:	bf00      	nop
 8002016:	3740      	adds	r7, #64	; 0x40
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40000400 	.word	0x40000400
 8002028:	40020800 	.word	0x40020800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40010400 	.word	0x40010400
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	2019      	movs	r0, #25
 8002052:	f000 f9d7 	bl	8002404 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002056:	2019      	movs	r0, #25
 8002058:	f000 f9f0 	bl	800243c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_InitTick+0xa0>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_InitTick+0xa0>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6453      	str	r3, [r2, #68]	; 0x44
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_InitTick+0xa0>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002074:	f107 0210 	add.w	r2, r7, #16
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fd0c 	bl	8003a9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002084:	f001 fcf6 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8002088:	4603      	mov	r3, r0
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_InitTick+0xa4>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	3b01      	subs	r3, #1
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_InitTick+0xa8>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_InitTick+0xac>)
 80020a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_InitTick+0xa8>)
 80020a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_InitTick+0xa8>)
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_InitTick+0xa8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_InitTick+0xa8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <HAL_InitTick+0xa8>)
 80020be:	f002 fd8d 	bl	8004bdc <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d104      	bne.n	80020d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020c8:	4806      	ldr	r0, [pc, #24]	; (80020e4 <HAL_InitTick+0xa8>)
 80020ca:	f002 fde9 	bl	8004ca0 <HAL_TIM_Base_Start_IT>
 80020ce:	4603      	mov	r3, r0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3730      	adds	r7, #48	; 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	2000053c 	.word	0x2000053c
 80020e8:	40010000 	.word	0x40010000

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <HardFault_Handler+0x4>

08002100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <MemManage_Handler+0x4>

08002106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <BusFault_Handler+0x4>

0800210c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <UsageFault_Handler+0x4>

08002112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002126:	f002 fed9 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000053c 	.word	0x2000053c

08002134 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <SystemInit+0x5c>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <SystemInit+0x5c>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <SystemInit+0x60>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <SystemInit+0x60>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <SystemInit+0x60>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <SystemInit+0x60>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	490d      	ldr	r1, [pc, #52]	; (8002194 <SystemInit+0x60>)
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <SystemInit+0x64>)
 8002162:	4013      	ands	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <SystemInit+0x60>)
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <SystemInit+0x68>)
 800216a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <SystemInit+0x60>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a08      	ldr	r2, [pc, #32]	; (8002194 <SystemInit+0x60>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x60>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SystemInit+0x5c>)
 8002180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002184:	609a      	str	r2, [r3, #8]
#endif
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	40023800 	.word	0x40023800
 8002198:	fef6ffff 	.word	0xfef6ffff
 800219c:	24003010 	.word	0x24003010

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021a6:	490e      	ldr	r1, [pc, #56]	; (80021e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021bc:	4c0b      	ldr	r4, [pc, #44]	; (80021ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ca:	f7ff ffb3 	bl	8002134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f005 fe53 	bl	8007e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7fe f9b7 	bl	8000544 <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021e4:	08008000 	.word	0x08008000
  ldr r2, =_sbss
 80021e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021ec:	200042d8 	.word	0x200042d8

080021f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>

080021f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f6:	2003      	movs	r0, #3
 80021f8:	f000 f8f9 	bl	80023ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff ff1d 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002202:	f7ff fd31 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008
 8002230:	20000588 	.word	0x20000588

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000588 	.word	0x20000588

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000008 	.word	0x20000008

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <__NVIC_SetPriorityGrouping+0x40>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x40>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00
 80022d8:	05fa0000 	.word	0x05fa0000

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <__NVIC_EnableIRQ+0x38>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ff4c 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002416:	f7ff ff61 	bl	80022dc <__NVIC_GetPriorityGrouping>
 800241a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	6978      	ldr	r0, [r7, #20]
 8002422:	f7ff ffb1 	bl	8002388 <NVIC_EncodePriority>
 8002426:	4602      	mov	r2, r0
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff80 	bl	8002334 <__NVIC_SetPriority>
}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff54 	bl	80022f8 <__NVIC_EnableIRQ>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e175      	b.n	8002764 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 8164 	bne.w	800275e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_GPIO_Init+0x56>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80be 	beq.w	800275e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_GPIO_Init+0x324>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_GPIO_Init+0x324>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_GPIO_Init+0x324>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025fa:	4a61      	ldr	r2, [pc, #388]	; (8002780 <HAL_GPIO_Init+0x328>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_GPIO_Init+0x32c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d037      	beq.n	8002696 <HAL_GPIO_Init+0x23e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_GPIO_Init+0x330>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_GPIO_Init+0x23a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a56      	ldr	r2, [pc, #344]	; (800278c <HAL_GPIO_Init+0x334>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <HAL_GPIO_Init+0x236>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a55      	ldr	r2, [pc, #340]	; (8002790 <HAL_GPIO_Init+0x338>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x232>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <HAL_GPIO_Init+0x33c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x22e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_GPIO_Init+0x340>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x22a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_GPIO_Init+0x344>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x226>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_GPIO_Init+0x348>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x222>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a50      	ldr	r2, [pc, #320]	; (80027a4 <HAL_GPIO_Init+0x34c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x21e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <HAL_GPIO_Init+0x350>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x21a>
 800266e:	2309      	movs	r3, #9
 8002670:	e012      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002672:	230a      	movs	r3, #10
 8002674:	e010      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002676:	2308      	movs	r3, #8
 8002678:	e00e      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800267a:	2307      	movs	r3, #7
 800267c:	e00c      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800267e:	2306      	movs	r3, #6
 8002680:	e00a      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002682:	2305      	movs	r3, #5
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002686:	2304      	movs	r3, #4
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026a8:	4935      	ldr	r1, [pc, #212]	; (8002780 <HAL_GPIO_Init+0x328>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_GPIO_Init+0x354>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026da:	4a34      	ldr	r2, [pc, #208]	; (80027ac <HAL_GPIO_Init+0x354>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e0:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_GPIO_Init+0x354>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <HAL_GPIO_Init+0x354>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <HAL_GPIO_Init+0x354>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_GPIO_Init+0x354>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_GPIO_Init+0x354>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <HAL_GPIO_Init+0x354>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f ae86 	bls.w	8002478 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40021400 	.word	0x40021400
 800279c:	40021800 	.word	0x40021800
 80027a0:	40021c00 	.word	0x40021c00
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40022400 	.word	0x40022400
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e001      	b.n	80027d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	041a      	lsls	r2, r3, #16
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43d9      	mvns	r1, r3
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	400b      	ands	r3, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fa22 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002898:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e006      	b.n	80028d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d104      	bne.n	80028e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_I2C_Init+0x11c>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002900:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69d9      	ldr	r1, [r3, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	02008000 	.word	0x02008000

08002968 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	460b      	mov	r3, r1
 8002976:	817b      	strh	r3, [r7, #10]
 8002978:	4613      	mov	r3, r2
 800297a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	f040 80da 	bne.w	8002b3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2C_Master_Transmit+0x30>
 8002994:	2302      	movs	r3, #2
 8002996:	e0d3      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1d8>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a0:	f7ff fc48 	bl	8002234 <HAL_GetTick>
 80029a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2319      	movs	r3, #25
 80029ac:	2201      	movs	r2, #1
 80029ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f8f0 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0be      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2221      	movs	r2, #33	; 0x21
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2210      	movs	r2, #16
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	893a      	ldrh	r2, [r7, #8]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2bff      	cmp	r3, #255	; 0xff
 80029f2:	d90e      	bls.n	8002a12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fa6c 	bl	8002ee8 <I2C_TransferConfig>
 8002a10:	e06c      	b.n	8002aec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fa5b 	bl	8002ee8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a32:	e05b      	b.n	8002aec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	6a39      	ldr	r1, [r7, #32]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f8ed 	bl	8002c18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e07b      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d034      	beq.n	8002aec <HAL_I2C_Master_Transmit+0x184>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d130      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f87f 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e04d      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2bff      	cmp	r3, #255	; 0xff
 8002aac:	d90e      	bls.n	8002acc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fa0f 	bl	8002ee8 <I2C_TransferConfig>
 8002aca:	e00f      	b.n	8002aec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	8979      	ldrh	r1, [r7, #10]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f9fe 	bl	8002ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d19e      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f8cc 	bl	8002c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e01a      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_I2C_Master_Transmit+0x1e4>)
 8002b1e:	400b      	ands	r3, r1
 8002b20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	80002000 	.word	0x80002000
 8002b4c:	fe00e800 	.word	0xfe00e800

08002b50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d103      	bne.n	8002b6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d007      	beq.n	8002b8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	619a      	str	r2, [r3, #24]
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba8:	e022      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d01e      	beq.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7ff fb3f 	bl	8002234 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d113      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e00f      	b.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d0cd      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c24:	e02c      	b.n	8002c80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f870 	bl	8002d10 <I2C_IsErrorOccurred>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e02a      	b.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d01e      	beq.n	8002c80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7ff faf7 	bl	8002234 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d113      	bne.n	8002c80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e007      	b.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d1cb      	bne.n	8002c26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca4:	e028      	b.n	8002cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f830 	bl	8002d10 <I2C_IsErrorOccurred>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e026      	b.n	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7ff fabb 	bl	8002234 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d113      	bne.n	8002cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e007      	b.n	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d1cf      	bne.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d075      	beq.n	8002e28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2210      	movs	r2, #16
 8002d42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d44:	e056      	b.n	8002df4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d052      	beq.n	8002df4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7ff fa71 	bl	8002234 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_IsErrorOccurred+0x54>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d147      	bne.n	8002df4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d86:	d12e      	bne.n	8002de6 <I2C_IsErrorOccurred+0xd6>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8e:	d02a      	beq.n	8002de6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d027      	beq.n	8002de6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002da6:	f7ff fa45 	bl	8002234 <HAL_GetTick>
 8002daa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dac:	e01b      	b.n	8002de6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dae:	f7ff fa41 	bl	8002234 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b19      	cmp	r3, #25
 8002dba:	d914      	bls.n	8002de6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d1dc      	bne.n	8002dae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d003      	beq.n	8002e0a <I2C_IsErrorOccurred+0xfa>
 8002e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d09d      	beq.n	8002d46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2220      	movs	r2, #32
 8002e18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01c      	beq.n	8002ed8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fe56 	bl	8002b50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <I2C_IsErrorOccurred+0x1d4>)
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	fe00e800 	.word	0xfe00e800

08002ee8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	817b      	strh	r3, [r7, #10]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f00:	7a7b      	ldrb	r3, [r7, #9]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f08:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f16:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	0d5b      	lsrs	r3, r3, #21
 8002f22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <I2C_TransferConfig+0x60>)
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	ea02 0103 	and.w	r1, r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	03ff63ff 	.word	0x03ff63ff

08002f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d138      	bne.n	8002fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e032      	b.n	8002fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d139      	bne.n	800306c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003002:	2302      	movs	r3, #2
 8003004:	e033      	b.n	800306e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2224      	movs	r2, #36	; 0x24
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003034:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_PWREx_EnableOverDrive+0x98>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a22      	ldr	r2, [pc, #136]	; (8003114 <HAL_PWREx_EnableOverDrive+0x98>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_PWREx_EnableOverDrive+0x98>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800309e:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030aa:	f7ff f8c3 	bl	8002234 <HAL_GetTick>
 80030ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030b0:	e009      	b.n	80030c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030b2:	f7ff f8bf 	bl	8002234 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030c0:	d901      	bls.n	80030c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e022      	b.n	800310c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d1ee      	bne.n	80030b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0f      	ldr	r2, [pc, #60]	; (8003118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e0:	f7ff f8a8 	bl	8002234 <HAL_GetTick>
 80030e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e6:	e009      	b.n	80030fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e8:	f7ff f8a4 	bl	8002234 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f6:	d901      	bls.n	80030fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e007      	b.n	800310c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003108:	d1ee      	bne.n	80030e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000

0800311c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e29b      	b.n	800366a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8087 	beq.w	800324e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003140:	4b96      	ldr	r3, [pc, #600]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b04      	cmp	r3, #4
 800314a:	d00c      	beq.n	8003166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314c:	4b93      	ldr	r3, [pc, #588]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d112      	bne.n	800317e <HAL_RCC_OscConfig+0x62>
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003164:	d10b      	bne.n	800317e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d06c      	beq.n	800324c <HAL_RCC_OscConfig+0x130>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d168      	bne.n	800324c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e275      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x7a>
 8003188:	4b84      	ldr	r3, [pc, #528]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a83      	ldr	r2, [pc, #524]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e02e      	b.n	80031f4 <HAL_RCC_OscConfig+0xd8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x9c>
 800319e:	4b7f      	ldr	r3, [pc, #508]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7e      	ldr	r2, [pc, #504]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b7c      	ldr	r3, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7b      	ldr	r2, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xd8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031c2:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a72      	ldr	r2, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xd8>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b6c      	ldr	r3, [pc, #432]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6b      	ldr	r2, [pc, #428]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff f81a 	bl	8002234 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f816 	bl	8002234 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e229      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7ff f806 	bl	8002234 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7ff f802 	bl	8002234 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e215      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b57      	ldr	r3, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x110>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d069      	beq.n	800332e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x190>
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x17a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1e9      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	493d      	ldr	r1, [pc, #244]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e040      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d023      	beq.n	80032fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe ffb8 	bl	8002234 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe ffb4 	bl	8002234 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1c7      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4929      	ldr	r1, [pc, #164]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
 80032fa:	e018      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe ff94 	bl	8002234 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe ff90 	bl	8002234 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1a3      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d038      	beq.n	80033ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d019      	beq.n	8003376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe ff71 	bl	8002234 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe ff6d 	bl	8002234 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e180      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x23a>
 8003374:	e01a      	b.n	80033ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_OscConfig+0x280>)
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <HAL_RCC_OscConfig+0x280>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe ff57 	bl	8002234 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe ff53 	bl	8002234 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d903      	bls.n	80033a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e166      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
 800339c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	4b92      	ldr	r3, [pc, #584]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ee      	bne.n	800338a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a4 	beq.w	8003502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b8c      	ldr	r3, [pc, #560]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b89      	ldr	r3, [pc, #548]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a88      	ldr	r2, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b86      	ldr	r3, [pc, #536]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ee:	4b80      	ldr	r3, [pc, #512]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fe ff1b 	bl	8002234 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fe ff17 	bl	8002234 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b64      	cmp	r3, #100	; 0x64
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e12a      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x4d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x31a>
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	e02d      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x33c>
 800343e:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a6a      	ldr	r2, [pc, #424]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
 8003456:	e01c      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b05      	cmp	r3, #5
 800345e:	d10c      	bne.n	800347a <HAL_RCC_OscConfig+0x35e>
 8003460:	4b62      	ldr	r3, [pc, #392]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a61      	ldr	r2, [pc, #388]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003466:	f043 0304 	orr.w	r3, r3, #4
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	e00b      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a58      	ldr	r2, [pc, #352]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d015      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fecb 	bl	8002234 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fec7 	bl	8002234 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0d8      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCC_OscConfig+0x386>
 80034c4:	e014      	b.n	80034f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe feb5 	bl	8002234 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe feb1 	bl	8002234 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0c2      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80ae 	beq.w	8003668 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d06d      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d14b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fe82 	bl	8002234 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fe7e 	bl	8002234 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e091      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fe50 	bl	8002234 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe fe4c 	bl	8002234 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e05f      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x47c>
 80035b6:	e057      	b.n	8003668 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fe36 	bl	8002234 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fe32 	bl	8002234 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e045      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x4b0>
 80035ea:	e03d      	b.n	8003668 <HAL_RCC_OscConfig+0x54c>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_RCC_OscConfig+0x558>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d030      	beq.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d129      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d122      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800362c:	4293      	cmp	r3, r2
 800362e:	d119      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	3b01      	subs	r3, #1
 800363e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d10f      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020f 	bic.w	r2, r3, #15
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e073      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe fd62 	bl	8002234 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fd5e 	bl	8002234 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e053      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d210      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 020f 	bic.w	r2, r3, #15
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1cc>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1d0>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1d4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fc06 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	08007fd8 	.word	0x08007fd8
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b094      	sub	sp, #80	; 0x50
 8003856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
 800385c:	2300      	movs	r3, #0
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003860:	2300      	movs	r3, #0
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003868:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d00d      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x40>
 8003874:	2b08      	cmp	r3, #8
 8003876:	f200 80e1 	bhi.w	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 800387e:	2b04      	cmp	r3, #4
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x3a>
 8003882:	e0db      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003888:	e0db      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388e:	e0d8      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	2200      	movs	r2, #0
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4621      	mov	r1, r4
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	6139      	str	r1, [r7, #16]
 80038e0:	4629      	mov	r1, r5
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f4:	4659      	mov	r1, fp
 80038f6:	018b      	lsls	r3, r1, #6
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fe:	4651      	mov	r1, sl
 8003900:	018a      	lsls	r2, r1, #6
 8003902:	4651      	mov	r1, sl
 8003904:	ebb2 0801 	subs.w	r8, r2, r1
 8003908:	4659      	mov	r1, fp
 800390a:	eb63 0901 	sbc.w	r9, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800391e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	4623      	mov	r3, r4
 8003928:	eb18 0303 	adds.w	r3, r8, r3
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	462b      	mov	r3, r5
 8003930:	eb49 0303 	adc.w	r3, r9, r3
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003942:	4629      	mov	r1, r5
 8003944:	024b      	lsls	r3, r1, #9
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800394c:	4621      	mov	r1, r4
 800394e:	024a      	lsls	r2, r1, #9
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
 800395a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003960:	f7fc fc6e 	bl	8000240 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	e058      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	2200      	movs	r2, #0
 8003976:	4618      	mov	r0, r3
 8003978:	4611      	mov	r1, r2
 800397a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4641      	mov	r1, r8
 80039a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c0:	ebb2 040a 	subs.w	r4, r2, sl
 80039c4:	eb63 050b 	sbc.w	r5, r3, fp
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	00eb      	lsls	r3, r5, #3
 80039d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d6:	00e2      	lsls	r2, r4, #3
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	18e3      	adds	r3, r4, r3
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	464b      	mov	r3, r9
 80039e4:	eb45 0303 	adc.w	r3, r5, r3
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	61fa      	str	r2, [r7, #28]
 8003a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a14:	f7fc fc14 	bl	8000240 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3750      	adds	r7, #80	; 0x50
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	007a1200 	.word	0x007a1200

08003a5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000000 	.word	0x20000000

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0b5b      	lsrs	r3, r3, #13
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08007fe8 	.word	0x08007fe8

08003a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCC_GetClockConfig+0x60>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40023c00 	.word	0x40023c00

08003b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b28:	4b69      	ldr	r3, [pc, #420]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a68      	ldr	r2, [pc, #416]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b32:	6093      	str	r3, [r2, #8]
 8003b34:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	4964      	ldr	r1, [pc, #400]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b5a:	4b5d      	ldr	r3, [pc, #372]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	4959      	ldr	r1, [pc, #356]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d017      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b96:	4b4e      	ldr	r3, [pc, #312]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	494a      	ldr	r1, [pc, #296]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 808b 	beq.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf0:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bfc:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a34      	ldr	r2, [pc, #208]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c08:	f7fe fb14 	bl	8002234 <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe fb10 	bl	8002234 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e38f      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d035      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d02e      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c56:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c6e:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c74:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d114      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fad8 	bl	8002234 <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe fad4 	bl	8002234 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e351      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb6:	d111      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	4901      	ldr	r1, [pc, #4]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	0ffffcff 	.word	0x0ffffcff
 8003cdc:	4bac      	ldr	r3, [pc, #688]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4aab      	ldr	r2, [pc, #684]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ce6:	6093      	str	r3, [r2, #8]
 8003ce8:	4ba9      	ldr	r3, [pc, #676]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	49a6      	ldr	r1, [pc, #664]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d010      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d06:	4ba2      	ldr	r3, [pc, #648]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0c:	4aa0      	ldr	r2, [pc, #640]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d16:	4b9e      	ldr	r3, [pc, #632]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	499b      	ldr	r1, [pc, #620]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d42:	4993      	ldr	r1, [pc, #588]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d56:	4b8e      	ldr	r3, [pc, #568]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d64:	498a      	ldr	r1, [pc, #552]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d78:	4b85      	ldr	r3, [pc, #532]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	4982      	ldr	r1, [pc, #520]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4979      	ldr	r1, [pc, #484]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dbc:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4971      	ldr	r1, [pc, #452]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dde:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f023 020c 	bic.w	r2, r3, #12
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dec:	4968      	ldr	r1, [pc, #416]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e00:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	4960      	ldr	r1, [pc, #384]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e22:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	4957      	ldr	r1, [pc, #348]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	494f      	ldr	r1, [pc, #316]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	4946      	ldr	r1, [pc, #280]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e88:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	493e      	ldr	r1, [pc, #248]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb8:	4935      	ldr	r1, [pc, #212]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eda:	492d      	ldr	r1, [pc, #180]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efc:	4924      	ldr	r1, [pc, #144]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	4914      	ldr	r1, [pc, #80]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00b      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f60:	490b      	ldr	r1, [pc, #44]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f84:	4902      	ldr	r1, [pc, #8]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fa0:	4b8a      	ldr	r3, [pc, #552]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	4986      	ldr	r1, [pc, #536]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fc4:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd4:	497d      	ldr	r1, [pc, #500]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d006      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80d6 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff0:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a75      	ldr	r2, [pc, #468]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fe f91a 	bl	8002234 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004004:	f7fe f916 	bl	8002234 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e195      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004016:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d021      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004032:	2b00      	cmp	r3, #0
 8004034:	d11d      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004044:	4b61      	ldr	r3, [pc, #388]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404a:	0e1b      	lsrs	r3, r3, #24
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	019a      	lsls	r2, r3, #6
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	4958      	ldr	r1, [pc, #352]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02e      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409c:	d129      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800409e:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040ac:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b2:	0f1b      	lsrs	r3, r3, #28
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	019a      	lsls	r2, r3, #6
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	493e      	ldr	r1, [pc, #248]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040da:	4b3c      	ldr	r3, [pc, #240]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	f023 021f 	bic.w	r2, r3, #31
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	3b01      	subs	r3, #1
 80040ea:	4938      	ldr	r1, [pc, #224]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01d      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040fe:	4b33      	ldr	r3, [pc, #204]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800410c:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004112:	0f1b      	lsrs	r3, r3, #28
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	431a      	orrs	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	4926      	ldr	r1, [pc, #152]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	019a      	lsls	r2, r3, #6
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	071b      	lsls	r3, r3, #28
 8004162:	491a      	ldr	r1, [pc, #104]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004176:	f7fe f85d 	bl	8002234 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800417e:	f7fe f859 	bl	8002234 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b64      	cmp	r3, #100	; 0x64
 800418a:	d901      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e0d8      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	f040 80ce 	bne.w	8004340 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fe f840 	bl	8002234 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b6:	e00b      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b8:	f7fe f83c 	bl	8002234 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d904      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0bb      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041d0:	4b5e      	ldr	r3, [pc, #376]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041dc:	d0ec      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02e      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d12a      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004206:	4b51      	ldr	r3, [pc, #324]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004214:	4b4d      	ldr	r3, [pc, #308]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	0f1b      	lsrs	r3, r3, #28
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	019a      	lsls	r2, r3, #6
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	4944      	ldr	r1, [pc, #272]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004242:	4b42      	ldr	r3, [pc, #264]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004248:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	493d      	ldr	r1, [pc, #244]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d022      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004270:	d11d      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004272:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	0e1b      	lsrs	r3, r3, #24
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	0f1b      	lsrs	r3, r3, #28
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	019a      	lsls	r2, r3, #6
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	431a      	orrs	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	061b      	lsls	r3, r3, #24
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	4929      	ldr	r1, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d028      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	019a      	lsls	r2, r3, #6
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	4917      	ldr	r1, [pc, #92]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4911      	ldr	r1, [pc, #68]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0e      	ldr	r2, [pc, #56]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fd ff8c 	bl	8002234 <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004320:	f7fd ff88 	bl	8002234 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e007      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800433e:	d1ef      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800

08004350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e09d      	b.n	800449e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004372:	d009      	beq.n	8004388 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	61da      	str	r2, [r3, #28]
 800437a:	e005      	b.n	8004388 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd fd2e 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043c8:	d902      	bls.n	80043d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e002      	b.n	80043d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043de:	d007      	beq.n	80043f0 <HAL_SPI_Init+0xa0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e8:	d002      	beq.n	80043f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	ea42 0103 	orr.w	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 0204 	and.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800446c:	ea42 0103 	orr.w	r1, r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b08a      	sub	sp, #40	; 0x28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044b4:	2301      	movs	r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_SPI_TransmitReceive+0x26>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e1fb      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x41e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d4:	f7fd feae 	bl	8002234 <HAL_GetTick>
 80044d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044e8:	887b      	ldrh	r3, [r7, #2]
 80044ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044f0:	7efb      	ldrb	r3, [r7, #27]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d00e      	beq.n	8004514 <HAL_SPI_TransmitReceive+0x6e>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fc:	d106      	bne.n	800450c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <HAL_SPI_TransmitReceive+0x66>
 8004506:	7efb      	ldrb	r3, [r7, #27]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d003      	beq.n	8004514 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800450c:	2302      	movs	r3, #2
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004512:	e1cd      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x80>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x80>
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800452c:	e1c0      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b04      	cmp	r3, #4
 8004538:	d003      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2205      	movs	r2, #5
 800453e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	887a      	ldrh	r2, [r7, #2]
 8004552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	887a      	ldrh	r2, [r7, #2]
 800455a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	887a      	ldrh	r2, [r7, #2]
 800456e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004584:	d802      	bhi.n	800458c <HAL_SPI_TransmitReceive+0xe6>
 8004586:	8a3b      	ldrh	r3, [r7, #16]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d908      	bls.n	800459e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	e007      	b.n	80045ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d007      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d4:	d97c      	bls.n	80046d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x13e>
 80045de:	8a7b      	ldrh	r3, [r7, #18]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d169      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	881a      	ldrh	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	1c9a      	adds	r2, r3, #2
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004608:	e056      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d11b      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x1aa>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x1aa>
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	2b01      	cmp	r3, #1
 8004626:	d113      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d11c      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x1f2>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d016      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	b292      	uxth	r2, r2
 8004676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004698:	f7fd fdcc 	bl	8002234 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d807      	bhi.n	80046b8 <HAL_SPI_TransmitReceive+0x212>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d003      	beq.n	80046b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046b6:	e0fb      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1a3      	bne.n	800460a <HAL_SPI_TransmitReceive+0x164>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d19d      	bne.n	800460a <HAL_SPI_TransmitReceive+0x164>
 80046ce:	e0df      	b.n	8004890 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x23a>
 80046d8:	8a7b      	ldrh	r3, [r7, #18]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 80cb 	bne.w	8004876 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d912      	bls.n	8004710 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b02      	subs	r3, #2
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800470e:	e0b2      	b.n	8004876 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	7812      	ldrb	r2, [r2, #0]
 800471c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004736:	e09e      	b.n	8004876 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d134      	bne.n	80047b0 <HAL_SPI_TransmitReceive+0x30a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02f      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x30a>
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	2b01      	cmp	r3, #1
 8004754:	d12c      	bne.n	80047b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d912      	bls.n	8004786 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b02      	subs	r3, #2
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004784:	e012      	b.n	80047ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d148      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x3aa>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d042      	beq.n	8004850 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d923      	bls.n	800481e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	b292      	uxth	r2, r2
 80047e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	1c9a      	adds	r2, r3, #2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b02      	subs	r3, #2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d81f      	bhi.n	800484c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	e016      	b.n	800484c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f103 020c 	add.w	r2, r3, #12
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484c:	2301      	movs	r3, #1
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004850:	f7fd fcf0 	bl	8002234 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485c:	429a      	cmp	r2, r3
 800485e:	d803      	bhi.n	8004868 <HAL_SPI_TransmitReceive+0x3c2>
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d102      	bne.n	800486e <HAL_SPI_TransmitReceive+0x3c8>
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004874:	e01c      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	f47f af5b 	bne.w	8004738 <HAL_SPI_TransmitReceive+0x292>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	f47f af54 	bne.w	8004738 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f937 	bl	8004b08 <SPI_EndRxTxTransaction>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60
 80048ac:	e000      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3728      	adds	r7, #40	; 0x28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048dc:	f7fd fcaa 	bl	8002234 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	4413      	add	r3, r2
 80048ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048ec:	f7fd fca2 	bl	8002234 <HAL_GetTick>
 80048f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048f2:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	015b      	lsls	r3, r3, #5
 80048f8:	0d1b      	lsrs	r3, r3, #20
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004902:	e054      	b.n	80049ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d050      	beq.n	80049ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800490c:	f7fd fc92 	bl	8002234 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	429a      	cmp	r2, r3
 800491a:	d902      	bls.n	8004922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d13d      	bne.n	800499e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493a:	d111      	bne.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004944:	d004      	beq.n	8004950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d107      	bne.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004968:	d10f      	bne.n	800498a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e017      	b.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d19b      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000000 	.word	0x20000000

080049dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049ee:	f7fd fc21 	bl	8002234 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80049fe:	f7fd fc19 	bl	8002234 <HAL_GetTick>
 8004a02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	00da      	lsls	r2, r3, #3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	0d1b      	lsrs	r3, r3, #20
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a24:	e060      	b.n	8004ae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a2c:	d107      	bne.n	8004a3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d050      	beq.n	8004ae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a46:	f7fd fbf5 	bl	8002234 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d902      	bls.n	8004a5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d13d      	bne.n	8004ad8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a74:	d111      	bne.n	8004a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7e:	d004      	beq.n	8004a8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a88:	d107      	bne.n	8004a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa2:	d10f      	bne.n	8004ac4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e010      	b.n	8004afa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d196      	bne.n	8004a26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3728      	adds	r7, #40	; 0x28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000000 	.word	0x20000000

08004b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ff5b 	bl	80049dc <SPI_WaitFifoStateUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e046      	b.n	8004bca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <SPI_EndRxTxTransaction+0xcc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <SPI_EndRxTxTransaction+0xd0>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0d5b      	lsrs	r3, r3, #21
 8004b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5a:	d112      	bne.n	8004b82 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff feb0 	bl	80048cc <SPI_WaitFlagStateUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e023      	b.n	8004bca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	d0f2      	beq.n	8004b82 <SPI_EndRxTxTransaction+0x7a>
 8004b9c:	e000      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x98>
        break;
 8004b9e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff ff15 	bl	80049dc <SPI_WaitFifoStateUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e000      	b.n	8004bca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000000 	.word	0x20000000
 8004bd8:	165e9f81 	.word	0x165e9f81

08004bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e049      	b.n	8004c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f841 	bl	8004c8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 faa6 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e054      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d022      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d01d      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d018      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00e      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x80>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d115      	bne.n	8004d4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <HAL_TIM_Base_Start_IT+0xec>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d015      	beq.n	8004d5e <HAL_TIM_Base_Start_IT+0xbe>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d38:	d011      	beq.n	8004d5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	e008      	b.n	8004d5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e000      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40001800 	.word	0x40001800
 8004d8c:	00010007 	.word	0x00010007

08004d90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e08f      	b.n	8004ec4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d106      	bne.n	8004dbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fd f867 	bl	8001e8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <HAL_TIM_Encoder_Init+0x13c>)
 8004dd2:	400b      	ands	r3, r1
 8004dd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f000 f9c3 	bl	800516c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_TIM_Encoder_Init+0x140>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_TIM_Encoder_Init+0x144>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4b2a      	ldr	r3, [pc, #168]	; (8004ed8 <HAL_TIM_Encoder_Init+0x148>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	031b      	lsls	r3, r3, #12
 8004e50:	4313      	orrs	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4313      	orrs	r3, r2
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	fffebff8 	.word	0xfffebff8
 8004ed0:	fffffcfc 	.word	0xfffffcfc
 8004ed4:	fffff3f3 	.word	0xfffff3f3
 8004ed8:	ffff0f0f 	.word	0xffff0f0f

08004edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0202 	mvn.w	r2, #2
 8004f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f905 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8f7 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f908 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0204 	mvn.w	r2, #4
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8db 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8cd 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8de 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0208 	mvn.w	r2, #8
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8b1 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8a3 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f8b4 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0210 	mvn.w	r2, #16
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2208      	movs	r2, #8
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f887 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f879 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f88a 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10e      	bne.n	8005060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d107      	bne.n	8005060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0201 	mvn.w	r2, #1
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc fbc4 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d10e      	bne.n	800508c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	d107      	bne.n	800508c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f9a8 	bl	80053dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d10e      	bne.n	80050ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f99b 	bl	80053f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d10e      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b40      	cmp	r3, #64	; 0x40
 80050d4:	d107      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f838 	bl	8005156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d10e      	bne.n	8005112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d107      	bne.n	8005112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0220 	mvn.w	r2, #32
 800510a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f95b 	bl	80053c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a40      	ldr	r2, [pc, #256]	; (8005280 <TIM_Base_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3d      	ldr	r2, [pc, #244]	; (8005284 <TIM_Base_SetConfig+0x118>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <TIM_Base_SetConfig+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3b      	ldr	r2, [pc, #236]	; (800528c <TIM_Base_SetConfig+0x120>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <TIM_Base_SetConfig+0x124>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <TIM_Base_SetConfig+0x114>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d027      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <TIM_Base_SetConfig+0x118>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d023      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <TIM_Base_SetConfig+0x11c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <TIM_Base_SetConfig+0x120>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <TIM_Base_SetConfig+0x124>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d017      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_Base_SetConfig+0x128>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_Base_SetConfig+0x12c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a26      	ldr	r2, [pc, #152]	; (800529c <TIM_Base_SetConfig+0x130>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <TIM_Base_SetConfig+0x134>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <TIM_Base_SetConfig+0x138>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <TIM_Base_SetConfig+0x13c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <TIM_Base_SetConfig+0x114>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xf8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0c      	ldr	r2, [pc, #48]	; (8005290 <TIM_Base_SetConfig+0x124>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40010400 	.word	0x40010400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	40001800 	.word	0x40001800
 80052a4:	40001c00 	.word	0x40001c00
 80052a8:	40002000 	.word	0x40002000

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e06d      	b.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a30      	ldr	r2, [pc, #192]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2f      	ldr	r2, [pc, #188]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d022      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d01d      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d018      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a1c      	ldr	r2, [pc, #112]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a15      	ldr	r2, [pc, #84]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10c      	bne.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800537a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800

080053c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005416:	2b84      	cmp	r3, #132	; 0x84
 8005418:	d005      	beq.n	8005426 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800541a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	3303      	adds	r3, #3
 8005424:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005426:	68fb      	ldr	r3, [r7, #12]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800543a:	f3ef 8305 	mrs	r3, IPSR
 800543e:	607b      	str	r3, [r7, #4]
  return(result);
 8005440:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf14      	ite	ne
 8005446:	2301      	movne	r3, #1
 8005448:	2300      	moveq	r3, #0
 800544a:	b2db      	uxtb	r3, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800545c:	f001 f8b6 	bl	80065cc <vTaskStartScheduler>
  
  return osOK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	bd80      	pop	{r7, pc}

08005466 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800546a:	f7ff ffe3 	bl	8005434 <inHandlerMode>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005474:	f001 f9b2 	bl	80067dc <xTaskGetTickCountFromISR>
 8005478:	4603      	mov	r3, r0
 800547a:	e002      	b.n	8005482 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800547c:	f001 f99e 	bl	80067bc <xTaskGetTickCount>
 8005480:	4603      	mov	r3, r0
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	bd80      	pop	{r7, pc}

08005486 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005488:	b087      	sub	sp, #28
 800548a:	af02      	add	r7, sp, #8
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685c      	ldr	r4, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800549c:	b29e      	uxth	r6, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ffad 	bl	8005404 <makeFreeRtosPriority>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f107 030c 	add.w	r3, r7, #12
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	9200      	str	r2, [sp, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4632      	mov	r2, r6
 80054b8:	4629      	mov	r1, r5
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fe98 	bl	80061f0 <xTaskCreate>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <osDelay+0x16>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	e000      	b.n	80054ec <osDelay+0x18>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 f837 	bl	8006560 <vTaskDelay>
  
  return osOK;
 80054f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	4619      	mov	r1, r3
 8005512:	f000 f9ed 	bl	80058f0 <xQueueGenericCreate>
 8005516:	4603      	mov	r3, r0
#endif
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <osMessagePut+0x1e>
    ticks = 1;
 800553a:	2301      	movs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800553e:	f7ff ff79 	bl	8005434 <inHandlerMode>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d018      	beq.n	800557a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005548:	f107 0210 	add.w	r2, r7, #16
 800554c:	f107 0108 	add.w	r1, r7, #8
 8005550:	2300      	movs	r3, #0
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fb30 	bl	8005bb8 <xQueueGenericSendFromISR>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d001      	beq.n	8005562 <osMessagePut+0x42>
      return osErrorOS;
 800555e:	23ff      	movs	r3, #255	; 0xff
 8005560:	e018      	b.n	8005594 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d014      	beq.n	8005592 <osMessagePut+0x72>
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <osMessagePut+0x7c>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	e00b      	b.n	8005592 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800557a:	f107 0108 	add.w	r1, r7, #8
 800557e:	2300      	movs	r3, #0
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fa12 	bl	80059ac <xQueueGenericSend>
 8005588:	4603      	mov	r3, r0
 800558a:	2b01      	cmp	r3, #1
 800558c:	d001      	beq.n	8005592 <osMessagePut+0x72>
      return osErrorOS;
 800558e:	23ff      	movs	r3, #255	; 0xff
 8005590:	e000      	b.n	8005594 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b08b      	sub	sp, #44	; 0x2c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	617b      	str	r3, [r7, #20]
    return event;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	461c      	mov	r4, r3
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055ce:	e054      	b.n	800567a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d103      	bne.n	80055e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	e009      	b.n	80055fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <osMessageGet+0x5c>
      ticks = 1;
 80055f8:	2301      	movs	r3, #1
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80055fc:	f7ff ff1a 	bl	8005434 <inHandlerMode>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01c      	beq.n	8005640 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005606:	f107 0220 	add.w	r2, r7, #32
 800560a:	f107 0314 	add.w	r3, r7, #20
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	68b8      	ldr	r0, [r7, #8]
 8005614:	f000 fc56 	bl	8005ec4 <xQueueReceiveFromISR>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800561e:	2310      	movs	r3, #16
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e001      	b.n	8005628 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01d      	beq.n	800566a <osMessageGet+0xca>
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <osMessageGet+0xe4>)
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	e014      	b.n	800566a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	3304      	adds	r3, #4
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	4619      	mov	r1, r3
 800564a:	68b8      	ldr	r0, [r7, #8]
 800564c:	f000 fb54 	bl	8005cf8 <xQueueReceive>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d102      	bne.n	800565c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005656:	2310      	movs	r3, #16
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e006      	b.n	800566a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <osMessageGet+0xc6>
 8005662:	2300      	movs	r3, #0
 8005664:	e000      	b.n	8005668 <osMessageGet+0xc8>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	461c      	mov	r4, r3
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	372c      	adds	r7, #44	; 0x2c
 800567e:	46bd      	mov	sp, r7
 8005680:	bd90      	pop	{r4, r7, pc}
 8005682:	bf00      	nop
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <osDelayUntil+0x18>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e000      	b.n	80056a2 <osDelayUntil+0x1a>
 80056a0:	2301      	movs	r3, #1
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fed7 	bl	8006458 <vTaskDelayUntil>
  
  return osOK;
 80056aa:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0208 	add.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295
 80056cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f103 0208 	add.w	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 0208 	add.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d103      	bne.n	8005776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e00c      	b.n	8005790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3308      	adds	r3, #8
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e002      	b.n	8005784 <vListInsert+0x2e>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	d2f6      	bcs.n	800577e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
}
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d103      	bne.n	80057fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1e5a      	subs	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800584a:	f001 fcd7 	bl	80071fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	3b01      	subs	r3, #1
 800587c:	68f9      	ldr	r1, [r7, #12]
 800587e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	441a      	add	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d114      	bne.n	80058ca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01a      	beq.n	80058de <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3310      	adds	r3, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f8e5 	bl	8006a7c <xTaskRemoveFromEventList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <xQueueGenericReset+0xd0>)
 80058ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	e009      	b.n	80058de <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3310      	adds	r3, #16
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fef0 	bl	80056b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3324      	adds	r3, #36	; 0x24
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff feeb 	bl	80056b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058de:	f001 fcc1 	bl	8007264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058e2:	2301      	movs	r3, #1
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10c      	bne.n	800591e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	b672      	cpsid	i
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	b662      	cpsie	i
 8005918:	613b      	str	r3, [r7, #16]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	e004      	b.n	8005934 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3348      	adds	r3, #72	; 0x48
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fd8b 	bl	8007454 <pvPortMalloc>
 800593e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	3348      	adds	r3, #72	; 0x48
 800594e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005950:	79fa      	ldrb	r2, [r7, #7]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4613      	mov	r3, r2
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f805 	bl	800596c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005962:	69bb      	ldr	r3, [r7, #24]
	}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e002      	b.n	800598e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800599a:	2101      	movs	r1, #1
 800599c:	69b8      	ldr	r0, [r7, #24]
 800599e:	f7ff ff3d 	bl	800581c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08e      	sub	sp, #56	; 0x38
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059ba:	2300      	movs	r3, #0
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <xQueueGenericSend+0x36>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	b672      	cpsid	i
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	b662      	cpsie	i
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <xQueueGenericSend+0x44>
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <xQueueGenericSend+0x48>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <xQueueGenericSend+0x4a>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10c      	bne.n	8005a14 <xQueueGenericSend+0x68>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	b672      	cpsid	i
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	b662      	cpsie	i
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d103      	bne.n	8005a22 <xQueueGenericSend+0x76>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <xQueueGenericSend+0x7a>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueGenericSend+0x7c>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10c      	bne.n	8005a46 <xQueueGenericSend+0x9a>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	b672      	cpsid	i
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	b662      	cpsie	i
 8005a40:	623b      	str	r3, [r7, #32]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a46:	f001 f9bb 	bl	8006dc0 <xTaskGetSchedulerState>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <xQueueGenericSend+0xaa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueGenericSend+0xae>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueGenericSend+0xb0>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10c      	bne.n	8005a7a <xQueueGenericSend+0xce>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	b672      	cpsid	i
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	b662      	cpsie	i
 8005a74:	61fb      	str	r3, [r7, #28]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a7a:	f001 fbbf 	bl	80071fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <xQueueGenericSend+0xe4>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d129      	bne.n	8005ae4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f000 fa9b 	bl	8005fd0 <prvCopyDataToQueue>
 8005a9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 ffe7 	bl	8006a7c <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ab4:	4b3f      	ldr	r3, [pc, #252]	; (8005bb4 <xQueueGenericSend+0x208>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	e00a      	b.n	8005adc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005acc:	4b39      	ldr	r3, [pc, #228]	; (8005bb4 <xQueueGenericSend+0x208>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005adc:	f001 fbc2 	bl	8007264 <vPortExitCritical>
				return pdPASS;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e063      	b.n	8005bac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aea:	f001 fbbb 	bl	8007264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e05c      	b.n	8005bac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f821 	bl	8006b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b06:	f001 fbad 	bl	8007264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b0a:	f000 fdab 	bl	8006664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b0e:	f001 fb75 	bl	80071fc <vPortEnterCritical>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1e:	d103      	bne.n	8005b28 <xQueueGenericSend+0x17c>
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d103      	bne.n	8005b3e <xQueueGenericSend+0x192>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3e:	f001 fb91 	bl	8007264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b42:	1d3a      	adds	r2, r7, #4
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 f810 	bl	8006b70 <xTaskCheckForTimeOut>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d124      	bne.n	8005ba0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b58:	f000 fb32 	bl	80061c0 <prvIsQueueFull>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	3310      	adds	r3, #16
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 ff60 	bl	8006a30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b72:	f000 fabd 	bl	80060f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b76:	f000 fd83 	bl	8006680 <xTaskResumeAll>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f47f af7c 	bne.w	8005a7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <xQueueGenericSend+0x208>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	e772      	b.n	8005a7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b96:	f000 faab 	bl	80060f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b9a:	f000 fd71 	bl	8006680 <xTaskResumeAll>
 8005b9e:	e76c      	b.n	8005a7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba2:	f000 faa5 	bl	80060f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ba6:	f000 fd6b 	bl	8006680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005baa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3738      	adds	r7, #56	; 0x38
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10c      	bne.n	8005bea <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	b672      	cpsid	i
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	b662      	cpsie	i
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <xQueueGenericSendFromISR+0x40>
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <xQueueGenericSendFromISR+0x44>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <xQueueGenericSendFromISR+0x46>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10c      	bne.n	8005c1c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	b672      	cpsid	i
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	b662      	cpsie	i
 8005c16:	623b      	str	r3, [r7, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSendFromISR+0x72>
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <xQueueGenericSendFromISR+0x76>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <xQueueGenericSendFromISR+0x78>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	b672      	cpsid	i
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	b662      	cpsie	i
 8005c48:	61fb      	str	r3, [r7, #28]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c4e:	f001 fbbd 	bl	80073cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c52:	f3ef 8211 	mrs	r2, BASEPRI
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	b672      	cpsid	i
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	b662      	cpsie	i
 8005c6a:	61ba      	str	r2, [r7, #24]
 8005c6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <xQueueGenericSendFromISR+0xcc>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d12c      	bne.n	8005cde <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c94:	f000 f99c 	bl	8005fd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d112      	bne.n	8005cc8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	3324      	adds	r3, #36	; 0x24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fee4 	bl	8006a7c <xTaskRemoveFromEventList>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e007      	b.n	8005cd8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ccc:	3301      	adds	r3, #1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	b25a      	sxtb	r2, r3
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cdc:	e001      	b.n	8005ce2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3738      	adds	r7, #56	; 0x38
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	; 0x30
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <xQueueReceive+0x34>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	b672      	cpsid	i
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	b662      	cpsie	i
 8005d26:	623b      	str	r3, [r7, #32]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <xQueueReceive+0x42>
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueReceive+0x46>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueReceive+0x48>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10c      	bne.n	8005d5e <xQueueReceive+0x66>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	61fb      	str	r3, [r7, #28]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d5e:	f001 f82f 	bl	8006dc0 <xTaskGetSchedulerState>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <xQueueReceive+0x76>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <xQueueReceive+0x7a>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <xQueueReceive+0x7c>
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10c      	bne.n	8005d92 <xQueueReceive+0x9a>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	b672      	cpsid	i
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	b662      	cpsie	i
 8005d8c:	61bb      	str	r3, [r7, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d92:	f001 fa33 	bl	80071fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01f      	beq.n	8005de2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da6:	f000 f97d 	bl	80060a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fe5c 	bl	8006a7c <xTaskRemoveFromEventList>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dca:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <xQueueReceive+0x1c8>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dda:	f001 fa43 	bl	8007264 <vPortExitCritical>
				return pdPASS;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e069      	b.n	8005eb6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005de8:	f001 fa3c 	bl	8007264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e062      	b.n	8005eb6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005df6:	f107 0310 	add.w	r3, r7, #16
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fea2 	bl	8006b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e04:	f001 fa2e 	bl	8007264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e08:	f000 fc2c 	bl	8006664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e0c:	f001 f9f6 	bl	80071fc <vPortEnterCritical>
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d103      	bne.n	8005e26 <xQueueReceive+0x12e>
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e2c:	b25b      	sxtb	r3, r3
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d103      	bne.n	8005e3c <xQueueReceive+0x144>
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e3c:	f001 fa12 	bl	8007264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e40:	1d3a      	adds	r2, r7, #4
 8005e42:	f107 0310 	add.w	r3, r7, #16
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fe91 	bl	8006b70 <xTaskCheckForTimeOut>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d123      	bne.n	8005e9c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e56:	f000 f99d 	bl	8006194 <prvIsQueueEmpty>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fde1 	bl	8006a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e70:	f000 f93e 	bl	80060f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e74:	f000 fc04 	bl	8006680 <xTaskResumeAll>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d189      	bne.n	8005d92 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <xQueueReceive+0x1c8>)
 8005e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	e780      	b.n	8005d92 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e92:	f000 f92d 	bl	80060f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e96:	f000 fbf3 	bl	8006680 <xTaskResumeAll>
 8005e9a:	e77a      	b.n	8005d92 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9e:	f000 f927 	bl	80060f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ea2:	f000 fbed 	bl	8006680 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea8:	f000 f974 	bl	8006194 <prvIsQueueEmpty>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f43f af6f 	beq.w	8005d92 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005eb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3730      	adds	r7, #48	; 0x30
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08e      	sub	sp, #56	; 0x38
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10c      	bne.n	8005ef4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	b672      	cpsid	i
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	b662      	cpsie	i
 8005eee:	623b      	str	r3, [r7, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <xQueueReceiveFromISR+0x3e>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <xQueueReceiveFromISR+0x42>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueReceiveFromISR+0x44>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10c      	bne.n	8005f26 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	b672      	cpsid	i
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	b662      	cpsie	i
 8005f20:	61fb      	str	r3, [r7, #28]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f26:	f001 fa51 	bl	80073cc <vPortValidateInterruptPriority>
	__asm volatile
 8005f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	b672      	cpsid	i
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	b662      	cpsie	i
 8005f42:	61ba      	str	r2, [r7, #24]
 8005f44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d02f      	beq.n	8005fb6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f64:	f000 f89e 	bl	80060a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	1e5a      	subs	r2, r3, #1
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d112      	bne.n	8005fa0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	3310      	adds	r3, #16
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fd78 	bl	8006a7c <xTaskRemoveFromEventList>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00e      	beq.n	8005fb0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	e007      	b.n	8005fb0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	b25a      	sxtb	r2, r3
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb4:	e001      	b.n	8005fba <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f383 8811 	msr	BASEPRI, r3
}
 8005fc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3738      	adds	r7, #56	; 0x38
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d14d      	bne.n	8006092 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fefe 	bl	8006dfc <xTaskPriorityDisinherit>
 8006000:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	e043      	b.n	8006092 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d119      	bne.n	8006044 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6858      	ldr	r0, [r3, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	461a      	mov	r2, r3
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	f001 ff50 	bl	8007ec0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	441a      	add	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	d32b      	bcc.n	8006092 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	e026      	b.n	8006092 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68d8      	ldr	r0, [r3, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	461a      	mov	r2, r3
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	f001 ff36 	bl	8007ec0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	425b      	negs	r3, r3
 800605e:	441a      	add	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d207      	bcs.n	8006080 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	425b      	negs	r3, r3
 800607a:	441a      	add	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d105      	bne.n	8006092 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	3b01      	subs	r3, #1
 8006090:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800609a:	697b      	ldr	r3, [r7, #20]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d018      	beq.n	80060e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	441a      	add	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d303      	bcc.n	80060d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68d9      	ldr	r1, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	461a      	mov	r2, r3
 80060e2:	6838      	ldr	r0, [r7, #0]
 80060e4:	f001 feec 	bl	8007ec0 <memcpy>
	}
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060f8:	f001 f880 	bl	80071fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006104:	e011      	b.n	800612a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d012      	beq.n	8006134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3324      	adds	r3, #36	; 0x24
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fcb2 	bl	8006a7c <xTaskRemoveFromEventList>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800611e:	f000 fd8d 	bl	8006c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	3b01      	subs	r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800612a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612e:	2b00      	cmp	r3, #0
 8006130:	dce9      	bgt.n	8006106 <prvUnlockQueue+0x16>
 8006132:	e000      	b.n	8006136 <prvUnlockQueue+0x46>
					break;
 8006134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800613e:	f001 f891 	bl	8007264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006142:	f001 f85b 	bl	80071fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800614c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800614e:	e011      	b.n	8006174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d012      	beq.n	800617e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3310      	adds	r3, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fc8d 	bl	8006a7c <xTaskRemoveFromEventList>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006168:	f000 fd68 	bl	8006c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	3b01      	subs	r3, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006178:	2b00      	cmp	r3, #0
 800617a:	dce9      	bgt.n	8006150 <prvUnlockQueue+0x60>
 800617c:	e000      	b.n	8006180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800617e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	22ff      	movs	r2, #255	; 0xff
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006188:	f001 f86c 	bl	8007264 <vPortExitCritical>
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800619c:	f001 f82e 	bl	80071fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d102      	bne.n	80061ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e001      	b.n	80061b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061b2:	f001 f857 	bl	8007264 <vPortExitCritical>

	return xReturn;
 80061b6:	68fb      	ldr	r3, [r7, #12]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061c8:	f001 f818 	bl	80071fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d102      	bne.n	80061de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e001      	b.n	80061e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061e2:	f001 f83f 	bl	8007264 <vPortExitCritical>

	return xReturn;
 80061e6:	68fb      	ldr	r3, [r7, #12]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	; 0x30
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 f925 	bl	8007454 <pvPortMalloc>
 800620a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006212:	2054      	movs	r0, #84	; 0x54
 8006214:	f001 f91e 	bl	8007454 <pvPortMalloc>
 8006218:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
 8006226:	e005      	b.n	8006234 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f001 f9dd 	bl	80075e8 <vPortFree>
 800622e:	e001      	b.n	8006234 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d013      	beq.n	8006262 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	2300      	movs	r3, #0
 800623e:	9303      	str	r3, [sp, #12]
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f80e 	bl	8006272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006256:	69f8      	ldr	r0, [r7, #28]
 8006258:	f000 f894 	bl	8006384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800625c:	2301      	movs	r3, #1
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e002      	b.n	8006268 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006268:	69bb      	ldr	r3, [r7, #24]
	}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b088      	sub	sp, #32
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800628a:	440b      	add	r3, r1
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f023 0307 	bic.w	r3, r3, #7
 8006298:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <prvInitialiseNewTask+0x4c>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	b672      	cpsid	i
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	b662      	cpsie	i
 80062b8:	617b      	str	r3, [r7, #20]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01f      	beq.n	8006304 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e012      	b.n	80062f0 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	7819      	ldrb	r1, [r3, #0]
 80062d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	3334      	adds	r3, #52	; 0x34
 80062da:	460a      	mov	r2, r1
 80062dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d9e9      	bls.n	80062ca <prvInitialiseNewTask+0x58>
 80062f6:	e000      	b.n	80062fa <prvInitialiseNewTask+0x88>
			{
				break;
 80062f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006302:	e003      	b.n	800630c <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2b06      	cmp	r3, #6
 8006310:	d901      	bls.n	8006316 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006312:	2306      	movs	r3, #6
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	2200      	movs	r2, #0
 8006326:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f9e1 	bl	80056f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	3318      	adds	r3, #24
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff f9dc 	bl	80056f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	f1c3 0207 	rsb	r2, r3, #7
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2200      	movs	r2, #0
 8006356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	68f9      	ldr	r1, [r7, #12]
 8006364:	69b8      	ldr	r0, [r7, #24]
 8006366:	f000 fe39 	bl	8006fdc <pxPortInitialiseStack>
 800636a:	4602      	mov	r2, r0
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637c:	bf00      	nop
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800638c:	f000 ff36 	bl	80071fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <prvAddNewTaskToReadyList+0xb8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a29      	ldr	r2, [pc, #164]	; (800643c <prvAddNewTaskToReadyList+0xb8>)
 8006398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <prvAddNewTaskToReadyList+0xbc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063a2:	4a27      	ldr	r2, [pc, #156]	; (8006440 <prvAddNewTaskToReadyList+0xbc>)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063a8:	4b24      	ldr	r3, [pc, #144]	; (800643c <prvAddNewTaskToReadyList+0xb8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d110      	bne.n	80063d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063b0:	f000 fc68 	bl	8006c84 <prvInitialiseTaskLists>
 80063b4:	e00d      	b.n	80063d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063b6:	4b23      	ldr	r3, [pc, #140]	; (8006444 <prvAddNewTaskToReadyList+0xc0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <prvAddNewTaskToReadyList+0xbc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d802      	bhi.n	80063d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063cc:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <prvAddNewTaskToReadyList+0xbc>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <prvAddNewTaskToReadyList+0xc4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <prvAddNewTaskToReadyList+0xc4>)
 80063da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	2201      	movs	r2, #1
 80063e2:	409a      	lsls	r2, r3
 80063e4:	4b19      	ldr	r3, [pc, #100]	; (800644c <prvAddNewTaskToReadyList+0xc8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	4a18      	ldr	r2, [pc, #96]	; (800644c <prvAddNewTaskToReadyList+0xc8>)
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4a15      	ldr	r2, [pc, #84]	; (8006450 <prvAddNewTaskToReadyList+0xcc>)
 80063fc:	441a      	add	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7ff f982 	bl	800570e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800640a:	f000 ff2b 	bl	8007264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800640e:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <prvAddNewTaskToReadyList+0xc0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006416:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <prvAddNewTaskToReadyList+0xbc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	429a      	cmp	r2, r3
 8006422:	d207      	bcs.n	8006434 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <prvAddNewTaskToReadyList+0xd0>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	2000068c 	.word	0x2000068c
 8006440:	2000058c 	.word	0x2000058c
 8006444:	20000698 	.word	0x20000698
 8006448:	200006a8 	.word	0x200006a8
 800644c:	20000694 	.word	0x20000694
 8006450:	20000590 	.word	0x20000590
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	; 0x28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006462:	2300      	movs	r3, #0
 8006464:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10c      	bne.n	8006486 <vTaskDelayUntil+0x2e>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	b672      	cpsid	i
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	b662      	cpsie	i
 8006480:	617b      	str	r3, [r7, #20]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	b672      	cpsid	i
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	b662      	cpsie	i
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 80064a6:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <vTaskDelayUntil+0xfc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <vTaskDelayUntil+0x70>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	b672      	cpsid	i
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	b662      	cpsie	i
 80064c2:	60fb      	str	r3, [r7, #12]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 80064c8:	f000 f8cc 	bl	8006664 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80064cc:	4b22      	ldr	r3, [pc, #136]	; (8006558 <vTaskDelayUntil+0x100>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4413      	add	r3, r2
 80064da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d20b      	bcs.n	80064fe <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d211      	bcs.n	8006514 <vTaskDelayUntil+0xbc>
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d90d      	bls.n	8006514 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	e00a      	b.n	8006514 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	429a      	cmp	r2, r3
 8006506:	d303      	bcc.n	8006510 <vTaskDelayUntil+0xb8>
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	429a      	cmp	r2, r3
 800650e:	d901      	bls.n	8006514 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d006      	beq.n	800652e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2100      	movs	r1, #0
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fcf1 	bl	8006f10 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800652e:	f000 f8a7 	bl	8006680 <xTaskResumeAll>
 8006532:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d107      	bne.n	800654a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <vTaskDelayUntil+0x104>)
 800653c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800654a:	bf00      	nop
 800654c:	3728      	adds	r7, #40	; 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200006b4 	.word	0x200006b4
 8006558:	20000690 	.word	0x20000690
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d019      	beq.n	80065a6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006572:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <vTaskDelay+0x64>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <vTaskDelay+0x34>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	b672      	cpsid	i
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	b662      	cpsie	i
 800658e:	60bb      	str	r3, [r7, #8]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006594:	f000 f866 	bl	8006664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006598:	2100      	movs	r1, #0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fcb8 	bl	8006f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065a0:	f000 f86e 	bl	8006680 <xTaskResumeAll>
 80065a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d107      	bne.n	80065bc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <vTaskDelay+0x68>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	200006b4 	.word	0x200006b4
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <vTaskStartScheduler+0x80>)
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	2300      	movs	r3, #0
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2300      	movs	r3, #0
 80065dc:	2280      	movs	r2, #128	; 0x80
 80065de:	491c      	ldr	r1, [pc, #112]	; (8006650 <vTaskStartScheduler+0x84>)
 80065e0:	481c      	ldr	r0, [pc, #112]	; (8006654 <vTaskStartScheduler+0x88>)
 80065e2:	f7ff fe05 	bl	80061f0 <xTaskCreate>
 80065e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d118      	bne.n	8006620 <vTaskStartScheduler+0x54>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	b672      	cpsid	i
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	b662      	cpsie	i
 8006602:	60bb      	str	r3, [r7, #8]
}
 8006604:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <vTaskStartScheduler+0x8c>)
 8006608:	f04f 32ff 	mov.w	r2, #4294967295
 800660c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <vTaskStartScheduler+0x90>)
 8006610:	2201      	movs	r2, #1
 8006612:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <vTaskStartScheduler+0x94>)
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800661a:	f000 fd71 	bl	8007100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800661e:	e010      	b.n	8006642 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d10c      	bne.n	8006642 <vTaskStartScheduler+0x76>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	b672      	cpsid	i
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	b662      	cpsie	i
 800663c:	607b      	str	r3, [r7, #4]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <vTaskStartScheduler+0x74>
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200006b0 	.word	0x200006b0
 8006650:	08007fb8 	.word	0x08007fb8
 8006654:	08006c55 	.word	0x08006c55
 8006658:	200006ac 	.word	0x200006ac
 800665c:	20000698 	.word	0x20000698
 8006660:	20000690 	.word	0x20000690

08006664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <vTaskSuspendAll+0x18>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	4a03      	ldr	r2, [pc, #12]	; (800667c <vTaskSuspendAll+0x18>)
 8006670:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006672:	bf00      	nop
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	200006b4 	.word	0x200006b4

08006680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800668e:	4b42      	ldr	r3, [pc, #264]	; (8006798 <xTaskResumeAll+0x118>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <xTaskResumeAll+0x30>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	b672      	cpsid	i
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	b662      	cpsie	i
 80066aa:	603b      	str	r3, [r7, #0]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066b0:	f000 fda4 	bl	80071fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066b4:	4b38      	ldr	r3, [pc, #224]	; (8006798 <xTaskResumeAll+0x118>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4a37      	ldr	r2, [pc, #220]	; (8006798 <xTaskResumeAll+0x118>)
 80066bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <xTaskResumeAll+0x118>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d161      	bne.n	800678a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066c6:	4b35      	ldr	r3, [pc, #212]	; (800679c <xTaskResumeAll+0x11c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d05d      	beq.n	800678a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ce:	e02e      	b.n	800672e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d0:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <xTaskResumeAll+0x120>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3318      	adds	r3, #24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff f873 	bl	80057c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff f86e 	bl	80057c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	2201      	movs	r2, #1
 80066f2:	409a      	lsls	r2, r3
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <xTaskResumeAll+0x124>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <xTaskResumeAll+0x124>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <xTaskResumeAll+0x128>)
 800670c:	441a      	add	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f7fe fffa 	bl	800570e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	4b23      	ldr	r3, [pc, #140]	; (80067ac <xTaskResumeAll+0x12c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <xTaskResumeAll+0x130>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <xTaskResumeAll+0x120>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1cc      	bne.n	80066d0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800673c:	f000 fb20 	bl	8006d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006740:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <xTaskResumeAll+0x134>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800674c:	f000 f858 	bl	8006800 <xTaskIncrementTick>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006756:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <xTaskResumeAll+0x130>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f1      	bne.n	800674c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <xTaskResumeAll+0x134>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <xTaskResumeAll+0x130>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <xTaskResumeAll+0x138>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800678a:	f000 fd6b 	bl	8007264 <vPortExitCritical>

	return xAlreadyYielded;
 800678e:	68bb      	ldr	r3, [r7, #8]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	200006b4 	.word	0x200006b4
 800679c:	2000068c 	.word	0x2000068c
 80067a0:	2000064c 	.word	0x2000064c
 80067a4:	20000694 	.word	0x20000694
 80067a8:	20000590 	.word	0x20000590
 80067ac:	2000058c 	.word	0x2000058c
 80067b0:	200006a0 	.word	0x200006a0
 80067b4:	2000069c 	.word	0x2000069c
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <xTaskGetTickCount+0x1c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067c8:	687b      	ldr	r3, [r7, #4]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000690 	.word	0x20000690

080067dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067e2:	f000 fdf3 	bl	80073cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80067ea:	4b04      	ldr	r3, [pc, #16]	; (80067fc <xTaskGetTickCountFromISR+0x20>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067f0:	683b      	ldr	r3, [r7, #0]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000690 	.word	0x20000690

08006800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680a:	4b4f      	ldr	r3, [pc, #316]	; (8006948 <xTaskIncrementTick+0x148>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 808a 	bne.w	8006928 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006814:	4b4d      	ldr	r3, [pc, #308]	; (800694c <xTaskIncrementTick+0x14c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800681c:	4a4b      	ldr	r2, [pc, #300]	; (800694c <xTaskIncrementTick+0x14c>)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d122      	bne.n	800686e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006828:	4b49      	ldr	r3, [pc, #292]	; (8006950 <xTaskIncrementTick+0x150>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	603b      	str	r3, [r7, #0]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <xTaskIncrementTick+0x4a>
 800684c:	4b40      	ldr	r3, [pc, #256]	; (8006950 <xTaskIncrementTick+0x150>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	4b40      	ldr	r3, [pc, #256]	; (8006954 <xTaskIncrementTick+0x154>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a3e      	ldr	r2, [pc, #248]	; (8006950 <xTaskIncrementTick+0x150>)
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4a3e      	ldr	r2, [pc, #248]	; (8006954 <xTaskIncrementTick+0x154>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4b3d      	ldr	r3, [pc, #244]	; (8006958 <xTaskIncrementTick+0x158>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a3c      	ldr	r2, [pc, #240]	; (8006958 <xTaskIncrementTick+0x158>)
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	f000 fa89 	bl	8006d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800686e:	4b3b      	ldr	r3, [pc, #236]	; (800695c <xTaskIncrementTick+0x15c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d348      	bcc.n	800690a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <xTaskIncrementTick+0x150>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <xTaskIncrementTick+0x15c>)
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	601a      	str	r2, [r3, #0]
					break;
 800688a:	e03e      	b.n	800690a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688c:	4b30      	ldr	r3, [pc, #192]	; (8006950 <xTaskIncrementTick+0x150>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d203      	bcs.n	80068ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068a4:	4a2d      	ldr	r2, [pc, #180]	; (800695c <xTaskIncrementTick+0x15c>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068aa:	e02e      	b.n	800690a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe ff89 	bl	80057c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	3318      	adds	r3, #24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe ff80 	bl	80057c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2201      	movs	r2, #1
 80068ce:	409a      	lsls	r2, r3
 80068d0:	4b23      	ldr	r3, [pc, #140]	; (8006960 <xTaskIncrementTick+0x160>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <xTaskIncrementTick+0x160>)
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4a1f      	ldr	r2, [pc, #124]	; (8006964 <xTaskIncrementTick+0x164>)
 80068e8:	441a      	add	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f7fe ff0c 	bl	800570e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <xTaskIncrementTick+0x168>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	429a      	cmp	r2, r3
 8006902:	d3b9      	bcc.n	8006878 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006908:	e7b6      	b.n	8006878 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800690a:	4b17      	ldr	r3, [pc, #92]	; (8006968 <xTaskIncrementTick+0x168>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4914      	ldr	r1, [pc, #80]	; (8006964 <xTaskIncrementTick+0x164>)
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d907      	bls.n	8006932 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e004      	b.n	8006932 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <xTaskIncrementTick+0x16c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a0f      	ldr	r2, [pc, #60]	; (800696c <xTaskIncrementTick+0x16c>)
 8006930:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006932:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <xTaskIncrementTick+0x170>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200006b4 	.word	0x200006b4
 800694c:	20000690 	.word	0x20000690
 8006950:	20000644 	.word	0x20000644
 8006954:	20000648 	.word	0x20000648
 8006958:	200006a4 	.word	0x200006a4
 800695c:	200006ac 	.word	0x200006ac
 8006960:	20000694 	.word	0x20000694
 8006964:	20000590 	.word	0x20000590
 8006968:	2000058c 	.word	0x2000058c
 800696c:	2000069c 	.word	0x2000069c
 8006970:	200006a0 	.word	0x200006a0

08006974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800697a:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <vTaskSwitchContext+0xa8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006982:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <vTaskSwitchContext+0xac>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006988:	e041      	b.n	8006a0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800698a:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <vTaskSwitchContext+0xac>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006990:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <vTaskSwitchContext+0xb0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	fab3 f383 	clz	r3, r3
 800699c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	f1c3 031f 	rsb	r3, r3, #31
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	4920      	ldr	r1, [pc, #128]	; (8006a28 <vTaskSwitchContext+0xb4>)
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10c      	bne.n	80069d4 <vTaskSwitchContext+0x60>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	b672      	cpsid	i
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	b662      	cpsie	i
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vTaskSwitchContext+0x5e>
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4a12      	ldr	r2, [pc, #72]	; (8006a28 <vTaskSwitchContext+0xb4>)
 80069e0:	4413      	add	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	3308      	adds	r3, #8
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d104      	bne.n	8006a04 <vTaskSwitchContext+0x90>
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <vTaskSwitchContext+0xb8>)
 8006a0c:	6013      	str	r3, [r2, #0]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	200006b4 	.word	0x200006b4
 8006a20:	200006a0 	.word	0x200006a0
 8006a24:	20000694 	.word	0x20000694
 8006a28:	20000590 	.word	0x20000590
 8006a2c:	2000058c 	.word	0x2000058c

08006a30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	60fb      	str	r3, [r7, #12]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <vTaskPlaceOnEventList+0x48>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fe fe77 	bl	8005756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a68:	2101      	movs	r1, #1
 8006a6a:	6838      	ldr	r0, [r7, #0]
 8006a6c:	f000 fa50 	bl	8006f10 <prvAddCurrentTaskToDelayedList>
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	2000058c 	.word	0x2000058c

08006a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10c      	bne.n	8006aac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	b672      	cpsid	i
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	b662      	cpsie	i
 8006aa6:	60fb      	str	r3, [r7, #12]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	3318      	adds	r3, #24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fe89 	bl	80057c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <xTaskRemoveFromEventList+0xb0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d11c      	bne.n	8006af8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fe80 	bl	80057c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	2201      	movs	r2, #1
 8006ace:	409a      	lsls	r2, r3
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <xTaskRemoveFromEventList+0xb4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <xTaskRemoveFromEventList+0xb4>)
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <xTaskRemoveFromEventList+0xb8>)
 8006ae8:	441a      	add	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4619      	mov	r1, r3
 8006af0:	4610      	mov	r0, r2
 8006af2:	f7fe fe0c 	bl	800570e <vListInsertEnd>
 8006af6:	e005      	b.n	8006b04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3318      	adds	r3, #24
 8006afc:	4619      	mov	r1, r3
 8006afe:	480e      	ldr	r0, [pc, #56]	; (8006b38 <xTaskRemoveFromEventList+0xbc>)
 8006b00:	f7fe fe05 	bl	800570e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <xTaskRemoveFromEventList+0xc0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d905      	bls.n	8006b1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b12:	2301      	movs	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <xTaskRemoveFromEventList+0xc4>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e001      	b.n	8006b22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b22:	697b      	ldr	r3, [r7, #20]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200006b4 	.word	0x200006b4
 8006b30:	20000694 	.word	0x20000694
 8006b34:	20000590 	.word	0x20000590
 8006b38:	2000064c 	.word	0x2000064c
 8006b3c:	2000058c 	.word	0x2000058c
 8006b40:	200006a0 	.word	0x200006a0

08006b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <vTaskInternalSetTimeOutState+0x24>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <vTaskInternalSetTimeOutState+0x28>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200006a4 	.word	0x200006a4
 8006b6c:	20000690 	.word	0x20000690

08006b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10c      	bne.n	8006b9a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	b672      	cpsid	i
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	b662      	cpsie	i
 8006b94:	613b      	str	r3, [r7, #16]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	60fb      	str	r3, [r7, #12]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006bba:	f000 fb1f 	bl	80071fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <xTaskCheckForTimeOut+0xc4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d102      	bne.n	8006bde <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e023      	b.n	8006c26 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <xTaskCheckForTimeOut+0xc8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d007      	beq.n	8006bfa <xTaskCheckForTimeOut+0x8a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e015      	b.n	8006c26 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d20b      	bcs.n	8006c1c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff ff97 	bl	8006b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e004      	b.n	8006c26 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c26:	f000 fb1d 	bl	8007264 <vPortExitCritical>

	return xReturn;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000690 	.word	0x20000690
 8006c38:	200006a4 	.word	0x200006a4

08006c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c40:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <vTaskMissedYield+0x14>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	200006a0 	.word	0x200006a0

08006c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c5c:	f000 f852 	bl	8006d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <prvIdleTask+0x28>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d9f9      	bls.n	8006c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <prvIdleTask+0x2c>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c78:	e7f0      	b.n	8006c5c <prvIdleTask+0x8>
 8006c7a:	bf00      	nop
 8006c7c:	20000590 	.word	0x20000590
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	e00c      	b.n	8006caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <prvInitialiseTaskLists+0x60>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fd08 	bl	80056b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b06      	cmp	r3, #6
 8006cae:	d9ef      	bls.n	8006c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cb0:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cb2:	f7fe fcff 	bl	80056b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cb6:	480d      	ldr	r0, [pc, #52]	; (8006cec <prvInitialiseTaskLists+0x68>)
 8006cb8:	f7fe fcfc 	bl	80056b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cbc:	480c      	ldr	r0, [pc, #48]	; (8006cf0 <prvInitialiseTaskLists+0x6c>)
 8006cbe:	f7fe fcf9 	bl	80056b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cc2:	480c      	ldr	r0, [pc, #48]	; (8006cf4 <prvInitialiseTaskLists+0x70>)
 8006cc4:	f7fe fcf6 	bl	80056b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc8:	480b      	ldr	r0, [pc, #44]	; (8006cf8 <prvInitialiseTaskLists+0x74>)
 8006cca:	f7fe fcf3 	bl	80056b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <prvInitialiseTaskLists+0x78>)
 8006cd0:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <prvInitialiseTaskLists+0x7c>)
 8006cd6:	4a05      	ldr	r2, [pc, #20]	; (8006cec <prvInitialiseTaskLists+0x68>)
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000590 	.word	0x20000590
 8006ce8:	2000061c 	.word	0x2000061c
 8006cec:	20000630 	.word	0x20000630
 8006cf0:	2000064c 	.word	0x2000064c
 8006cf4:	20000660 	.word	0x20000660
 8006cf8:	20000678 	.word	0x20000678
 8006cfc:	20000644 	.word	0x20000644
 8006d00:	20000648 	.word	0x20000648

08006d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d0a:	e019      	b.n	8006d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d0c:	f000 fa76 	bl	80071fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <prvCheckTasksWaitingTermination+0x50>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fd53 	bl	80057c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d22:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4a0b      	ldr	r2, [pc, #44]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d36:	f000 fa95 	bl	8007264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f810 	bl	8006d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e1      	bne.n	8006d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000660 	.word	0x20000660
 8006d58:	2000068c 	.word	0x2000068c
 8006d5c:	20000674 	.word	0x20000674

08006d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fc3b 	bl	80075e8 <vPortFree>
			vPortFree( pxTCB );
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc38 	bl	80075e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvResetNextTaskUnblockTime+0x38>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <prvResetNextTaskUnblockTime+0x3c>)
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d98:	e008      	b.n	8006dac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <prvResetNextTaskUnblockTime+0x38>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <prvResetNextTaskUnblockTime+0x3c>)
 8006daa:	6013      	str	r3, [r2, #0]
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	20000644 	.word	0x20000644
 8006dbc:	200006ac 	.word	0x200006ac

08006dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <xTaskGetSchedulerState+0x34>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	e008      	b.n	8006de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd4:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <xTaskGetSchedulerState+0x38>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	e001      	b.n	8006de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006de6:	687b      	ldr	r3, [r7, #4]
	}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	20000698 	.word	0x20000698
 8006df8:	200006b4 	.word	0x200006b4

08006dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d072      	beq.n	8006ef8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e12:	4b3c      	ldr	r3, [pc, #240]	; (8006f04 <xTaskPriorityDisinherit+0x108>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d00c      	beq.n	8006e36 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	b672      	cpsid	i
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	b662      	cpsie	i
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10c      	bne.n	8006e58 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	b672      	cpsid	i
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	b662      	cpsie	i
 8006e52:	60bb      	str	r3, [r7, #8]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d044      	beq.n	8006ef8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d140      	bne.n	8006ef8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fca4 	bl	80057c8 <uxListRemove>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d115      	bne.n	8006eb2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8a:	491f      	ldr	r1, [pc, #124]	; (8006f08 <xTaskPriorityDisinherit+0x10c>)
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xTaskPriorityDisinherit+0xb6>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	4b18      	ldr	r3, [pc, #96]	; (8006f0c <xTaskPriorityDisinherit+0x110>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4013      	ands	r3, r2
 8006eae:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <xTaskPriorityDisinherit+0x110>)
 8006eb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	f1c3 0207 	rsb	r2, r3, #7
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	2201      	movs	r2, #1
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <xTaskPriorityDisinherit+0x110>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <xTaskPriorityDisinherit+0x110>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <xTaskPriorityDisinherit+0x10c>)
 8006ee6:	441a      	add	r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fc0d 	bl	800570e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ef8:	697b      	ldr	r3, [r7, #20]
	}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	2000058c 	.word	0x2000058c
 8006f08:	20000590 	.word	0x20000590
 8006f0c:	20000694 	.word	0x20000694

08006f10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f1a:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f20:	4b28      	ldr	r3, [pc, #160]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fc4e 	bl	80057c8 <uxListRemove>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10b      	bne.n	8006f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f32:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	2201      	movs	r2, #1
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43da      	mvns	r2, r3
 8006f40:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4013      	ands	r3, r2
 8006f46:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d10a      	bne.n	8006f68 <prvAddCurrentTaskToDelayedList+0x58>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f58:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	481a      	ldr	r0, [pc, #104]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f62:	f7fe fbd4 	bl	800570e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f66:	e026      	b.n	8006fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f70:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d209      	bcs.n	8006f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f80:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fe fbe2 	bl	8005756 <vListInsert>
}
 8006f92:	e010      	b.n	8006fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe fbd8 	bl	8005756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d202      	bcs.n	8006fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fb0:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6013      	str	r3, [r2, #0]
}
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000690 	.word	0x20000690
 8006fc4:	2000058c 	.word	0x2000058c
 8006fc8:	20000694 	.word	0x20000694
 8006fcc:	20000678 	.word	0x20000678
 8006fd0:	20000648 	.word	0x20000648
 8006fd4:	20000644 	.word	0x20000644
 8006fd8:	200006ac 	.word	0x200006ac

08006fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3b04      	subs	r3, #4
 8006fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0201 	bic.w	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b04      	subs	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800700c:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <pxPortInitialiseStack+0x64>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3b14      	subs	r3, #20
 8007016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3b04      	subs	r3, #4
 8007022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f06f 0202 	mvn.w	r2, #2
 800702a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3b20      	subs	r3, #32
 8007030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007032:	68fb      	ldr	r3, [r7, #12]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	08007045 	.word	0x08007045

08007044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800704e:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <prvTaskExitError+0x5c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d00c      	beq.n	8007072 <prvTaskExitError+0x2e>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	b672      	cpsid	i
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	b662      	cpsie	i
 800706c:	60fb      	str	r3, [r7, #12]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <prvTaskExitError+0x2c>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	b672      	cpsid	i
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	b662      	cpsie	i
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800708a:	bf00      	nop
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0fc      	beq.n	800708c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	2000000c 	.word	0x2000000c
	...

080070b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <pxCurrentTCBConst2>)
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	f380 8809 	msr	PSP, r0
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	4770      	bx	lr
 80070cc:	f3af 8000 	nop.w

080070d0 <pxCurrentTCBConst2>:
 80070d0:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop

080070d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070d8:	4808      	ldr	r0, [pc, #32]	; (80070fc <prvPortStartFirstTask+0x24>)
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f380 8808 	msr	MSP, r0
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8814 	msr	CONTROL, r0
 80070ea:	b662      	cpsie	i
 80070ec:	b661      	cpsie	f
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	df00      	svc	0
 80070f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070fa:	bf00      	nop
 80070fc:	e000ed08 	.word	0xe000ed08

08007100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007106:	4b37      	ldr	r3, [pc, #220]	; (80071e4 <xPortStartScheduler+0xe4>)
 8007108:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	22ff      	movs	r2, #255	; 0xff
 8007116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b2f      	ldr	r3, [pc, #188]	; (80071e8 <xPortStartScheduler+0xe8>)
 800712c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <xPortStartScheduler+0xec>)
 8007130:	2207      	movs	r2, #7
 8007132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007134:	e009      	b.n	800714a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007136:	4b2d      	ldr	r3, [pc, #180]	; (80071ec <xPortStartScheduler+0xec>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3b01      	subs	r3, #1
 800713c:	4a2b      	ldr	r2, [pc, #172]	; (80071ec <xPortStartScheduler+0xec>)
 800713e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d0ef      	beq.n	8007136 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007156:	4b25      	ldr	r3, [pc, #148]	; (80071ec <xPortStartScheduler+0xec>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1c3 0307 	rsb	r3, r3, #7
 800715e:	2b04      	cmp	r3, #4
 8007160:	d00c      	beq.n	800717c <xPortStartScheduler+0x7c>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	60bb      	str	r3, [r7, #8]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800717c:	4b1b      	ldr	r3, [pc, #108]	; (80071ec <xPortStartScheduler+0xec>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	4a1a      	ldr	r2, [pc, #104]	; (80071ec <xPortStartScheduler+0xec>)
 8007184:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007186:	4b19      	ldr	r3, [pc, #100]	; (80071ec <xPortStartScheduler+0xec>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <xPortStartScheduler+0xec>)
 8007190:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <xPortStartScheduler+0xf0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <xPortStartScheduler+0xf0>)
 80071a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <xPortStartScheduler+0xf0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <xPortStartScheduler+0xf0>)
 80071ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071b2:	f000 f8dd 	bl	8007370 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <xPortStartScheduler+0xf4>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071bc:	f000 f8fc 	bl	80073b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071c0:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <xPortStartScheduler+0xf8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a0c      	ldr	r2, [pc, #48]	; (80071f8 <xPortStartScheduler+0xf8>)
 80071c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071cc:	f7ff ff84 	bl	80070d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071d0:	f7ff fbd0 	bl	8006974 <vTaskSwitchContext>
	prvTaskExitError();
 80071d4:	f7ff ff36 	bl	8007044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	e000e400 	.word	0xe000e400
 80071e8:	200006b8 	.word	0x200006b8
 80071ec:	200006bc 	.word	0x200006bc
 80071f0:	e000ed20 	.word	0xe000ed20
 80071f4:	2000000c 	.word	0x2000000c
 80071f8:	e000ef34 	.word	0xe000ef34

080071fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	b672      	cpsid	i
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	b662      	cpsie	i
 8007216:	607b      	str	r3, [r7, #4]
}
 8007218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <vPortEnterCritical+0x60>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	4a0e      	ldr	r2, [pc, #56]	; (800725c <vPortEnterCritical+0x60>)
 8007222:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <vPortEnterCritical+0x60>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d111      	bne.n	8007250 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <vPortEnterCritical+0x64>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <vPortEnterCritical+0x54>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	b672      	cpsid	i
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	b662      	cpsie	i
 800724a:	603b      	str	r3, [r7, #0]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <vPortEnterCritical+0x52>
	}
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	2000000c 	.word	0x2000000c
 8007260:	e000ed04 	.word	0xe000ed04

08007264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <vPortExitCritical+0x54>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10c      	bne.n	800728c <vPortExitCritical+0x28>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	b672      	cpsid	i
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	b662      	cpsie	i
 8007286:	607b      	str	r3, [r7, #4]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortExitCritical+0x54>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3b01      	subs	r3, #1
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <vPortExitCritical+0x54>)
 8007294:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <vPortExitCritical+0x54>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <vPortExitCritical+0x46>
 800729e:	2300      	movs	r3, #0
 80072a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	f383 8811 	msr	BASEPRI, r3
}
 80072a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	2000000c 	.word	0x2000000c
 80072bc:	00000000 	.word	0x00000000

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	f01e 0f10 	tst.w	lr, #16
 80072d0:	bf08      	it	eq
 80072d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072e4:	b672      	cpsid	i
 80072e6:	f380 8811 	msr	BASEPRI, r0
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	b662      	cpsie	i
 80072f4:	f7ff fb3e 	bl	8006974 <vTaskSwitchContext>
 80072f8:	f04f 0000 	mov.w	r0, #0
 80072fc:	f380 8811 	msr	BASEPRI, r0
 8007300:	bc09      	pop	{r0, r3}
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	6808      	ldr	r0, [r1, #0]
 8007306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	f01e 0f10 	tst.w	lr, #16
 800730e:	bf08      	it	eq
 8007310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007314:	f380 8809 	msr	PSP, r0
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop

08007320 <pxCurrentTCBConst>:
 8007320:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	b672      	cpsid	i
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	b662      	cpsie	i
 8007342:	607b      	str	r3, [r7, #4]
}
 8007344:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007346:	f7ff fa5b 	bl	8006800 <xTaskIncrementTick>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007350:	4b06      	ldr	r3, [pc, #24]	; (800736c <SysTick_Handler+0x44>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f383 8811 	msr	BASEPRI, r3
}
 8007362:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	e000ed04 	.word	0xe000ed04

08007370 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007374:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <vPortSetupTimerInterrupt+0x34>)
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <vPortSetupTimerInterrupt+0x38>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <vPortSetupTimerInterrupt+0x3c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a0a      	ldr	r2, [pc, #40]	; (80073b0 <vPortSetupTimerInterrupt+0x40>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	099b      	lsrs	r3, r3, #6
 800738c:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <vPortSetupTimerInterrupt+0x44>)
 800738e:	3b01      	subs	r3, #1
 8007390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007392:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <vPortSetupTimerInterrupt+0x34>)
 8007394:	2207      	movs	r2, #7
 8007396:	601a      	str	r2, [r3, #0]
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	e000e010 	.word	0xe000e010
 80073a8:	e000e018 	.word	0xe000e018
 80073ac:	20000000 	.word	0x20000000
 80073b0:	10624dd3 	.word	0x10624dd3
 80073b4:	e000e014 	.word	0xe000e014

080073b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073c8 <vPortEnableVFP+0x10>
 80073bc:	6801      	ldr	r1, [r0, #0]
 80073be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073c2:	6001      	str	r1, [r0, #0]
 80073c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073c6:	bf00      	nop
 80073c8:	e000ed88 	.word	0xe000ed88

080073cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073d2:	f3ef 8305 	mrs	r3, IPSR
 80073d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d916      	bls.n	800740c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073de:	4a19      	ldr	r2, [pc, #100]	; (8007444 <vPortValidateInterruptPriority+0x78>)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <vPortValidateInterruptPriority+0x7c>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	7afa      	ldrb	r2, [r7, #11]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d20c      	bcs.n	800740c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	b672      	cpsid	i
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	b662      	cpsie	i
 8007406:	607b      	str	r3, [r7, #4]
}
 8007408:	bf00      	nop
 800740a:	e7fe      	b.n	800740a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800740c:	4b0f      	ldr	r3, [pc, #60]	; (800744c <vPortValidateInterruptPriority+0x80>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <vPortValidateInterruptPriority+0x84>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d90c      	bls.n	8007436 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	b672      	cpsid	i
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	b662      	cpsie	i
 8007430:	603b      	str	r3, [r7, #0]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <vPortValidateInterruptPriority+0x68>
	}
 8007436:	bf00      	nop
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	e000e3f0 	.word	0xe000e3f0
 8007448:	200006b8 	.word	0x200006b8
 800744c:	e000ed0c 	.word	0xe000ed0c
 8007450:	200006bc 	.word	0x200006bc

08007454 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007460:	f7ff f900 	bl	8006664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007464:	4b5b      	ldr	r3, [pc, #364]	; (80075d4 <pvPortMalloc+0x180>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800746c:	f000 f91a 	bl	80076a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007470:	4b59      	ldr	r3, [pc, #356]	; (80075d8 <pvPortMalloc+0x184>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 8092 	bne.w	80075a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01f      	beq.n	80074c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007484:	2208      	movs	r2, #8
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4413      	add	r3, r2
 800748a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	2b00      	cmp	r3, #0
 8007494:	d016      	beq.n	80074c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f023 0307 	bic.w	r3, r3, #7
 800749c:	3308      	adds	r3, #8
 800749e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <pvPortMalloc+0x70>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	b672      	cpsid	i
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	b662      	cpsie	i
 80074be:	617b      	str	r3, [r7, #20]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d06b      	beq.n	80075a2 <pvPortMalloc+0x14e>
 80074ca:	4b44      	ldr	r3, [pc, #272]	; (80075dc <pvPortMalloc+0x188>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d866      	bhi.n	80075a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074d4:	4b42      	ldr	r3, [pc, #264]	; (80075e0 <pvPortMalloc+0x18c>)
 80074d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074d8:	4b41      	ldr	r3, [pc, #260]	; (80075e0 <pvPortMalloc+0x18c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074de:	e004      	b.n	80074ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d903      	bls.n	80074fc <pvPortMalloc+0xa8>
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f1      	bne.n	80074e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074fc:	4b35      	ldr	r3, [pc, #212]	; (80075d4 <pvPortMalloc+0x180>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007502:	429a      	cmp	r2, r3
 8007504:	d04d      	beq.n	80075a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2208      	movs	r2, #8
 800750c:	4413      	add	r3, r2
 800750e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	2308      	movs	r3, #8
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	429a      	cmp	r2, r3
 8007526:	d921      	bls.n	800756c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00c      	beq.n	8007554 <pvPortMalloc+0x100>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	b672      	cpsid	i
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	b662      	cpsie	i
 800754e:	613b      	str	r3, [r7, #16]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007566:	69b8      	ldr	r0, [r7, #24]
 8007568:	f000 f8fe 	bl	8007768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800756c:	4b1b      	ldr	r3, [pc, #108]	; (80075dc <pvPortMalloc+0x188>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	4a19      	ldr	r2, [pc, #100]	; (80075dc <pvPortMalloc+0x188>)
 8007578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800757a:	4b18      	ldr	r3, [pc, #96]	; (80075dc <pvPortMalloc+0x188>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <pvPortMalloc+0x190>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d203      	bcs.n	800758e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007586:	4b15      	ldr	r3, [pc, #84]	; (80075dc <pvPortMalloc+0x188>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <pvPortMalloc+0x190>)
 800758c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <pvPortMalloc+0x184>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	431a      	orrs	r2, r3
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075a2:	f7ff f86d 	bl	8006680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00c      	beq.n	80075ca <pvPortMalloc+0x176>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <pvPortMalloc+0x174>
	return pvReturn;
 80075ca:	69fb      	ldr	r3, [r7, #28]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3728      	adds	r7, #40	; 0x28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	200042c8 	.word	0x200042c8
 80075d8:	200042d4 	.word	0x200042d4
 80075dc:	200042cc 	.word	0x200042cc
 80075e0:	200042c0 	.word	0x200042c0
 80075e4:	200042d0 	.word	0x200042d0

080075e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d04c      	beq.n	8007694 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075fa:	2308      	movs	r3, #8
 80075fc:	425b      	negs	r3, r3
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4413      	add	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b23      	ldr	r3, [pc, #140]	; (800769c <vPortFree+0xb4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4013      	ands	r3, r2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10c      	bne.n	8007630 <vPortFree+0x48>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	b672      	cpsid	i
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	b662      	cpsie	i
 800762a:	60fb      	str	r3, [r7, #12]
}
 800762c:	bf00      	nop
 800762e:	e7fe      	b.n	800762e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00c      	beq.n	8007652 <vPortFree+0x6a>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	60bb      	str	r3, [r7, #8]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <vPortFree+0xb4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4013      	ands	r3, r2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d019      	beq.n	8007694 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d115      	bne.n	8007694 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	4b0b      	ldr	r3, [pc, #44]	; (800769c <vPortFree+0xb4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007678:	f7fe fff4 	bl	8006664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <vPortFree+0xb8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4413      	add	r3, r2
 8007686:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <vPortFree+0xb8>)
 8007688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800768a:	6938      	ldr	r0, [r7, #16]
 800768c:	f000 f86c 	bl	8007768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007690:	f7fe fff6 	bl	8006680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007694:	bf00      	nop
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200042d4 	.word	0x200042d4
 80076a0:	200042cc 	.word	0x200042cc

080076a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80076ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076b0:	4b27      	ldr	r3, [pc, #156]	; (8007750 <prvHeapInit+0xac>)
 80076b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3307      	adds	r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	4a1f      	ldr	r2, [pc, #124]	; (8007750 <prvHeapInit+0xac>)
 80076d4:	4413      	add	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076dc:	4a1d      	ldr	r2, [pc, #116]	; (8007754 <prvHeapInit+0xb0>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <prvHeapInit+0xb0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076f0:	2208      	movs	r2, #8
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0307 	bic.w	r3, r3, #7
 80076fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4a15      	ldr	r2, [pc, #84]	; (8007758 <prvHeapInit+0xb4>)
 8007704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <prvHeapInit+0xb4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800770e:	4b12      	ldr	r3, [pc, #72]	; (8007758 <prvHeapInit+0xb4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <prvHeapInit+0xb4>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	4a0a      	ldr	r2, [pc, #40]	; (800775c <prvHeapInit+0xb8>)
 8007732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <prvHeapInit+0xbc>)
 800773a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <prvHeapInit+0xc0>)
 800773e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	200006c0 	.word	0x200006c0
 8007754:	200042c0 	.word	0x200042c0
 8007758:	200042c8 	.word	0x200042c8
 800775c:	200042d0 	.word	0x200042d0
 8007760:	200042cc 	.word	0x200042cc
 8007764:	200042d4 	.word	0x200042d4

08007768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007770:	4b28      	ldr	r3, [pc, #160]	; (8007814 <prvInsertBlockIntoFreeList+0xac>)
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e002      	b.n	800777c <prvInsertBlockIntoFreeList+0x14>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	429a      	cmp	r2, r3
 8007784:	d8f7      	bhi.n	8007776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4413      	add	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d108      	bne.n	80077aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	441a      	add	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	441a      	add	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d118      	bne.n	80077f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <prvInsertBlockIntoFreeList+0xb0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d00d      	beq.n	80077e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	441a      	add	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e008      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <prvInsertBlockIntoFreeList+0xb0>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e003      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d002      	beq.n	8007806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	200042c0 	.word	0x200042c0
 8007818:	200042c8 	.word	0x200042c8

0800781c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	b299      	uxth	r1, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1d5a      	adds	r2, r3, #5
 8007838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2303      	movs	r3, #3
 8007840:	f7fb f892 	bl	8002968 <HAL_I2C_Master_Transmit>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8007860:	220f      	movs	r2, #15
 8007862:	2141      	movs	r1, #65	; 0x41
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f80c 	bl	8007882 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	f043 0304 	orr.w	r3, r3, #4
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f81f 	bl	80078b8 <MAX581x_Reference>
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
 800788e:	4613      	mov	r3, r2
 8007890:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007898:	b2da      	uxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	78ba      	ldrb	r2, [r7, #2]
 80078a2:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ffb6 	bl	800781c <MAX581x_WriteCommand>
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff9d 	bl	800781c <MAX581x_WriteCommand>
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
 80078f6:	4613      	mov	r3, r2
 80078f8:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8007900:	883b      	ldrh	r3, [r7, #0]
 8007902:	091b      	lsrs	r3, r3, #4
 8007904:	b29b      	uxth	r3, r3
 8007906:	b2da      	uxtb	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800790c:	883b      	ldrh	r3, [r7, #0]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f023 030f 	bic.w	r3, r3, #15
 8007916:	b2da      	uxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff7d 	bl	800781c <MAX581x_WriteCommand>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
 8007936:	4613      	mov	r3, r2
 8007938:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8007946:	883b      	ldrh	r3, [r7, #0]
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	b29b      	uxth	r3, r3
 800794c:	b2da      	uxtb	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 8007952:	883b      	ldrh	r3, [r7, #0]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f023 030f 	bic.w	r3, r3, #15
 800795c:	b2da      	uxtb	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ff5a 	bl	800781c <MAX581x_WriteCommand>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8007970:	b084      	sub	sp, #16
 8007972:	b4b0      	push	{r4, r5, r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	f107 001c 	add.w	r0, r7, #28
 800797e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	461d      	mov	r5, r3
 8007986:	f107 041c 	add.w	r4, r7, #28
 800798a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800798c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800798e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007992:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800799c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid->error = 0;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lastMeasure = 0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->integral = 0;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->enable = enable;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bcb0      	pop	{r4, r5, r7}
 80079d2:	b004      	add	sp, #16
 80079d4:	4770      	bx	lr

080079d6 <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	ed87 0a02 	vstr	s0, [r7, #8]
 80079e2:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d006      	beq.n	80079fe <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	629a      	str	r2, [r3, #40]	; 0x28
		pid->output = reference;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	625a      	str	r2, [r3, #36]	; 0x24
		return;
 80079fc:	e085      	b.n	8007b0a <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	ed93 7a07 	vldr	s14, [r3, #28]
 8007a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	edd3 6a08 	vldr	s13, [r3, #32]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	if (pid->integral > pid->params.integralMax)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	edd3 7a05 	vldr	s15, [r3, #20]
 8007a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	dd04      	ble.n	8007a58 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	695a      	ldr	r2, [r3, #20]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a56:	e014      	b.n	8007a82 <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	edd3 7a05 	vldr	s15, [r3, #20]
 8007a64:	eef1 7a67 	vneg.f32	s15, s15
 8007a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a70:	d507      	bpl.n	8007a82 <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	edd3 7a05 	vldr	s15, [r3, #20]
 8007a78:	eef1 7a67 	vneg.f32	s15, s15
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007a88:	ed97 7a01 	vldr	s14, [r7, #4]
 8007a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a90:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	ed93 7a08 	vldr	s14, [r3, #32]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	edd3 7a00 	vldr	s15, [r3]
 8007aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	edd3 6a02 	vldr	s13, [r3, #8]
 8007ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (pid->output > pid->params.outputMax)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ada:	dd04      	ble.n	8007ae6 <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8007ae4:	e00e      	b.n	8007b04 <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	edd3 7a04 	vldr	s15, [r3, #16]
 8007af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afa:	d503      	bpl.n	8007b04 <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24
	}

	pid->lastMeasure = measure;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8007b20:	887b      	ldrh	r3, [r7, #2]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fa fe74 	bl	8002812 <HAL_GPIO_TogglePin>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <Board_GetID>:

uint16_t Board_GetID()
{
 8007b34:	b598      	push	{r3, r4, r7, lr}
 8007b36:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8007b38:	2102      	movs	r1, #2
 8007b3a:	481b      	ldr	r0, [pc, #108]	; (8007ba8 <Board_GetID+0x74>)
 8007b3c:	f7fa fe38 	bl	80027b0 <HAL_GPIO_ReadPin>
 8007b40:	4603      	mov	r3, r0
 8007b42:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8007b44:	2101      	movs	r1, #1
 8007b46:	4818      	ldr	r0, [pc, #96]	; (8007ba8 <Board_GetID+0x74>)
 8007b48:	f7fa fe32 	bl	80027b0 <HAL_GPIO_ReadPin>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	005b      	lsls	r3, r3, #1
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8007b50:	b21b      	sxth	r3, r3
 8007b52:	4323      	orrs	r3, r4
 8007b54:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8007b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b5a:	4814      	ldr	r0, [pc, #80]	; (8007bac <Board_GetID+0x78>)
 8007b5c:	f7fa fe28 	bl	80027b0 <HAL_GPIO_ReadPin>
 8007b60:	4603      	mov	r3, r0
 8007b62:	009b      	lsls	r3, r3, #2
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8007b64:	b21b      	sxth	r3, r3
 8007b66:	4323      	orrs	r3, r4
 8007b68:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	4810      	ldr	r0, [pc, #64]	; (8007bb0 <Board_GetID+0x7c>)
 8007b6e:	f7fa fe1f 	bl	80027b0 <HAL_GPIO_ReadPin>
 8007b72:	4603      	mov	r3, r0
 8007b74:	00db      	lsls	r3, r3, #3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8007b76:	b21b      	sxth	r3, r3
 8007b78:	4323      	orrs	r3, r4
 8007b7a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 8007b7c:	2110      	movs	r1, #16
 8007b7e:	480d      	ldr	r0, [pc, #52]	; (8007bb4 <Board_GetID+0x80>)
 8007b80:	f7fa fe16 	bl	80027b0 <HAL_GPIO_ReadPin>
 8007b84:	4603      	mov	r3, r0
 8007b86:	011b      	lsls	r3, r3, #4
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	4323      	orrs	r3, r4
 8007b8c:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 8007b8e:	2110      	movs	r1, #16
 8007b90:	4809      	ldr	r0, [pc, #36]	; (8007bb8 <Board_GetID+0x84>)
 8007b92:	f7fa fe0d 	bl	80027b0 <HAL_GPIO_ReadPin>
 8007b96:	4603      	mov	r3, r0
 8007b98:	015b      	lsls	r3, r3, #5
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 8007b9a:	b21b      	sxth	r3, r3
 8007b9c:	4323      	orrs	r3, r4
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	b29b      	uxth	r3, r3
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	bd98      	pop	{r3, r4, r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40022400 	.word	0x40022400
 8007bac:	40022000 	.word	0x40022000
 8007bb0:	40020400 	.word	0x40020400
 8007bb4:	40020800 	.word	0x40020800
 8007bb8:	40021c00 	.word	0x40021c00

08007bbc <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7c1b      	ldrb	r3, [r3, #16]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d002      	beq.n	8007bd6 <Encoder_Update+0x1a>
		return 0;
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	e022      	b.n	8007c1c <Encoder_Update+0x60>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	81fb      	strh	r3, [r7, #14]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 8007bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bea:	eef0 7ae7 	vabs.f32	s15, s15
 8007bee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	d502      	bpl.n	8007c02 <Encoder_Update+0x46>
 8007bfc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007c30 <Encoder_Update+0x74>
 8007c00:	e005      	b.n	8007c0e <Encoder_Update+0x52>
 8007c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c0e:	edc7 7a02 	vstr	s15, [r7, #8]

	*encoderDevice->count = 0;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]

	return encPosF;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
}
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eeb0 0a67 	vmov.f32	s0, s15
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	00000000 	.word	0x00000000

08007c34 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	4613      	mov	r3, r2
 8007c42:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	78ba      	ldrb	r2, [r7, #2]
 8007c48:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	motorDevice->outputID = motorID;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	motorDevice->refSpeed = 0;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	671a      	str	r2, [r3, #112]	; 0x70
	motorDevice->measSpeed = 0;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	675a      	str	r2, [r3, #116]	; 0x74
	Motor_Enable(motorDevice, enable);
 8007c64:	78bb      	ldrb	r3, [r7, #2]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f86b 	bl	8007d44 <Motor_Enable>
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed * WHEEL_GEAR_RATIO * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	ed87 0a01 	vstr	s0, [r7, #4]
	if(!motorDevice->enable)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d108      	bne.n	8007ca2 <Motor_CLDrive+0x2a>
	{
		MAX581x_Code(dacDevice, motorDevice->outputID, 0);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007c96:	2200      	movs	r2, #0
 8007c98:	4619      	mov	r1, r3
 8007c9a:	68b8      	ldr	r0, [r7, #8]
 8007c9c:	f7ff fe25 	bl	80078ea <MAX581x_Code>
		return;
 8007ca0:	e047      	b.n	8007d32 <Motor_CLDrive+0xba>
	}
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 8007ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ca6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007d40 <Motor_CLDrive+0xc8>
 8007caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007cb2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8007d38 <Motor_CLDrive+0xc0>
 8007cb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007cba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7ff ff71 	bl	8007bbc <Encoder_Update>
 8007cda:	eef0 7a40 	vmov.f32	s15, s0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8007cf2:	eef0 0a47 	vmov.f32	s1, s14
 8007cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7ff fe6b 	bl	80079d6 <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007d06:	eef0 7ae7 	vabs.f32	s15, s15
 8007d0a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d16:	d503      	bpl.n	8007d20 <Motor_CLDrive+0xa8>
	{
		motorDevice->pid.output = 0.0;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007d26:	eeb0 0a67 	vmov.f32	s0, s15
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f84d 	bl	8007dcc <Motor_SetVoltage>
}
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e39549a5 	.word	0xe39549a5
 8007d3c:	40653cb6 	.word	0x40653cb6
 8007d40:	46c00000 	.word	0x46c00000

08007d44 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	f7fa fd38 	bl	80027e0 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 8007d70:	e008      	b.n	8007d84 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f7fa fd2e 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d109      	bne.n	8007db2 <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007da8:	2200      	movs	r2, #0
 8007daa:	4619      	mov	r1, r3
 8007dac:	f7fa fd18 	bl	80027e0 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 8007db0:	e008      	b.n	8007dc4 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	f7fa fd0e 	bl	80027e0 <HAL_GPIO_WritePin>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8007dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de6:	db1d      	blt.n	8007e24 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007df2:	2201      	movs	r2, #1
 8007df4:	4619      	mov	r1, r3
 8007df6:	f7fa fcf3 	bl	80027e0 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8007dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e02:	ee17 3a90 	vmov	r3, s15
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68b8      	ldr	r0, [r7, #8]
 8007e1e:	f7ff fd84 	bl	800792a <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 8007e22:	e01e      	b.n	8007e62 <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7fa fcd5 	bl	80027e0 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8007e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8007e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e42:	ee17 3a90 	vmov	r3, s15
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	68b8      	ldr	r0, [r7, #8]
 8007e5e:	f7ff fd64 	bl	800792a <MAX581x_CodeLoad>
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <__errno>:
 8007e6c:	4b01      	ldr	r3, [pc, #4]	; (8007e74 <__errno+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000010 	.word	0x20000010

08007e78 <__libc_init_array>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	4d0d      	ldr	r5, [pc, #52]	; (8007eb0 <__libc_init_array+0x38>)
 8007e7c:	4c0d      	ldr	r4, [pc, #52]	; (8007eb4 <__libc_init_array+0x3c>)
 8007e7e:	1b64      	subs	r4, r4, r5
 8007e80:	10a4      	asrs	r4, r4, #2
 8007e82:	2600      	movs	r6, #0
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	d109      	bne.n	8007e9c <__libc_init_array+0x24>
 8007e88:	4d0b      	ldr	r5, [pc, #44]	; (8007eb8 <__libc_init_array+0x40>)
 8007e8a:	4c0c      	ldr	r4, [pc, #48]	; (8007ebc <__libc_init_array+0x44>)
 8007e8c:	f000 f854 	bl	8007f38 <_init>
 8007e90:	1b64      	subs	r4, r4, r5
 8007e92:	10a4      	asrs	r4, r4, #2
 8007e94:	2600      	movs	r6, #0
 8007e96:	42a6      	cmp	r6, r4
 8007e98:	d105      	bne.n	8007ea6 <__libc_init_array+0x2e>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea0:	4798      	blx	r3
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7ee      	b.n	8007e84 <__libc_init_array+0xc>
 8007ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eaa:	4798      	blx	r3
 8007eac:	3601      	adds	r6, #1
 8007eae:	e7f2      	b.n	8007e96 <__libc_init_array+0x1e>
 8007eb0:	08007ff8 	.word	0x08007ff8
 8007eb4:	08007ff8 	.word	0x08007ff8
 8007eb8:	08007ff8 	.word	0x08007ff8
 8007ebc:	08007ffc 	.word	0x08007ffc

08007ec0 <memcpy>:
 8007ec0:	440a      	add	r2, r1
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec8:	d100      	bne.n	8007ecc <memcpy+0xc>
 8007eca:	4770      	bx	lr
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed6:	4291      	cmp	r1, r2
 8007ed8:	d1f9      	bne.n	8007ece <memcpy+0xe>
 8007eda:	bd10      	pop	{r4, pc}

08007edc <memset>:
 8007edc:	4402      	add	r2, r0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d100      	bne.n	8007ee6 <memset+0xa>
 8007ee4:	4770      	bx	lr
 8007ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eea:	e7f9      	b.n	8007ee0 <memset+0x4>
 8007eec:	0000      	movs	r0, r0
	...

08007ef0 <sqrt>:
 8007ef0:	b508      	push	{r3, lr}
 8007ef2:	ed2d 8b04 	vpush	{d8-d9}
 8007ef6:	eeb0 8b40 	vmov.f64	d8, d0
 8007efa:	f000 f819 	bl	8007f30 <__ieee754_sqrt>
 8007efe:	eeb4 8b48 	vcmp.f64	d8, d8
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	d60c      	bvs.n	8007f22 <sqrt+0x32>
 8007f08:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8007f28 <sqrt+0x38>
 8007f0c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f14:	d505      	bpl.n	8007f22 <sqrt+0x32>
 8007f16:	f7ff ffa9 	bl	8007e6c <__errno>
 8007f1a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8007f1e:	2321      	movs	r3, #33	; 0x21
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	ecbd 8b04 	vpop	{d8-d9}
 8007f26:	bd08      	pop	{r3, pc}
	...

08007f30 <__ieee754_sqrt>:
 8007f30:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8007f34:	4770      	bx	lr
	...

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
