
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b380  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800b580  0800b580  0001b580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b838  0800b838  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b840  0800b840  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b840  0800b840  0001b840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004554  20000094  0800b8dc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045e8  0800b8dc  000245e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023c24  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000500c  00000000  00000000  00043d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00048d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c1  00000000  00000000  0004a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ddf6  00000000  00000000  0004bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002709a  00000000  00000000  00079d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109835  00000000  00000000  000a0db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a8  00000000  00000000  001aa5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001b1d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000094 	.word	0x20000094
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b568 	.word	0x0800b568

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000098 	.word	0x20000098
 800023c:	0800b568 	.word	0x0800b568

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <BallDetectorFunction>:
#include "ball_detector_task.h"
#include "system_globals.h"
#include "vl6180x.h"
#include <string.h>

void BallDetectorFunction(void const * argument) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8000544:	2229      	movs	r2, #41	; 0x29
 8000546:	4928      	ldr	r1, [pc, #160]	; (80005e8 <BallDetectorFunction+0xac>)
 8000548:	4828      	ldr	r0, [pc, #160]	; (80005ec <BallDetectorFunction+0xb0>)
 800054a:	f00a f842 	bl	800a5d2 <VL6180X_Init>
    ball_range = VL6180X_ReadRange(&range_sensor);
 800054e:	4827      	ldr	r0, [pc, #156]	; (80005ec <BallDetectorFunction+0xb0>)
 8000550:	f00a f941 	bl	800a7d6 <VL6180X_ReadRange>
 8000554:	4603      	mov	r3, r0
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <BallDetectorFunction+0xb4>)
 800055a:	801a      	strh	r2, [r3, #0]
    memset(ball_meas_set, ball_range, 10);
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <BallDetectorFunction+0xb4>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	220a      	movs	r2, #10
 8000562:	4619      	mov	r1, r3
 8000564:	4823      	ldr	r0, [pc, #140]	; (80005f4 <BallDetectorFunction+0xb8>)
 8000566:	f00a f963 	bl	800a830 <memset>
    for (;;) {
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 800056a:	4820      	ldr	r0, [pc, #128]	; (80005ec <BallDetectorFunction+0xb0>)
 800056c:	f00a f933 	bl	800a7d6 <VL6180X_ReadRange>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <BallDetectorFunction+0xb8>)
 8000576:	701a      	strb	r2, [r3, #0]
        ball_accum = ball_meas_set[0];
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <BallDetectorFunction+0xb8>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <BallDetectorFunction+0xbc>)
 8000580:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 9; i > 0; i--) {
 8000582:	2309      	movs	r3, #9
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	e013      	b.n	80005b0 <BallDetectorFunction+0x74>
            ball_accum += ball_meas_set[i];
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <BallDetectorFunction+0xb8>)
 800058c:	5cd3      	ldrb	r3, [r2, r3]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <BallDetectorFunction+0xbc>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	4413      	add	r3, r2
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <BallDetectorFunction+0xbc>)
 800059a:	801a      	strh	r2, [r3, #0]
            ball_meas_set[i] = ball_meas_set[i - 1];
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	4914      	ldr	r1, [pc, #80]	; (80005f4 <BallDetectorFunction+0xb8>)
 80005a4:	5c89      	ldrb	r1, [r1, r2]
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <BallDetectorFunction+0xb8>)
 80005a8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 9; i > 0; i--) {
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1e8      	bne.n	8000588 <BallDetectorFunction+0x4c>
        }
        ball_range = ball_accum / 10;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <BallDetectorFunction+0xbc>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <BallDetectorFunction+0xc0>)
 80005bc:	fba2 2303 	umull	r2, r3, r2, r3
 80005c0:	08db      	lsrs	r3, r3, #3
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <BallDetectorFunction+0xb4>)
 80005c6:	801a      	strh	r2, [r3, #0]
        if (ball_range < VL6180X_THRESHOLD) {
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <BallDetectorFunction+0xb4>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2b40      	cmp	r3, #64	; 0x40
 80005ce:	d803      	bhi.n	80005d8 <BallDetectorFunction+0x9c>
            ball_posession = 0x01;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <BallDetectorFunction+0xc4>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e002      	b.n	80005de <BallDetectorFunction+0xa2>
        } else {
            ball_posession = 0x00;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <BallDetectorFunction+0xc4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
        }
        osDelay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f006 faf9 	bl	8006bd6 <osDelay>
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 80005e4:	e7c1      	b.n	800056a <BallDetectorFunction+0x2e>
 80005e6:	bf00      	nop
 80005e8:	20000490 	.word	0x20000490
 80005ec:	200003b4 	.word	0x200003b4
 80005f0:	200003c6 	.word	0x200003c6
 80005f4:	200003cc 	.word	0x200003cc
 80005f8:	200003c8 	.word	0x200003c8
 80005fc:	cccccccd 	.word	0xcccccccd
 8000600:	200003c4 	.word	0x200003c4

08000604 <DriveFunction>:
#ifndef KICKER_START
#define KICKER_START 2
#endif

void DriveFunction(void const * argument)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b098      	sub	sp, #96	; 0x60
 8000608:	af06      	add	r7, sp, #24
 800060a:	6078      	str	r0, [r7, #4]
    // Init PID sampler
    uint32_t timeToWait = osKernelSysTick();
 800060c:	f006 faac 	bl	8006b68 <osKernelSysTick>
 8000610:	4603      	mov	r3, r0
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
    // Init robot_id
    robot_id = Board_GetID();
 8000614:	f009 f9c6 	bl	80099a4 <Board_GetID>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	4bbd      	ldr	r3, [pc, #756]	; (8000914 <DriveFunction+0x310>)
 800061e:	801a      	strh	r2, [r3, #0]

    // Init wheels motors DAC: 2.0[V] ref
    MAX581x_Handler_t driveDAC;
    MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 8000620:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000624:	2202      	movs	r2, #2
 8000626:	49bc      	ldr	r1, [pc, #752]	; (8000918 <DriveFunction+0x314>)
 8000628:	4618      	mov	r0, r3
 800062a:	f009 f847 	bl	80096bc <MAX581x_Init>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 800062e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f009 f88f 	bl	800975a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 800063c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f009 f888 	bl	800975a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 800064a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800064e:	2200      	movs	r2, #0
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f009 f881 	bl	800975a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 8000658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800065c:	2200      	movs	r2, #0
 800065e:	2103      	movs	r1, #3
 8000660:	4618      	mov	r0, r3
 8000662:	f009 f87a 	bl	800975a <MAX581x_Code>

    // Init dribbler motor DAC: 2.0[V] ref
    MAX581x_Handler_t dribblerDAC;
    MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 8000666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066a:	2202      	movs	r2, #2
 800066c:	49ab      	ldr	r1, [pc, #684]	; (800091c <DriveFunction+0x318>)
 800066e:	4618      	mov	r0, r3
 8000670:	f009 f824 	bl	80096bc <MAX581x_Init>
    MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 8000674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f009 f86c 	bl	800975a <MAX581x_Code>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	48a5      	ldr	r0, [pc, #660]	; (8000920 <DriveFunction+0x31c>)
 800068a:	f002 fe4b 	bl	8003324 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	48a3      	ldr	r0, [pc, #652]	; (8000920 <DriveFunction+0x31c>)
 8000694:	f002 fe46 	bl	8003324 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	48a0      	ldr	r0, [pc, #640]	; (8000920 <DriveFunction+0x31c>)
 800069e:	f002 fe41 	bl	8003324 <HAL_GPIO_WritePin>

    // Config motors GPIO and TIM
    // Motor 1
    motor[0].enablePin.GPIOx = GPIOA;
 80006a2:	4ba0      	ldr	r3, [pc, #640]	; (8000924 <DriveFunction+0x320>)
 80006a4:	4aa0      	ldr	r2, [pc, #640]	; (8000928 <DriveFunction+0x324>)
 80006a6:	655a      	str	r2, [r3, #84]	; 0x54
    motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 80006a8:	4b9e      	ldr	r3, [pc, #632]	; (8000924 <DriveFunction+0x320>)
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    motor[0].dirPin.GPIOx = GPIOA;
 80006b2:	4b9c      	ldr	r3, [pc, #624]	; (8000924 <DriveFunction+0x320>)
 80006b4:	4a9c      	ldr	r2, [pc, #624]	; (8000928 <DriveFunction+0x324>)
 80006b6:	65da      	str	r2, [r3, #92]	; 0x5c
    motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 80006b8:	4b9a      	ldr	r3, [pc, #616]	; (8000924 <DriveFunction+0x320>)
 80006ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    motor[0].brakePin.GPIOx = GPIOA;
 80006c2:	4b98      	ldr	r3, [pc, #608]	; (8000924 <DriveFunction+0x320>)
 80006c4:	4a98      	ldr	r2, [pc, #608]	; (8000928 <DriveFunction+0x324>)
 80006c6:	665a      	str	r2, [r3, #100]	; 0x64
    motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 80006c8:	4b96      	ldr	r3, [pc, #600]	; (8000924 <DriveFunction+0x320>)
 80006ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    motor[0].encoder.count = &TIM3->CNT;
 80006d2:	4b94      	ldr	r3, [pc, #592]	; (8000924 <DriveFunction+0x320>)
 80006d4:	4a95      	ldr	r2, [pc, #596]	; (800092c <DriveFunction+0x328>)
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
    motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 80006d8:	4b95      	ldr	r3, [pc, #596]	; (8000930 <DriveFunction+0x32c>)
 80006da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006dc:	ee07 3a90 	vmov	s15, r3
 80006e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80006e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ec:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000934 <DriveFunction+0x330>
 80006f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f4:	4b8b      	ldr	r3, [pc, #556]	; (8000924 <DriveFunction+0x320>)
 80006f6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 80006fa:	4b8a      	ldr	r3, [pc, #552]	; (8000924 <DriveFunction+0x320>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8000702:	4b88      	ldr	r3, [pc, #544]	; (8000924 <DriveFunction+0x320>)
 8000704:	4a8c      	ldr	r2, [pc, #560]	; (8000938 <DriveFunction+0x334>)
 8000706:	64da      	str	r2, [r3, #76]	; 0x4c
    TIM3->CR1 = TIM_CR1_CEN;
 8000708:	4b89      	ldr	r3, [pc, #548]	; (8000930 <DriveFunction+0x32c>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]

    // Motor 2
    motor[1].enablePin.GPIOx = GPIOC;
 800070e:	4b85      	ldr	r3, [pc, #532]	; (8000924 <DriveFunction+0x320>)
 8000710:	4a8a      	ldr	r2, [pc, #552]	; (800093c <DriveFunction+0x338>)
 8000712:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 8000716:	4b83      	ldr	r3, [pc, #524]	; (8000924 <DriveFunction+0x320>)
 8000718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
    motor[1].dirPin.GPIOx = GPIOC;
 8000720:	4b80      	ldr	r3, [pc, #512]	; (8000924 <DriveFunction+0x320>)
 8000722:	4a86      	ldr	r2, [pc, #536]	; (800093c <DriveFunction+0x338>)
 8000724:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8000728:	4b7e      	ldr	r3, [pc, #504]	; (8000924 <DriveFunction+0x320>)
 800072a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800072e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    motor[1].brakePin.GPIOx = GPIOD;
 8000732:	4b7c      	ldr	r3, [pc, #496]	; (8000924 <DriveFunction+0x320>)
 8000734:	4a82      	ldr	r2, [pc, #520]	; (8000940 <DriveFunction+0x33c>)
 8000736:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 800073a:	4b7a      	ldr	r3, [pc, #488]	; (8000924 <DriveFunction+0x320>)
 800073c:	2201      	movs	r2, #1
 800073e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
    motor[1].encoder.count = &TIM8->CNT;
 8000742:	4b78      	ldr	r3, [pc, #480]	; (8000924 <DriveFunction+0x320>)
 8000744:	4a7f      	ldr	r2, [pc, #508]	; (8000944 <DriveFunction+0x340>)
 8000746:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 800074a:	4b7f      	ldr	r3, [pc, #508]	; (8000948 <DriveFunction+0x344>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000756:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800075a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800075e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000934 <DriveFunction+0x330>
 8000762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000766:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <DriveFunction+0x320>)
 8000768:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
    motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 800076c:	4b6d      	ldr	r3, [pc, #436]	; (8000924 <DriveFunction+0x320>)
 800076e:	2201      	movs	r2, #1
 8000770:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8000774:	4b6b      	ldr	r3, [pc, #428]	; (8000924 <DriveFunction+0x320>)
 8000776:	4a70      	ldr	r2, [pc, #448]	; (8000938 <DriveFunction+0x334>)
 8000778:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    TIM8->CR1 = TIM_CR1_CEN;
 800077c:	4b72      	ldr	r3, [pc, #456]	; (8000948 <DriveFunction+0x344>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]

    // Motor 3
    motor[2].enablePin.GPIOx = GPIOK;
 8000782:	4b68      	ldr	r3, [pc, #416]	; (8000924 <DriveFunction+0x320>)
 8000784:	4a71      	ldr	r2, [pc, #452]	; (800094c <DriveFunction+0x348>)
 8000786:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 800078a:	4b66      	ldr	r3, [pc, #408]	; (8000924 <DriveFunction+0x320>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    motor[2].dirPin.GPIOx = GPIOG;
 8000792:	4b64      	ldr	r3, [pc, #400]	; (8000924 <DriveFunction+0x320>)
 8000794:	4a6e      	ldr	r2, [pc, #440]	; (8000950 <DriveFunction+0x34c>)
 8000796:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 800079a:	4b62      	ldr	r3, [pc, #392]	; (8000924 <DriveFunction+0x320>)
 800079c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007a0:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    motor[2].brakePin.GPIOx = GPIOK;
 80007a4:	4b5f      	ldr	r3, [pc, #380]	; (8000924 <DriveFunction+0x320>)
 80007a6:	4a69      	ldr	r2, [pc, #420]	; (800094c <DriveFunction+0x348>)
 80007a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 80007ac:	4b5d      	ldr	r3, [pc, #372]	; (8000924 <DriveFunction+0x320>)
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    motor[2].encoder.count = &TIM2->CNT;
 80007b4:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <DriveFunction+0x320>)
 80007b6:	4a67      	ldr	r2, [pc, #412]	; (8000954 <DriveFunction+0x350>)
 80007b8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 80007bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007ca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80007ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007d2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000934 <DriveFunction+0x330>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	4b52      	ldr	r3, [pc, #328]	; (8000924 <DriveFunction+0x320>)
 80007dc:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
    motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 80007e0:	4b50      	ldr	r3, [pc, #320]	; (8000924 <DriveFunction+0x320>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80007e8:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <DriveFunction+0x320>)
 80007ea:	4a53      	ldr	r2, [pc, #332]	; (8000938 <DriveFunction+0x334>)
 80007ec:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    TIM2->CR1 = TIM_CR1_CEN;
 80007f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]

    // Motor 4
    motor[3].enablePin.GPIOx = GPIOF;
 80007f8:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <DriveFunction+0x320>)
 80007fa:	4a57      	ldr	r2, [pc, #348]	; (8000958 <DriveFunction+0x354>)
 80007fc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 8000800:	4b48      	ldr	r3, [pc, #288]	; (8000924 <DriveFunction+0x320>)
 8000802:	2220      	movs	r2, #32
 8000804:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
    motor[3].dirPin.GPIOx = GPIOF;
 8000808:	4b46      	ldr	r3, [pc, #280]	; (8000924 <DriveFunction+0x320>)
 800080a:	4a53      	ldr	r2, [pc, #332]	; (8000958 <DriveFunction+0x354>)
 800080c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 8000810:	4b44      	ldr	r3, [pc, #272]	; (8000924 <DriveFunction+0x320>)
 8000812:	2208      	movs	r2, #8
 8000814:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
    motor[3].brakePin.GPIOx = GPIOF;
 8000818:	4b42      	ldr	r3, [pc, #264]	; (8000924 <DriveFunction+0x320>)
 800081a:	4a4f      	ldr	r2, [pc, #316]	; (8000958 <DriveFunction+0x354>)
 800081c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 8000820:	4b40      	ldr	r3, [pc, #256]	; (8000924 <DriveFunction+0x320>)
 8000822:	2210      	movs	r2, #16
 8000824:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
    motor[3].encoder.count = &TIM5->CNT;
 8000828:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <DriveFunction+0x320>)
 800082a:	4a4c      	ldr	r2, [pc, #304]	; (800095c <DriveFunction+0x358>)
 800082c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8000830:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <DriveFunction+0x35c>)
 8000832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000844:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000934 <DriveFunction+0x330>
 8000848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084c:	4b35      	ldr	r3, [pc, #212]	; (8000924 <DriveFunction+0x320>)
 800084e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
    motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 8000852:	4b34      	ldr	r3, [pc, #208]	; (8000924 <DriveFunction+0x320>)
 8000854:	2201      	movs	r2, #1
 8000856:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
    motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <DriveFunction+0x320>)
 800085c:	4a36      	ldr	r2, [pc, #216]	; (8000938 <DriveFunction+0x334>)
 800085e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    TIM5->CR1 = TIM_CR1_CEN;
 8000862:	4b3f      	ldr	r3, [pc, #252]	; (8000960 <DriveFunction+0x35c>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]

    // Config PID
    PID_Params_t pidParams;
    pidParams.Kp = 12.0f;
 8000868:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <DriveFunction+0x360>)
 800086a:	60fb      	str	r3, [r7, #12]
    pidParams.Ki = 4.5f;
 800086c:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <DriveFunction+0x364>)
 800086e:	613b      	str	r3, [r7, #16]
    pidParams.Kd = 0.0f;
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
    pidParams.outputMax = (float)(4095.0f);
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <DriveFunction+0x368>)
 8000878:	61bb      	str	r3, [r7, #24]
    pidParams.outputMin = (float)(-4095.0f);
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <DriveFunction+0x36c>)
 800087c:	61fb      	str	r3, [r7, #28]
    pidParams.integralMax = pidParams.outputMax / 5.0f;
 800087e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000882:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800088a:	edc7 7a08 	vstr	s15, [r7, #32]
    pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <DriveFunction+0x370>)
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

    // Enable motors and disable brake
    for (uint8_t i = 0; i < 4; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000898:	e034      	b.n	8000904 <DriveFunction+0x300>
    {
        Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 800089a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800089e:	4613      	mov	r3, r2
 80008a0:	015b      	lsls	r3, r3, #5
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <DriveFunction+0x320>)
 80008a8:	4413      	add	r3, r2
 80008aa:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80008ae:	2201      	movs	r2, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f009 f919 	bl	8009ae8 <Motor_Init>
        Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 80008b6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80008ba:	4613      	mov	r3, r2
 80008bc:	015b      	lsls	r3, r3, #5
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <DriveFunction+0x320>)
 80008c4:	4413      	add	r3, r2
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f009 f9a1 	bl	8009c10 <Motor_SetBrake>
        PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 80008ce:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80008d2:	4613      	mov	r3, r2
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <DriveFunction+0x320>)
 80008dc:	189d      	adds	r5, r3, r2
 80008de:	2301      	movs	r3, #1
 80008e0:	9304      	str	r3, [sp, #16]
 80008e2:	466c      	mov	r4, sp
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008f4:	4628      	mov	r0, r5
 80008f6:	f008 ff73 	bl	80097e0 <PID_Init>
    for (uint8_t i = 0; i < 4; i++)
 80008fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008fe:	3301      	adds	r3, #1
 8000900:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000908:	2b03      	cmp	r3, #3
 800090a:	d9c6      	bls.n	800089a <DriveFunction+0x296>
    }

    // Infinite loop
    for(;;)
    {
        for (uint8_t i = 0; i < 4; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000912:	e059      	b.n	80009c8 <DriveFunction+0x3c4>
 8000914:	200000fc 	.word	0x200000fc
 8000918:	200003e8 	.word	0x200003e8
 800091c:	2000043c 	.word	0x2000043c
 8000920:	40022400 	.word	0x40022400
 8000924:	200001a8 	.word	0x200001a8
 8000928:	40020000 	.word	0x40020000
 800092c:	40000424 	.word	0x40000424
 8000930:	40000400 	.word	0x40000400
 8000934:	45000000 	.word	0x45000000
 8000938:	3f714639 	.word	0x3f714639
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40010424 	.word	0x40010424
 8000948:	40010400 	.word	0x40010400
 800094c:	40022800 	.word	0x40022800
 8000950:	40021800 	.word	0x40021800
 8000954:	40000024 	.word	0x40000024
 8000958:	40021400 	.word	0x40021400
 800095c:	40000c24 	.word	0x40000c24
 8000960:	40000c00 	.word	0x40000c00
 8000964:	41400000 	.word	0x41400000
 8000968:	40900000 	.word	0x40900000
 800096c:	457ff000 	.word	0x457ff000
 8000970:	c57ff000 	.word	0xc57ff000
 8000974:	3a83126f 	.word	0x3a83126f
        {
            // Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine
            Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 8000978:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800097c:	4613      	mov	r3, r2
 800097e:	015b      	lsls	r3, r3, #5
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <DriveFunction+0x424>)
 8000986:	441a      	add	r2, r3
 8000988:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800098c:	4927      	ldr	r1, [pc, #156]	; (8000a2c <DriveFunction+0x428>)
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	440b      	add	r3, r1
 8000992:	edd3 7a00 	vldr	s15, [r3]
 8000996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099a:	eeb0 0a67 	vmov.f32	s0, s15
 800099e:	4619      	mov	r1, r3
 80009a0:	4610      	mov	r0, r2
 80009a2:	f009 f8c3 	bl	8009b2c <Motor_CLDrive>
            // TODO: make dribbler files, variable speeds
            MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <DriveFunction+0x42c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <DriveFunction+0x430>)
 80009ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f008 fece 	bl	800975a <MAX581x_Code>
        for (uint8_t i = 0; i < 4; i++)
 80009be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009c2:	3301      	adds	r3, #1
 80009c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80009c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d9d3      	bls.n	8000978 <DriveFunction+0x374>
        }

        if(kick_sel && kick_flag == KICKER_CHARGED) {
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <DriveFunction+0x434>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d019      	beq.n	8000a0c <DriveFunction+0x408>
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <DriveFunction+0x438>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d115      	bne.n	8000a0c <DriveFunction+0x408>
            osMutexWait(kickFlagHandle, osWaitForever);
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <DriveFunction+0x43c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	4618      	mov	r0, r3
 80009ea:	f006 f915 	bl	8006c18 <osMutexWait>
            kick_flag = KICKER_START;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <DriveFunction+0x438>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
            osMutexRelease(kickFlagHandle);
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <DriveFunction+0x43c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 f95b 	bl	8006cb4 <osMutexRelease>
            osMessagePut(kickQueueHandle, 0, 0);
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <DriveFunction+0x440>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f006 f99c 	bl	8006d44 <osMessagePut>
        }

        osMessagePut(nrf24CheckHandle, 0, 0);
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <DriveFunction+0x444>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f006 f995 	bl	8006d44 <osMessagePut>
        osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 8000a1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f006 fa43 	bl	8006eac <osDelayUntil>
        for (uint8_t i = 0; i < 4; i++)
 8000a26:	e771      	b.n	800090c <DriveFunction+0x308>
 8000a28:	200001a8 	.word	0x200001a8
 8000a2c:	20000164 	.word	0x20000164
 8000a30:	200003a4 	.word	0x200003a4
 8000a34:	0800b620 	.word	0x0800b620
 8000a38:	200003a5 	.word	0x200003a5
 8000a3c:	200003a6 	.word	0x200003a6
 8000a40:	200003b0 	.word	0x200003b0
 8000a44:	200003ac 	.word	0x200003ac
 8000a48:	2000015c 	.word	0x2000015c

08000a4c <setSpeed>:
    }
}

void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]

	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8000a58:	4bb2      	ldr	r3, [pc, #712]	; (8000d24 <setSpeed+0x2d8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	4bb1      	ldr	r3, [pc, #708]	; (8000d24 <setSpeed+0x2d8>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F))/100.0f  : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F))/100.0f ;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3301      	adds	r3, #1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da16      	bge.n	8000a9e <setSpeed+0x52>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3304      	adds	r3, #4
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a86:	4313      	orrs	r3, r2
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a90:	eeb1 7a67 	vneg.f32	s14, s15
 8000a94:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8000d28 <setSpeed+0x2dc>
 8000a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a9c:	e013      	b.n	8000ac6 <setSpeed+0x7a>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3301      	adds	r3, #1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	ee07 3a90 	vmov	s15, r3
 8000aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000abe:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8000d28 <setSpeed+0x2dc>
 8000ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac6:	4b97      	ldr	r3, [pc, #604]	; (8000d24 <setSpeed+0x2d8>)
 8000ac8:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F))/100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F))/100.0f ;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	da16      	bge.n	8000b06 <setSpeed+0xba>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3304      	adds	r3, #4
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aee:	4313      	orrs	r3, r2
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af8:	eeb1 7a67 	vneg.f32	s14, s15
 8000afc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8000d28 <setSpeed+0x2dc>
 8000b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b04:	e013      	b.n	8000b2e <setSpeed+0xe2>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3302      	adds	r3, #2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b26:	eddf 6a80 	vldr	s13, [pc, #512]	; 8000d28 <setSpeed+0x2dc>
 8000b2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b2e:	4b7d      	ldr	r3, [pc, #500]	; (8000d24 <setSpeed+0x2d8>)
 8000b30:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F))/100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F))/100.0f ;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3303      	adds	r3, #3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da16      	bge.n	8000b6e <setSpeed+0x122>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3304      	adds	r3, #4
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	01db      	lsls	r3, r3, #7
 8000b48:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3303      	adds	r3, #3
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b56:	4313      	orrs	r3, r2
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b60:	eeb1 7a67 	vneg.f32	s14, s15
 8000b64:	eddf 6a70 	vldr	s13, [pc, #448]	; 8000d28 <setSpeed+0x2dc>
 8000b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6c:	e013      	b.n	8000b96 <setSpeed+0x14a>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3304      	adds	r3, #4
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	01db      	lsls	r3, r3, #7
 8000b76:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b84:	4313      	orrs	r3, r2
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b8e:	eddf 6a66 	vldr	s13, [pc, #408]	; 8000d28 <setSpeed+0x2dc>
 8000b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b96:	4b63      	ldr	r3, [pc, #396]	; (8000d24 <setSpeed+0x2d8>)
 8000b98:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 8000b9c:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <setSpeed+0x2d8>)
 8000b9e:	ed93 7a00 	vldr	s14, [r3]
 8000ba2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000baa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000bae:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <setSpeed+0x2d8>)
 8000bb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 8000bc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000bc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bcc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd4:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8000bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be0:	eeb0 0b47 	vmov.f64	d0, d7
 8000be4:	f009 fe64 	bl	800a8b0 <sqrt>
 8000be8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf0:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 8000bf4:	edd7 6a08 	vldr	s13, [r7, #32]
 8000bf8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c00:	edc7 7a05 	vstr	s15, [r7, #20]
 8000c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8000c08:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c10:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 8000c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	dd24      	ble.n	8000c70 <setSpeed+0x224>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 8000c26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000c2a:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 8000c2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c38:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 8000c3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c48:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 8000c4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c50:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <setSpeed+0x2d8>)
 8000c5a:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 8000c5e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <setSpeed+0x2d8>)
 8000c6c:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c76:	e04b      	b.n	8000d10 <setSpeed+0x2c4>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c84:	e020      	b.n	8000cc8 <setSpeed+0x27c>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8000c86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000c8e:	4827      	ldr	r0, [pc, #156]	; (8000d2c <setSpeed+0x2e0>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4403      	add	r3, r0
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <setSpeed+0x2d8>)
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	edd3 7a00 	vldr	s15, [r3]
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 8000cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d9da      	bls.n	8000c86 <setSpeed+0x23a>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 8000cd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	bfcc      	ite	gt
 8000cde:	2301      	movgt	r3, #1
 8000ce0:	2300      	movle	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 8000cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	4413      	add	r3, r2
 8000d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d04:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8000d06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d9af      	bls.n	8000c78 <setSpeed+0x22c>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000398 	.word	0x20000398
 8000d28:	42c80000 	.word	0x42c80000
 8000d2c:	20000174 	.word	0x20000174

08000d30 <KickFunction>:
#include "kick_task.h"
#include "cmsis_os.h"
#include "stm32f7xx_hal.h"

void KickFunction(void const * argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        // --- Cargar el capacitor del kicker ---
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <KickFunction+0xa0>)
 8000d3e:	f002 faf1 	bl	8003324 <HAL_GPIO_WritePin>
        osDelay(4000);
 8000d42:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d46:	f005 ff46 	bl	8006bd6 <osDelay>
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <KickFunction+0xa0>)
 8000d50:	f002 fae8 	bl	8003324 <HAL_GPIO_WritePin>

        // --- Marcar kicker como cargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <KickFunction+0xa4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 ff5b 	bl	8006c18 <osMutexWait>
        kick_flag = KICKER_CHARGED;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <KickFunction+0xa8>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <KickFunction+0xa4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 ffa1 	bl	8006cb4 <osMutexRelease>

        // --- Esperar evento de disparo ---
        osEvent kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <KickFunction+0xac>)
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 f820 	bl	8006dc4 <osMessageGet>

        // --- Activar el kicker (disparo) ---
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <KickFunction+0xb0>)
 8000d8c:	f002 faca 	bl	8003324 <HAL_GPIO_WritePin>
        osDelay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f005 ff20 	bl	8006bd6 <osDelay>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <KickFunction+0xb0>)
 8000d9e:	f002 fac1 	bl	8003324 <HAL_GPIO_WritePin>

        // --- Marcar kicker como descargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <KickFunction+0xa4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f04f 31ff 	mov.w	r1, #4294967295
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 ff34 	bl	8006c18 <osMutexWait>
        kick_flag = KICKER_DISCHARGED;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <KickFunction+0xa8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <KickFunction+0xa4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 ff7a 	bl	8006cb4 <osMutexRelease>

        // --- Contador de disparos ---
        kick_count++;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <KickFunction+0xb4>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <KickFunction+0xb4>)
 8000dca:	801a      	strh	r2, [r3, #0]
    {
 8000dcc:	e7b4      	b.n	8000d38 <KickFunction+0x8>
 8000dce:	bf00      	nop
 8000dd0:	40022400 	.word	0x40022400
 8000dd4:	200003b0 	.word	0x200003b0
 8000dd8:	200003a6 	.word	0x200003a6
 8000ddc:	200003ac 	.word	0x200003ac
 8000de0:	40021400 	.word	0x40021400
 8000de4:	200003a8 	.word	0x200003a8

08000de8 <getDribbler_speed>:
    }
}

uint8_t getDribbler_speed(uint8_t *buffer)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	109b      	asrs	r3, r3, #2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	105b      	asrs	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <main>:
void DriveFunction(void const * argument);
void RadioFunction(void const * argument);
void KickFunction(void const * argument);

int main(void)
{
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b09a      	sub	sp, #104	; 0x68
 8000e34:	af00      	add	r7, sp, #0
    HAL_Init();
 8000e36:	f001 fc94 	bl	8002762 <HAL_Init>
    SystemClock_Config();
 8000e3a:	f000 ff9d 	bl	8001d78 <SystemClock_Config>
    MX_GPIO_Init();
 8000e3e:	f001 fa99 	bl	8002374 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000e42:	f001 f8c7 	bl	8001fd4 <MX_SPI1_Init>
    MX_I2C1_Init();
 8000e46:	f001 f805 	bl	8001e54 <MX_I2C1_Init>
    MX_I2C2_Init();
 8000e4a:	f001 f843 	bl	8001ed4 <MX_I2C2_Init>
    MX_TIM2_Init();
 8000e4e:	f001 f937 	bl	80020c0 <MX_TIM2_Init>
    MX_TIM3_Init();
 8000e52:	f001 f989 	bl	8002168 <MX_TIM3_Init>
    MX_TIM5_Init();
 8000e56:	f001 f9dd 	bl	8002214 <MX_TIM5_Init>
    MX_TIM8_Init();
 8000e5a:	f001 fa31 	bl	80022c0 <MX_TIM8_Init>
    MX_I2C3_Init();
 8000e5e:	f001 f879 	bl	8001f54 <MX_I2C3_Init>
    MX_UART5_Init();
 8000e62:	f001 f8f9 	bl	8002058 <MX_UART5_Init>
     //kinematic[1][0] = sin(WHEEL_ANGlE_2+(b*M_PI/180.0f)); kinematic[1][1] = -cos(WHEEL_ANGlE_2+(b*M_PI/180.0f)); kinematic[1][2] = -ROBOT_RADIO;
     //kinematic[2][0] = sin(WHEEL_ANGlE_3-(b*M_PI/180.0f)); kinematic[2][1] = -cos(WHEEL_ANGlE_3-(b*M_PI/180.0f)); kinematic[2][2] = -ROBOT_RADIO;
     //kinematic[3][0] = sin(WHEEL_ANGlE_4-(a*M_PI/180.0f)); kinematic[3][1] = -cos(WHEEL_ANGlE_4-(a*M_PI/180.0f)); kinematic[3][2] = -ROBOT_RADIO;


     kinematic[0][0] = -sin(WHEEL_ANGlE_1+(b*M_PI/180.0f)); kinematic[0][1] = cos(WHEEL_ANGlE_1+(b*M_PI/180.0f)); kinematic[0][2] = ROBOT_RADIO;
 8000e66:	4bce      	ldr	r3, [pc, #824]	; (80011a0 <main+0x370>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e70:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8001170 <main+0x340>
 8000e74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e78:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 8001178 <main+0x348>
 8000e7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e80:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8001180 <main+0x350>
 8000e84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e88:	eeb0 0b47 	vmov.f64	d0, d7
 8000e8c:	f009 fd7c 	bl	800a988 <sin>
 8000e90:	eeb0 7b40 	vmov.f64	d7, d0
 8000e94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e98:	eef1 7a67 	vneg.f32	s15, s15
 8000e9c:	4bc1      	ldr	r3, [pc, #772]	; (80011a4 <main+0x374>)
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
 8000ea2:	4bbf      	ldr	r3, [pc, #764]	; (80011a0 <main+0x370>)
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eac:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8001170 <main+0x340>
 8000eb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eb4:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8001178 <main+0x348>
 8000eb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ebc:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8001180 <main+0x350>
 8000ec0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ec4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec8:	f009 fd12 	bl	800a8f0 <cos>
 8000ecc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ed0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed4:	4bb3      	ldr	r3, [pc, #716]	; (80011a4 <main+0x374>)
 8000ed6:	edc3 7a01 	vstr	s15, [r3, #4]
 8000eda:	4bb2      	ldr	r3, [pc, #712]	; (80011a4 <main+0x374>)
 8000edc:	4ab2      	ldr	r2, [pc, #712]	; (80011a8 <main+0x378>)
 8000ede:	609a      	str	r2, [r3, #8]
     kinematic[1][0] = -sin(WHEEL_ANGlE_2+(a*M_PI/180.0f)); kinematic[1][1] = cos(WHEEL_ANGlE_2+(a*M_PI/180.0f)); kinematic[1][2] = ROBOT_RADIO;
 8000ee0:	4bb2      	ldr	r3, [pc, #712]	; (80011ac <main+0x37c>)
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eea:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001170 <main+0x340>
 8000eee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ef2:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8001178 <main+0x348>
 8000ef6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efa:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8001188 <main+0x358>
 8000efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f02:	eeb0 0b47 	vmov.f64	d0, d7
 8000f06:	f009 fd3f 	bl	800a988 <sin>
 8000f0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f12:	eef1 7a67 	vneg.f32	s15, s15
 8000f16:	4ba3      	ldr	r3, [pc, #652]	; (80011a4 <main+0x374>)
 8000f18:	edc3 7a03 	vstr	s15, [r3, #12]
 8000f1c:	4ba3      	ldr	r3, [pc, #652]	; (80011ac <main+0x37c>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8001170 <main+0x340>
 8000f2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f2e:	ed9f 5b92 	vldr	d5, [pc, #584]	; 8001178 <main+0x348>
 8000f32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f36:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8001188 <main+0x358>
 8000f3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f3e:	eeb0 0b47 	vmov.f64	d0, d7
 8000f42:	f009 fcd5 	bl	800a8f0 <cos>
 8000f46:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f4e:	4b95      	ldr	r3, [pc, #596]	; (80011a4 <main+0x374>)
 8000f50:	edc3 7a04 	vstr	s15, [r3, #16]
 8000f54:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <main+0x374>)
 8000f56:	4a94      	ldr	r2, [pc, #592]	; (80011a8 <main+0x378>)
 8000f58:	615a      	str	r2, [r3, #20]
     kinematic[2][0] = -sin(WHEEL_ANGlE_3-(a*M_PI/180.0f)); kinematic[2][1] = cos(WHEEL_ANGlE_3-(a*M_PI/180.0f)); kinematic[2][2] = ROBOT_RADIO;
 8000f5a:	4b94      	ldr	r3, [pc, #592]	; (80011ac <main+0x37c>)
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f64:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8001170 <main+0x340>
 8000f68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f6c:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8001178 <main+0x348>
 8000f70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f74:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8001190 <main+0x360>
 8000f78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f7c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f80:	f009 fd02 	bl	800a988 <sin>
 8000f84:	eeb0 7b40 	vmov.f64	d7, d0
 8000f88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f8c:	eef1 7a67 	vneg.f32	s15, s15
 8000f90:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <main+0x374>)
 8000f92:	edc3 7a06 	vstr	s15, [r3, #24]
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <main+0x37c>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa0:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001170 <main+0x340>
 8000fa4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fa8:	ed9f 5b73 	vldr	d5, [pc, #460]	; 8001178 <main+0x348>
 8000fac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb0:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001190 <main+0x360>
 8000fb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fbc:	f009 fc98 	bl	800a8f0 <cos>
 8000fc0:	eeb0 7b40 	vmov.f64	d7, d0
 8000fc4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc8:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <main+0x374>)
 8000fca:	edc3 7a07 	vstr	s15, [r3, #28]
 8000fce:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <main+0x374>)
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <main+0x378>)
 8000fd2:	621a      	str	r2, [r3, #32]
     kinematic[3][0] = -sin(WHEEL_ANGlE_4-(b*M_PI/180.0f)); kinematic[3][1] = cos(WHEEL_ANGlE_4-(b*M_PI/180.0f)); kinematic[3][2] = ROBOT_RADIO;
 8000fd4:	4b72      	ldr	r3, [pc, #456]	; (80011a0 <main+0x370>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fde:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001170 <main+0x340>
 8000fe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe6:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8001178 <main+0x348>
 8000fea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fee:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001198 <main+0x368>
 8000ff2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ff6:	eeb0 0b47 	vmov.f64	d0, d7
 8000ffa:	f009 fcc5 	bl	800a988 <sin>
 8000ffe:	eeb0 7b40 	vmov.f64	d7, d0
 8001002:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001006:	eef1 7a67 	vneg.f32	s15, s15
 800100a:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <main+0x374>)
 800100c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001010:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <main+0x370>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8001170 <main+0x340>
 800101e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001022:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8001178 <main+0x348>
 8001026:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102a:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001198 <main+0x368>
 800102e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001032:	eeb0 0b47 	vmov.f64	d0, d7
 8001036:	f009 fc5b 	bl	800a8f0 <cos>
 800103a:	eeb0 7b40 	vmov.f64	d7, d0
 800103e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001042:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <main+0x374>)
 8001044:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <main+0x374>)
 800104a:	4a57      	ldr	r2, [pc, #348]	; (80011a8 <main+0x378>)
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c


     // Parpadeo de LEDs para indicar inicio
    for (uint8_t i = 0; i < 5; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001054:	e016      	b.n	8001084 <main+0x254>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 8001056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105a:	4855      	ldr	r0, [pc, #340]	; (80011b0 <main+0x380>)
 800105c:	f008 fc92 	bl	8009984 <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	4852      	ldr	r0, [pc, #328]	; (80011b0 <main+0x380>)
 8001066:	f008 fc8d 	bl	8009984 <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 800106a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106e:	4850      	ldr	r0, [pc, #320]	; (80011b0 <main+0x380>)
 8001070:	f008 fc88 	bl	8009984 <Board_LedToggle>
        HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f001 fba1 	bl	80027bc <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 800107a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800107e:	3301      	adds	r3, #1
 8001080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001084:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001088:	2b04      	cmp	r3, #4
 800108a:	d9e4      	bls.n	8001056 <main+0x226>
    }

    // Mutex para el sistema de kick
    osMutexDef(kickFlag);
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
    kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 8001090:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001094:	4618      	mov	r0, r3
 8001096:	f005 fdb2 	bl	8006bfe <osMutexCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	4a45      	ldr	r2, [pc, #276]	; (80011b4 <main+0x384>)
 800109e:	6013      	str	r3, [r2, #0]

    // Colas de mensajes
    osMessageQDef(kickQueue, 1, uint16_t);
 80010a0:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <main+0x388>)
 80010a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010aa:	e883 0003 	stmia.w	r3, {r0, r1}
    kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 80010ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fe33 	bl	8006d20 <osMessageCreate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a3f      	ldr	r2, [pc, #252]	; (80011bc <main+0x38c>)
 80010be:	6013      	str	r3, [r2, #0]
    osMessageQDef(nrf24Check, 16, uint16_t);
 80010c0:	4a3f      	ldr	r2, [pc, #252]	; (80011c0 <main+0x390>)
 80010c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ca:	e883 0003 	stmia.w	r3, {r0, r1}
    nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 80010ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 fe23 	bl	8006d20 <osMessageCreate>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a39      	ldr	r2, [pc, #228]	; (80011c4 <main+0x394>)
 80010de:	6013      	str	r3, [r2, #0]

    // Tareas principales del sistema
    osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <main+0x398>)
 80010e2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	6023      	str	r3, [r4, #0]
    driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 80010f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 fd46 	bl	8006b88 <osThreadCreate>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <main+0x39c>)
 8001100:	6013      	str	r3, [r2, #0]
    osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <main+0x3a0>)
 8001104:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001108:	461d      	mov	r5, r3
 800110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	6023      	str	r3, [r4, #0]
    radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f005 fd35 	bl	8006b88 <osThreadCreate>
 800111e:	4603      	mov	r3, r0
 8001120:	4a2c      	ldr	r2, [pc, #176]	; (80011d4 <main+0x3a4>)
 8001122:	6013      	str	r3, [r2, #0]
    osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <main+0x3a8>)
 8001126:	f107 0414 	add.w	r4, r7, #20
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	6023      	str	r3, [r4, #0]
    kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fd24 	bl	8006b88 <osThreadCreate>
 8001140:	4603      	mov	r3, r0
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <main+0x3ac>)
 8001144:	6013      	str	r3, [r2, #0]
    osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <main+0x3b0>)
 8001148:	463c      	mov	r4, r7
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	6023      	str	r3, [r4, #0]
    ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 8001154:	463b      	mov	r3, r7
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f005 fd15 	bl	8006b88 <osThreadCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <main+0x3b4>)
 8001162:	6013      	str	r3, [r2, #0]

    osKernelStart(); // Inicia el scheduler RTOS
 8001164:	f005 fcf9 	bl	8006b5a <osKernelStart>

    // Bucle infinito de seguridad (no debería llegar aquí)
    while (1) {}
 8001168:	e7fe      	b.n	8001168 <main+0x338>
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	54442d18 	.word	0x54442d18
 8001174:	400921fb 	.word	0x400921fb
 8001178:	00000000 	.word	0x00000000
 800117c:	40668000 	.word	0x40668000
 8001180:	382d7365 	.word	0x382d7365
 8001184:	3ff0c152 	.word	0x3ff0c152
 8001188:	bcdbe7ae 	.word	0xbcdbe7ae
 800118c:	400226c3 	.word	0x400226c3
 8001190:	bcdbe7ae 	.word	0xbcdbe7ae
 8001194:	c00226c3 	.word	0xc00226c3
 8001198:	382d7365 	.word	0x382d7365
 800119c:	bff0c152 	.word	0xbff0c152
 80011a0:	20000030 	.word	0x20000030
 80011a4:	20000174 	.word	0x20000174
 80011a8:	3da83e42 	.word	0x3da83e42
 80011ac:	200001a4 	.word	0x200001a4
 80011b0:	40022000 	.word	0x40022000
 80011b4:	200003b0 	.word	0x200003b0
 80011b8:	0800b580 	.word	0x0800b580
 80011bc:	200003ac 	.word	0x200003ac
 80011c0:	0800b588 	.word	0x0800b588
 80011c4:	2000015c 	.word	0x2000015c
 80011c8:	0800b59c 	.word	0x0800b59c
 80011cc:	200003dc 	.word	0x200003dc
 80011d0:	0800b5bc 	.word	0x0800b5bc
 80011d4:	200003e0 	.word	0x200003e0
 80011d8:	0800b5dc 	.word	0x0800b5dc
 80011dc:	200003e4 	.word	0x200003e4
 80011e0:	0800b604 	.word	0x0800b604
 80011e4:	200003d8 	.word	0x200003d8

080011e8 <HAL_TIM_PeriodElapsedCallback>:
}

// Callback de periodo de timer (para HAL)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 80011fa:	f001 fabf 	bl	800277c <HAL_IncTick>
    }
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40010000 	.word	0x40010000

0800120c <Error_Handler>:

// Handler de error simple
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
    // Implementar manejo de error si es necesario
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	0000      	movs	r0, r0
 800121c:	0000      	movs	r0, r0
	...

08001220 <RadioFunction>:
#include <string.h>
#include "kick_task.h"
#include "drive_task.h"

int fokk = 0;
void RadioFunction(void const * argument) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af02      	add	r7, sp, #8
 8001226:	6178      	str	r0, [r7, #20]
    // --- Inicialización del módulo nRF24 ---
    nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4bd0      	ldr	r3, [pc, #832]	; (8001570 <RadioFunction+0x350>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	4ace      	ldr	r2, [pc, #824]	; (8001570 <RadioFunction+0x350>)
 8001238:	49ce      	ldr	r1, [pc, #824]	; (8001574 <RadioFunction+0x354>)
 800123a:	48cf      	ldr	r0, [pc, #828]	; (8001578 <RadioFunction+0x358>)
 800123c:	f008 fd7b 	bl	8009d36 <nRF24_HW_Init>
    nRF24_Init(&nrf_device);
 8001240:	48cd      	ldr	r0, [pc, #820]	; (8001578 <RadioFunction+0x358>)
 8001242:	f008 fe3b 	bl	8009ebc <nRF24_Init>
    nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 8001246:	4acd      	ldr	r2, [pc, #820]	; (800157c <RadioFunction+0x35c>)
 8001248:	2100      	movs	r1, #0
 800124a:	48cb      	ldr	r0, [pc, #812]	; (8001578 <RadioFunction+0x358>)
 800124c:	f008 fef2 	bl	800a034 <nRF24_SetAddr>
    nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 8001250:	216b      	movs	r1, #107	; 0x6b
 8001252:	48c9      	ldr	r0, [pc, #804]	; (8001578 <RadioFunction+0x358>)
 8001254:	f008 fedd 	bl	800a012 <nRF24_SetRFChannel>
    nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 8001258:	231e      	movs	r3, #30
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	48c6      	ldr	r0, [pc, #792]	; (8001578 <RadioFunction+0x358>)
 8001260:	f009 f838 	bl	800a2d4 <nRF24_SetRXPipe>
    nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 8001264:	2102      	movs	r1, #2
 8001266:	48c4      	ldr	r0, [pc, #784]	; (8001578 <RadioFunction+0x358>)
 8001268:	f008 fe8d 	bl	8009f86 <nRF24_SetPowerMode>
    nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 800126c:	2101      	movs	r1, #1
 800126e:	48c2      	ldr	r0, [pc, #776]	; (8001578 <RadioFunction+0x358>)
 8001270:	f008 feab 	bl	8009fca <nRF24_SetOperationalMode>
    nRF24_RX_ON(&nrf_device);
 8001274:	2101      	movs	r1, #1
 8001276:	48c0      	ldr	r0, [pc, #768]	; (8001578 <RadioFunction+0x358>)
 8001278:	f008 fd39 	bl	8009cee <nRF24_CE_State>
    memset(nrf_device.rx_data, 0, 32);
 800127c:	2220      	movs	r2, #32
 800127e:	2100      	movs	r1, #0
 8001280:	48bf      	ldr	r0, [pc, #764]	; (8001580 <RadioFunction+0x360>)
 8001282:	f009 fad5 	bl	800a830 <memset>
    nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 8001286:	2106      	movs	r1, #6
 8001288:	48bb      	ldr	r0, [pc, #748]	; (8001578 <RadioFunction+0x358>)
 800128a:	f009 f87f 	bl	800a38c <nRF24_DisableAA>
    tx_node_addr[4] = Board_GetID();
 800128e:	f008 fb89 	bl	80099a4 <Board_GetID>
 8001292:	4603      	mov	r3, r0
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4bbb      	ldr	r3, [pc, #748]	; (8001584 <RadioFunction+0x364>)
 8001298:	711a      	strb	r2, [r3, #4]
    nRF24_SetAddr(&nrf_device, nRF24_PIPETX, tx_node_addr);
 800129a:	4aba      	ldr	r2, [pc, #744]	; (8001584 <RadioFunction+0x364>)
 800129c:	2106      	movs	r1, #6
 800129e:	48b6      	ldr	r0, [pc, #728]	; (8001578 <RadioFunction+0x358>)
 80012a0:	f008 fec8 	bl	800a034 <nRF24_SetAddr>
    nrf_config = nRF24_GetConfig(&nrf_device);
 80012a4:	48b4      	ldr	r0, [pc, #720]	; (8001578 <RadioFunction+0x358>)
 80012a6:	f009 f8a9 	bl	800a3fc <nRF24_GetConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4bb6      	ldr	r3, [pc, #728]	; (8001588 <RadioFunction+0x368>)
 80012b0:	701a      	strb	r2, [r3, #0]

    // --- Bucle principal de la tarea ---
    for (;;) {
        // Espera evento de la cola (sin timeout)
        osMessageGet(nrf24CheckHandle, osWaitForever);
 80012b2:	4bb6      	ldr	r3, [pc, #728]	; (800158c <RadioFunction+0x36c>)
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	463b      	mov	r3, r7
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 fd81 	bl	8006dc4 <osMessageGet>

        // Actualiza estado del nRF24
        nrf_status = nRF24_GetStatus(&nrf_device);
 80012c2:	48ad      	ldr	r0, [pc, #692]	; (8001578 <RadioFunction+0x358>)
 80012c4:	f009 f88d 	bl	800a3e2 <nRF24_GetStatus>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4bb0      	ldr	r3, [pc, #704]	; (8001590 <RadioFunction+0x370>)
 80012ce:	701a      	strb	r2, [r3, #0]
        nrf_config = nRF24_GetConfig(&nrf_device);
 80012d0:	48a9      	ldr	r0, [pc, #676]	; (8001578 <RadioFunction+0x358>)
 80012d2:	f009 f893 	bl	800a3fc <nRF24_GetConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4bab      	ldr	r3, [pc, #684]	; (8001588 <RadioFunction+0x368>)
 80012dc:	701a      	strb	r2, [r3, #0]
        //updateBuffer(txBuffer);
        //txBuffer[28] = fokk++;
        //HAL_UART_Transmit(&huart5, txBuffer,32,HAL_MAX_DELAY);
        //osDelay(10);
        // Si hay datos recibidos
        if (nrf_status & nRF24_FLAG_RX_DR) {
 80012de:	4bac      	ldr	r3, [pc, #688]	; (8001590 <RadioFunction+0x370>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0e3      	beq.n	80012b2 <RadioFunction+0x92>
        	//kinematic[1][0] = sin(WHEEL_ANGlE_2+(b*M_PI/180.0f)); kinematic[1][1] = -cos(WHEEL_ANGlE_2+(b*M_PI/180.0f)); kinematic[1][2] = -ROBOT_RADIO;
            //kinematic[2][0] = sin(WHEEL_ANGlE_3-(b*M_PI/180.0f)); kinematic[2][1] = -cos(WHEEL_ANGlE_3-(b*M_PI/180.0f)); kinematic[2][2] = -ROBOT_RADIO;
            //kinematic[3][0] = sin(WHEEL_ANGlE_4-(a*M_PI/180.0f)); kinematic[3][1] = -cos(WHEEL_ANGlE_4-(a*M_PI/180.0f)); kinematic[3][2] = -ROBOT_RADIO;


            kinematic[0][0] = -sin(WHEEL_ANGlE_1s+(b*M_PI/180.0f)); kinematic[0][1] = cos(WHEEL_ANGlE_1s+(b*M_PI/180.0f)); kinematic[0][2] = ROBOT_RADIO;
 80012ea:	4baa      	ldr	r3, [pc, #680]	; (8001594 <RadioFunction+0x374>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f4:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001550 <RadioFunction+0x330>
 80012f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012fc:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8001558 <RadioFunction+0x338>
 8001300:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001304:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001560 <RadioFunction+0x340>
 8001308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800130c:	eeb0 0b47 	vmov.f64	d0, d7
 8001310:	f009 fb3a 	bl	800a988 <sin>
 8001314:	eeb0 7b40 	vmov.f64	d7, d0
 8001318:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800131c:	eef1 7a67 	vneg.f32	s15, s15
 8001320:	4b9d      	ldr	r3, [pc, #628]	; (8001598 <RadioFunction+0x378>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
 8001326:	4b9b      	ldr	r3, [pc, #620]	; (8001594 <RadioFunction+0x374>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001330:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001550 <RadioFunction+0x330>
 8001334:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001338:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001558 <RadioFunction+0x338>
 800133c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001340:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001560 <RadioFunction+0x340>
 8001344:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001348:	eeb0 0b47 	vmov.f64	d0, d7
 800134c:	f009 fad0 	bl	800a8f0 <cos>
 8001350:	eeb0 7b40 	vmov.f64	d7, d0
 8001354:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001358:	4b8f      	ldr	r3, [pc, #572]	; (8001598 <RadioFunction+0x378>)
 800135a:	edc3 7a01 	vstr	s15, [r3, #4]
 800135e:	4b8e      	ldr	r3, [pc, #568]	; (8001598 <RadioFunction+0x378>)
 8001360:	4a8e      	ldr	r2, [pc, #568]	; (800159c <RadioFunction+0x37c>)
 8001362:	609a      	str	r2, [r3, #8]
            kinematic[1][0] = -sin(WHEEL_ANGlE_2s+(a*M_PI/180.0f)); kinematic[1][1] = cos(WHEEL_ANGlE_2s+(a*M_PI/180.0f)); kinematic[1][2] = ROBOT_RADIO;
 8001364:	4b8e      	ldr	r3, [pc, #568]	; (80015a0 <RadioFunction+0x380>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800136e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001550 <RadioFunction+0x330>
 8001372:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001376:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8001558 <RadioFunction+0x338>
 800137a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800137e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001568 <RadioFunction+0x348>
 8001382:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001386:	eeb0 0b47 	vmov.f64	d0, d7
 800138a:	f009 fafd 	bl	800a988 <sin>
 800138e:	eeb0 7b40 	vmov.f64	d7, d0
 8001392:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001396:	eef1 7a67 	vneg.f32	s15, s15
 800139a:	4b7f      	ldr	r3, [pc, #508]	; (8001598 <RadioFunction+0x378>)
 800139c:	edc3 7a03 	vstr	s15, [r3, #12]
 80013a0:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <RadioFunction+0x380>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001550 <RadioFunction+0x330>
 80013ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013b2:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8001558 <RadioFunction+0x338>
 80013b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ba:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001568 <RadioFunction+0x348>
 80013be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013c2:	eeb0 0b47 	vmov.f64	d0, d7
 80013c6:	f009 fa93 	bl	800a8f0 <cos>
 80013ca:	eeb0 7b40 	vmov.f64	d7, d0
 80013ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013d2:	4b71      	ldr	r3, [pc, #452]	; (8001598 <RadioFunction+0x378>)
 80013d4:	edc3 7a04 	vstr	s15, [r3, #16]
 80013d8:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <RadioFunction+0x378>)
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <RadioFunction+0x37c>)
 80013dc:	615a      	str	r2, [r3, #20]
            kinematic[2][0] = -sin(WHEEL_ANGlE_3s-(a*M_PI/180.0f)); kinematic[2][1] = cos(WHEEL_ANGlE_3s-(a*M_PI/180.0f)); kinematic[2][2] = ROBOT_RADIO;
 80013de:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <RadioFunction+0x380>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001550 <RadioFunction+0x330>
 80013ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013f0:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8001558 <RadioFunction+0x338>
 80013f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013f8:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001568 <RadioFunction+0x348>
 80013fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001400:	eeb0 0b47 	vmov.f64	d0, d7
 8001404:	f009 fac0 	bl	800a988 <sin>
 8001408:	eeb0 7b40 	vmov.f64	d7, d0
 800140c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001410:	eef1 7a67 	vneg.f32	s15, s15
 8001414:	4b60      	ldr	r3, [pc, #384]	; (8001598 <RadioFunction+0x378>)
 8001416:	edc3 7a06 	vstr	s15, [r3, #24]
 800141a:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <RadioFunction+0x380>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001424:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001550 <RadioFunction+0x330>
 8001428:	ee27 6b06 	vmul.f64	d6, d7, d6
 800142c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001558 <RadioFunction+0x338>
 8001430:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001434:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8001568 <RadioFunction+0x348>
 8001438:	ee36 7b47 	vsub.f64	d7, d6, d7
 800143c:	eeb0 0b47 	vmov.f64	d0, d7
 8001440:	f009 fa56 	bl	800a8f0 <cos>
 8001444:	eeb0 7b40 	vmov.f64	d7, d0
 8001448:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800144c:	4b52      	ldr	r3, [pc, #328]	; (8001598 <RadioFunction+0x378>)
 800144e:	edc3 7a07 	vstr	s15, [r3, #28]
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <RadioFunction+0x378>)
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <RadioFunction+0x37c>)
 8001456:	621a      	str	r2, [r3, #32]
            kinematic[3][0] = -sin(WHEEL_ANGlE_4s-(b*M_PI/180.0f)); kinematic[3][1] = cos(WHEEL_ANGlE_4s-(b*M_PI/180.0f)); kinematic[3][2] = ROBOT_RADIO;
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <RadioFunction+0x374>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001462:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001550 <RadioFunction+0x330>
 8001466:	ee27 6b06 	vmul.f64	d6, d7, d6
 800146a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001558 <RadioFunction+0x338>
 800146e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001472:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001560 <RadioFunction+0x340>
 8001476:	ee36 7b47 	vsub.f64	d7, d6, d7
 800147a:	eeb0 0b47 	vmov.f64	d0, d7
 800147e:	f009 fa83 	bl	800a988 <sin>
 8001482:	eeb0 7b40 	vmov.f64	d7, d0
 8001486:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <RadioFunction+0x378>)
 8001490:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <RadioFunction+0x374>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800149e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001550 <RadioFunction+0x330>
 80014a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014a6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001558 <RadioFunction+0x338>
 80014aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ae:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001560 <RadioFunction+0x340>
 80014b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014b6:	eeb0 0b47 	vmov.f64	d0, d7
 80014ba:	f009 fa19 	bl	800a8f0 <cos>
 80014be:	eeb0 7b40 	vmov.f64	d7, d0
 80014c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <RadioFunction+0x378>)
 80014c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <RadioFunction+0x378>)
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <RadioFunction+0x37c>)
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c



            nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <RadioFunction+0x384>)
 80014d4:	492a      	ldr	r1, [pc, #168]	; (8001580 <RadioFunction+0x360>)
 80014d6:	4828      	ldr	r0, [pc, #160]	; (8001578 <RadioFunction+0x358>)
 80014d8:	f008 ffe8 	bl	800a4ac <nRF24_ReadPayload>
            nRF24_FlushRX(&nrf_device);
 80014dc:	4826      	ldr	r0, [pc, #152]	; (8001578 <RadioFunction+0x358>)
 80014de:	f008 ffa7 	bl	800a430 <nRF24_FlushRX>
            nRF24_ClearIRQFlagsRx(&nrf_device);
 80014e2:	4825      	ldr	r0, [pc, #148]	; (8001578 <RadioFunction+0x358>)
 80014e4:	f008 ffc9 	bl	800a47a <nRF24_ClearIRQFlagsRx>

            setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <RadioFunction+0x388>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <RadioFunction+0x360>)
 80014f8:	4413      	add	r3, r2
 80014fa:	4a2c      	ldr	r2, [pc, #176]	; (80015ac <RadioFunction+0x38c>)
 80014fc:	492c      	ldr	r1, [pc, #176]	; (80015b0 <RadioFunction+0x390>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff faa4 	bl	8000a4c <setSpeed>
            dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <RadioFunction+0x388>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <RadioFunction+0x360>)
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fc66 	bl	8000de8 <getDribbler_speed>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <RadioFunction+0x394>)
 8001522:	701a      	strb	r2, [r3, #0]
            kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <RadioFunction+0x388>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <RadioFunction+0x360>)
 8001534:	4413      	add	r3, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc68 	bl	8000e0c <getKickerStatus>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <RadioFunction+0x398>)
 8001542:	701a      	strb	r2, [r3, #0]
            updateBuffer(txBuffer);
 8001544:	481d      	ldr	r0, [pc, #116]	; (80015bc <RadioFunction+0x39c>)
 8001546:	f000 f83b 	bl	80015c0 <updateBuffer>
        osMessageGet(nrf24CheckHandle, osWaitForever);
 800154a:	e6b2      	b.n	80012b2 <RadioFunction+0x92>
 800154c:	f3af 8000 	nop.w
 8001550:	54442d18 	.word	0x54442d18
 8001554:	400921fb 	.word	0x400921fb
 8001558:	00000000 	.word	0x00000000
 800155c:	40668000 	.word	0x40668000
 8001560:	fa84ad8a 	.word	0xfa84ad8a
 8001564:	4001740a 	.word	0x4001740a
 8001568:	382d7365 	.word	0x382d7365
 800156c:	3fe0c152 	.word	0x3fe0c152
 8001570:	40021800 	.word	0x40021800
 8001574:	200004e4 	.word	0x200004e4
 8001578:	20000104 	.word	0x20000104
 800157c:	20000028 	.word	0x20000028
 8001580:	2000013a 	.word	0x2000013a
 8001584:	20000020 	.word	0x20000020
 8001588:	20000100 	.word	0x20000100
 800158c:	2000015c 	.word	0x2000015c
 8001590:	200000ff 	.word	0x200000ff
 8001594:	20000030 	.word	0x20000030
 8001598:	20000174 	.word	0x20000174
 800159c:	3da83e42 	.word	0x3da83e42
 80015a0:	200001a4 	.word	0x200001a4
 80015a4:	200000fe 	.word	0x200000fe
 80015a8:	200000fc 	.word	0x200000fc
 80015ac:	20000160 	.word	0x20000160
 80015b0:	20000164 	.word	0x20000164
 80015b4:	200003a4 	.word	0x200003a4
 80015b8:	200003a5 	.word	0x200003a5
 80015bc:	20000000 	.word	0x20000000

080015c0 <updateBuffer>:
        }
    }
}


void updateBuffer(uint8_t *buffer) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	// Fill buffer with zeros if necessary
	memset(&buffer[0], 0, 32);
 80015c8:	2220      	movs	r2, #32
 80015ca:	2100      	movs	r1, #0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f009 f92f 	bl	800a830 <memset>
	float m0 = motor[0].measSpeed;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <updateBuffer+0x90>)
 80015d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
	float r0 = speed[0];
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <updateBuffer+0x94>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	623b      	str	r3, [r7, #32]
	float m1 = motor[1].measSpeed;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <updateBuffer+0x90>)
 80015e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e4:	61fb      	str	r3, [r7, #28]
	float r1 = speed[1];
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <updateBuffer+0x94>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
	float m2 = motor[2].measSpeed;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <updateBuffer+0x90>)
 80015ee:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80015f2:	617b      	str	r3, [r7, #20]
	float r2 = speed[2];
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <updateBuffer+0x94>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	613b      	str	r3, [r7, #16]
	float m3 = motor[3].measSpeed;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <updateBuffer+0x90>)
 80015fc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001600:	60fb      	str	r3, [r7, #12]
	float r3 = speed[3];
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <updateBuffer+0x94>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24



	//buffer[0] = 0xAA;
	memcpy(&buffer[0], &m0, sizeof(float));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[4], &r0, sizeof(float));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[8], &m1, sizeof(float));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3308      	adds	r3, #8
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[12], &r1, sizeof(float));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	330c      	adds	r3, #12
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[16], &m2, sizeof(float));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3310      	adds	r3, #16
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[20], &r2, sizeof(float));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3314      	adds	r3, #20
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[24], &m3, sizeof(float));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3318      	adds	r3, #24
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]
	memcpy(&buffer[28], &r3, sizeof(float));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	331c      	adds	r3, #28
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	601a      	str	r2, [r3, #0]
	//buffer[33] = 0x55;

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001a8 	.word	0x200001a8
 8001654:	20000164 	.word	0x20000164

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	f06f 0001 	mvn.w	r0, #1
 8001696:	f001 f96d 	bl	8002974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0b2      	sub	sp, #200	; 0xc8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	2290      	movs	r2, #144	; 0x90
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 f8b1 	bl	800a830 <memset>
  if(hi2c->Instance==I2C1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_I2C_MspInit+0x1c0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d13d      	bne.n	8001754 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 f923 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80016f4:	f7ff fd8a 	bl	800120c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001710:	23c0      	movs	r3, #192	; 0xc0
 8001712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	2312      	movs	r3, #18
 8001718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	2301      	movs	r3, #1
 800171e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001728:	2304      	movs	r3, #4
 800172a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001732:	4619      	mov	r1, r3
 8001734:	484e      	ldr	r0, [pc, #312]	; (8001870 <HAL_I2C_MspInit+0x1c8>)
 8001736:	f001 fc31 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a4b      	ldr	r2, [pc, #300]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001752:	e085      	b.n	8001860 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a46      	ldr	r2, [pc, #280]	; (8001874 <HAL_I2C_MspInit+0x1cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d13d      	bne.n	80017da <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f8e0 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800177a:	f7ff fd47 	bl	800120c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a3a      	ldr	r2, [pc, #232]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179c:	2312      	movs	r3, #18
 800179e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017ae:	2304      	movs	r3, #4
 80017b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017b8:	4619      	mov	r1, r3
 80017ba:	482f      	ldr	r0, [pc, #188]	; (8001878 <HAL_I2C_MspInit+0x1d0>)
 80017bc:	f001 fbee 	bl	8002f9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 80017c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
}
 80017d8:	e042      	b.n	8001860 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_I2C_MspInit+0x1d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13d      	bne.n	8001860 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 f89d 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001800:	f7ff fd04 	bl	800120c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800181c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001836:	2304      	movs	r3, #4
 8001838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800183c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001840:	4619      	mov	r1, r3
 8001842:	480f      	ldr	r0, [pc, #60]	; (8001880 <HAL_I2C_MspInit+0x1d8>)
 8001844:	f001 fbaa 	bl	8002f9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 800184e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_I2C_MspInit+0x1c4>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	bf00      	nop
 8001862:	37c8      	adds	r7, #200	; 0xc8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40005400 	.word	0x40005400
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400
 8001874:	40005800 	.word	0x40005800
 8001878:	40021400 	.word	0x40021400
 800187c:	40005c00 	.word	0x40005c00
 8001880:	40021c00 	.word	0x40021c00

08001884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_SPI_MspInit+0x7c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d127      	bne.n	80018f6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_SPI_MspInit+0x80>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <HAL_SPI_MspInit+0x80>)
 80018ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_SPI_MspInit+0x80>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_SPI_MspInit+0x80>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_SPI_MspInit+0x80>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_SPI_MspInit+0x80>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018d6:	23e0      	movs	r3, #224	; 0xe0
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e6:	2305      	movs	r3, #5
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_SPI_MspInit+0x84>)
 80018f2:	f001 fb53 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40013000 	.word	0x40013000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b090      	sub	sp, #64	; 0x40
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192c:	d128      	bne.n	8001980 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800195e:	2303      	movs	r3, #3
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800196e:	2301      	movs	r3, #1
 8001970:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	4849      	ldr	r0, [pc, #292]	; (8001aa0 <HAL_TIM_Encoder_MspInit+0x194>)
 800197a:	f001 fb0f 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800197e:	e089      	b.n	8001a94 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a47      	ldr	r2, [pc, #284]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x198>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d128      	bne.n	80019dc <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a43      	ldr	r2, [pc, #268]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a3d      	ldr	r2, [pc, #244]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ca:	2302      	movs	r3, #2
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d2:	4619      	mov	r1, r3
 80019d4:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <HAL_TIM_Encoder_MspInit+0x19c>)
 80019d6:	f001 fae1 	bl	8002f9c <HAL_GPIO_Init>
}
 80019da:	e05b      	b.n	8001a94 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <HAL_TIM_Encoder_MspInit+0x1a0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d129      	bne.n	8001a3a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001a34:	f001 fab2 	bl	8002f9c <HAL_GPIO_Init>
}
 8001a38:	e02c      	b.n	8001a94 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d127      	bne.n	8001a94 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_TIM_Encoder_MspInit+0x190>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a74:	2360      	movs	r3, #96	; 0x60
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a84:	2303      	movs	r3, #3
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001a90:	f001 fa84 	bl	8002f9c <HAL_GPIO_Init>
}
 8001a94:	bf00      	nop
 8001a96:	3740      	adds	r7, #64	; 0x40
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40000c00 	.word	0x40000c00
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	40022000 	.word	0x40022000

08001abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0ae      	sub	sp, #184	; 0xb8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2290      	movs	r2, #144	; 0x90
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f008 fea7 	bl	800a830 <memset>
  if(huart->Instance==UART5)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <HAL_UART_MspInit+0x164>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	f040 8095 	bne.w	8001c18 <HAL_UART_MspInit+0x15c>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 ff19 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b08:	f7ff fb80 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b0c:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	6313      	str	r3, [r2, #48]	; 0x30
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_UART_MspInit+0x168>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b6e:	2308      	movs	r3, #8
 8001b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	482b      	ldr	r0, [pc, #172]	; (8001c28 <HAL_UART_MspInit+0x16c>)
 8001b7c:	f001 fa0e 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b80:	2304      	movs	r3, #4
 8001b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4821      	ldr	r0, [pc, #132]	; (8001c2c <HAL_UART_MspInit+0x170>)
 8001ba6:	f001 f9f9 	bl	8002f9c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_UART_MspInit+0x178>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001be0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001bec:	4810      	ldr	r0, [pc, #64]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001bee:	f000 feeb 	bl	80029c8 <HAL_DMA_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001bf8:	f7ff fb08 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001c00:	671a      	str	r2, [r3, #112]	; 0x70
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_UART_MspInit+0x174>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6393      	str	r3, [r2, #56]	; 0x38

    /* Configurar NVIC para DMA (opcional pero recomendado) */
       HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	202f      	movs	r0, #47	; 0x2f
 8001c0e:	f000 feb1 	bl	8002974 <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001c12:	202f      	movs	r0, #47	; 0x2f
 8001c14:	f000 feca 	bl	80029ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001c18:	bf00      	nop
 8001c1a:	37b8      	adds	r7, #184	; 0xb8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005000 	.word	0x40005000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	20000700 	.word	0x20000700
 8001c34:	400260b8 	.word	0x400260b8

08001c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <HAL_InitTick+0xd0>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <HAL_InitTick+0xd0>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6453      	str	r3, [r2, #68]	; 0x44
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_InitTick+0xd0>)
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fe30 	bl	80048d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c70:	f002 fe1a 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_InitTick+0xd4>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	3b01      	subs	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_InitTick+0xd8>)
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_InitTick+0xdc>)
 8001c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_InitTick+0xd8>)
 8001c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_InitTick+0xd8>)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_InitTick+0xd8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_InitTick+0xd8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_InitTick+0xd8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cae:	4818      	ldr	r0, [pc, #96]	; (8001d10 <HAL_InitTick+0xd8>)
 8001cb0:	f003 feae 	bl	8005a10 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11b      	bne.n	8001cfa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cc2:	4813      	ldr	r0, [pc, #76]	; (8001d10 <HAL_InitTick+0xd8>)
 8001cc4:	f003 ff06 	bl	8005ad4 <HAL_TIM_Base_Start_IT>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d111      	bne.n	8001cfa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cd6:	2019      	movs	r0, #25
 8001cd8:	f000 fe68 	bl	80029ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d808      	bhi.n	8001cf4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	2019      	movs	r0, #25
 8001ce8:	f000 fe44 	bl	8002974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0xe0>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e002      	b.n	8001cfa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3730      	adds	r7, #48	; 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	200000b0 	.word	0x200000b0
 8001d14:	40010000 	.word	0x40010000
 8001d18:	20000038 	.word	0x20000038

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d56:	f003 ffdb 	bl	8005d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200000b0 	.word	0x200000b0

08001d64 <DMA1_Stream7_IRQHandler>:
        // La transmisión ha terminado
    }
}

void DMA1_Stream7_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <DMA1_Stream7_IRQHandler+0x10>)
 8001d6a:	f000 fedb 	bl	8002b24 <HAL_DMA_IRQHandler>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000700 	.word	0x20000700

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	; 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	2234      	movs	r2, #52	; 0x34
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f008 fd52 	bl	800a830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <SystemClock_Config+0xd4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <SystemClock_Config+0xd4>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <SystemClock_Config+0xd4>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <SystemClock_Config+0xd8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <SystemClock_Config+0xd8>)
 8001dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <SystemClock_Config+0xd8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001de0:	2304      	movs	r3, #4
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001de4:	23d8      	movs	r3, #216	; 0xd8
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 f895 	bl	8003f28 <HAL_RCC_OscConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e04:	f7ff fa02 	bl	800120c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e08:	f002 f83e 	bl	8003e88 <HAL_PWREx_EnableOverDrive>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e12:	f7ff f9fb 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e16:	230f      	movs	r3, #15
 8001e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	2107      	movs	r1, #7
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 fb25 	bl	8004484 <HAL_RCC_ClockConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001e40:	f7ff f9e4 	bl	800120c <Error_Handler>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3750      	adds	r7, #80	; 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <MX_I2C1_Init+0x78>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <MX_I2C1_Init+0x7c>)
 8001e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e90:	f001 fa7c 	bl	800338c <HAL_I2C_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e9a:	f7ff f9b7 	bl	800120c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001ea2:	f001 ff59 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001eac:	f7ff f9ae 	bl	800120c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001eb4:	f001 ff9b 	bl	8003dee <HAL_I2CEx_ConfigDigitalFilter>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ebe:	f7ff f9a5 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200003e8 	.word	0x200003e8
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	6000030d 	.word	0x6000030d

08001ed4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <MX_I2C2_Init+0x78>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <MX_I2C2_Init+0x7c>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001f10:	f001 fa3c 	bl	800338c <HAL_I2C_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f1a:	f7ff f977 	bl	800120c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001f22:	f001 ff19 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f2c:	f7ff f96e 	bl	800120c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_I2C2_Init+0x74>)
 8001f34:	f001 ff5b 	bl	8003dee <HAL_I2CEx_ConfigDigitalFilter>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f3e:	f7ff f965 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000043c 	.word	0x2000043c
 8001f4c:	40005800 	.word	0x40005800
 8001f50:	6000030d 	.word	0x6000030d

08001f54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <MX_I2C3_Init+0x78>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <MX_I2C3_Init+0x7c>)
 8001f62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001f90:	f001 f9fc 	bl	800338c <HAL_I2C_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f9a:	f7ff f937 	bl	800120c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001fa2:	f001 fed9 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001fac:	f7ff f92e 	bl	800120c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_I2C3_Init+0x74>)
 8001fb4:	f001 ff1b 	bl	8003dee <HAL_I2CEx_ConfigDigitalFilter>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001fbe:	f7ff f925 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000490 	.word	0x20000490
 8001fcc:	40005c00 	.word	0x40005c00
 8001fd0:	6000030d 	.word	0x6000030d

08001fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <MX_SPI1_Init+0x7c>)
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <MX_SPI1_Init+0x80>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_SPI1_Init+0x7c>)
 8001fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_SPI1_Init+0x7c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_SPI1_Init+0x7c>)
 8001fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ff2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_SPI1_Init+0x7c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_SPI1_Init+0x7c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_SPI1_Init+0x7c>)
 800200a:	2218      	movs	r2, #24
 800200c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <MX_SPI1_Init+0x7c>)
 800201c:	2200      	movs	r2, #0
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002022:	2207      	movs	r2, #7
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_SPI1_Init+0x7c>)
 800202e:	2208      	movs	r2, #8
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002034:	f003 f8a6 	bl	8005184 <HAL_SPI_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800203e:	f7ff f8e5 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <MX_SPI1_Init+0x7c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800204a:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200004e4 	.word	0x200004e4
 8002054:	40013000 	.word	0x40013000

08002058 <MX_UART5_Init>:
  * @param None
  * @retval None
  */

void MX_UART5_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <MX_UART5_Init+0x60>)
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <MX_UART5_Init+0x64>)
 8002060:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <MX_UART5_Init+0x60>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_UART5_Init+0x60>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_UART5_Init+0x60>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_UART5_Init+0x60>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_UART5_Init+0x60>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <MX_UART5_Init+0x60>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_UART5_Init+0x60>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <MX_UART5_Init+0x60>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_UART5_Init+0x60>)
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <MX_UART5_Init+0x60>)
 800209c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020a0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_UART5_Init+0x60>)
 80020a4:	f004 f8c8 	bl	8006238 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80020ae:	f7ff f8ad 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000678 	.word	0x20000678
 80020bc:	40005000 	.word	0x40005000

080020c0 <MX_TIM2_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);

}

void MX_TIM2_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f008 fbae 	bl	800a830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d4:	463b      	mov	r3, r7
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_TIM2_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <MX_TIM2_Init+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002106:	2303      	movs	r3, #3
 8002108:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800211e:	2301      	movs	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <MX_TIM2_Init+0xa4>)
 8002132:	f003 fd47 	bl	8005bc4 <HAL_TIM_Encoder_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800213c:	f7ff f866 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_TIM2_Init+0xa4>)
 800214e:	f003 ffc7 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002158:	f7ff f858 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000548 	.word	0x20000548

08002168 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f008 fb5a 	bl	800a830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217c:	463b      	mov	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_TIM3_Init+0xa4>)
 8002188:	4a21      	ldr	r2, [pc, #132]	; (8002210 <MX_TIM3_Init+0xa8>)
 800218a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <MX_TIM3_Init+0xa4>)
 800218e:	2200      	movs	r2, #0
 8002190:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <MX_TIM3_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <MX_TIM3_Init+0xa4>)
 800219a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800219e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <MX_TIM3_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <MX_TIM3_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021ac:	2303      	movs	r3, #3
 80021ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021b4:	2301      	movs	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	4619      	mov	r1, r3
 80021d6:	480d      	ldr	r0, [pc, #52]	; (800220c <MX_TIM3_Init+0xa4>)
 80021d8:	f003 fcf4 	bl	8005bc4 <HAL_TIM_Encoder_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80021e2:	f7ff f813 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ee:	463b      	mov	r3, r7
 80021f0:	4619      	mov	r1, r3
 80021f2:	4806      	ldr	r0, [pc, #24]	; (800220c <MX_TIM3_Init+0xa4>)
 80021f4:	f003 ff74 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021fe:	f7ff f805 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000594 	.word	0x20000594
 8002210:	40000400 	.word	0x40000400

08002214 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f008 fb04 	bl	800a830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <MX_TIM5_Init+0xa4>)
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <MX_TIM5_Init+0xa8>)
 8002236:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <MX_TIM5_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <MX_TIM5_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <MX_TIM5_Init+0xa4>)
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <MX_TIM5_Init+0xa4>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <MX_TIM5_Init+0xa4>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002258:	2303      	movs	r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4619      	mov	r1, r3
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <MX_TIM5_Init+0xa4>)
 8002284:	f003 fc9e 	bl	8005bc4 <HAL_TIM_Encoder_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800228e:	f7fe ffbd 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800229a:	463b      	mov	r3, r7
 800229c:	4619      	mov	r1, r3
 800229e:	4806      	ldr	r0, [pc, #24]	; (80022b8 <MX_TIM5_Init+0xa4>)
 80022a0:	f003 ff1e 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80022aa:	f7fe ffaf 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	3730      	adds	r7, #48	; 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200005e0 	.word	0x200005e0
 80022bc:	40000c00 	.word	0x40000c00

080022c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	; 0x30
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f008 faae 	bl	800a830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <MX_TIM8_Init+0xac>)
 80022e0:	4a23      	ldr	r2, [pc, #140]	; (8002370 <MX_TIM8_Init+0xb0>)
 80022e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_TIM8_Init+0xac>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <MX_TIM8_Init+0xac>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_TIM8_Init+0xac>)
 80022f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_TIM8_Init+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <MX_TIM8_Init+0xac>)
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_TIM8_Init+0xac>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800230a:	2303      	movs	r3, #3
 800230c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002312:	2301      	movs	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4619      	mov	r1, r3
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM8_Init+0xac>)
 8002336:	f003 fc45 	bl	8005bc4 <HAL_TIM_Encoder_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002340:	f7fe ff64 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_TIM8_Init+0xac>)
 8002356:	f003 fec3 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002360:	f7fe ff54 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3730      	adds	r7, #48	; 0x30
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000062c 	.word	0x2000062c
 8002370:	40010400 	.word	0x40010400

08002374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b090      	sub	sp, #64	; 0x40
 8002378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800238a:	4bb3      	ldr	r3, [pc, #716]	; (8002658 <MX_GPIO_Init+0x2e4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4ab2      	ldr	r2, [pc, #712]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002390:	f043 0320 	orr.w	r3, r3, #32
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4bb0      	ldr	r3, [pc, #704]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023a2:	4bad      	ldr	r3, [pc, #692]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4aac      	ldr	r2, [pc, #688]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4baa      	ldr	r3, [pc, #680]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	4ba7      	ldr	r3, [pc, #668]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4aa6      	ldr	r2, [pc, #664]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4ba4      	ldr	r3, [pc, #656]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	4ba1      	ldr	r3, [pc, #644]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4aa0      	ldr	r2, [pc, #640]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b9e      	ldr	r3, [pc, #632]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	4b9b      	ldr	r3, [pc, #620]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a9a      	ldr	r2, [pc, #616]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b98      	ldr	r3, [pc, #608]	; (8002658 <MX_GPIO_Init+0x2e4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4b95      	ldr	r3, [pc, #596]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a94      	ldr	r2, [pc, #592]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b92      	ldr	r3, [pc, #584]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800241a:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <MX_GPIO_Init+0x2e4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a8e      	ldr	r2, [pc, #568]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a88      	ldr	r2, [pc, #544]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244a:	4b83      	ldr	r3, [pc, #524]	; (8002658 <MX_GPIO_Init+0x2e4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a82      	ldr	r2, [pc, #520]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b80      	ldr	r3, [pc, #512]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002462:	4b7d      	ldr	r3, [pc, #500]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a7c      	ldr	r2, [pc, #496]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <MX_GPIO_Init+0x2e4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002480:	4876      	ldr	r0, [pc, #472]	; (800265c <MX_GPIO_Init+0x2e8>)
 8002482:	f000 ff4f 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	f640 0138 	movw	r1, #2104	; 0x838
 800248c:	4874      	ldr	r0, [pc, #464]	; (8002660 <MX_GPIO_Init+0x2ec>)
 800248e:	f000 ff49 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002498:	4872      	ldr	r0, [pc, #456]	; (8002664 <MX_GPIO_Init+0x2f0>)
 800249a:	f000 ff43 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a4:	4870      	ldr	r0, [pc, #448]	; (8002668 <MX_GPIO_Init+0x2f4>)
 80024a6:	f000 ff3d 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80024b0:	486e      	ldr	r0, [pc, #440]	; (800266c <MX_GPIO_Init+0x2f8>)
 80024b2:	f000 ff37 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024bc:	486c      	ldr	r0, [pc, #432]	; (8002670 <MX_GPIO_Init+0x2fc>)
 80024be:	f000 ff31 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2101      	movs	r1, #1
 80024c6:	486b      	ldr	r0, [pc, #428]	; (8002674 <MX_GPIO_Init+0x300>)
 80024c8:	f000 ff2c 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 80024d2:	4869      	ldr	r0, [pc, #420]	; (8002678 <MX_GPIO_Init+0x304>)
 80024d4:	f000 ff26 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	21c0      	movs	r1, #192	; 0xc0
 80024dc:	4867      	ldr	r0, [pc, #412]	; (800267c <MX_GPIO_Init+0x308>)
 80024de:	f000 ff21 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80024e2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f8:	4619      	mov	r1, r3
 80024fa:	4858      	ldr	r0, [pc, #352]	; (800265c <MX_GPIO_Init+0x2e8>)
 80024fc:	f000 fd4e 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8002500:	f640 0338 	movw	r3, #2104	; 0x838
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002506:	2301      	movs	r3, #1
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	4851      	ldr	r0, [pc, #324]	; (8002660 <MX_GPIO_Init+0x2ec>)
 800251a:	f000 fd3f 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800251e:	2310      	movs	r3, #16
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4853      	ldr	r0, [pc, #332]	; (8002680 <MX_GPIO_Init+0x30c>)
 8002532:	f000 fd33 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002536:	2310      	movs	r3, #16
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253a:	2300      	movs	r3, #0
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	4849      	ldr	r0, [pc, #292]	; (8002670 <MX_GPIO_Init+0x2fc>)
 800254a:	f000 fd27 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800254e:	2304      	movs	r3, #4
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	2300      	movs	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255e:	4619      	mov	r1, r3
 8002560:	4841      	ldr	r0, [pc, #260]	; (8002668 <MX_GPIO_Init+0x2f4>)
 8002562:	f000 fd1b 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002578:	4619      	mov	r1, r3
 800257a:	4838      	ldr	r0, [pc, #224]	; (800265c <MX_GPIO_Init+0x2e8>)
 800257c:	f000 fd0e 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002580:	2303      	movs	r3, #3
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800258c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002590:	4619      	mov	r1, r3
 8002592:	4834      	ldr	r0, [pc, #208]	; (8002664 <MX_GPIO_Init+0x2f0>)
 8002594:	f000 fd02 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002598:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ae:	4619      	mov	r1, r3
 80025b0:	482c      	ldr	r0, [pc, #176]	; (8002664 <MX_GPIO_Init+0x2f0>)
 80025b2:	f000 fcf3 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4826      	ldr	r0, [pc, #152]	; (8002668 <MX_GPIO_Init+0x2f4>)
 80025d0:	f000 fce4 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80025d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ea:	4619      	mov	r1, r3
 80025ec:	481f      	ldr	r0, [pc, #124]	; (800266c <MX_GPIO_Init+0x2f8>)
 80025ee:	f000 fcd5 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002608:	4619      	mov	r1, r3
 800260a:	4819      	ldr	r0, [pc, #100]	; (8002670 <MX_GPIO_Init+0x2fc>)
 800260c:	f000 fcc6 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002610:	2301      	movs	r3, #1
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002624:	4619      	mov	r1, r3
 8002626:	4813      	ldr	r0, [pc, #76]	; (8002674 <MX_GPIO_Init+0x300>)
 8002628:	f000 fcb8 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800262c:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002632:	2301      	movs	r3, #1
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800263e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002642:	4619      	mov	r1, r3
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <MX_GPIO_Init+0x304>)
 8002646:	f000 fca9 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800264a:	23c0      	movs	r3, #192	; 0xc0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264e:	2301      	movs	r3, #1
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	e016      	b.n	8002684 <MX_GPIO_Init+0x310>
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40022000 	.word	0x40022000
 8002660:	40021400 	.word	0x40021400
 8002664:	40022400 	.word	0x40022400
 8002668:	40020400 	.word	0x40020400
 800266c:	40020000 	.word	0x40020000
 8002670:	40020800 	.word	0x40020800
 8002674:	40020c00 	.word	0x40020c00
 8002678:	40021800 	.word	0x40021800
 800267c:	40022800 	.word	0x40022800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800268a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268e:	4619      	mov	r1, r3
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <MX_GPIO_Init+0x32c>)
 8002692:	f000 fc83 	bl	8002f9c <HAL_GPIO_Init>

}
 8002696:	bf00      	nop
 8002698:	3740      	adds	r7, #64	; 0x40
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022800 	.word	0x40022800

080026a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <SystemInit+0x5c>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <SystemInit+0x5c>)
 80026b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <SystemInit+0x60>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <SystemInit+0x60>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <SystemInit+0x60>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <SystemInit+0x60>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	490d      	ldr	r1, [pc, #52]	; (8002704 <SystemInit+0x60>)
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <SystemInit+0x64>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <SystemInit+0x60>)
 80026d8:	4a0c      	ldr	r2, [pc, #48]	; (800270c <SystemInit+0x68>)
 80026da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <SystemInit+0x60>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <SystemInit+0x60>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SystemInit+0x60>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SystemInit+0x5c>)
 80026f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f4:	609a      	str	r2, [r3, #8]
#endif
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00
 8002704:	40023800 	.word	0x40023800
 8002708:	fef6ffff 	.word	0xfef6ffff
 800270c:	24003010 	.word	0x24003010

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002716:	490e      	ldr	r1, [pc, #56]	; (8002750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800272c:	4c0b      	ldr	r4, [pc, #44]	; (800275c <LoopFillZerobss+0x26>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800273a:	f7ff ffb3 	bl	80026a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273e:	f008 f885 	bl	800a84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7fe fb75 	bl	8000e30 <main>
  bx  lr    
 8002746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002748:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002754:	0800b848 	.word	0x0800b848
  ldr r2, =_sbss
 8002758:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800275c:	200045e8 	.word	0x200045e8

08002760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC_IRQHandler>

08002762 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002766:	2003      	movs	r0, #3
 8002768:	f000 f8f9 	bl	800295e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fa63 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002772:	f7fe ff71 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000003c 	.word	0x2000003c
 80027a0:	20000760 	.word	0x20000760

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000760 	.word	0x20000760

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000003c 	.word	0x2000003c

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <__NVIC_SetPriorityGrouping+0x40>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x40>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00
 8002848:	05fa0000 	.word	0x05fa0000

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	; (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	; (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff4c 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002986:	f7ff ff61 	bl	800284c <__NVIC_GetPriorityGrouping>
 800298a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7ff ffb1 	bl	80028f8 <NVIC_EncodePriority>
 8002996:	4602      	mov	r2, r0
 8002998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff80 	bl	80028a4 <__NVIC_SetPriority>
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff54 	bl	8002868 <__NVIC_EnableIRQ>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fee6 	bl	80027a4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fecd 	bl	80027a4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f9e9 	bl	8002ea4 <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9a0 	bl	8002e38 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	e010803f 	.word	0xe010803f

08002b24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b30:	4b8e      	ldr	r3, [pc, #568]	; (8002d6c <HAL_DMA_IRQHandler+0x248>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8e      	ldr	r2, [pc, #568]	; (8002d70 <HAL_DMA_IRQHandler+0x24c>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0a9b      	lsrs	r3, r3, #10
 8002b3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2208      	movs	r2, #8
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01a      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	2204      	movs	r2, #4
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2204      	movs	r2, #4
 8002bea:	409a      	lsls	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f043 0204 	orr.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2210      	movs	r2, #16
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d043      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03c      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	2210      	movs	r2, #16
 8002c20:	409a      	lsls	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d018      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d024      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
 8002c52:	e01f      	b.n	8002c94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e016      	b.n	8002c94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0208 	bic.w	r2, r2, #8
 8002c82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2220      	movs	r2, #32
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 808f 	beq.w	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8087 	beq.w	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2220      	movs	r2, #32
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d136      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0216 	bic.w	r2, r2, #22
 8002cdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <HAL_DMA_IRQHandler+0x1da>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0208 	bic.w	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	223f      	movs	r2, #63	; 0x3f
 8002d14:	409a      	lsls	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07e      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
        }
        return;
 8002d3a:	e079      	b.n	8002e30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01d      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
 8002d68:	e02c      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
 8002d6a:	bf00      	nop
 8002d6c:	20000034 	.word	0x20000034
 8002d70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e01e      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d032      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d022      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2205      	movs	r2, #5
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	3301      	adds	r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d307      	bcc.n	8002e0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f2      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x2cc>
 8002e0a:	e000      	b.n	8002e0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
 8002e2e:	e000      	b.n	8002e32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e30:	bf00      	nop
    }
  }
}
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3b10      	subs	r3, #16
 8002e48:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <DMA_CalcBaseAndBitshift+0x60>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <DMA_CalcBaseAndBitshift+0x64>)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d908      	bls.n	8002e78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	1d1a      	adds	r2, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58
 8002e76:	e006      	b.n	8002e86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	aaaaaaab 	.word	0xaaaaaaab
 8002e9c:	0800b644 	.word	0x0800b644
 8002ea0:	fffffc00 	.word	0xfffffc00

08002ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11f      	bne.n	8002efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d856      	bhi.n	8002f72 <DMA_CheckFifoParam+0xce>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x28>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002eef 	.word	0x08002eef
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002f73 	.word	0x08002f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d046      	beq.n	8002f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e043      	b.n	8002f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef6:	d140      	bne.n	8002f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efc:	e03d      	b.n	8002f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f06:	d121      	bne.n	8002f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d837      	bhi.n	8002f7e <DMA_CheckFifoParam+0xda>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <DMA_CheckFifoParam+0x70>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f2b 	.word	0x08002f2b
 8002f1c:	08002f25 	.word	0x08002f25
 8002f20:	08002f3d 	.word	0x08002f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e030      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d025      	beq.n	8002f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3a:	e022      	b.n	8002f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f44:	d11f      	bne.n	8002f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f4a:	e01c      	b.n	8002f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d903      	bls.n	8002f5a <DMA_CheckFifoParam+0xb6>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d003      	beq.n	8002f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f58:	e018      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5e:	e015      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f70:	e00b      	b.n	8002f8a <DMA_CheckFifoParam+0xe6>
      break;
 8002f72:	bf00      	nop
 8002f74:	e00a      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f76:	bf00      	nop
 8002f78:	e008      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e006      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e175      	b.n	80032a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f040 8164 	bne.w	80032a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d005      	beq.n	8002ff2 <HAL_GPIO_Init+0x56>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d130      	bne.n	8003054 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 0201 	and.w	r2, r3, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b03      	cmp	r3, #3
 800305e:	d017      	beq.n	8003090 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d123      	bne.n	80030e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	220f      	movs	r2, #15
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	08da      	lsrs	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80be 	beq.w	80032a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_GPIO_Init+0x324>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800313e:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_GPIO_Init+0x328>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_GPIO_Init+0x32c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d037      	beq.n	80031da <HAL_GPIO_Init+0x23e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_GPIO_Init+0x330>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_GPIO_Init+0x23a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02b      	beq.n	80031d2 <HAL_GPIO_Init+0x236>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a55      	ldr	r2, [pc, #340]	; (80032d4 <HAL_GPIO_Init+0x338>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x232>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_GPIO_Init+0x33c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x22e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x340>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x22a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_GPIO_Init+0x344>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a51      	ldr	r2, [pc, #324]	; (80032e4 <HAL_GPIO_Init+0x348>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x222>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a50      	ldr	r2, [pc, #320]	; (80032e8 <HAL_GPIO_Init+0x34c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x21e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4f      	ldr	r2, [pc, #316]	; (80032ec <HAL_GPIO_Init+0x350>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x21a>
 80031b2:	2309      	movs	r3, #9
 80031b4:	e012      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031b6:	230a      	movs	r3, #10
 80031b8:	e010      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ba:	2308      	movs	r3, #8
 80031bc:	e00e      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031be:	2307      	movs	r3, #7
 80031c0:	e00c      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e00a      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031da:	2300      	movs	r3, #0
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031ec:	4935      	ldr	r1, [pc, #212]	; (80032c4 <HAL_GPIO_Init+0x328>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_GPIO_Init+0x354>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321e:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003248:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	f67f ae86 	bls.w	8002fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40021400 	.word	0x40021400
 80032e0:	40021800 	.word	0x40021800
 80032e4:	40021c00 	.word	0x40021c00
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022400 	.word	0x40022400
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43d9      	mvns	r1, r3
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	400b      	ands	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e07f      	b.n	800349e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe f978 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	e006      	b.n	8003414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d104      	bne.n	8003426 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_I2C_Init+0x11c>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	02008000 	.word	0x02008000

080034ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	460b      	mov	r3, r1
 80034ba:	817b      	strh	r3, [r7, #10]
 80034bc:	4613      	mov	r3, r2
 80034be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	f040 80da 	bne.w	8003682 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x30>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0d3      	b.n	8003684 <HAL_I2C_Master_Transmit+0x1d8>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034e4:	f7ff f95e 	bl	80027a4 <HAL_GetTick>
 80034e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2319      	movs	r3, #25
 80034f0:	2201      	movs	r2, #1
 80034f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f9e6 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0be      	b.n	8003684 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2221      	movs	r2, #33	; 0x21
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2210      	movs	r2, #16
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	893a      	ldrh	r2, [r7, #8]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	2bff      	cmp	r3, #255	; 0xff
 8003536:	d90e      	bls.n	8003556 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	b2da      	uxtb	r2, r3
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	4b51      	ldr	r3, [pc, #324]	; (800368c <HAL_I2C_Master_Transmit+0x1e0>)
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fbd0 	bl	8003cf4 <I2C_TransferConfig>
 8003554:	e06c      	b.n	8003630 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	b2da      	uxtb	r2, r3
 8003566:	8979      	ldrh	r1, [r7, #10]
 8003568:	4b48      	ldr	r3, [pc, #288]	; (800368c <HAL_I2C_Master_Transmit+0x1e0>)
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fbbf 	bl	8003cf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003576:	e05b      	b.n	8003630 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	6a39      	ldr	r1, [r7, #32]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f9e3 	bl	8003948 <I2C_WaitOnTXISFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e07b      	b.n	8003684 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d034      	beq.n	8003630 <HAL_I2C_Master_Transmit+0x184>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d130      	bne.n	8003630 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f975 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e04d      	b.n	8003684 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2bff      	cmp	r3, #255	; 0xff
 80035f0:	d90e      	bls.n	8003610 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fb73 	bl	8003cf4 <I2C_TransferConfig>
 800360e:	e00f      	b.n	8003630 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	b2da      	uxtb	r2, r3
 8003620:	8979      	ldrh	r1, [r7, #10]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fb62 	bl	8003cf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d19e      	bne.n	8003578 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f9c2 	bl	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e01a      	b.n	8003684 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2220      	movs	r2, #32
 8003654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_I2C_Master_Transmit+0x1e4>)
 8003662:	400b      	ands	r3, r1
 8003664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	80002000 	.word	0x80002000
 8003690:	fe00e800 	.word	0xfe00e800

08003694 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	460b      	mov	r3, r1
 80036a2:	817b      	strh	r3, [r7, #10]
 80036a4:	4613      	mov	r3, r2
 80036a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	f040 80db 	bne.w	800386c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2C_Master_Receive+0x30>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0d4      	b.n	800386e <HAL_I2C_Master_Receive+0x1da>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036cc:	f7ff f86a 	bl	80027a4 <HAL_GetTick>
 80036d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2319      	movs	r3, #25
 80036d8:	2201      	movs	r2, #1
 80036da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f8f2 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0bf      	b.n	800386e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2222      	movs	r2, #34	; 0x22
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2210      	movs	r2, #16
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	893a      	ldrh	r2, [r7, #8]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	2bff      	cmp	r3, #255	; 0xff
 800371e:	d90e      	bls.n	800373e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	b2da      	uxtb	r2, r3
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	4b52      	ldr	r3, [pc, #328]	; (8003878 <HAL_I2C_Master_Receive+0x1e4>)
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fadc 	bl	8003cf4 <I2C_TransferConfig>
 800373c:	e06d      	b.n	800381a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	b2da      	uxtb	r2, r3
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	4b49      	ldr	r3, [pc, #292]	; (8003878 <HAL_I2C_Master_Receive+0x1e4>)
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 facb 	bl	8003cf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800375e:	e05c      	b.n	800381a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	6a39      	ldr	r1, [r7, #32]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f96b 	bl	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e07c      	b.n	800386e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d034      	beq.n	800381a <HAL_I2C_Master_Receive+0x186>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d130      	bne.n	800381a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2200      	movs	r2, #0
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f880 	bl	80038c8 <I2C_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e04d      	b.n	800386e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2bff      	cmp	r3, #255	; 0xff
 80037da:	d90e      	bls.n	80037fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	22ff      	movs	r2, #255	; 0xff
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	8979      	ldrh	r1, [r7, #10]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fa7e 	bl	8003cf4 <I2C_TransferConfig>
 80037f8:	e00f      	b.n	800381a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fa6d 	bl	8003cf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d19d      	bne.n	8003760 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	6a39      	ldr	r1, [r7, #32]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f8cd 	bl	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e01a      	b.n	800386e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2220      	movs	r2, #32
 800383e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_I2C_Master_Receive+0x1e8>)
 800384c:	400b      	ands	r3, r1
 800384e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	80002400 	.word	0x80002400
 800387c:	fe00e800 	.word	0xfe00e800

08003880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d103      	bne.n	800389e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d007      	beq.n	80038bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	619a      	str	r2, [r3, #24]
  }
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d8:	e022      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d01e      	beq.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe ff5f 	bl	80027a4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d113      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e00f      	b.n	8003940 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	429a      	cmp	r2, r3
 800393c:	d0cd      	beq.n	80038da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003954:	e02c      	b.n	80039b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f8ea 	bl	8003b34 <I2C_IsErrorOccurred>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e02a      	b.n	80039c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d01e      	beq.n	80039b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe ff17 	bl	80027a4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e007      	b.n	80039c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d1cb      	bne.n	8003956 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d4:	e028      	b.n	8003a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8aa 	bl	8003b34 <I2C_IsErrorOccurred>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e026      	b.n	8003a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fe fedb 	bl	80027a4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d113      	bne.n	8003a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e007      	b.n	8003a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d1cf      	bne.n	80039d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a4c:	e064      	b.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f86e 	bl	8003b34 <I2C_IsErrorOccurred>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e062      	b.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d138      	bne.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d105      	bne.n	8003a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e04e      	b.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d107      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
 8003aa6:	e002      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e022      	b.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fe fe5f 	bl	80027a4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d193      	bne.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	fe00e800 	.word	0xfe00e800

08003b34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d068      	beq.n	8003c32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2210      	movs	r2, #16
 8003b66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b68:	e049      	b.n	8003bfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d045      	beq.n	8003bfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fe17 	bl	80027a4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_IsErrorOccurred+0x54>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d13a      	bne.n	8003bfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003baa:	d121      	bne.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb2:	d01d      	beq.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d01a      	beq.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bca:	f7fe fdeb 	bl	80027a4 <HAL_GetTick>
 8003bce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd0:	e00e      	b.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bd2:	f7fe fde7 	bl	80027a4 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b19      	cmp	r3, #25
 8003bde:	d907      	bls.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f043 0320 	orr.w	r3, r3, #32
 8003be6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bee:	e006      	b.n	8003bfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d1e9      	bne.n	8003bd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d003      	beq.n	8003c14 <I2C_IsErrorOccurred+0xe0>
 8003c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0aa      	beq.n	8003b6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2220      	movs	r2, #32
 8003c22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f043 0304 	orr.w	r3, r3, #4
 8003c2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fde9 	bl	8003880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <I2C_IsErrorOccurred+0x1bc>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3728      	adds	r7, #40	; 0x28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	fe00e800 	.word	0xfe00e800

08003cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	4613      	mov	r3, r2
 8003d04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d0c:	7a7b      	ldrb	r3, [r7, #9]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	0d5b      	lsrs	r3, r3, #21
 8003d2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <I2C_TransferConfig+0x60>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	43db      	mvns	r3, r3
 8003d38:	ea02 0103 	and.w	r1, r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	03ff63ff 	.word	0x03ff63ff

08003d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d138      	bne.n	8003de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e032      	b.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d139      	bne.n	8003e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e033      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb6:	f7fe fc75 	bl	80027a4 <HAL_GetTick>
 8003eba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ebc:	e009      	b.n	8003ed2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ebe:	f7fe fc71 	bl	80027a4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ecc:	d901      	bls.n	8003ed2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e022      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ede:	d1ee      	bne.n	8003ebe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0f      	ldr	r2, [pc, #60]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eec:	f7fe fc5a 	bl	80027a4 <HAL_GetTick>
 8003ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ef2:	e009      	b.n	8003f08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef4:	f7fe fc56 	bl	80027a4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f02:	d901      	bls.n	8003f08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e007      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40007000 	.word	0x40007000

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e29b      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8087 	beq.w	800405a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f4c:	4b96      	ldr	r3, [pc, #600]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d00c      	beq.n	8003f72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f58:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d112      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62>
 8003f64:	4b90      	ldr	r3, [pc, #576]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f72:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d06c      	beq.n	8004058 <HAL_RCC_OscConfig+0x130>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d168      	bne.n	8004058 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e275      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x7a>
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a83      	ldr	r2, [pc, #524]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e02e      	b.n	8004000 <HAL_RCC_OscConfig+0xd8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x9c>
 8003faa:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7e      	ldr	r2, [pc, #504]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7b      	ldr	r2, [pc, #492]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e01d      	b.n	8004000 <HAL_RCC_OscConfig+0xd8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xc0>
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a75      	ldr	r2, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b73      	ldr	r3, [pc, #460]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a72      	ldr	r2, [pc, #456]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0xd8>
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fbcc 	bl	80027a4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fbc8 	bl	80027a4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e229      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0xe8>
 800402e:	e014      	b.n	800405a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe fbb8 	bl	80027a4 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fbb4 	bl	80027a4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e215      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x110>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d069      	beq.n	800413a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004066:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x190>
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x17a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1e9      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	493d      	ldr	r1, [pc, #244]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e040      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d023      	beq.n	8004108 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe fb6a 	bl	80027a4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fe fb66 	bl	80027a4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1c7      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e6:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4929      	ldr	r1, [pc, #164]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
 8004106:	e018      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fb46 	bl	80027a4 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411c:	f7fe fb42 	bl	80027a4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1a3      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d038      	beq.n	80041b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d019      	beq.n	8004182 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fe fb23 	bl	80027a4 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004162:	f7fe fb1f 	bl	80027a4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e180      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x23a>
 8004180:	e01a      	b.n	80041b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x280>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe fb09 	bl	80027a4 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe fb05 	bl	80027a4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d903      	bls.n	80041ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e166      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
 80041a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	4b92      	ldr	r3, [pc, #584]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80041ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ee      	bne.n	8004196 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a4 	beq.w	800430e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b8c      	ldr	r3, [pc, #560]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	4b89      	ldr	r3, [pc, #548]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a88      	ldr	r2, [pc, #544]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b86      	ldr	r3, [pc, #536]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ee:	4b83      	ldr	r3, [pc, #524]	; (80043fc <HAL_RCC_OscConfig+0x4d4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d118      	bne.n	800422c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041fa:	4b80      	ldr	r3, [pc, #512]	; (80043fc <HAL_RCC_OscConfig+0x4d4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7f      	ldr	r2, [pc, #508]	; (80043fc <HAL_RCC_OscConfig+0x4d4>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fe facd 	bl	80027a4 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fe fac9 	bl	80027a4 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	; 0x64
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e12a      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004220:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCC_OscConfig+0x4d4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x31a>
 8004234:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a6f      	ldr	r2, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	e02d      	b.n	800429e <HAL_RCC_OscConfig+0x376>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x33c>
 800424a:	4b6b      	ldr	r3, [pc, #428]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a6a      	ldr	r2, [pc, #424]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	4b68      	ldr	r3, [pc, #416]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	e01c      	b.n	800429e <HAL_RCC_OscConfig+0x376>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b05      	cmp	r3, #5
 800426a:	d10c      	bne.n	8004286 <HAL_RCC_OscConfig+0x35e>
 800426c:	4b62      	ldr	r3, [pc, #392]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a61      	ldr	r2, [pc, #388]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	e00b      	b.n	800429e <HAL_RCC_OscConfig+0x376>
 8004286:	4b5c      	ldr	r3, [pc, #368]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a5b      	ldr	r2, [pc, #364]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	4b59      	ldr	r3, [pc, #356]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d015      	beq.n	80042d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fe fa7d 	bl	80027a4 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fe fa79 	bl	80027a4 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0d8      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ee      	beq.n	80042ae <HAL_RCC_OscConfig+0x386>
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fe fa67 	bl	80027a4 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fe fa63 	bl	80027a4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e0c2      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ee      	bne.n	80042da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80ae 	beq.w	8004474 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004318:	4b37      	ldr	r3, [pc, #220]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d06d      	beq.n	8004400 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d14b      	bne.n	80043c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe fa34 	bl	80027a4 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe fa30 	bl	80027a4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e091      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	491b      	ldr	r1, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe fa02 	bl	80027a4 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe f9fe 	bl	80027a4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e05f      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x47c>
 80043c2:	e057      	b.n	8004474 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0b      	ldr	r2, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fe f9e8 	bl	80027a4 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fe f9e4 	bl	80027a4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e045      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4b0>
 80043f6:	e03d      	b.n	8004474 <HAL_RCC_OscConfig+0x54c>
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004400:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <HAL_RCC_OscConfig+0x558>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d030      	beq.n	8004470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d129      	bne.n	8004470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d122      	bne.n	8004470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004436:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004438:	4293      	cmp	r3, r2
 800443a:	d119      	bne.n	8004470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d10f      	bne.n	8004470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d107      	bne.n	8004470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0d0      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b67      	ldr	r3, [pc, #412]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 020f 	bic.w	r2, r3, #15
 80044b2:	4965      	ldr	r1, [pc, #404]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b63      	ldr	r3, [pc, #396]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0b8      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e4:	4b59      	ldr	r3, [pc, #356]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a58      	ldr	r2, [pc, #352]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 80044ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a52      	ldr	r2, [pc, #328]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b50      	ldr	r3, [pc, #320]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	494d      	ldr	r1, [pc, #308]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d040      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d115      	bne.n	8004566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e07f      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e073      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004556:	4b3d      	ldr	r3, [pc, #244]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e06b      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 0203 	bic.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4936      	ldr	r1, [pc, #216]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fe f914 	bl	80027a4 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	e00a      	b.n	8004596 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7fe f910 	bl	80027a4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e053      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	4b2d      	ldr	r3, [pc, #180]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 020c 	and.w	r2, r3, #12
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d1eb      	bne.n	8004580 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d210      	bcs.n	80045d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 020f 	bic.w	r2, r3, #15
 80045be:	4922      	ldr	r1, [pc, #136]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b20      	ldr	r3, [pc, #128]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e032      	b.n	800463e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4916      	ldr	r1, [pc, #88]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	490e      	ldr	r1, [pc, #56]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004616:	f000 f821 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800461a:	4602      	mov	r2, r0
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	490a      	ldr	r1, [pc, #40]	; (8004650 <HAL_RCC_ClockConfig+0x1cc>)
 8004628:	5ccb      	ldrb	r3, [r1, r3]
 800462a:	fa22 f303 	lsr.w	r3, r2, r3
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <HAL_RCC_ClockConfig+0x1d0>)
 8004630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_ClockConfig+0x1d4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fafe 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40023c00 	.word	0x40023c00
 800464c:	40023800 	.word	0x40023800
 8004650:	0800b62c 	.word	0x0800b62c
 8004654:	20000034 	.word	0x20000034
 8004658:	20000038 	.word	0x20000038

0800465c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004660:	b094      	sub	sp, #80	; 0x50
 8004662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	647b      	str	r3, [r7, #68]	; 0x44
 8004668:	2300      	movs	r3, #0
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	2300      	movs	r3, #0
 800466e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004674:	4b79      	ldr	r3, [pc, #484]	; (800485c <HAL_RCC_GetSysClockFreq+0x200>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b08      	cmp	r3, #8
 800467e:	d00d      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x40>
 8004680:	2b08      	cmp	r3, #8
 8004682:	f200 80e1 	bhi.w	8004848 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x34>
 800468a:	2b04      	cmp	r3, #4
 800468c:	d003      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x3a>
 800468e:	e0db      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004690:	4b73      	ldr	r3, [pc, #460]	; (8004860 <HAL_RCC_GetSysClockFreq+0x204>)
 8004692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004694:	e0db      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004696:	4b73      	ldr	r3, [pc, #460]	; (8004864 <HAL_RCC_GetSysClockFreq+0x208>)
 8004698:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800469a:	e0d8      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800469c:	4b6f      	ldr	r3, [pc, #444]	; (800485c <HAL_RCC_GetSysClockFreq+0x200>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046a6:	4b6d      	ldr	r3, [pc, #436]	; (800485c <HAL_RCC_GetSysClockFreq+0x200>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d063      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b2:	4b6a      	ldr	r3, [pc, #424]	; (800485c <HAL_RCC_GetSysClockFreq+0x200>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	2200      	movs	r2, #0
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80046bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c4:	633b      	str	r3, [r7, #48]	; 0x30
 80046c6:	2300      	movs	r3, #0
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ce:	4622      	mov	r2, r4
 80046d0:	462b      	mov	r3, r5
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	0159      	lsls	r1, r3, #5
 80046dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e0:	0150      	lsls	r0, r2, #5
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4621      	mov	r1, r4
 80046e8:	1a51      	subs	r1, r2, r1
 80046ea:	6139      	str	r1, [r7, #16]
 80046ec:	4629      	mov	r1, r5
 80046ee:	eb63 0301 	sbc.w	r3, r3, r1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004700:	4659      	mov	r1, fp
 8004702:	018b      	lsls	r3, r1, #6
 8004704:	4651      	mov	r1, sl
 8004706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800470a:	4651      	mov	r1, sl
 800470c:	018a      	lsls	r2, r1, #6
 800470e:	4651      	mov	r1, sl
 8004710:	ebb2 0801 	subs.w	r8, r2, r1
 8004714:	4659      	mov	r1, fp
 8004716:	eb63 0901 	sbc.w	r9, r3, r1
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800472a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800472e:	4690      	mov	r8, r2
 8004730:	4699      	mov	r9, r3
 8004732:	4623      	mov	r3, r4
 8004734:	eb18 0303 	adds.w	r3, r8, r3
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	462b      	mov	r3, r5
 800473c:	eb49 0303 	adc.w	r3, r9, r3
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800474e:	4629      	mov	r1, r5
 8004750:	024b      	lsls	r3, r1, #9
 8004752:	4621      	mov	r1, r4
 8004754:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004758:	4621      	mov	r1, r4
 800475a:	024a      	lsls	r2, r1, #9
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004762:	2200      	movs	r2, #0
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
 8004766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800476c:	f7fb fd68 	bl	8000240 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4613      	mov	r3, r2
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	e058      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b38      	ldr	r3, [pc, #224]	; (800485c <HAL_RCC_GetSysClockFreq+0x200>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	2200      	movs	r2, #0
 8004782:	4618      	mov	r0, r3
 8004784:	4611      	mov	r1, r2
 8004786:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800478a:	623b      	str	r3, [r7, #32]
 800478c:	2300      	movs	r3, #0
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	f04f 0000 	mov.w	r0, #0
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	0159      	lsls	r1, r3, #5
 80047a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a6:	0150      	lsls	r0, r2, #5
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4641      	mov	r1, r8
 80047ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80047b2:	4649      	mov	r1, r9
 80047b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047cc:	ebb2 040a 	subs.w	r4, r2, sl
 80047d0:	eb63 050b 	sbc.w	r5, r3, fp
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	00eb      	lsls	r3, r5, #3
 80047de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e2:	00e2      	lsls	r2, r4, #3
 80047e4:	4614      	mov	r4, r2
 80047e6:	461d      	mov	r5, r3
 80047e8:	4643      	mov	r3, r8
 80047ea:	18e3      	adds	r3, r4, r3
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	464b      	mov	r3, r9
 80047f0:	eb45 0303 	adc.w	r3, r5, r3
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004802:	4629      	mov	r1, r5
 8004804:	028b      	lsls	r3, r1, #10
 8004806:	4621      	mov	r1, r4
 8004808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800480c:	4621      	mov	r1, r4
 800480e:	028a      	lsls	r2, r1, #10
 8004810:	4610      	mov	r0, r2
 8004812:	4619      	mov	r1, r3
 8004814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004816:	2200      	movs	r2, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	61fa      	str	r2, [r7, #28]
 800481c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004820:	f7fb fd0e 	bl	8000240 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_GetSysClockFreq+0x200>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	3301      	adds	r3, #1
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800483c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800483e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004846:	e002      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetSysClockFreq+0x204>)
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800484c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004850:	4618      	mov	r0, r3
 8004852:	3750      	adds	r7, #80	; 0x50
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	00f42400 	.word	0x00f42400
 8004864:	007a1200 	.word	0x007a1200

08004868 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <HAL_RCC_GetHCLKFreq+0x14>)
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000034 	.word	0x20000034

08004880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004884:	f7ff fff0 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0a9b      	lsrs	r3, r3, #10
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	0800b63c 	.word	0x0800b63c

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048ac:	f7ff ffdc 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0b5b      	lsrs	r3, r3, #13
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4903      	ldr	r1, [pc, #12]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	0800b63c 	.word	0x0800b63c

080048d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	220f      	movs	r2, #15
 80048de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0203 	and.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_RCC_GetClockConfig+0x60>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 020f 	and.w	r2, r3, #15
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	40023c00 	.word	0x40023c00

08004934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800495c:	4b69      	ldr	r3, [pc, #420]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a68      	ldr	r2, [pc, #416]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004966:	6093      	str	r3, [r2, #8]
 8004968:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	4964      	ldr	r1, [pc, #400]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d017      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800498e:	4b5d      	ldr	r3, [pc, #372]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	4959      	ldr	r1, [pc, #356]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ac:	d101      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	494a      	ldr	r1, [pc, #296]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e8:	d101      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 808b 	beq.w	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a18:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	4a39      	ldr	r2, [pc, #228]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a22:	6413      	str	r3, [r2, #64]	; 0x40
 8004a24:	4b37      	ldr	r3, [pc, #220]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fd feb2 	bl	80027a4 <HAL_GetTick>
 8004a40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a44:	f7fd feae 	bl	80027a4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e38f      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a56:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a62:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d035      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d02e      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aa2:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d114      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fe76 	bl	80027a4 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd fe72 	bl	80027a4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e351      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ee      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aea:	d111      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004afa:	400b      	ands	r3, r1
 8004afc:	4901      	ldr	r1, [pc, #4]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
 8004b02:	e00b      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	0ffffcff 	.word	0x0ffffcff
 8004b10:	4bac      	ldr	r3, [pc, #688]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4aab      	ldr	r2, [pc, #684]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b1a:	6093      	str	r3, [r2, #8]
 8004b1c:	4ba9      	ldr	r3, [pc, #676]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b28:	49a6      	ldr	r1, [pc, #664]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b3a:	4ba2      	ldr	r3, [pc, #648]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b40:	4aa0      	ldr	r2, [pc, #640]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b4a:	4b9e      	ldr	r3, [pc, #632]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	499b      	ldr	r1, [pc, #620]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b68:	4b96      	ldr	r3, [pc, #600]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b76:	4993      	ldr	r1, [pc, #588]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b8a:	4b8e      	ldr	r3, [pc, #568]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b98:	498a      	ldr	r1, [pc, #552]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bac:	4b85      	ldr	r3, [pc, #532]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bba:	4982      	ldr	r1, [pc, #520]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bce:	4b7d      	ldr	r3, [pc, #500]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4979      	ldr	r1, [pc, #484]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf0:	4b74      	ldr	r3, [pc, #464]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4971      	ldr	r1, [pc, #452]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c12:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f023 020c 	bic.w	r2, r3, #12
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c20:	4968      	ldr	r1, [pc, #416]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c34:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	4960      	ldr	r1, [pc, #384]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c56:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	4957      	ldr	r1, [pc, #348]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c78:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	494f      	ldr	r1, [pc, #316]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	4946      	ldr	r1, [pc, #280]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cbc:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	493e      	ldr	r1, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cde:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cec:	4935      	ldr	r1, [pc, #212]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d00:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0e:	492d      	ldr	r1, [pc, #180]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d011      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d22:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d30:	4924      	ldr	r1, [pc, #144]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	4914      	ldr	r1, [pc, #80]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d94:	490b      	ldr	r1, [pc, #44]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00f      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	4902      	ldr	r1, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	4986      	ldr	r1, [pc, #536]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004df8:	4b81      	ldr	r3, [pc, #516]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e08:	497d      	ldr	r1, [pc, #500]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d006      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80d6 	beq.w	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e24:	4b76      	ldr	r3, [pc, #472]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a75      	ldr	r2, [pc, #468]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fd fcb8 	bl	80027a4 <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e38:	f7fd fcb4 	bl	80027a4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e195      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e4a:	4b6d      	ldr	r3, [pc, #436]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d021      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11d      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e6a:	4b65      	ldr	r3, [pc, #404]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7e:	0e1b      	lsrs	r3, r3, #24
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	019a      	lsls	r2, r3, #6
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	071b      	lsls	r3, r3, #28
 8004e9e:	4958      	ldr	r1, [pc, #352]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02e      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed0:	d129      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ee0:	4b47      	ldr	r3, [pc, #284]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	019a      	lsls	r2, r3, #6
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	493e      	ldr	r1, [pc, #248]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f0e:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f14:	f023 021f 	bic.w	r2, r3, #31
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4938      	ldr	r1, [pc, #224]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01d      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f32:	4b33      	ldr	r3, [pc, #204]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f38:	0e1b      	lsrs	r3, r3, #24
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f40:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f46:	0f1b      	lsrs	r3, r3, #28
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	019a      	lsls	r2, r3, #6
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	071b      	lsls	r3, r3, #28
 8004f66:	4926      	ldr	r1, [pc, #152]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	019a      	lsls	r2, r3, #6
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	491a      	ldr	r1, [pc, #104]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004faa:	f7fd fbfb 	bl	80027a4 <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fb2:	f7fd fbf7 	bl	80027a4 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b64      	cmp	r3, #100	; 0x64
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0d8      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	f040 80ce 	bne.w	8005174 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe4:	f7fd fbde 	bl	80027a4 <HAL_GetTick>
 8004fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fea:	e00b      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fec:	f7fd fbda 	bl	80027a4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	; 0x64
 8004ff8:	d904      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e0bb      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005004:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005010:	d0ec      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800502e:	2b00      	cmp	r3, #0
 8005030:	d02e      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d12a      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800503a:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	0c1b      	lsrs	r3, r3, #16
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005048:	4b4d      	ldr	r3, [pc, #308]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	0f1b      	lsrs	r3, r3, #28
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	019a      	lsls	r2, r3, #6
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	071b      	lsls	r3, r3, #28
 800506e:	4944      	ldr	r1, [pc, #272]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005076:	4b42      	ldr	r3, [pc, #264]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	3b01      	subs	r3, #1
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	493d      	ldr	r1, [pc, #244]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d022      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a4:	d11d      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050a6:	4b36      	ldr	r3, [pc, #216]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	0e1b      	lsrs	r3, r3, #24
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b4:	4b32      	ldr	r3, [pc, #200]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	0f1b      	lsrs	r3, r3, #28
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	019a      	lsls	r2, r3, #6
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	431a      	orrs	r2, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	071b      	lsls	r3, r3, #28
 80050da:	4929      	ldr	r1, [pc, #164]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d028      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050fc:	4b20      	ldr	r3, [pc, #128]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	019a      	lsls	r2, r3, #6
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	061b      	lsls	r3, r3, #24
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	071b      	lsls	r3, r3, #28
 8005122:	4917      	ldr	r1, [pc, #92]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800512a:	4b15      	ldr	r3, [pc, #84]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	4911      	ldr	r1, [pc, #68]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fd fb2a 	bl	80027a4 <HAL_GetTick>
 8005150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005154:	f7fd fb26 	bl	80027a4 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e007      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005172:	d1ef      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800

08005184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e09d      	b.n	80052d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a6:	d009      	beq.n	80051bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
 80051ae:	e005      	b.n	80051bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc fb54 	bl	8001884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051fc:	d902      	bls.n	8005204 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e002      	b.n	800520a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005208:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005212:	d007      	beq.n	8005224 <HAL_SPI_Init+0xa0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	ea42 0103 	orr.w	r1, r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	f003 0204 	and.w	r2, r3, #4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052a0:	ea42 0103 	orr.w	r1, r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b08a      	sub	sp, #40	; 0x28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052e8:	2301      	movs	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x26>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e1fb      	b.n	80056f8 <HAL_SPI_TransmitReceive+0x41e>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005308:	f7fd fa4c 	bl	80027a4 <HAL_GetTick>
 800530c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005314:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005320:	887b      	ldrh	r3, [r7, #2]
 8005322:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005324:	7efb      	ldrb	r3, [r7, #27]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d00e      	beq.n	8005348 <HAL_SPI_TransmitReceive+0x6e>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005330:	d106      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x66>
 800533a:	7efb      	ldrb	r3, [r7, #27]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d003      	beq.n	8005348 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005340:	2302      	movs	r3, #2
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005346:	e1cd      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_SPI_TransmitReceive+0x80>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_SPI_TransmitReceive+0x80>
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005360:	e1c0      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b04      	cmp	r3, #4
 800536c:	d003      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2205      	movs	r2, #5
 8005372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	887a      	ldrh	r2, [r7, #2]
 8005386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	887a      	ldrh	r2, [r7, #2]
 800538e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b8:	d802      	bhi.n	80053c0 <HAL_SPI_TransmitReceive+0xe6>
 80053ba:	8a3b      	ldrh	r3, [r7, #16]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d908      	bls.n	80053d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	e007      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d007      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005408:	d97c      	bls.n	8005504 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x13e>
 8005412:	8a7b      	ldrh	r3, [r7, #18]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d169      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	e056      	b.n	80054ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d11b      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x1aa>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x1aa>
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	2b01      	cmp	r3, #1
 800545a:	d113      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d11c      	bne.n	80054cc <HAL_SPI_TransmitReceive+0x1f2>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d016      	beq.n	80054cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	b292      	uxth	r2, r2
 80054aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	1c9a      	adds	r2, r3, #2
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c8:	2301      	movs	r3, #1
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054cc:	f7fd f96a 	bl	80027a4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d8:	429a      	cmp	r2, r3
 80054da:	d807      	bhi.n	80054ec <HAL_SPI_TransmitReceive+0x212>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d003      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054ea:	e0fb      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1a3      	bne.n	800543e <HAL_SPI_TransmitReceive+0x164>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d19d      	bne.n	800543e <HAL_SPI_TransmitReceive+0x164>
 8005502:	e0df      	b.n	80056c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_SPI_TransmitReceive+0x23a>
 800550c:	8a7b      	ldrh	r3, [r7, #18]
 800550e:	2b01      	cmp	r3, #1
 8005510:	f040 80cb 	bne.w	80056aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d912      	bls.n	8005544 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	881a      	ldrh	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	1c9a      	adds	r2, r3, #2
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b02      	subs	r3, #2
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005542:	e0b2      	b.n	80056aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800556a:	e09e      	b.n	80056aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d134      	bne.n	80055e4 <HAL_SPI_TransmitReceive+0x30a>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02f      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x30a>
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	2b01      	cmp	r3, #1
 8005588:	d12c      	bne.n	80055e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d912      	bls.n	80055ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	881a      	ldrh	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	1c9a      	adds	r2, r3, #2
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b02      	subs	r3, #2
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b8:	e012      	b.n	80055e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d148      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x3aa>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d042      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	d923      	bls.n	8005652 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	b292      	uxth	r2, r2
 8005616:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b02      	subs	r3, #2
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d81f      	bhi.n	8005680 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	e016      	b.n	8005680 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f103 020c 	add.w	r2, r3, #12
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005680:	2301      	movs	r3, #1
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005684:	f7fd f88e 	bl	80027a4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005690:	429a      	cmp	r2, r3
 8005692:	d803      	bhi.n	800569c <HAL_SPI_TransmitReceive+0x3c2>
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d102      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x3c8>
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056a8:	e01c      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f47f af5b 	bne.w	800556c <HAL_SPI_TransmitReceive+0x292>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f47f af54 	bne.w	800556c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f937 	bl	800593c <SPI_EndRxTxTransaction>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d006      	beq.n	80056e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	661a      	str	r2, [r3, #96]	; 0x60
 80056e0:	e000      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80056e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005710:	f7fd f848 	bl	80027a4 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005720:	f7fd f840 	bl	80027a4 <HAL_GetTick>
 8005724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	015b      	lsls	r3, r3, #5
 800572c:	0d1b      	lsrs	r3, r3, #20
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	e054      	b.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d050      	beq.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005740:	f7fd f830 	bl	80027a4 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	429a      	cmp	r2, r3
 800574e:	d902      	bls.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d13d      	bne.n	80057d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576e:	d111      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005778:	d004      	beq.n	8005784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d107      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d10f      	bne.n	80057be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e017      	b.n	8005802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3b01      	subs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d19b      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000034 	.word	0x20000034

08005810 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005822:	f7fc ffbf 	bl	80027a4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	4413      	add	r3, r2
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005832:	f7fc ffb7 	bl	80027a4 <HAL_GetTick>
 8005836:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005840:	4b3d      	ldr	r3, [pc, #244]	; (8005938 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00da      	lsls	r2, r3, #3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	0d1b      	lsrs	r3, r3, #20
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005858:	e060      	b.n	800591c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005860:	d107      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005870:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d050      	beq.n	800591c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800587a:	f7fc ff93 	bl	80027a4 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	429a      	cmp	r2, r3
 8005888:	d902      	bls.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x80>
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d13d      	bne.n	800590c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800589e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a8:	d111      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b2:	d004      	beq.n	80058be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d107      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d6:	d10f      	bne.n	80058f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e010      	b.n	800592e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3b01      	subs	r3, #1
 800591a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4013      	ands	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d196      	bne.n	800585a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000034 	.word	0x20000034

0800593c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ff5b 	bl	8005810 <SPI_WaitFifoStateUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e046      	b.n	80059fe <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005970:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <SPI_EndRxTxTransaction+0xcc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <SPI_EndRxTxTransaction+0xd0>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	0d5b      	lsrs	r3, r3, #21
 800597c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598e:	d112      	bne.n	80059b6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	2180      	movs	r1, #128	; 0x80
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff feb0 	bl	8005700 <SPI_WaitFlagStateUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e023      	b.n	80059fe <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3b01      	subs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d0f2      	beq.n	80059b6 <SPI_EndRxTxTransaction+0x7a>
 80059d0:	e000      	b.n	80059d4 <SPI_EndRxTxTransaction+0x98>
        break;
 80059d2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff15 	bl	8005810 <SPI_WaitFifoStateUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e000      	b.n	80059fe <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000034 	.word	0x20000034
 8005a0c:	165e9f81 	.word	0x165e9f81

08005a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e049      	b.n	8005ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f841 	bl	8005abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f000 faa6 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d001      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e054      	b.n	8005b96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d01d      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a21      	ldr	r2, [pc, #132]	; (8005bac <HAL_TIM_Base_Start_IT+0xd8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x80>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <HAL_TIM_Base_Start_IT+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d115      	bne.n	8005b80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xec>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b06      	cmp	r3, #6
 8005b64:	d015      	beq.n	8005b92 <HAL_TIM_Base_Start_IT+0xbe>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6c:	d011      	beq.n	8005b92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	e008      	b.n	8005b92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40001800 	.word	0x40001800
 8005bc0:	00010007 	.word	0x00010007

08005bc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e08f      	b.n	8005cf8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fb fe8d 	bl	800190c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6899      	ldr	r1, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_TIM_Encoder_Init+0x13c>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f000 f9c3 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_TIM_Encoder_Init+0x140>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <HAL_TIM_Encoder_Init+0x144>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <HAL_TIM_Encoder_Init+0x148>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	4313      	orrs	r3, r2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	011a      	lsls	r2, r3, #4
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	031b      	lsls	r3, r3, #12
 8005c84:	4313      	orrs	r3, r2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	fffebff8 	.word	0xfffebff8
 8005d04:	fffffcfc 	.word	0xfffffcfc
 8005d08:	fffff3f3 	.word	0xfffff3f3
 8005d0c:	ffff0f0f 	.word	0xffff0f0f

08005d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0202 	mvn.w	r2, #2
 8005d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f905 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8f7 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f908 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0204 	mvn.w	r2, #4
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8db 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8cd 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8de 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d122      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d11b      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0208 	mvn.w	r2, #8
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2204      	movs	r2, #4
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f8b1 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8a3 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8b4 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0210 	mvn.w	r2, #16
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f887 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f879 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f88a 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10e      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d107      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0201 	mvn.w	r2, #1
 8005e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fb f9aa 	bl	80011e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eac:	2b80      	cmp	r3, #128	; 0x80
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f9a8 	bl	8006210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d10e      	bne.n	8005eee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d107      	bne.n	8005eee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f99b 	bl	8006224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b40      	cmp	r3, #64	; 0x40
 8005efa:	d10e      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d107      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f838 	bl	8005f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d10e      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d107      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 0220 	mvn.w	r2, #32
 8005f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f95b 	bl	80061fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a40      	ldr	r2, [pc, #256]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <TIM_Base_SetConfig+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <TIM_Base_SetConfig+0x11c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3b      	ldr	r2, [pc, #236]	; (80060c0 <TIM_Base_SetConfig+0x120>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2f      	ldr	r2, [pc, #188]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d027      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	; (80060b8 <TIM_Base_SetConfig+0x118>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d023      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <TIM_Base_SetConfig+0x11c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <TIM_Base_SetConfig+0x120>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d017      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <TIM_Base_SetConfig+0x128>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a27      	ldr	r2, [pc, #156]	; (80060cc <TIM_Base_SetConfig+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <TIM_Base_SetConfig+0x130>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a25      	ldr	r2, [pc, #148]	; (80060d4 <TIM_Base_SetConfig+0x134>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a24      	ldr	r2, [pc, #144]	; (80060d8 <TIM_Base_SetConfig+0x138>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <TIM_Base_SetConfig+0x13c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d108      	bne.n	8006064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40001c00 	.word	0x40001c00
 80060dc:	40002000 	.word	0x40002000

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e06d      	b.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a30      	ldr	r2, [pc, #192]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006132:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d022      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d01d      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d10c      	bne.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40001800 	.word	0x40001800

080061fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e040      	b.n	80062cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fb fc2e 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f82c 	bl	80062d4 <UART_SetConfig>
 800627c:	4603      	mov	r3, r0
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e022      	b.n	80062cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa84 	bl	800679c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fb0b 	bl	80068e0 <UART_CheckIdleState>
 80062ca:	4603      	mov	r3, r0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4ba6      	ldr	r3, [pc, #664]	; (8006598 <UART_SetConfig+0x2c4>)
 8006300:	4013      	ands	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	6979      	ldr	r1, [r7, #20]
 8006308:	430b      	orrs	r3, r1
 800630a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a94      	ldr	r2, [pc, #592]	; (800659c <UART_SetConfig+0x2c8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d120      	bne.n	8006392 <UART_SetConfig+0xbe>
 8006350:	4b93      	ldr	r3, [pc, #588]	; (80065a0 <UART_SetConfig+0x2cc>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b03      	cmp	r3, #3
 800635c:	d816      	bhi.n	800638c <UART_SetConfig+0xb8>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x90>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006375 	.word	0x08006375
 8006368:	08006381 	.word	0x08006381
 800636c:	0800637b 	.word	0x0800637b
 8006370:	08006387 	.word	0x08006387
 8006374:	2301      	movs	r3, #1
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e150      	b.n	800661c <UART_SetConfig+0x348>
 800637a:	2302      	movs	r3, #2
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e14d      	b.n	800661c <UART_SetConfig+0x348>
 8006380:	2304      	movs	r3, #4
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e14a      	b.n	800661c <UART_SetConfig+0x348>
 8006386:	2308      	movs	r3, #8
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e147      	b.n	800661c <UART_SetConfig+0x348>
 800638c:	2310      	movs	r3, #16
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e144      	b.n	800661c <UART_SetConfig+0x348>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a83      	ldr	r2, [pc, #524]	; (80065a4 <UART_SetConfig+0x2d0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d132      	bne.n	8006402 <UART_SetConfig+0x12e>
 800639c:	4b80      	ldr	r3, [pc, #512]	; (80065a0 <UART_SetConfig+0x2cc>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f003 030c 	and.w	r3, r3, #12
 80063a6:	2b0c      	cmp	r3, #12
 80063a8:	d828      	bhi.n	80063fc <UART_SetConfig+0x128>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0xdc>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063e5 	.word	0x080063e5
 80063b4:	080063fd 	.word	0x080063fd
 80063b8:	080063fd 	.word	0x080063fd
 80063bc:	080063fd 	.word	0x080063fd
 80063c0:	080063f1 	.word	0x080063f1
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	080063eb 	.word	0x080063eb
 80063d4:	080063fd 	.word	0x080063fd
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	080063fd 	.word	0x080063fd
 80063e0:	080063f7 	.word	0x080063f7
 80063e4:	2300      	movs	r3, #0
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e118      	b.n	800661c <UART_SetConfig+0x348>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e115      	b.n	800661c <UART_SetConfig+0x348>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e112      	b.n	800661c <UART_SetConfig+0x348>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e10f      	b.n	800661c <UART_SetConfig+0x348>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e10c      	b.n	800661c <UART_SetConfig+0x348>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a68      	ldr	r2, [pc, #416]	; (80065a8 <UART_SetConfig+0x2d4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d120      	bne.n	800644e <UART_SetConfig+0x17a>
 800640c:	4b64      	ldr	r3, [pc, #400]	; (80065a0 <UART_SetConfig+0x2cc>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006416:	2b30      	cmp	r3, #48	; 0x30
 8006418:	d013      	beq.n	8006442 <UART_SetConfig+0x16e>
 800641a:	2b30      	cmp	r3, #48	; 0x30
 800641c:	d814      	bhi.n	8006448 <UART_SetConfig+0x174>
 800641e:	2b20      	cmp	r3, #32
 8006420:	d009      	beq.n	8006436 <UART_SetConfig+0x162>
 8006422:	2b20      	cmp	r3, #32
 8006424:	d810      	bhi.n	8006448 <UART_SetConfig+0x174>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <UART_SetConfig+0x15c>
 800642a:	2b10      	cmp	r3, #16
 800642c:	d006      	beq.n	800643c <UART_SetConfig+0x168>
 800642e:	e00b      	b.n	8006448 <UART_SetConfig+0x174>
 8006430:	2300      	movs	r3, #0
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e0f2      	b.n	800661c <UART_SetConfig+0x348>
 8006436:	2302      	movs	r3, #2
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e0ef      	b.n	800661c <UART_SetConfig+0x348>
 800643c:	2304      	movs	r3, #4
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e0ec      	b.n	800661c <UART_SetConfig+0x348>
 8006442:	2308      	movs	r3, #8
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e0e9      	b.n	800661c <UART_SetConfig+0x348>
 8006448:	2310      	movs	r3, #16
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e0e6      	b.n	800661c <UART_SetConfig+0x348>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a56      	ldr	r2, [pc, #344]	; (80065ac <UART_SetConfig+0x2d8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d120      	bne.n	800649a <UART_SetConfig+0x1c6>
 8006458:	4b51      	ldr	r3, [pc, #324]	; (80065a0 <UART_SetConfig+0x2cc>)
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006462:	2bc0      	cmp	r3, #192	; 0xc0
 8006464:	d013      	beq.n	800648e <UART_SetConfig+0x1ba>
 8006466:	2bc0      	cmp	r3, #192	; 0xc0
 8006468:	d814      	bhi.n	8006494 <UART_SetConfig+0x1c0>
 800646a:	2b80      	cmp	r3, #128	; 0x80
 800646c:	d009      	beq.n	8006482 <UART_SetConfig+0x1ae>
 800646e:	2b80      	cmp	r3, #128	; 0x80
 8006470:	d810      	bhi.n	8006494 <UART_SetConfig+0x1c0>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <UART_SetConfig+0x1a8>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d006      	beq.n	8006488 <UART_SetConfig+0x1b4>
 800647a:	e00b      	b.n	8006494 <UART_SetConfig+0x1c0>
 800647c:	2300      	movs	r3, #0
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e0cc      	b.n	800661c <UART_SetConfig+0x348>
 8006482:	2302      	movs	r3, #2
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e0c9      	b.n	800661c <UART_SetConfig+0x348>
 8006488:	2304      	movs	r3, #4
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e0c6      	b.n	800661c <UART_SetConfig+0x348>
 800648e:	2308      	movs	r3, #8
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e0c3      	b.n	800661c <UART_SetConfig+0x348>
 8006494:	2310      	movs	r3, #16
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e0c0      	b.n	800661c <UART_SetConfig+0x348>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a44      	ldr	r2, [pc, #272]	; (80065b0 <UART_SetConfig+0x2dc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d125      	bne.n	80064f0 <UART_SetConfig+0x21c>
 80064a4:	4b3e      	ldr	r3, [pc, #248]	; (80065a0 <UART_SetConfig+0x2cc>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b2:	d017      	beq.n	80064e4 <UART_SetConfig+0x210>
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b8:	d817      	bhi.n	80064ea <UART_SetConfig+0x216>
 80064ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064be:	d00b      	beq.n	80064d8 <UART_SetConfig+0x204>
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c4:	d811      	bhi.n	80064ea <UART_SetConfig+0x216>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <UART_SetConfig+0x1fe>
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	d006      	beq.n	80064de <UART_SetConfig+0x20a>
 80064d0:	e00b      	b.n	80064ea <UART_SetConfig+0x216>
 80064d2:	2300      	movs	r3, #0
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e0a1      	b.n	800661c <UART_SetConfig+0x348>
 80064d8:	2302      	movs	r3, #2
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e09e      	b.n	800661c <UART_SetConfig+0x348>
 80064de:	2304      	movs	r3, #4
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	e09b      	b.n	800661c <UART_SetConfig+0x348>
 80064e4:	2308      	movs	r3, #8
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e098      	b.n	800661c <UART_SetConfig+0x348>
 80064ea:	2310      	movs	r3, #16
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e095      	b.n	800661c <UART_SetConfig+0x348>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2f      	ldr	r2, [pc, #188]	; (80065b4 <UART_SetConfig+0x2e0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d125      	bne.n	8006546 <UART_SetConfig+0x272>
 80064fa:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <UART_SetConfig+0x2cc>)
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006508:	d017      	beq.n	800653a <UART_SetConfig+0x266>
 800650a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800650e:	d817      	bhi.n	8006540 <UART_SetConfig+0x26c>
 8006510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006514:	d00b      	beq.n	800652e <UART_SetConfig+0x25a>
 8006516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651a:	d811      	bhi.n	8006540 <UART_SetConfig+0x26c>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <UART_SetConfig+0x254>
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006524:	d006      	beq.n	8006534 <UART_SetConfig+0x260>
 8006526:	e00b      	b.n	8006540 <UART_SetConfig+0x26c>
 8006528:	2301      	movs	r3, #1
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e076      	b.n	800661c <UART_SetConfig+0x348>
 800652e:	2302      	movs	r3, #2
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e073      	b.n	800661c <UART_SetConfig+0x348>
 8006534:	2304      	movs	r3, #4
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e070      	b.n	800661c <UART_SetConfig+0x348>
 800653a:	2308      	movs	r3, #8
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e06d      	b.n	800661c <UART_SetConfig+0x348>
 8006540:	2310      	movs	r3, #16
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e06a      	b.n	800661c <UART_SetConfig+0x348>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <UART_SetConfig+0x2e4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d138      	bne.n	80065c2 <UART_SetConfig+0x2ee>
 8006550:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <UART_SetConfig+0x2cc>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800655a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800655e:	d017      	beq.n	8006590 <UART_SetConfig+0x2bc>
 8006560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006564:	d82a      	bhi.n	80065bc <UART_SetConfig+0x2e8>
 8006566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656a:	d00b      	beq.n	8006584 <UART_SetConfig+0x2b0>
 800656c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006570:	d824      	bhi.n	80065bc <UART_SetConfig+0x2e8>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <UART_SetConfig+0x2aa>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	d006      	beq.n	800658a <UART_SetConfig+0x2b6>
 800657c:	e01e      	b.n	80065bc <UART_SetConfig+0x2e8>
 800657e:	2300      	movs	r3, #0
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e04b      	b.n	800661c <UART_SetConfig+0x348>
 8006584:	2302      	movs	r3, #2
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e048      	b.n	800661c <UART_SetConfig+0x348>
 800658a:	2304      	movs	r3, #4
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e045      	b.n	800661c <UART_SetConfig+0x348>
 8006590:	2308      	movs	r3, #8
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e042      	b.n	800661c <UART_SetConfig+0x348>
 8006596:	bf00      	nop
 8006598:	efff69f3 	.word	0xefff69f3
 800659c:	40011000 	.word	0x40011000
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40004400 	.word	0x40004400
 80065a8:	40004800 	.word	0x40004800
 80065ac:	40004c00 	.word	0x40004c00
 80065b0:	40005000 	.word	0x40005000
 80065b4:	40011400 	.word	0x40011400
 80065b8:	40007800 	.word	0x40007800
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e02c      	b.n	800661c <UART_SetConfig+0x348>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a72      	ldr	r2, [pc, #456]	; (8006790 <UART_SetConfig+0x4bc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d125      	bne.n	8006618 <UART_SetConfig+0x344>
 80065cc:	4b71      	ldr	r3, [pc, #452]	; (8006794 <UART_SetConfig+0x4c0>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065da:	d017      	beq.n	800660c <UART_SetConfig+0x338>
 80065dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065e0:	d817      	bhi.n	8006612 <UART_SetConfig+0x33e>
 80065e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e6:	d00b      	beq.n	8006600 <UART_SetConfig+0x32c>
 80065e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ec:	d811      	bhi.n	8006612 <UART_SetConfig+0x33e>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <UART_SetConfig+0x326>
 80065f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f6:	d006      	beq.n	8006606 <UART_SetConfig+0x332>
 80065f8:	e00b      	b.n	8006612 <UART_SetConfig+0x33e>
 80065fa:	2300      	movs	r3, #0
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e00d      	b.n	800661c <UART_SetConfig+0x348>
 8006600:	2302      	movs	r3, #2
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e00a      	b.n	800661c <UART_SetConfig+0x348>
 8006606:	2304      	movs	r3, #4
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e007      	b.n	800661c <UART_SetConfig+0x348>
 800660c:	2308      	movs	r3, #8
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e004      	b.n	800661c <UART_SetConfig+0x348>
 8006612:	2310      	movs	r3, #16
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e001      	b.n	800661c <UART_SetConfig+0x348>
 8006618:	2310      	movs	r3, #16
 800661a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006624:	d15b      	bne.n	80066de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006626:	7ffb      	ldrb	r3, [r7, #31]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d828      	bhi.n	800667e <UART_SetConfig+0x3aa>
 800662c:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0x360>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006659 	.word	0x08006659
 8006638:	08006661 	.word	0x08006661
 800663c:	08006669 	.word	0x08006669
 8006640:	0800667f 	.word	0x0800667f
 8006644:	0800666f 	.word	0x0800666f
 8006648:	0800667f 	.word	0x0800667f
 800664c:	0800667f 	.word	0x0800667f
 8006650:	0800667f 	.word	0x0800667f
 8006654:	08006677 	.word	0x08006677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006658:	f7fe f912 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 800665c:	61b8      	str	r0, [r7, #24]
        break;
 800665e:	e013      	b.n	8006688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006660:	f7fe f922 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8006664:	61b8      	str	r0, [r7, #24]
        break;
 8006666:	e00f      	b.n	8006688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006668:	4b4b      	ldr	r3, [pc, #300]	; (8006798 <UART_SetConfig+0x4c4>)
 800666a:	61bb      	str	r3, [r7, #24]
        break;
 800666c:	e00c      	b.n	8006688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666e:	f7fd fff5 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8006672:	61b8      	str	r0, [r7, #24]
        break;
 8006674:	e008      	b.n	8006688 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667a:	61bb      	str	r3, [r7, #24]
        break;
 800667c:	e004      	b.n	8006688 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	77bb      	strb	r3, [r7, #30]
        break;
 8006686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d074      	beq.n	8006778 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	005a      	lsls	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d916      	bls.n	80066d8 <UART_SetConfig+0x404>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b0:	d212      	bcs.n	80066d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f023 030f 	bic.w	r3, r3, #15
 80066ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	89fb      	ldrh	r3, [r7, #14]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	89fa      	ldrh	r2, [r7, #14]
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	e04f      	b.n	8006778 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	77bb      	strb	r3, [r7, #30]
 80066dc:	e04c      	b.n	8006778 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066de:	7ffb      	ldrb	r3, [r7, #31]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d828      	bhi.n	8006736 <UART_SetConfig+0x462>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x418>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006711 	.word	0x08006711
 80066f0:	08006719 	.word	0x08006719
 80066f4:	08006721 	.word	0x08006721
 80066f8:	08006737 	.word	0x08006737
 80066fc:	08006727 	.word	0x08006727
 8006700:	08006737 	.word	0x08006737
 8006704:	08006737 	.word	0x08006737
 8006708:	08006737 	.word	0x08006737
 800670c:	0800672f 	.word	0x0800672f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe f8b6 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8006714:	61b8      	str	r0, [r7, #24]
        break;
 8006716:	e013      	b.n	8006740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006718:	f7fe f8c6 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 800671c:	61b8      	str	r0, [r7, #24]
        break;
 800671e:	e00f      	b.n	8006740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <UART_SetConfig+0x4c4>)
 8006722:	61bb      	str	r3, [r7, #24]
        break;
 8006724:	e00c      	b.n	8006740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006726:	f7fd ff99 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800672a:	61b8      	str	r0, [r7, #24]
        break;
 800672c:	e008      	b.n	8006740 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	61bb      	str	r3, [r7, #24]
        break;
 8006734:	e004      	b.n	8006740 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	77bb      	strb	r3, [r7, #30]
        break;
 800673e:	bf00      	nop
    }

    if (pclk != 0U)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d018      	beq.n	8006778 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	085a      	lsrs	r2, r3, #1
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	441a      	add	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b0f      	cmp	r3, #15
 800675e:	d909      	bls.n	8006774 <UART_SetConfig+0x4a0>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006766:	d205      	bcs.n	8006774 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e001      	b.n	8006778 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006784:	7fbb      	ldrb	r3, [r7, #30]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40007c00 	.word	0x40007c00
 8006794:	40023800 	.word	0x40023800
 8006798:	00f42400 	.word	0x00f42400

0800679c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01a      	beq.n	80068b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d10a      	bne.n	80068b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  }
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f0:	f7fb ff58 	bl	80027a4 <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b08      	cmp	r3, #8
 8006902:	d10e      	bne.n	8006922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f831 	bl	800697a <UART_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e027      	b.n	8006972 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d10e      	bne.n	800694e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f81b 	bl	800697a <UART_WaitOnFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e011      	b.n	8006972 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b09c      	sub	sp, #112	; 0x70
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698a:	e0a7      	b.n	8006adc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	f000 80a3 	beq.w	8006adc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fb ff05 	bl	80027a4 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <UART_WaitOnFlagUntilTimeout+0x32>
 80069a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d13f      	bne.n	8006a2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069c0:	667b      	str	r3, [r7, #100]	; 0x64
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	663b      	str	r3, [r7, #96]	; 0x60
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e068      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d050      	beq.n	8006adc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a48:	d148      	bne.n	8006adc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
 8006a74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	613b      	str	r3, [r7, #16]
   return(result);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006aa6:	623a      	str	r2, [r7, #32]
 8006aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	69f9      	ldr	r1, [r7, #28]
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e010      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	f43f af48 	beq.w	800698c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3770      	adds	r7, #112	; 0x70
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b18:	2b84      	cmp	r3, #132	; 0x84
 8006b1a:	d005      	beq.n	8006b28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	3303      	adds	r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b3c:	f3ef 8305 	mrs	r3, IPSR
 8006b40:	607b      	str	r3, [r7, #4]
  return(result);
 8006b42:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b5e:	f001 fb3b 	bl	80081d8 <vTaskStartScheduler>
  
  return osOK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006b6c:	f7ff ffe3 	bl	8006b36 <inHandlerMode>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006b76:	f001 fc37 	bl	80083e8 <xTaskGetTickCountFromISR>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	e002      	b.n	8006b84 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006b7e:	f001 fc23 	bl	80083c8 <xTaskGetTickCount>
 8006b82:	4603      	mov	r3, r0
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685c      	ldr	r4, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b9e:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff ffad 	bl	8006b06 <makeFreeRtosPriority>
 8006bac:	4602      	mov	r2, r0
 8006bae:	f107 030c 	add.w	r3, r7, #12
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	9200      	str	r2, [sp, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f001 f91d 	bl	8007dfc <xTaskCreate>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d001      	beq.n	8006bcc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <osDelay+0x16>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	e000      	b.n	8006bee <osDelay+0x18>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fabc 	bl	800816c <vTaskDelay>
  
  return osOK;
 8006bf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8006c06:	2001      	movs	r0, #1
 8006c08:	f000 fafb 	bl	8007202 <xQueueCreateMutex>
 8006c0c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006c22:	2300      	movs	r3, #0
 8006c24:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <osMutexWait+0x18>
    return osErrorParameter;
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	e03a      	b.n	8006ca6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d103      	bne.n	8006c44 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e009      	b.n	8006c58 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <osMutexWait+0x40>
      ticks = 1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006c58:	f7ff ff6d 	bl	8006b36 <inHandlerMode>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d017      	beq.n	8006c92 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	461a      	mov	r2, r3
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 ff18 	bl	8007aa0 <xQueueReceiveFromISR>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d001      	beq.n	8006c7a <osMutexWait+0x62>
      return osErrorOS;
 8006c76:	23ff      	movs	r3, #255	; 0xff
 8006c78:	e015      	b.n	8006ca6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d011      	beq.n	8006ca4 <osMutexWait+0x8c>
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <osMutexWait+0x98>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	e008      	b.n	8006ca4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fdef 	bl	8007878 <xQueueSemaphoreTake>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <osMutexWait+0x8c>
    return osErrorOS;
 8006ca0:	23ff      	movs	r3, #255	; 0xff
 8006ca2:	e000      	b.n	8006ca6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	e000ed04 	.word	0xe000ed04

08006cb4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006cc4:	f7ff ff37 	bl	8006b36 <inHandlerMode>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006cce:	f107 0308 	add.w	r3, r7, #8
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc53 	bl	8007580 <xQueueGiveFromISR>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d001      	beq.n	8006ce4 <osMutexRelease+0x30>
      return osErrorOS;
 8006ce0:	23ff      	movs	r3, #255	; 0xff
 8006ce2:	e017      	b.n	8006d14 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d013      	beq.n	8006d12 <osMutexRelease+0x5e>
 8006cea:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <osMutexRelease+0x68>)
 8006cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	e00a      	b.n	8006d12 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2100      	movs	r1, #0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa96 	bl	8007234 <xQueueGenericSend>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d001      	beq.n	8006d12 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006d0e:	23ff      	movs	r3, #255	; 0xff
 8006d10:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	4619      	mov	r1, r3
 8006d36:	f000 f9ed 	bl	8007114 <xQueueGenericCreate>
 8006d3a:	4603      	mov	r3, r0
#endif
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <osMessagePut+0x1e>
    ticks = 1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006d62:	f7ff fee8 	bl	8006b36 <inHandlerMode>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d018      	beq.n	8006d9e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006d6c:	f107 0210 	add.w	r2, r7, #16
 8006d70:	f107 0108 	add.w	r1, r7, #8
 8006d74:	2300      	movs	r3, #0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fb62 	bl	8007440 <xQueueGenericSendFromISR>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d001      	beq.n	8006d86 <osMessagePut+0x42>
      return osErrorOS;
 8006d82:	23ff      	movs	r3, #255	; 0xff
 8006d84:	e018      	b.n	8006db8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d014      	beq.n	8006db6 <osMessagePut+0x72>
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <osMessagePut+0x7c>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	e00b      	b.n	8006db6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006d9e:	f107 0108 	add.w	r1, r7, #8
 8006da2:	2300      	movs	r3, #0
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fa44 	bl	8007234 <xQueueGenericSend>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d001      	beq.n	8006db6 <osMessagePut+0x72>
      return osErrorOS;
 8006db2:	23ff      	movs	r3, #255	; 0xff
 8006db4:	e000      	b.n	8006db8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b08b      	sub	sp, #44	; 0x2c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006dde:	2380      	movs	r3, #128	; 0x80
 8006de0:	617b      	str	r3, [r7, #20]
    return event;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	461c      	mov	r4, r3
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006df2:	e054      	b.n	8006e9e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d103      	bne.n	8006e0c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	e009      	b.n	8006e20 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <osMessageGet+0x5c>
      ticks = 1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006e20:	f7ff fe89 	bl	8006b36 <inHandlerMode>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d01c      	beq.n	8006e64 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006e2a:	f107 0220 	add.w	r2, r7, #32
 8006e2e:	f107 0314 	add.w	r3, r7, #20
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	68b8      	ldr	r0, [r7, #8]
 8006e38:	f000 fe32 	bl	8007aa0 <xQueueReceiveFromISR>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d102      	bne.n	8006e48 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006e42:	2310      	movs	r3, #16
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e001      	b.n	8006e4c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01d      	beq.n	8006e8e <osMessageGet+0xca>
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <osMessageGet+0xe4>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	e014      	b.n	8006e8e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006e64:	f107 0314 	add.w	r3, r7, #20
 8006e68:	3304      	adds	r3, #4
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	68b8      	ldr	r0, [r7, #8]
 8006e70:	f000 fc1c 	bl	80076ac <xQueueReceive>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d102      	bne.n	8006e80 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006e7a:	2310      	movs	r3, #16
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	e006      	b.n	8006e8e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <osMessageGet+0xc6>
 8006e86:	2300      	movs	r3, #0
 8006e88:	e000      	b.n	8006e8c <osMessageGet+0xc8>
 8006e8a:	2340      	movs	r3, #64	; 0x40
 8006e8c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	461c      	mov	r4, r3
 8006e92:	f107 0314 	add.w	r3, r7, #20
 8006e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	372c      	adds	r7, #44	; 0x2c
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <osDelayUntil+0x18>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	e000      	b.n	8006ec6 <osDelayUntil+0x1a>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f8cb 	bl	8008064 <vTaskDelayUntil>
  
  return osOK;
 8006ece:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f103 0208 	add.w	r2, r3, #8
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f103 0208 	add.w	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f103 0208 	add.w	r2, r3, #8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d103      	bne.n	8006f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e00c      	b.n	8006fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e002      	b.n	8006fa8 <vListInsert+0x2e>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d2f6      	bcs.n	8006fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
}
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6892      	ldr	r2, [r2, #8]
 8007002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6852      	ldr	r2, [r2, #4]
 800700c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d103      	bne.n	8007020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	1e5a      	subs	r2, r3, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10c      	bne.n	800706e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	b672      	cpsid	i
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	b662      	cpsie	i
 8007068:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800706e:	f001 fffd 	bl	800906c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	441a      	add	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	3b01      	subs	r3, #1
 80070a0:	68f9      	ldr	r1, [r7, #12]
 80070a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	441a      	add	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	22ff      	movs	r2, #255	; 0xff
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d114      	bne.n	80070ee <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01a      	beq.n	8007102 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3310      	adds	r3, #16
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fad9 	bl	8008688 <xTaskRemoveFromEventList>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d012      	beq.n	8007102 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <xQueueGenericReset+0xd0>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	e009      	b.n	8007102 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3310      	adds	r3, #16
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff fef0 	bl	8006ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3324      	adds	r3, #36	; 0x24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff feeb 	bl	8006ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007102:	f001 ffe7 	bl	80090d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007106:	2301      	movs	r3, #1
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10c      	bne.n	8007142 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	b672      	cpsid	i
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	b662      	cpsie	i
 800713c:	613b      	str	r3, [r7, #16]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	e004      	b.n	8007158 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	fb02 f303 	mul.w	r3, r2, r3
 8007156:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3348      	adds	r3, #72	; 0x48
 800715c:	4618      	mov	r0, r3
 800715e:	f002 f8b1 	bl	80092c4 <pvPortMalloc>
 8007162:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	3348      	adds	r3, #72	; 0x48
 8007172:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007174:	79fa      	ldrb	r2, [r7, #7]
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	4613      	mov	r3, r2
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f805 	bl	8007190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007186:	69bb      	ldr	r3, [r7, #24]
	}
 8007188:	4618      	mov	r0, r3
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071be:	2101      	movs	r1, #1
 80071c0:	69b8      	ldr	r0, [r7, #24]
 80071c2:	f7ff ff3d 	bl	8007040 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00e      	beq.n	80071fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071ee:	2300      	movs	r3, #0
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f81d 	bl	8007234 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	4603      	mov	r3, r0
 800720a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	461a      	mov	r2, r3
 8007218:	6939      	ldr	r1, [r7, #16]
 800721a:	6978      	ldr	r0, [r7, #20]
 800721c:	f7ff ff7a 	bl	8007114 <xQueueGenericCreate>
 8007220:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff ffd3 	bl	80071ce <prvInitialiseMutex>

		return xNewQueue;
 8007228:	68fb      	ldr	r3, [r7, #12]
	}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08e      	sub	sp, #56	; 0x38
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10c      	bne.n	800726a <xQueueGenericSend+0x36>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	b672      	cpsid	i
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	b662      	cpsie	i
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d103      	bne.n	8007278 <xQueueGenericSend+0x44>
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <xQueueGenericSend+0x48>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <xQueueGenericSend+0x4a>
 800727c:	2300      	movs	r3, #0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10c      	bne.n	800729c <xQueueGenericSend+0x68>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	b672      	cpsid	i
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	b662      	cpsie	i
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d103      	bne.n	80072aa <xQueueGenericSend+0x76>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <xQueueGenericSend+0x7a>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <xQueueGenericSend+0x7c>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10c      	bne.n	80072ce <xQueueGenericSend+0x9a>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	b672      	cpsid	i
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	b662      	cpsie	i
 80072c8:	623b      	str	r3, [r7, #32]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ce:	f001 fb7d 	bl	80089cc <xTaskGetSchedulerState>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <xQueueGenericSend+0xaa>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <xQueueGenericSend+0xae>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <xQueueGenericSend+0xb0>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10c      	bne.n	8007302 <xQueueGenericSend+0xce>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	b672      	cpsid	i
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	b662      	cpsie	i
 80072fc:	61fb      	str	r3, [r7, #28]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007302:	f001 feb3 	bl	800906c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <xQueueGenericSend+0xe4>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d129      	bne.n	800736c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731e:	f000 fc5d 	bl	8007bdc <prvCopyDataToQueue>
 8007322:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f9a9 	bl	8008688 <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800733c:	4b3f      	ldr	r3, [pc, #252]	; (800743c <xQueueGenericSend+0x208>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	e00a      	b.n	8007364 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007354:	4b39      	ldr	r3, [pc, #228]	; (800743c <xQueueGenericSend+0x208>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007364:	f001 feb6 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 8007368:	2301      	movs	r3, #1
 800736a:	e063      	b.n	8007434 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007372:	f001 feaf 	bl	80090d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007376:	2300      	movs	r3, #0
 8007378:	e05c      	b.n	8007434 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007380:	f107 0314 	add.w	r3, r7, #20
 8007384:	4618      	mov	r0, r3
 8007386:	f001 f9e3 	bl	8008750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800738a:	2301      	movs	r3, #1
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800738e:	f001 fea1 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007392:	f000 ff6d 	bl	8008270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007396:	f001 fe69 	bl	800906c <vPortEnterCritical>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a0:	b25b      	sxtb	r3, r3
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d103      	bne.n	80073b0 <xQueueGenericSend+0x17c>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d103      	bne.n	80073c6 <xQueueGenericSend+0x192>
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c6:	f001 fe85 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ca:	1d3a      	adds	r2, r7, #4
 80073cc:	f107 0314 	add.w	r3, r7, #20
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f9d2 	bl	800877c <xTaskCheckForTimeOut>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d124      	bne.n	8007428 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073e0:	f000 fcf4 	bl	8007dcc <prvIsQueueFull>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d018      	beq.n	800741c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	3310      	adds	r3, #16
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4611      	mov	r1, r2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 f922 	bl	800863c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fa:	f000 fc7f 	bl	8007cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073fe:	f000 ff45 	bl	800828c <xTaskResumeAll>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f af7c 	bne.w	8007302 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <xQueueGenericSend+0x208>)
 800740c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	e772      	b.n	8007302 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800741c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741e:	f000 fc6d 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007422:	f000 ff33 	bl	800828c <xTaskResumeAll>
 8007426:	e76c      	b.n	8007302 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800742a:	f000 fc67 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800742e:	f000 ff2d 	bl	800828c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3738      	adds	r7, #56	; 0x38
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	; 0x38
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10c      	bne.n	8007472 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	b672      	cpsid	i
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	b662      	cpsie	i
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <xQueueGenericSendFromISR+0x40>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <xQueueGenericSendFromISR+0x44>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <xQueueGenericSendFromISR+0x46>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10c      	bne.n	80074a4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	b672      	cpsid	i
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	b662      	cpsie	i
 800749e:	623b      	str	r3, [r7, #32]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d103      	bne.n	80074b2 <xQueueGenericSendFromISR+0x72>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <xQueueGenericSendFromISR+0x76>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueGenericSendFromISR+0x78>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10c      	bne.n	80074d6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	b672      	cpsid	i
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	b662      	cpsie	i
 80074d0:	61fb      	str	r3, [r7, #28]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074d6:	f001 feb1 	bl	800923c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074da:	f3ef 8211 	mrs	r2, BASEPRI
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	b672      	cpsid	i
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	b662      	cpsie	i
 80074f2:	61ba      	str	r2, [r7, #24]
 80074f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <xQueueGenericSendFromISR+0xcc>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d12c      	bne.n	8007566 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751c:	f000 fb5e 	bl	8007bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007520:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d112      	bne.n	8007550 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	d016      	beq.n	8007560 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	4618      	mov	r0, r3
 8007538:	f001 f8a6 	bl	8008688 <xTaskRemoveFromEventList>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e007      	b.n	8007560 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007554:	3301      	adds	r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	b25a      	sxtb	r2, r3
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007560:	2301      	movs	r3, #1
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007564:	e001      	b.n	800756a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007566:	2300      	movs	r3, #0
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007574:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007578:	4618      	mov	r0, r3
 800757a:	3738      	adds	r7, #56	; 0x38
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08e      	sub	sp, #56	; 0x38
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	b672      	cpsid	i
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	b662      	cpsie	i
 80075a8:	623b      	str	r3, [r7, #32]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	b672      	cpsid	i
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	b662      	cpsie	i
 80075ca:	61fb      	str	r3, [r7, #28]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <xQueueGiveFromISR+0x60>
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <xQueueGiveFromISR+0x64>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <xQueueGiveFromISR+0x66>
 80075e4:	2300      	movs	r3, #0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10c      	bne.n	8007604 <xQueueGiveFromISR+0x84>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	b672      	cpsid	i
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	b662      	cpsie	i
 80075fe:	61bb      	str	r3, [r7, #24]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007604:	f001 fe1a 	bl	800923c <vPortValidateInterruptPriority>
	__asm volatile
 8007608:	f3ef 8211 	mrs	r2, BASEPRI
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	b672      	cpsid	i
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	b662      	cpsie	i
 8007620:	617a      	str	r2, [r7, #20]
 8007622:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007624:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007634:	429a      	cmp	r2, r3
 8007636:	d22b      	bcs.n	8007690 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800764a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d112      	bne.n	800767a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d016      	beq.n	800768a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	3324      	adds	r3, #36	; 0x24
 8007660:	4618      	mov	r0, r3
 8007662:	f001 f811 	bl	8008688 <xTaskRemoveFromEventList>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00e      	beq.n	800768a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e007      	b.n	800768a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800767a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800767e:	3301      	adds	r3, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	b25a      	sxtb	r2, r3
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800768a:	2301      	movs	r3, #1
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	e001      	b.n	8007694 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007690:	2300      	movs	r3, #0
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f383 8811 	msr	BASEPRI, r3
}
 800769e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3738      	adds	r7, #56	; 0x38
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08c      	sub	sp, #48	; 0x30
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10c      	bne.n	80076e0 <xQueueReceive+0x34>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	b672      	cpsid	i
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	b662      	cpsie	i
 80076da:	623b      	str	r3, [r7, #32]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <xQueueReceive+0x42>
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <xQueueReceive+0x46>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <xQueueReceive+0x48>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10c      	bne.n	8007712 <xQueueReceive+0x66>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	b672      	cpsid	i
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	b662      	cpsie	i
 800770c:	61fb      	str	r3, [r7, #28]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007712:	f001 f95b 	bl	80089cc <xTaskGetSchedulerState>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d102      	bne.n	8007722 <xQueueReceive+0x76>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <xQueueReceive+0x7a>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <xQueueReceive+0x7c>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10c      	bne.n	8007746 <xQueueReceive+0x9a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	61bb      	str	r3, [r7, #24]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007746:	f001 fc91 	bl	800906c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d01f      	beq.n	8007796 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800775a:	f000 faa9 	bl	8007cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	1e5a      	subs	r2, r3, #1
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00f      	beq.n	800778e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	3310      	adds	r3, #16
 8007772:	4618      	mov	r0, r3
 8007774:	f000 ff88 	bl	8008688 <xTaskRemoveFromEventList>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800777e:	4b3d      	ldr	r3, [pc, #244]	; (8007874 <xQueueReceive+0x1c8>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800778e:	f001 fca1 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 8007792:	2301      	movs	r3, #1
 8007794:	e069      	b.n	800786a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800779c:	f001 fc9a 	bl	80090d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e062      	b.n	800786a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077aa:	f107 0310 	add.w	r3, r7, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 ffce 	bl	8008750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077b8:	f001 fc8c 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077bc:	f000 fd58 	bl	8008270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077c0:	f001 fc54 	bl	800906c <vPortEnterCritical>
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d103      	bne.n	80077da <xQueueReceive+0x12e>
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d103      	bne.n	80077f0 <xQueueReceive+0x144>
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f0:	f001 fc70 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077f4:	1d3a      	adds	r2, r7, #4
 80077f6:	f107 0310 	add.w	r3, r7, #16
 80077fa:	4611      	mov	r1, r2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 ffbd 	bl	800877c <xTaskCheckForTimeOut>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d123      	bne.n	8007850 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780a:	f000 fac9 	bl	8007da0 <prvIsQueueEmpty>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d017      	beq.n	8007844 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	3324      	adds	r3, #36	; 0x24
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4611      	mov	r1, r2
 800781c:	4618      	mov	r0, r3
 800781e:	f000 ff0d 	bl	800863c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007824:	f000 fa6a 	bl	8007cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007828:	f000 fd30 	bl	800828c <xTaskResumeAll>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d189      	bne.n	8007746 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007832:	4b10      	ldr	r3, [pc, #64]	; (8007874 <xQueueReceive+0x1c8>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	e780      	b.n	8007746 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f000 fa59 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800784a:	f000 fd1f 	bl	800828c <xTaskResumeAll>
 800784e:	e77a      	b.n	8007746 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007852:	f000 fa53 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007856:	f000 fd19 	bl	800828c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800785a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785c:	f000 faa0 	bl	8007da0 <prvIsQueueEmpty>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	f43f af6f 	beq.w	8007746 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800786a:	4618      	mov	r0, r3
 800786c:	3730      	adds	r7, #48	; 0x30
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08e      	sub	sp, #56	; 0x38
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800788a:	2300      	movs	r3, #0
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10c      	bne.n	80078ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	b672      	cpsid	i
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	b662      	cpsie	i
 80078a8:	623b      	str	r3, [r7, #32]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00c      	beq.n	80078d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	b672      	cpsid	i
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	b662      	cpsie	i
 80078ca:	61fb      	str	r3, [r7, #28]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078d0:	f001 f87c 	bl	80089cc <xTaskGetSchedulerState>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <xQueueSemaphoreTake+0x68>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <xQueueSemaphoreTake+0x6c>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <xQueueSemaphoreTake+0x6e>
 80078e4:	2300      	movs	r3, #0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10c      	bne.n	8007904 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	b672      	cpsid	i
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	b662      	cpsie	i
 80078fe:	61bb      	str	r3, [r7, #24]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007904:	f001 fbb2 	bl	800906c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	2b00      	cmp	r3, #0
 8007912:	d024      	beq.n	800795e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	1e5a      	subs	r2, r3, #1
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007924:	f001 fa18 	bl	8008d58 <pvTaskIncrementMutexHeldCount>
 8007928:	4602      	mov	r2, r0
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00f      	beq.n	8007956 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	3310      	adds	r3, #16
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fea4 	bl	8008688 <xTaskRemoveFromEventList>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007946:	4b55      	ldr	r3, [pc, #340]	; (8007a9c <xQueueSemaphoreTake+0x224>)
 8007948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007956:	f001 fbbd 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 800795a:	2301      	movs	r3, #1
 800795c:	e099      	b.n	8007a92 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d113      	bne.n	800798c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00c      	beq.n	8007984 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	b672      	cpsid	i
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	b662      	cpsie	i
 800797e:	617b      	str	r3, [r7, #20]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007984:	f001 fba6 	bl	80090d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007988:	2300      	movs	r3, #0
 800798a:	e082      	b.n	8007a92 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007992:	f107 030c 	add.w	r3, r7, #12
 8007996:	4618      	mov	r0, r3
 8007998:	f000 feda 	bl	8008750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a0:	f001 fb98 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a4:	f000 fc64 	bl	8008270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a8:	f001 fb60 	bl	800906c <vPortEnterCritical>
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d103      	bne.n	80079c2 <xQueueSemaphoreTake+0x14a>
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d103      	bne.n	80079d8 <xQueueSemaphoreTake+0x160>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d8:	f001 fb7c 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079dc:	463a      	mov	r2, r7
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fec9 	bl	800877c <xTaskCheckForTimeOut>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d132      	bne.n	8007a56 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079f2:	f000 f9d5 	bl	8007da0 <prvIsQueueEmpty>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d026      	beq.n	8007a4a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007a04:	f001 fb32 	bl	800906c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fffb 	bl	8008a08 <xTaskPriorityInherit>
 8007a12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a14:	f001 fb5e 	bl	80090d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	3324      	adds	r3, #36	; 0x24
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fe0b 	bl	800863c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a28:	f000 f968 	bl	8007cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a2c:	f000 fc2e 	bl	800828c <xTaskResumeAll>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f47f af66 	bne.w	8007904 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007a38:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <xQueueSemaphoreTake+0x224>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	e75c      	b.n	8007904 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a4c:	f000 f956 	bl	8007cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a50:	f000 fc1c 	bl	800828c <xTaskResumeAll>
 8007a54:	e756      	b.n	8007904 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a58:	f000 f950 	bl	8007cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a5c:	f000 fc16 	bl	800828c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a62:	f000 f99d 	bl	8007da0 <prvIsQueueEmpty>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f43f af4b 	beq.w	8007904 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007a74:	f001 fafa 	bl	800906c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a7a:	f000 f897 	bl	8007bac <prvGetDisinheritPriorityAfterTimeout>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 f8c8 	bl	8008c1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a8c:	f001 fb22 	bl	80090d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3738      	adds	r7, #56	; 0x38
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10c      	bne.n	8007ad0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	623b      	str	r3, [r7, #32]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <xQueueReceiveFromISR+0x3e>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <xQueueReceiveFromISR+0x42>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueReceiveFromISR+0x44>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	b672      	cpsid	i
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	b662      	cpsie	i
 8007afc:	61fb      	str	r3, [r7, #28]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b02:	f001 fb9b 	bl	800923c <vPortValidateInterruptPriority>
	__asm volatile
 8007b06:	f3ef 8211 	mrs	r2, BASEPRI
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	b672      	cpsid	i
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	b662      	cpsie	i
 8007b1e:	61ba      	str	r2, [r7, #24]
 8007b20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02f      	beq.n	8007b92 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b40:	f000 f8b6 	bl	8007cb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	1e5a      	subs	r2, r3, #1
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d112      	bne.n	8007b7c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d016      	beq.n	8007b8c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	3310      	adds	r3, #16
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fd90 	bl	8008688 <xTaskRemoveFromEventList>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00e      	beq.n	8007b8c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e007      	b.n	8007b8c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b80:	3301      	adds	r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	b25a      	sxtb	r2, r3
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b90:	e001      	b.n	8007b96 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f383 8811 	msr	BASEPRI, r3
}
 8007ba0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3738      	adds	r7, #56	; 0x38
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f1c3 0307 	rsb	r3, r3, #7
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	e001      	b.n	8007bce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bce:	68fb      	ldr	r3, [r7, #12]
	}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d14d      	bne.n	8007c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 ff7e 	bl	8008b08 <xTaskPriorityDisinherit>
 8007c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	e043      	b.n	8007c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d119      	bne.n	8007c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6858      	ldr	r0, [r3, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	461a      	mov	r2, r3
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	f002 fe34 	bl	800a894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d32b      	bcc.n	8007c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	605a      	str	r2, [r3, #4]
 8007c4e:	e026      	b.n	8007c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68d8      	ldr	r0, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	f002 fe1a 	bl	800a894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	425b      	negs	r3, r3
 8007c6a:	441a      	add	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d207      	bcs.n	8007c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	425b      	negs	r3, r3
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d105      	bne.n	8007c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d303      	bcc.n	8007ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68d9      	ldr	r1, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	461a      	mov	r2, r3
 8007cee:	6838      	ldr	r0, [r7, #0]
 8007cf0:	f002 fdd0 	bl	800a894 <memcpy>
	}
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d04:	f001 f9b2 	bl	800906c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d10:	e011      	b.n	8007d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d012      	beq.n	8007d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3324      	adds	r3, #36	; 0x24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fcb2 	bl	8008688 <xTaskRemoveFromEventList>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d2a:	f000 fd8d 	bl	8008848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dce9      	bgt.n	8007d12 <prvUnlockQueue+0x16>
 8007d3e:	e000      	b.n	8007d42 <prvUnlockQueue+0x46>
					break;
 8007d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d4a:	f001 f9c3 	bl	80090d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d4e:	f001 f98d 	bl	800906c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d5a:	e011      	b.n	8007d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d012      	beq.n	8007d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3310      	adds	r3, #16
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fc8d 	bl	8008688 <xTaskRemoveFromEventList>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d74:	f000 fd68 	bl	8008848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dce9      	bgt.n	8007d5c <prvUnlockQueue+0x60>
 8007d88:	e000      	b.n	8007d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	22ff      	movs	r2, #255	; 0xff
 8007d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d94:	f001 f99e 	bl	80090d4 <vPortExitCritical>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da8:	f001 f960 	bl	800906c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e001      	b.n	8007dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dbe:	f001 f989 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dd4:	f001 f94a 	bl	800906c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d102      	bne.n	8007dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e001      	b.n	8007dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dee:	f001 f971 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8007df2:	68fb      	ldr	r3, [r7, #12]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 fa57 	bl	80092c4 <pvPortMalloc>
 8007e16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e1e:	2054      	movs	r0, #84	; 0x54
 8007e20:	f001 fa50 	bl	80092c4 <pvPortMalloc>
 8007e24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
 8007e32:	e005      	b.n	8007e40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e34:	6978      	ldr	r0, [r7, #20]
 8007e36:	f001 fb0f 	bl	8009458 <vPortFree>
 8007e3a:	e001      	b.n	8007e40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d013      	beq.n	8007e6e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e46:	88fa      	ldrh	r2, [r7, #6]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9303      	str	r3, [sp, #12]
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	9302      	str	r3, [sp, #8]
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f80e 	bl	8007e7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e62:	69f8      	ldr	r0, [r7, #28]
 8007e64:	f000 f894 	bl	8007f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	e002      	b.n	8007e74 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e74:	69bb      	ldr	r3, [r7, #24]
	}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3720      	adds	r7, #32
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b088      	sub	sp, #32
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007e96:	440b      	add	r3, r1
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	b672      	cpsid	i
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	b662      	cpsie	i
 8007ec4:	617b      	str	r3, [r7, #20]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01f      	beq.n	8007f10 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e012      	b.n	8007efc <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	7819      	ldrb	r1, [r3, #0]
 8007ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3334      	adds	r3, #52	; 0x34
 8007ee6:	460a      	mov	r2, r1
 8007ee8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d006      	beq.n	8007f04 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b0f      	cmp	r3, #15
 8007f00:	d9e9      	bls.n	8007ed6 <prvInitialiseNewTask+0x58>
 8007f02:	e000      	b.n	8007f06 <prvInitialiseNewTask+0x88>
			{
				break;
 8007f04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f0e:	e003      	b.n	8007f18 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	2b06      	cmp	r3, #6
 8007f1c:	d901      	bls.n	8007f22 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f1e:	2306      	movs	r3, #6
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	2200      	movs	r2, #0
 8007f32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	3304      	adds	r3, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe ffed 	bl	8006f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	3318      	adds	r3, #24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe ffe8 	bl	8006f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	f1c3 0207 	rsb	r2, r3, #7
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2200      	movs	r2, #0
 8007f62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	69b8      	ldr	r0, [r7, #24]
 8007f72:	f000 ff6b 	bl	8008e4c <pxPortInitialiseStack>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f88:	bf00      	nop
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f98:	f001 f868 	bl	800906c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <prvAddNewTaskToReadyList+0xb8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a29      	ldr	r2, [pc, #164]	; (8008048 <prvAddNewTaskToReadyList+0xb8>)
 8007fa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fa6:	4b29      	ldr	r3, [pc, #164]	; (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fae:	4a27      	ldr	r2, [pc, #156]	; (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fb4:	4b24      	ldr	r3, [pc, #144]	; (8008048 <prvAddNewTaskToReadyList+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d110      	bne.n	8007fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fbc:	f000 fc68 	bl	8008890 <prvInitialiseTaskLists>
 8007fc0:	e00d      	b.n	8007fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fc2:	4b23      	ldr	r3, [pc, #140]	; (8008050 <prvAddNewTaskToReadyList+0xc0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d802      	bhi.n	8007fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fd8:	4a1c      	ldr	r2, [pc, #112]	; (800804c <prvAddNewTaskToReadyList+0xbc>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fde:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <prvAddNewTaskToReadyList+0xc4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a1b      	ldr	r2, [pc, #108]	; (8008054 <prvAddNewTaskToReadyList+0xc4>)
 8007fe6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	2201      	movs	r2, #1
 8007fee:	409a      	lsls	r2, r3
 8007ff0:	4b19      	ldr	r3, [pc, #100]	; (8008058 <prvAddNewTaskToReadyList+0xc8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	4a18      	ldr	r2, [pc, #96]	; (8008058 <prvAddNewTaskToReadyList+0xc8>)
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4a15      	ldr	r2, [pc, #84]	; (800805c <prvAddNewTaskToReadyList+0xcc>)
 8008008:	441a      	add	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f7fe ff8e 	bl	8006f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008016:	f001 f85d 	bl	80090d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800801a:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <prvAddNewTaskToReadyList+0xc0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00e      	beq.n	8008040 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008022:	4b0a      	ldr	r3, [pc, #40]	; (800804c <prvAddNewTaskToReadyList+0xbc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	429a      	cmp	r2, r3
 800802e:	d207      	bcs.n	8008040 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <prvAddNewTaskToReadyList+0xd0>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000864 	.word	0x20000864
 800804c:	20000764 	.word	0x20000764
 8008050:	20000870 	.word	0x20000870
 8008054:	20000880 	.word	0x20000880
 8008058:	2000086c 	.word	0x2000086c
 800805c:	20000768 	.word	0x20000768
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10c      	bne.n	8008092 <vTaskDelayUntil+0x2e>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	b672      	cpsid	i
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	b662      	cpsie	i
 800808c:	617b      	str	r3, [r7, #20]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10c      	bne.n	80080b2 <vTaskDelayUntil+0x4e>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	b672      	cpsid	i
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	b662      	cpsie	i
 80080ac:	613b      	str	r3, [r7, #16]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 80080b2:	4b2b      	ldr	r3, [pc, #172]	; (8008160 <vTaskDelayUntil+0xfc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00c      	beq.n	80080d4 <vTaskDelayUntil+0x70>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	b672      	cpsid	i
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	b662      	cpsie	i
 80080ce:	60fb      	str	r3, [r7, #12]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 80080d4:	f000 f8cc 	bl	8008270 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80080d8:	4b22      	ldr	r3, [pc, #136]	; (8008164 <vTaskDelayUntil+0x100>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a3a      	ldr	r2, [r7, #32]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d20b      	bcs.n	800810a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d211      	bcs.n	8008120 <vTaskDelayUntil+0xbc>
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	429a      	cmp	r2, r3
 8008102:	d90d      	bls.n	8008120 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
 8008108:	e00a      	b.n	8008120 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	429a      	cmp	r2, r3
 8008112:	d303      	bcc.n	800811c <vTaskDelayUntil+0xb8>
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	429a      	cmp	r2, r3
 800811a:	d901      	bls.n	8008120 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d006      	beq.n	800813a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fe23 	bl	8008d80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800813a:	f000 f8a7 	bl	800828c <xTaskResumeAll>
 800813e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <vTaskDelayUntil+0x104>)
 8008148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008156:	bf00      	nop
 8008158:	3728      	adds	r7, #40	; 0x28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	2000088c 	.word	0x2000088c
 8008164:	20000868 	.word	0x20000868
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d019      	beq.n	80081b2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800817e:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <vTaskDelay+0x64>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00c      	beq.n	80081a0 <vTaskDelay+0x34>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	b672      	cpsid	i
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	b662      	cpsie	i
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <vTaskDelay+0x32>
			vTaskSuspendAll();
 80081a0:	f000 f866 	bl	8008270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081a4:	2100      	movs	r1, #0
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fdea 	bl	8008d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081ac:	f000 f86e 	bl	800828c <xTaskResumeAll>
 80081b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d107      	bne.n	80081c8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <vTaskDelay+0x68>)
 80081ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	2000088c 	.word	0x2000088c
 80081d4:	e000ed04 	.word	0xe000ed04

080081d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80081de:	4b1e      	ldr	r3, [pc, #120]	; (8008258 <vTaskStartScheduler+0x80>)
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	2300      	movs	r3, #0
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	2280      	movs	r2, #128	; 0x80
 80081ea:	491c      	ldr	r1, [pc, #112]	; (800825c <vTaskStartScheduler+0x84>)
 80081ec:	481c      	ldr	r0, [pc, #112]	; (8008260 <vTaskStartScheduler+0x88>)
 80081ee:	f7ff fe05 	bl	8007dfc <xTaskCreate>
 80081f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d118      	bne.n	800822c <vTaskStartScheduler+0x54>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	b672      	cpsid	i
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	b662      	cpsie	i
 800820e:	60bb      	str	r3, [r7, #8]
}
 8008210:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008212:	4b14      	ldr	r3, [pc, #80]	; (8008264 <vTaskStartScheduler+0x8c>)
 8008214:	f04f 32ff 	mov.w	r2, #4294967295
 8008218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <vTaskStartScheduler+0x90>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008220:	4b12      	ldr	r3, [pc, #72]	; (800826c <vTaskStartScheduler+0x94>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008226:	f000 fea3 	bl	8008f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800822a:	e010      	b.n	800824e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d10c      	bne.n	800824e <vTaskStartScheduler+0x76>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	607b      	str	r3, [r7, #4]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <vTaskStartScheduler+0x74>
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000888 	.word	0x20000888
 800825c:	0800b618 	.word	0x0800b618
 8008260:	08008861 	.word	0x08008861
 8008264:	20000884 	.word	0x20000884
 8008268:	20000870 	.word	0x20000870
 800826c:	20000868 	.word	0x20000868

08008270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008274:	4b04      	ldr	r3, [pc, #16]	; (8008288 <vTaskSuspendAll+0x18>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	4a03      	ldr	r2, [pc, #12]	; (8008288 <vTaskSuspendAll+0x18>)
 800827c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800827e:	bf00      	nop
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	2000088c 	.word	0x2000088c

0800828c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800829a:	4b42      	ldr	r3, [pc, #264]	; (80083a4 <xTaskResumeAll+0x118>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10c      	bne.n	80082bc <xTaskResumeAll+0x30>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	b672      	cpsid	i
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	b662      	cpsie	i
 80082b6:	603b      	str	r3, [r7, #0]
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082bc:	f000 fed6 	bl	800906c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082c0:	4b38      	ldr	r3, [pc, #224]	; (80083a4 <xTaskResumeAll+0x118>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4a37      	ldr	r2, [pc, #220]	; (80083a4 <xTaskResumeAll+0x118>)
 80082c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ca:	4b36      	ldr	r3, [pc, #216]	; (80083a4 <xTaskResumeAll+0x118>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d161      	bne.n	8008396 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082d2:	4b35      	ldr	r3, [pc, #212]	; (80083a8 <xTaskResumeAll+0x11c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d05d      	beq.n	8008396 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082da:	e02e      	b.n	800833a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082dc:	4b33      	ldr	r3, [pc, #204]	; (80083ac <xTaskResumeAll+0x120>)
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3318      	adds	r3, #24
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fe7f 	bl	8006fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fe7a 	bl	8006fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	2201      	movs	r2, #1
 80082fe:	409a      	lsls	r2, r3
 8008300:	4b2b      	ldr	r3, [pc, #172]	; (80083b0 <xTaskResumeAll+0x124>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4313      	orrs	r3, r2
 8008306:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <xTaskResumeAll+0x124>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <xTaskResumeAll+0x128>)
 8008318:	441a      	add	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fe fe06 	bl	8006f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832a:	4b23      	ldr	r3, [pc, #140]	; (80083b8 <xTaskResumeAll+0x12c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	429a      	cmp	r2, r3
 8008332:	d302      	bcc.n	800833a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008334:	4b21      	ldr	r3, [pc, #132]	; (80083bc <xTaskResumeAll+0x130>)
 8008336:	2201      	movs	r2, #1
 8008338:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800833a:	4b1c      	ldr	r3, [pc, #112]	; (80083ac <xTaskResumeAll+0x120>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1cc      	bne.n	80082dc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008348:	f000 fb20 	bl	800898c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800834c:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <xTaskResumeAll+0x134>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d010      	beq.n	800837a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008358:	f000 f858 	bl	800840c <xTaskIncrementTick>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <xTaskResumeAll+0x130>)
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3b01      	subs	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f1      	bne.n	8008358 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008374:	4b12      	ldr	r3, [pc, #72]	; (80083c0 <xTaskResumeAll+0x134>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800837a:	4b10      	ldr	r3, [pc, #64]	; (80083bc <xTaskResumeAll+0x130>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008386:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <xTaskResumeAll+0x138>)
 8008388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008396:	f000 fe9d 	bl	80090d4 <vPortExitCritical>

	return xAlreadyYielded;
 800839a:	68bb      	ldr	r3, [r7, #8]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	2000088c 	.word	0x2000088c
 80083a8:	20000864 	.word	0x20000864
 80083ac:	20000824 	.word	0x20000824
 80083b0:	2000086c 	.word	0x2000086c
 80083b4:	20000768 	.word	0x20000768
 80083b8:	20000764 	.word	0x20000764
 80083bc:	20000878 	.word	0x20000878
 80083c0:	20000874 	.word	0x20000874
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <xTaskGetTickCount+0x1c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083d4:	687b      	ldr	r3, [r7, #4]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000868 	.word	0x20000868

080083e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083ee:	f000 ff25 	bl	800923c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80083f2:	2300      	movs	r3, #0
 80083f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80083f6:	4b04      	ldr	r3, [pc, #16]	; (8008408 <xTaskGetTickCountFromISR+0x20>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083fc:	683b      	ldr	r3, [r7, #0]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000868 	.word	0x20000868

0800840c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008416:	4b4f      	ldr	r3, [pc, #316]	; (8008554 <xTaskIncrementTick+0x148>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 808a 	bne.w	8008534 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008420:	4b4d      	ldr	r3, [pc, #308]	; (8008558 <xTaskIncrementTick+0x14c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008428:	4a4b      	ldr	r2, [pc, #300]	; (8008558 <xTaskIncrementTick+0x14c>)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d122      	bne.n	800847a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008434:	4b49      	ldr	r3, [pc, #292]	; (800855c <xTaskIncrementTick+0x150>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00c      	beq.n	8008458 <xTaskIncrementTick+0x4c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	b672      	cpsid	i
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	b662      	cpsie	i
 8008452:	603b      	str	r3, [r7, #0]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xTaskIncrementTick+0x4a>
 8008458:	4b40      	ldr	r3, [pc, #256]	; (800855c <xTaskIncrementTick+0x150>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	4b40      	ldr	r3, [pc, #256]	; (8008560 <xTaskIncrementTick+0x154>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a3e      	ldr	r2, [pc, #248]	; (800855c <xTaskIncrementTick+0x150>)
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	4a3e      	ldr	r2, [pc, #248]	; (8008560 <xTaskIncrementTick+0x154>)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	4b3d      	ldr	r3, [pc, #244]	; (8008564 <xTaskIncrementTick+0x158>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a3c      	ldr	r2, [pc, #240]	; (8008564 <xTaskIncrementTick+0x158>)
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	f000 fa89 	bl	800898c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800847a:	4b3b      	ldr	r3, [pc, #236]	; (8008568 <xTaskIncrementTick+0x15c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d348      	bcc.n	8008516 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008484:	4b35      	ldr	r3, [pc, #212]	; (800855c <xTaskIncrementTick+0x150>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d104      	bne.n	8008498 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848e:	4b36      	ldr	r3, [pc, #216]	; (8008568 <xTaskIncrementTick+0x15c>)
 8008490:	f04f 32ff 	mov.w	r2, #4294967295
 8008494:	601a      	str	r2, [r3, #0]
					break;
 8008496:	e03e      	b.n	8008516 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008498:	4b30      	ldr	r3, [pc, #192]	; (800855c <xTaskIncrementTick+0x150>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d203      	bcs.n	80084b8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084b0:	4a2d      	ldr	r2, [pc, #180]	; (8008568 <xTaskIncrementTick+0x15c>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084b6:	e02e      	b.n	8008516 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fd95 	bl	8006fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d004      	beq.n	80084d4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3318      	adds	r3, #24
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fd8c 	bl	8006fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	2201      	movs	r2, #1
 80084da:	409a      	lsls	r2, r3
 80084dc:	4b23      	ldr	r3, [pc, #140]	; (800856c <xTaskIncrementTick+0x160>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	4a22      	ldr	r2, [pc, #136]	; (800856c <xTaskIncrementTick+0x160>)
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <xTaskIncrementTick+0x164>)
 80084f4:	441a      	add	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7fe fd18 	bl	8006f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008506:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <xTaskIncrementTick+0x168>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	429a      	cmp	r2, r3
 800850e:	d3b9      	bcc.n	8008484 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008514:	e7b6      	b.n	8008484 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008516:	4b17      	ldr	r3, [pc, #92]	; (8008574 <xTaskIncrementTick+0x168>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4914      	ldr	r1, [pc, #80]	; (8008570 <xTaskIncrementTick+0x164>)
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d907      	bls.n	800853e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800852e:	2301      	movs	r3, #1
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	e004      	b.n	800853e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008534:	4b10      	ldr	r3, [pc, #64]	; (8008578 <xTaskIncrementTick+0x16c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	4a0f      	ldr	r2, [pc, #60]	; (8008578 <xTaskIncrementTick+0x16c>)
 800853c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <xTaskIncrementTick+0x170>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008546:	2301      	movs	r3, #1
 8008548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800854a:	697b      	ldr	r3, [r7, #20]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	2000088c 	.word	0x2000088c
 8008558:	20000868 	.word	0x20000868
 800855c:	2000081c 	.word	0x2000081c
 8008560:	20000820 	.word	0x20000820
 8008564:	2000087c 	.word	0x2000087c
 8008568:	20000884 	.word	0x20000884
 800856c:	2000086c 	.word	0x2000086c
 8008570:	20000768 	.word	0x20000768
 8008574:	20000764 	.word	0x20000764
 8008578:	20000874 	.word	0x20000874
 800857c:	20000878 	.word	0x20000878

08008580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008586:	4b28      	ldr	r3, [pc, #160]	; (8008628 <vTaskSwitchContext+0xa8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800858e:	4b27      	ldr	r3, [pc, #156]	; (800862c <vTaskSwitchContext+0xac>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008594:	e041      	b.n	800861a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008596:	4b25      	ldr	r3, [pc, #148]	; (800862c <vTaskSwitchContext+0xac>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859c:	4b24      	ldr	r3, [pc, #144]	; (8008630 <vTaskSwitchContext+0xb0>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	fab3 f383 	clz	r3, r3
 80085a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80085aa:	7afb      	ldrb	r3, [r7, #11]
 80085ac:	f1c3 031f 	rsb	r3, r3, #31
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	4920      	ldr	r1, [pc, #128]	; (8008634 <vTaskSwitchContext+0xb4>)
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10c      	bne.n	80085e0 <vTaskSwitchContext+0x60>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	b672      	cpsid	i
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	b662      	cpsie	i
 80085da:	607b      	str	r3, [r7, #4]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <vTaskSwitchContext+0x5e>
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4a12      	ldr	r2, [pc, #72]	; (8008634 <vTaskSwitchContext+0xb4>)
 80085ec:	4413      	add	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	3308      	adds	r3, #8
 8008602:	429a      	cmp	r2, r3
 8008604:	d104      	bne.n	8008610 <vTaskSwitchContext+0x90>
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	605a      	str	r2, [r3, #4]
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	4a08      	ldr	r2, [pc, #32]	; (8008638 <vTaskSwitchContext+0xb8>)
 8008618:	6013      	str	r3, [r2, #0]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	2000088c 	.word	0x2000088c
 800862c:	20000878 	.word	0x20000878
 8008630:	2000086c 	.word	0x2000086c
 8008634:	20000768 	.word	0x20000768
 8008638:	20000764 	.word	0x20000764

0800863c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10c      	bne.n	8008666 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	b672      	cpsid	i
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	b662      	cpsie	i
 8008660:	60fb      	str	r3, [r7, #12]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008666:	4b07      	ldr	r3, [pc, #28]	; (8008684 <vTaskPlaceOnEventList+0x48>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3318      	adds	r3, #24
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7fe fc83 	bl	8006f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008674:	2101      	movs	r1, #1
 8008676:	6838      	ldr	r0, [r7, #0]
 8008678:	f000 fb82 	bl	8008d80 <prvAddCurrentTaskToDelayedList>
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000764 	.word	0x20000764

08008688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	60fb      	str	r3, [r7, #12]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	3318      	adds	r3, #24
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fc95 	bl	8006fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c2:	4b1d      	ldr	r3, [pc, #116]	; (8008738 <xTaskRemoveFromEventList+0xb0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d11c      	bne.n	8008704 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fc8c 	bl	8006fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	2201      	movs	r2, #1
 80086da:	409a      	lsls	r2, r3
 80086dc:	4b17      	ldr	r3, [pc, #92]	; (800873c <xTaskRemoveFromEventList+0xb4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	4a16      	ldr	r2, [pc, #88]	; (800873c <xTaskRemoveFromEventList+0xb4>)
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4a13      	ldr	r2, [pc, #76]	; (8008740 <xTaskRemoveFromEventList+0xb8>)
 80086f4:	441a      	add	r2, r3
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f7fe fc18 	bl	8006f32 <vListInsertEnd>
 8008702:	e005      	b.n	8008710 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	3318      	adds	r3, #24
 8008708:	4619      	mov	r1, r3
 800870a:	480e      	ldr	r0, [pc, #56]	; (8008744 <xTaskRemoveFromEventList+0xbc>)
 800870c:	f7fe fc11 	bl	8006f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <xTaskRemoveFromEventList+0xc0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	429a      	cmp	r2, r3
 800871c:	d905      	bls.n	800872a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800871e:	2301      	movs	r3, #1
 8008720:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008722:	4b0a      	ldr	r3, [pc, #40]	; (800874c <xTaskRemoveFromEventList+0xc4>)
 8008724:	2201      	movs	r2, #1
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	e001      	b.n	800872e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800872e:	697b      	ldr	r3, [r7, #20]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	2000088c 	.word	0x2000088c
 800873c:	2000086c 	.word	0x2000086c
 8008740:	20000768 	.word	0x20000768
 8008744:	20000824 	.word	0x20000824
 8008748:	20000764 	.word	0x20000764
 800874c:	20000878 	.word	0x20000878

08008750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <vTaskInternalSetTimeOutState+0x24>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <vTaskInternalSetTimeOutState+0x28>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	605a      	str	r2, [r3, #4]
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	2000087c 	.word	0x2000087c
 8008778:	20000868 	.word	0x20000868

0800877c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10c      	bne.n	80087a6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	b672      	cpsid	i
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	b662      	cpsie	i
 80087a0:	613b      	str	r3, [r7, #16]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10c      	bne.n	80087c6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	b672      	cpsid	i
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	b662      	cpsie	i
 80087c0:	60fb      	str	r3, [r7, #12]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80087c6:	f000 fc51 	bl	800906c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <xTaskCheckForTimeOut+0xc4>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d102      	bne.n	80087ea <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e023      	b.n	8008832 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b15      	ldr	r3, [pc, #84]	; (8008844 <xTaskCheckForTimeOut+0xc8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d007      	beq.n	8008806 <xTaskCheckForTimeOut+0x8a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	e015      	b.n	8008832 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	429a      	cmp	r2, r3
 800880e:	d20b      	bcs.n	8008828 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ff97 	bl	8008750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	e004      	b.n	8008832 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800882e:	2301      	movs	r3, #1
 8008830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008832:	f000 fc4f 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8008836:	69fb      	ldr	r3, [r7, #28]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000868 	.word	0x20000868
 8008844:	2000087c 	.word	0x2000087c

08008848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800884c:	4b03      	ldr	r3, [pc, #12]	; (800885c <vTaskMissedYield+0x14>)
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
}
 8008852:	bf00      	nop
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	20000878 	.word	0x20000878

08008860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008868:	f000 f852 	bl	8008910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <prvIdleTask+0x28>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d9f9      	bls.n	8008868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <prvIdleTask+0x2c>)
 8008876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008884:	e7f0      	b.n	8008868 <prvIdleTask+0x8>
 8008886:	bf00      	nop
 8008888:	20000768 	.word	0x20000768
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	e00c      	b.n	80088b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4a12      	ldr	r2, [pc, #72]	; (80088f0 <prvInitialiseTaskLists+0x60>)
 80088a8:	4413      	add	r3, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fb14 	bl	8006ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b06      	cmp	r3, #6
 80088ba:	d9ef      	bls.n	800889c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088bc:	480d      	ldr	r0, [pc, #52]	; (80088f4 <prvInitialiseTaskLists+0x64>)
 80088be:	f7fe fb0b 	bl	8006ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088c2:	480d      	ldr	r0, [pc, #52]	; (80088f8 <prvInitialiseTaskLists+0x68>)
 80088c4:	f7fe fb08 	bl	8006ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088c8:	480c      	ldr	r0, [pc, #48]	; (80088fc <prvInitialiseTaskLists+0x6c>)
 80088ca:	f7fe fb05 	bl	8006ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088ce:	480c      	ldr	r0, [pc, #48]	; (8008900 <prvInitialiseTaskLists+0x70>)
 80088d0:	f7fe fb02 	bl	8006ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088d4:	480b      	ldr	r0, [pc, #44]	; (8008904 <prvInitialiseTaskLists+0x74>)
 80088d6:	f7fe faff 	bl	8006ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088da:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <prvInitialiseTaskLists+0x78>)
 80088dc:	4a05      	ldr	r2, [pc, #20]	; (80088f4 <prvInitialiseTaskLists+0x64>)
 80088de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <prvInitialiseTaskLists+0x7c>)
 80088e2:	4a05      	ldr	r2, [pc, #20]	; (80088f8 <prvInitialiseTaskLists+0x68>)
 80088e4:	601a      	str	r2, [r3, #0]
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000768 	.word	0x20000768
 80088f4:	200007f4 	.word	0x200007f4
 80088f8:	20000808 	.word	0x20000808
 80088fc:	20000824 	.word	0x20000824
 8008900:	20000838 	.word	0x20000838
 8008904:	20000850 	.word	0x20000850
 8008908:	2000081c 	.word	0x2000081c
 800890c:	20000820 	.word	0x20000820

08008910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008916:	e019      	b.n	800894c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008918:	f000 fba8 	bl	800906c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891c:	4b10      	ldr	r3, [pc, #64]	; (8008960 <prvCheckTasksWaitingTermination+0x50>)
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fb5f 	bl	8006fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <prvCheckTasksWaitingTermination+0x54>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3b01      	subs	r3, #1
 8008934:	4a0b      	ldr	r2, [pc, #44]	; (8008964 <prvCheckTasksWaitingTermination+0x54>)
 8008936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008938:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <prvCheckTasksWaitingTermination+0x58>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3b01      	subs	r3, #1
 800893e:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <prvCheckTasksWaitingTermination+0x58>)
 8008940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008942:	f000 fbc7 	bl	80090d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f810 	bl	800896c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800894c:	4b06      	ldr	r3, [pc, #24]	; (8008968 <prvCheckTasksWaitingTermination+0x58>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e1      	bne.n	8008918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000838 	.word	0x20000838
 8008964:	20000864 	.word	0x20000864
 8008968:	2000084c 	.word	0x2000084c

0800896c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fd6d 	bl	8009458 <vPortFree>
			vPortFree( pxTCB );
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fd6a 	bl	8009458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008992:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <prvResetNextTaskUnblockTime+0x38>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <prvResetNextTaskUnblockTime+0x3c>)
 800899e:	f04f 32ff 	mov.w	r2, #4294967295
 80089a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089a4:	e008      	b.n	80089b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a6:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <prvResetNextTaskUnblockTime+0x38>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4a04      	ldr	r2, [pc, #16]	; (80089c8 <prvResetNextTaskUnblockTime+0x3c>)
 80089b6:	6013      	str	r3, [r2, #0]
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	2000081c 	.word	0x2000081c
 80089c8:	20000884 	.word	0x20000884

080089cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089d2:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <xTaskGetSchedulerState+0x34>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089da:	2301      	movs	r3, #1
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	e008      	b.n	80089f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e0:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <xTaskGetSchedulerState+0x38>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089e8:	2302      	movs	r3, #2
 80089ea:	607b      	str	r3, [r7, #4]
 80089ec:	e001      	b.n	80089f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089f2:	687b      	ldr	r3, [r7, #4]
	}
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	20000870 	.word	0x20000870
 8008a04:	2000088c 	.word	0x2000088c

08008a08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d069      	beq.n	8008af2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a22:	4b36      	ldr	r3, [pc, #216]	; (8008afc <xTaskPriorityInherit+0xf4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d259      	bcs.n	8008ae0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	db06      	blt.n	8008a42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a34:	4b31      	ldr	r3, [pc, #196]	; (8008afc <xTaskPriorityInherit+0xf4>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	f1c3 0207 	rsb	r2, r3, #7
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6959      	ldr	r1, [r3, #20]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4a2b      	ldr	r2, [pc, #172]	; (8008b00 <xTaskPriorityInherit+0xf8>)
 8008a54:	4413      	add	r3, r2
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d13a      	bne.n	8008ad0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fac4 	bl	8006fec <uxListRemove>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d115      	bne.n	8008a96 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	4924      	ldr	r1, [pc, #144]	; (8008b00 <xTaskPriorityInherit+0xf8>)
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xTaskPriorityInherit+0x8e>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	2201      	movs	r2, #1
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	43da      	mvns	r2, r3
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <xTaskPriorityInherit+0xfc>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4013      	ands	r3, r2
 8008a92:	4a1c      	ldr	r2, [pc, #112]	; (8008b04 <xTaskPriorityInherit+0xfc>)
 8008a94:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a96:	4b19      	ldr	r3, [pc, #100]	; (8008afc <xTaskPriorityInherit+0xf4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	409a      	lsls	r2, r3
 8008aa8:	4b16      	ldr	r3, [pc, #88]	; (8008b04 <xTaskPriorityInherit+0xfc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	4a15      	ldr	r2, [pc, #84]	; (8008b04 <xTaskPriorityInherit+0xfc>)
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4a10      	ldr	r2, [pc, #64]	; (8008b00 <xTaskPriorityInherit+0xf8>)
 8008ac0:	441a      	add	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fe fa32 	bl	8006f32 <vListInsertEnd>
 8008ace:	e004      	b.n	8008ada <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <xTaskPriorityInherit+0xf4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e008      	b.n	8008af2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <xTaskPriorityInherit+0xf4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d201      	bcs.n	8008af2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008af2:	68fb      	ldr	r3, [r7, #12]
	}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20000764 	.word	0x20000764
 8008b00:	20000768 	.word	0x20000768
 8008b04:	2000086c 	.word	0x2000086c

08008b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d072      	beq.n	8008c04 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b1e:	4b3c      	ldr	r3, [pc, #240]	; (8008c10 <xTaskPriorityDisinherit+0x108>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d00c      	beq.n	8008b42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	b672      	cpsid	i
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	b662      	cpsie	i
 8008b3c:	60fb      	str	r3, [r7, #12]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10c      	bne.n	8008b64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	b672      	cpsid	i
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	b662      	cpsie	i
 8008b5e:	60bb      	str	r3, [r7, #8]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b68:	1e5a      	subs	r2, r3, #1
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d044      	beq.n	8008c04 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d140      	bne.n	8008c04 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fa30 	bl	8006fec <uxListRemove>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d115      	bne.n	8008bbe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	491f      	ldr	r1, [pc, #124]	; (8008c14 <xTaskPriorityDisinherit+0x10c>)
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xTaskPriorityDisinherit+0xb6>
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	2201      	movs	r2, #1
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	43da      	mvns	r2, r3
 8008bb4:	4b18      	ldr	r3, [pc, #96]	; (8008c18 <xTaskPriorityDisinherit+0x110>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <xTaskPriorityDisinherit+0x110>)
 8008bbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	f1c3 0207 	rsb	r2, r3, #7
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	409a      	lsls	r2, r3
 8008bda:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <xTaskPriorityDisinherit+0x110>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	4a0d      	ldr	r2, [pc, #52]	; (8008c18 <xTaskPriorityDisinherit+0x110>)
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <xTaskPriorityDisinherit+0x10c>)
 8008bf2:	441a      	add	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe f999 	bl	8006f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c04:	697b      	ldr	r3, [r7, #20]
	}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000764 	.word	0x20000764
 8008c14:	20000768 	.word	0x20000768
 8008c18:	2000086c 	.word	0x2000086c

08008c1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8087 	beq.w	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10c      	bne.n	8008c58 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	b672      	cpsid	i
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	b662      	cpsie	i
 8008c52:	60fb      	str	r3, [r7, #12]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d902      	bls.n	8008c68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e002      	b.n	8008c6e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d065      	beq.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d160      	bne.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c82:	4b32      	ldr	r3, [pc, #200]	; (8008d4c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d10c      	bne.n	8008ca6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	b672      	cpsid	i
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	b662      	cpsie	i
 8008ca0:	60bb      	str	r3, [r7, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	db04      	blt.n	8008cc4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f1c3 0207 	rsb	r2, r3, #7
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	6959      	ldr	r1, [r3, #20]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4a1f      	ldr	r2, [pc, #124]	; (8008d50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	d134      	bne.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe f984 	bl	8006fec <uxListRemove>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d115      	bne.n	8008d16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	4918      	ldr	r1, [pc, #96]	; (8008d50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	2201      	movs	r2, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43da      	mvns	r2, r3
 8008d0c:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4013      	ands	r3, r2
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d14:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	409a      	lsls	r2, r3
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	4a0b      	ldr	r2, [pc, #44]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d36:	441a      	add	r2, r3
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe f8f7 	bl	8006f32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d44:	bf00      	nop
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000764 	.word	0x20000764
 8008d50:	20000768 	.word	0x20000768
 8008d54:	2000086c 	.word	0x2000086c

08008d58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d70:	681b      	ldr	r3, [r3, #0]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	20000764 	.word	0x20000764

08008d80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d8a:	4b29      	ldr	r3, [pc, #164]	; (8008e30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe f928 	bl	8006fec <uxListRemove>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10b      	bne.n	8008dba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	2201      	movs	r2, #1
 8008daa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dae:	43da      	mvns	r2, r3
 8008db0:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4013      	ands	r3, r2
 8008db6:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008db8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d10a      	bne.n	8008dd8 <prvAddCurrentTaskToDelayedList+0x58>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	481a      	ldr	r0, [pc, #104]	; (8008e3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008dd2:	f7fe f8ae 	bl	8006f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dd6:	e026      	b.n	8008e26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008de0:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d209      	bcs.n	8008e04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df0:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7fe f8bc 	bl	8006f7a <vListInsert>
}
 8008e02:	e010      	b.n	8008e26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fe f8b2 	bl	8006f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e16:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d202      	bcs.n	8008e26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e20:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6013      	str	r3, [r2, #0]
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000868 	.word	0x20000868
 8008e34:	20000764 	.word	0x20000764
 8008e38:	2000086c 	.word	0x2000086c
 8008e3c:	20000850 	.word	0x20000850
 8008e40:	20000820 	.word	0x20000820
 8008e44:	2000081c 	.word	0x2000081c
 8008e48:	20000884 	.word	0x20000884

08008e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3b04      	subs	r3, #4
 8008e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f023 0201 	bic.w	r2, r3, #1
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3b04      	subs	r3, #4
 8008e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e7c:	4a0c      	ldr	r2, [pc, #48]	; (8008eb0 <pxPortInitialiseStack+0x64>)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3b14      	subs	r3, #20
 8008e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f06f 0202 	mvn.w	r2, #2
 8008e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3b20      	subs	r3, #32
 8008ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	08008eb5 	.word	0x08008eb5

08008eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ebe:	4b14      	ldr	r3, [pc, #80]	; (8008f10 <prvTaskExitError+0x5c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d00c      	beq.n	8008ee2 <prvTaskExitError+0x2e>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	b672      	cpsid	i
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	b662      	cpsie	i
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <prvTaskExitError+0x2c>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	60bb      	str	r3, [r7, #8]
}
 8008ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008efa:	bf00      	nop
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0fc      	beq.n	8008efc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20000040 	.word	0x20000040
	...

08008f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <pxCurrentTCBConst2>)
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	6808      	ldr	r0, [r1, #0]
 8008f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	f380 8809 	msr	PSP, r0
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8811 	msr	BASEPRI, r0
 8008f3a:	4770      	bx	lr
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst2>:
 8008f40:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f48:	4808      	ldr	r0, [pc, #32]	; (8008f6c <prvPortStartFirstTask+0x24>)
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	6800      	ldr	r0, [r0, #0]
 8008f4e:	f380 8808 	msr	MSP, r0
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8814 	msr	CONTROL, r0
 8008f5a:	b662      	cpsie	i
 8008f5c:	b661      	cpsie	f
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	df00      	svc	0
 8008f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f6a:	bf00      	nop
 8008f6c:	e000ed08 	.word	0xe000ed08

08008f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f76:	4b37      	ldr	r3, [pc, #220]	; (8009054 <xPortStartScheduler+0xe4>)
 8008f78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	; (8009058 <xPortStartScheduler+0xe8>)
 8008f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f9e:	4b2f      	ldr	r3, [pc, #188]	; (800905c <xPortStartScheduler+0xec>)
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fa4:	e009      	b.n	8008fba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008fa6:	4b2d      	ldr	r3, [pc, #180]	; (800905c <xPortStartScheduler+0xec>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4a2b      	ldr	r2, [pc, #172]	; (800905c <xPortStartScheduler+0xec>)
 8008fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d0ef      	beq.n	8008fa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fc6:	4b25      	ldr	r3, [pc, #148]	; (800905c <xPortStartScheduler+0xec>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1c3 0307 	rsb	r3, r3, #7
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d00c      	beq.n	8008fec <xPortStartScheduler+0x7c>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	b672      	cpsid	i
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	b662      	cpsie	i
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fec:	4b1b      	ldr	r3, [pc, #108]	; (800905c <xPortStartScheduler+0xec>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	4a1a      	ldr	r2, [pc, #104]	; (800905c <xPortStartScheduler+0xec>)
 8008ff4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ff6:	4b19      	ldr	r3, [pc, #100]	; (800905c <xPortStartScheduler+0xec>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffe:	4a17      	ldr	r2, [pc, #92]	; (800905c <xPortStartScheduler+0xec>)
 8009000:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	b2da      	uxtb	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <xPortStartScheduler+0xf0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a14      	ldr	r2, [pc, #80]	; (8009060 <xPortStartScheduler+0xf0>)
 8009010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009014:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <xPortStartScheduler+0xf0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a11      	ldr	r2, [pc, #68]	; (8009060 <xPortStartScheduler+0xf0>)
 800901c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009020:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009022:	f000 f8dd 	bl	80091e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009026:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <xPortStartScheduler+0xf4>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800902c:	f000 f8fc 	bl	8009228 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <xPortStartScheduler+0xf8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a0c      	ldr	r2, [pc, #48]	; (8009068 <xPortStartScheduler+0xf8>)
 8009036:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800903a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800903c:	f7ff ff84 	bl	8008f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009040:	f7ff fa9e 	bl	8008580 <vTaskSwitchContext>
	prvTaskExitError();
 8009044:	f7ff ff36 	bl	8008eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	e000e400 	.word	0xe000e400
 8009058:	20000890 	.word	0x20000890
 800905c:	20000894 	.word	0x20000894
 8009060:	e000ed20 	.word	0xe000ed20
 8009064:	20000040 	.word	0x20000040
 8009068:	e000ef34 	.word	0xe000ef34

0800906c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	b672      	cpsid	i
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	b662      	cpsie	i
 8009086:	607b      	str	r3, [r7, #4]
}
 8009088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800908a:	4b10      	ldr	r3, [pc, #64]	; (80090cc <vPortEnterCritical+0x60>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3301      	adds	r3, #1
 8009090:	4a0e      	ldr	r2, [pc, #56]	; (80090cc <vPortEnterCritical+0x60>)
 8009092:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009094:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <vPortEnterCritical+0x60>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d111      	bne.n	80090c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800909c:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <vPortEnterCritical+0x64>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00c      	beq.n	80090c0 <vPortEnterCritical+0x54>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	b672      	cpsid	i
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	b662      	cpsie	i
 80090ba:	603b      	str	r3, [r7, #0]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <vPortEnterCritical+0x52>
	}
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20000040 	.word	0x20000040
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090da:	4b13      	ldr	r3, [pc, #76]	; (8009128 <vPortExitCritical+0x54>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10c      	bne.n	80090fc <vPortExitCritical+0x28>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	b672      	cpsid	i
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	b662      	cpsie	i
 80090f6:	607b      	str	r3, [r7, #4]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <vPortExitCritical+0x54>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3b01      	subs	r3, #1
 8009102:	4a09      	ldr	r2, [pc, #36]	; (8009128 <vPortExitCritical+0x54>)
 8009104:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <vPortExitCritical+0x54>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d105      	bne.n	800911a <vPortExitCritical+0x46>
 800910e:	2300      	movs	r3, #0
 8009110:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	f383 8811 	msr	BASEPRI, r3
}
 8009118:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20000040 	.word	0x20000040
 800912c:	00000000 	.word	0x00000000

08009130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009130:	f3ef 8009 	mrs	r0, PSP
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <pxCurrentTCBConst>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	f01e 0f10 	tst.w	lr, #16
 8009140:	bf08      	it	eq
 8009142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	6010      	str	r0, [r2, #0]
 800914c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009154:	b672      	cpsid	i
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	b662      	cpsie	i
 8009164:	f7ff fa0c 	bl	8008580 <vTaskSwitchContext>
 8009168:	f04f 0000 	mov.w	r0, #0
 800916c:	f380 8811 	msr	BASEPRI, r0
 8009170:	bc09      	pop	{r0, r3}
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	6808      	ldr	r0, [r1, #0]
 8009176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	f01e 0f10 	tst.w	lr, #16
 800917e:	bf08      	it	eq
 8009180:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009184:	f380 8809 	msr	PSP, r0
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop

08009190 <pxCurrentTCBConst>:
 8009190:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	b672      	cpsid	i
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	b662      	cpsie	i
 80091b2:	607b      	str	r3, [r7, #4]
}
 80091b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091b6:	f7ff f929 	bl	800840c <xTaskIncrementTick>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091c0:	4b06      	ldr	r3, [pc, #24]	; (80091dc <SysTick_Handler+0x44>)
 80091c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	2300      	movs	r3, #0
 80091ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f383 8811 	msr	BASEPRI, r3
}
 80091d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091e4:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <vPortSetupTimerInterrupt+0x34>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091ea:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <vPortSetupTimerInterrupt+0x38>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091f0:	4b0a      	ldr	r3, [pc, #40]	; (800921c <vPortSetupTimerInterrupt+0x3c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <vPortSetupTimerInterrupt+0x40>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	099b      	lsrs	r3, r3, #6
 80091fc:	4a09      	ldr	r2, [pc, #36]	; (8009224 <vPortSetupTimerInterrupt+0x44>)
 80091fe:	3b01      	subs	r3, #1
 8009200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009202:	4b04      	ldr	r3, [pc, #16]	; (8009214 <vPortSetupTimerInterrupt+0x34>)
 8009204:	2207      	movs	r2, #7
 8009206:	601a      	str	r2, [r3, #0]
}
 8009208:	bf00      	nop
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	e000e010 	.word	0xe000e010
 8009218:	e000e018 	.word	0xe000e018
 800921c:	20000034 	.word	0x20000034
 8009220:	10624dd3 	.word	0x10624dd3
 8009224:	e000e014 	.word	0xe000e014

08009228 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009228:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009238 <vPortEnableVFP+0x10>
 800922c:	6801      	ldr	r1, [r0, #0]
 800922e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009232:	6001      	str	r1, [r0, #0]
 8009234:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009236:	bf00      	nop
 8009238:	e000ed88 	.word	0xe000ed88

0800923c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009242:	f3ef 8305 	mrs	r3, IPSR
 8009246:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b0f      	cmp	r3, #15
 800924c:	d916      	bls.n	800927c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800924e:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <vPortValidateInterruptPriority+0x78>)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009258:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <vPortValidateInterruptPriority+0x7c>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	7afa      	ldrb	r2, [r7, #11]
 800925e:	429a      	cmp	r2, r3
 8009260:	d20c      	bcs.n	800927c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	b672      	cpsid	i
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	b662      	cpsie	i
 8009276:	607b      	str	r3, [r7, #4]
}
 8009278:	bf00      	nop
 800927a:	e7fe      	b.n	800927a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <vPortValidateInterruptPriority+0x80>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009284:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <vPortValidateInterruptPriority+0x84>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d90c      	bls.n	80092a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	b672      	cpsid	i
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	b662      	cpsie	i
 80092a0:	603b      	str	r3, [r7, #0]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <vPortValidateInterruptPriority+0x68>
	}
 80092a6:	bf00      	nop
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	e000e3f0 	.word	0xe000e3f0
 80092b8:	20000890 	.word	0x20000890
 80092bc:	e000ed0c 	.word	0xe000ed0c
 80092c0:	20000894 	.word	0x20000894

080092c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092d0:	f7fe ffce 	bl	8008270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092d4:	4b5b      	ldr	r3, [pc, #364]	; (8009444 <pvPortMalloc+0x180>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092dc:	f000 f91a 	bl	8009514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092e0:	4b59      	ldr	r3, [pc, #356]	; (8009448 <pvPortMalloc+0x184>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4013      	ands	r3, r2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 8092 	bne.w	8009412 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01f      	beq.n	8009334 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80092f4:	2208      	movs	r2, #8
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4413      	add	r3, r2
 80092fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f003 0307 	and.w	r3, r3, #7
 8009302:	2b00      	cmp	r3, #0
 8009304:	d016      	beq.n	8009334 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f023 0307 	bic.w	r3, r3, #7
 800930c:	3308      	adds	r3, #8
 800930e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00c      	beq.n	8009334 <pvPortMalloc+0x70>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	b672      	cpsid	i
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	b662      	cpsie	i
 800932e:	617b      	str	r3, [r7, #20]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d06b      	beq.n	8009412 <pvPortMalloc+0x14e>
 800933a:	4b44      	ldr	r3, [pc, #272]	; (800944c <pvPortMalloc+0x188>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	429a      	cmp	r2, r3
 8009342:	d866      	bhi.n	8009412 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009344:	4b42      	ldr	r3, [pc, #264]	; (8009450 <pvPortMalloc+0x18c>)
 8009346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009348:	4b41      	ldr	r3, [pc, #260]	; (8009450 <pvPortMalloc+0x18c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800934e:	e004      	b.n	800935a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <pvPortMalloc+0xa8>
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f1      	bne.n	8009350 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800936c:	4b35      	ldr	r3, [pc, #212]	; (8009444 <pvPortMalloc+0x180>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009372:	429a      	cmp	r2, r3
 8009374:	d04d      	beq.n	8009412 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2208      	movs	r2, #8
 800937c:	4413      	add	r3, r2
 800937e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	2308      	movs	r3, #8
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	429a      	cmp	r2, r3
 8009396:	d921      	bls.n	80093dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4413      	add	r3, r2
 800939e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00c      	beq.n	80093c4 <pvPortMalloc+0x100>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	b672      	cpsid	i
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	b662      	cpsie	i
 80093be:	613b      	str	r3, [r7, #16]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	1ad2      	subs	r2, r2, r3
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093d6:	69b8      	ldr	r0, [r7, #24]
 80093d8:	f000 f8fe 	bl	80095d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093dc:	4b1b      	ldr	r3, [pc, #108]	; (800944c <pvPortMalloc+0x188>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	4a19      	ldr	r2, [pc, #100]	; (800944c <pvPortMalloc+0x188>)
 80093e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ea:	4b18      	ldr	r3, [pc, #96]	; (800944c <pvPortMalloc+0x188>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b19      	ldr	r3, [pc, #100]	; (8009454 <pvPortMalloc+0x190>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d203      	bcs.n	80093fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <pvPortMalloc+0x188>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a16      	ldr	r2, [pc, #88]	; (8009454 <pvPortMalloc+0x190>)
 80093fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	4b11      	ldr	r3, [pc, #68]	; (8009448 <pvPortMalloc+0x184>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	431a      	orrs	r2, r3
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009412:	f7fe ff3b 	bl	800828c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <pvPortMalloc+0x176>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	b672      	cpsid	i
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	b662      	cpsie	i
 8009434:	60fb      	str	r3, [r7, #12]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <pvPortMalloc+0x174>
	return pvReturn;
 800943a:	69fb      	ldr	r3, [r7, #28]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3728      	adds	r7, #40	; 0x28
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200044a0 	.word	0x200044a0
 8009448:	200044ac 	.word	0x200044ac
 800944c:	200044a4 	.word	0x200044a4
 8009450:	20004498 	.word	0x20004498
 8009454:	200044a8 	.word	0x200044a8

08009458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d04c      	beq.n	8009504 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800946a:	2308      	movs	r3, #8
 800946c:	425b      	negs	r3, r3
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4413      	add	r3, r2
 8009472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	4b23      	ldr	r3, [pc, #140]	; (800950c <vPortFree+0xb4>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10c      	bne.n	80094a0 <vPortFree+0x48>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	b672      	cpsid	i
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	b662      	cpsie	i
 800949a:	60fb      	str	r3, [r7, #12]
}
 800949c:	bf00      	nop
 800949e:	e7fe      	b.n	800949e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00c      	beq.n	80094c2 <vPortFree+0x6a>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	60bb      	str	r3, [r7, #8]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	4b11      	ldr	r3, [pc, #68]	; (800950c <vPortFree+0xb4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d019      	beq.n	8009504 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d115      	bne.n	8009504 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	4b0b      	ldr	r3, [pc, #44]	; (800950c <vPortFree+0xb4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	43db      	mvns	r3, r3
 80094e2:	401a      	ands	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094e8:	f7fe fec2 	bl	8008270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <vPortFree+0xb8>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4413      	add	r3, r2
 80094f6:	4a06      	ldr	r2, [pc, #24]	; (8009510 <vPortFree+0xb8>)
 80094f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094fa:	6938      	ldr	r0, [r7, #16]
 80094fc:	f000 f86c 	bl	80095d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009500:	f7fe fec4 	bl	800828c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009504:	bf00      	nop
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	200044ac 	.word	0x200044ac
 8009510:	200044a4 	.word	0x200044a4

08009514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800951a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800951e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009520:	4b27      	ldr	r3, [pc, #156]	; (80095c0 <prvHeapInit+0xac>)
 8009522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00c      	beq.n	8009548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3307      	adds	r3, #7
 8009532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	4a1f      	ldr	r2, [pc, #124]	; (80095c0 <prvHeapInit+0xac>)
 8009544:	4413      	add	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800954c:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <prvHeapInit+0xb0>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009552:	4b1c      	ldr	r3, [pc, #112]	; (80095c4 <prvHeapInit+0xb0>)
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	4413      	add	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009560:	2208      	movs	r2, #8
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0307 	bic.w	r3, r3, #7
 800956e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <prvHeapInit+0xb4>)
 8009574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <prvHeapInit+0xb4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <prvHeapInit+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <prvHeapInit+0xb4>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <prvHeapInit+0xb8>)
 80095a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <prvHeapInit+0xbc>)
 80095aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095ac:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <prvHeapInit+0xc0>)
 80095ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000898 	.word	0x20000898
 80095c4:	20004498 	.word	0x20004498
 80095c8:	200044a0 	.word	0x200044a0
 80095cc:	200044a8 	.word	0x200044a8
 80095d0:	200044a4 	.word	0x200044a4
 80095d4:	200044ac 	.word	0x200044ac

080095d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095e0:	4b28      	ldr	r3, [pc, #160]	; (8009684 <prvInsertBlockIntoFreeList+0xac>)
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e002      	b.n	80095ec <prvInsertBlockIntoFreeList+0x14>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d8f7      	bhi.n	80095e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	4413      	add	r3, r2
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d108      	bne.n	800961a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	441a      	add	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d118      	bne.n	8009660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b15      	ldr	r3, [pc, #84]	; (8009688 <prvInsertBlockIntoFreeList+0xb0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d00d      	beq.n	8009656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e008      	b.n	8009668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvInsertBlockIntoFreeList+0xb0>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e003      	b.n	8009668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d002      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20004498 	.word	0x20004498
 8009688:	200044a0 	.word	0x200044a0

0800968c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2220      	movs	r2, #32
 8009698:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	791b      	ldrb	r3, [r3, #4]
 80096a2:	b299      	uxth	r1, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	1d5a      	adds	r2, r3, #5
 80096a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2303      	movs	r3, #3
 80096b0:	f7f9 fefc 	bl	80034ac <HAL_I2C_Master_Transmit>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 80096d0:	220f      	movs	r2, #15
 80096d2:	2141      	movs	r1, #65	; 0x41
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f80c 	bl	80096f2 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	f043 0304 	orr.w	r3, r3, #4
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	4619      	mov	r1, r3
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f81f 	bl	8009728 <MAX581x_Reference>
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	70fb      	strb	r3, [r7, #3]
 80096fe:	4613      	mov	r3, r2
 8009700:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009708:	b2da      	uxtb	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	78ba      	ldrb	r2, [r7, #2]
 8009712:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff ffb6 	bl	800968c <MAX581x_WriteCommand>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800973a:	b2da      	uxtb	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff ff9d 	bl	800968c <MAX581x_WriteCommand>
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
 8009766:	4613      	mov	r3, r2
 8009768:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8009770:	883b      	ldrh	r3, [r7, #0]
 8009772:	091b      	lsrs	r3, r3, #4
 8009774:	b29b      	uxth	r3, r3
 8009776:	b2da      	uxtb	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800977c:	883b      	ldrh	r3, [r7, #0]
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f023 030f 	bic.w	r3, r3, #15
 8009786:	b2da      	uxtb	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff ff7d 	bl	800968c <MAX581x_WriteCommand>
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	70fb      	strb	r3, [r7, #3]
 80097a6:	4613      	mov	r3, r2
 80097a8:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 80097b6:	883b      	ldrh	r3, [r7, #0]
 80097b8:	091b      	lsrs	r3, r3, #4
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 80097c2:	883b      	ldrh	r3, [r7, #0]
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f023 030f 	bic.w	r3, r3, #15
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff ff5a 	bl	800968c <MAX581x_WriteCommand>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 80097e0:	b084      	sub	sp, #16
 80097e2:	b4b0      	push	{r4, r5, r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	f107 001c 	add.w	r0, r7, #28
 80097ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	461d      	mov	r5, r3
 80097f6:	f107 041c 	add.w	r4, r7, #28
 80097fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009802:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800980c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid->error = 0;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lastMeasure = 0;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	629a      	str	r2, [r3, #40]	; 0x28
	pid->integral = 0;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f04f 0200 	mov.w	r2, #0
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->enable = enable;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	bcb0      	pop	{r4, r5, r7}
 8009842:	b004      	add	sp, #16
 8009844:	4770      	bx	lr

08009846 <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 8009846:	b480      	push	{r7}
 8009848:	b087      	sub	sp, #28
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	ed87 0a02 	vstr	s0, [r7, #8]
 8009852:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800985c:	2b01      	cmp	r3, #1
 800985e:	d006      	beq.n	800986e <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	629a      	str	r2, [r3, #40]	; 0x28
		pid->output = reference;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	625a      	str	r2, [r3, #36]	; 0x24
		return;
 800986c:	e085      	b.n	800997a <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	ed93 7a07 	vldr	s14, [r3, #28]
 800987a:	edd7 7a01 	vldr	s15, [r7, #4]
 800987e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	edd3 6a08 	vldr	s13, [r3, #32]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	edd3 7a01 	vldr	s15, [r3, #4]
 800989a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800989e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	if (pid->integral > pid->params.integralMax)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80098b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098bc:	dd04      	ble.n	80098c8 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	695a      	ldr	r2, [r3, #20]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80098c6:	e014      	b.n	80098f2 <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80098d4:	eef1 7a67 	vneg.f32	s15, s15
 80098d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e0:	d507      	bpl.n	80098f2 <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80098e8:	eef1 7a67 	vneg.f32	s15, s15
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80098f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80098fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009900:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	ed93 7a08 	vldr	s14, [r3, #32]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	edd3 7a00 	vldr	s15, [r3]
 8009910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800991a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	edd3 6a02 	vldr	s13, [r3, #8]
 8009924:	edd7 7a05 	vldr	s15, [r7, #20]
 8009928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800992c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (pid->output > pid->params.outputMax)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994a:	dd04      	ble.n	8009956 <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	625a      	str	r2, [r3, #36]	; 0x24
 8009954:	e00e      	b.n	8009974 <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800996a:	d503      	bpl.n	8009974 <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	691a      	ldr	r2, [r3, #16]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	625a      	str	r2, [r3, #36]	; 0x24
	}

	pid->lastMeasure = measure;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8009990:	887b      	ldrh	r3, [r7, #2]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7f9 fcde 	bl	8003356 <HAL_GPIO_TogglePin>
}
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <Board_GetID>:

uint16_t Board_GetID()
{
 80099a4:	b598      	push	{r3, r4, r7, lr}
 80099a6:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 80099a8:	2102      	movs	r1, #2
 80099aa:	481b      	ldr	r0, [pc, #108]	; (8009a18 <Board_GetID+0x74>)
 80099ac:	f7f9 fca2 	bl	80032f4 <HAL_GPIO_ReadPin>
 80099b0:	4603      	mov	r3, r0
 80099b2:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 80099b4:	2101      	movs	r1, #1
 80099b6:	4818      	ldr	r0, [pc, #96]	; (8009a18 <Board_GetID+0x74>)
 80099b8:	f7f9 fc9c 	bl	80032f4 <HAL_GPIO_ReadPin>
 80099bc:	4603      	mov	r3, r0
 80099be:	005b      	lsls	r3, r3, #1
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 80099c0:	b21b      	sxth	r3, r3
 80099c2:	4323      	orrs	r3, r4
 80099c4:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 80099c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099ca:	4814      	ldr	r0, [pc, #80]	; (8009a1c <Board_GetID+0x78>)
 80099cc:	f7f9 fc92 	bl	80032f4 <HAL_GPIO_ReadPin>
 80099d0:	4603      	mov	r3, r0
 80099d2:	009b      	lsls	r3, r3, #2
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 80099d4:	b21b      	sxth	r3, r3
 80099d6:	4323      	orrs	r3, r4
 80099d8:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 80099da:	2104      	movs	r1, #4
 80099dc:	4810      	ldr	r0, [pc, #64]	; (8009a20 <Board_GetID+0x7c>)
 80099de:	f7f9 fc89 	bl	80032f4 <HAL_GPIO_ReadPin>
 80099e2:	4603      	mov	r3, r0
 80099e4:	00db      	lsls	r3, r3, #3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 80099e6:	b21b      	sxth	r3, r3
 80099e8:	4323      	orrs	r3, r4
 80099ea:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 80099ec:	2110      	movs	r1, #16
 80099ee:	480d      	ldr	r0, [pc, #52]	; (8009a24 <Board_GetID+0x80>)
 80099f0:	f7f9 fc80 	bl	80032f4 <HAL_GPIO_ReadPin>
 80099f4:	4603      	mov	r3, r0
 80099f6:	011b      	lsls	r3, r3, #4
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 80099f8:	b21b      	sxth	r3, r3
 80099fa:	4323      	orrs	r3, r4
 80099fc:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 80099fe:	2110      	movs	r1, #16
 8009a00:	4809      	ldr	r0, [pc, #36]	; (8009a28 <Board_GetID+0x84>)
 8009a02:	f7f9 fc77 	bl	80032f4 <HAL_GPIO_ReadPin>
 8009a06:	4603      	mov	r3, r0
 8009a08:	015b      	lsls	r3, r3, #5
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	4323      	orrs	r3, r4
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	b29b      	uxth	r3, r3
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	bd98      	pop	{r3, r4, r7, pc}
 8009a16:	bf00      	nop
 8009a18:	40022400 	.word	0x40022400
 8009a1c:	40022000 	.word	0x40022000
 8009a20:	40020400 	.word	0x40020400
 8009a24:	40020800 	.word	0x40020800
 8009a28:	40021c00 	.word	0x40021c00
 8009a2c:	00000000 	.word	0x00000000

08009a30 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7c1b      	ldrb	r3, [r3, #16]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d002      	beq.n	8009a4a <Encoder_Update+0x1a>
		return 0;
 8009a44:	f04f 0300 	mov.w	r3, #0
 8009a48:	e03a      	b.n	8009ac0 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 8009a52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a5e:	eef0 7ae7 	vabs.f32	s15, s15
 8009a62:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6e:	d502      	bpl.n	8009a76 <Encoder_Update+0x46>
 8009a70:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8009ae0 <Encoder_Update+0xb0>
 8009a74:	e005      	b.n	8009a82 <Encoder_Update+0x52>
 8009a76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a82:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 8009a8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009a9a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8009ad8 <Encoder_Update+0xa8>
 8009a9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8009aa2:	edd7 7a00 	vldr	s15, [r7]
 8009aa6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009ae4 <Encoder_Update+0xb4>
 8009aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009ab2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009ab6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009aba:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 8009abe:	68fb      	ldr	r3, [r7, #12]
}
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	f3af 8000 	nop.w
 8009ad8:	54442d18 	.word	0x54442d18
 8009adc:	400921fb 	.word	0x400921fb
 8009ae0:	00000000 	.word	0x00000000
 8009ae4:	46000000 	.word	0x46000000

08009ae8 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
 8009af4:	4613      	mov	r3, r2
 8009af6:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	78ba      	ldrb	r2, [r7, #2]
 8009afc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	motorDevice->outputID = motorID;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	78fa      	ldrb	r2, [r7, #3]
 8009b04:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	motorDevice->refSpeed = 0;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	671a      	str	r2, [r3, #112]	; 0x70
	motorDevice->measSpeed = 0;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	675a      	str	r2, [r3, #116]	; 0x74
	Motor_Enable(motorDevice, enable);
 8009b18:	78bb      	ldrb	r3, [r7, #2]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f853 	bl	8009bc8 <Motor_Enable>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed  * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 8009b3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b3e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009bc4 <Motor_CLDrive+0x98>
 8009b42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	edd3 7a06 	vldr	s15, [r3, #24]
 8009b58:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7ff ff67 	bl	8009a30 <Encoder_Update>
 8009b62:	eef0 7a40 	vmov.f32	s15, s0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8009b7a:	eef0 0a47 	vmov.f32	s1, s14
 8009b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b82:	4610      	mov	r0, r2
 8009b84:	f7ff fe5f 	bl	8009846 <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009b8e:	eef0 7ae7 	vabs.f32	s15, s15
 8009b92:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9e:	d503      	bpl.n	8009ba8 <Motor_CLDrive+0x7c>
		motorDevice->pid.output = 0.0;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009bae:	eeb0 0a67 	vmov.f32	s0, s15
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f84b 	bl	8009c50 <Motor_SetVoltage>
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	3cdd82fd 	.word	0x3cdd82fd

08009bc8 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	78fa      	ldrb	r2, [r7, #3]
 8009bd8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bec:	2200      	movs	r2, #0
 8009bee:	4619      	mov	r1, r3
 8009bf0:	f7f9 fb98 	bl	8003324 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 8009bf4:	e008      	b.n	8009c08 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c00:	2201      	movs	r2, #1
 8009c02:	4619      	mov	r1, r3
 8009c04:	f7f9 fb8e 	bl	8003324 <HAL_GPIO_WritePin>
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d109      	bne.n	8009c36 <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f7f9 fb78 	bl	8003324 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 8009c34:	e008      	b.n	8009c48 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c40:	2201      	movs	r2, #1
 8009c42:	4619      	mov	r1, r3
 8009c44:	f7f9 fb6e 	bl	8003324 <HAL_GPIO_WritePin>
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8009c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6a:	db1d      	blt.n	8009ca8 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c76:	2201      	movs	r2, #1
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f7f9 fb53 	bl	8003324 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8009c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c86:	ee17 3a90 	vmov	r3, s15
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	68b8      	ldr	r0, [r7, #8]
 8009ca2:	f7ff fd7a 	bl	800979a <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 8009ca6:	e01e      	b.n	8009ce6 <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	f7f9 fb35 	bl	8003324 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8009cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8009cbe:	eef0 7ae7 	vabs.f32	s15, s15
 8009cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc6:	ee17 3a90 	vmov	r3, s15
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68b8      	ldr	r0, [r7, #8]
 8009ce2:	f7ff fd5a 	bl	800979a <MAX581x_CodeLoad>
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6898      	ldr	r0, [r3, #8]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	8a5b      	ldrh	r3, [r3, #18]
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	4619      	mov	r1, r3
 8009d06:	f7f9 fb0d 	bl	8003324 <HAL_GPIO_WritePin>
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6858      	ldr	r0, [r3, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	8a1b      	ldrh	r3, [r3, #16]
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f7f9 fafb 	bl	8003324 <HAL_GPIO_WritePin>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
 8009d42:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	887a      	ldrh	r2, [r7, #2]
 8009d54:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8bba      	ldrh	r2, [r7, #28]
 8009d60:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009d62:	2101      	movs	r1, #1
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ffd4 	bl	8009d12 <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff ffbe 	bl	8009cee <nRF24_CE_State>
}
 8009d72:	bf00      	nop
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af02      	add	r7, sp, #8
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	460b      	mov	r3, r1
 8009d84:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	f107 020f 	add.w	r2, r7, #15
 8009d8e:	1cf9      	adds	r1, r7, #3
 8009d90:	f242 7310 	movw	r3, #10000	; 0x2710
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	2301      	movs	r3, #1
 8009d98:	f7fb fa9f 	bl	80052da <HAL_SPI_TransmitReceive>
  return rxData;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009db2:	2100      	movs	r1, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ffac 	bl	8009d12 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff ffd8 	bl	8009d7a <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8009dca:	21ff      	movs	r1, #255	; 0xff
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff ffd4 	bl	8009d7a <nRF24_LL_RW>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff ff9a 	bl	8009d12 <nRF24_CSN_State>

  return value;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
 8009df4:	4613      	mov	r3, r2
 8009df6:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009df8:	2100      	movs	r1, #0
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff ff89 	bl	8009d12 <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	2b1f      	cmp	r3, #31
 8009e04:	d812      	bhi.n	8009e2c <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8009e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e0a:	f003 031f 	and.w	r3, r3, #31
 8009e0e:	b25b      	sxtb	r3, r3
 8009e10:	f043 0320 	orr.w	r3, r3, #32
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff ffad 	bl	8009d7a <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 8009e20:	78bb      	ldrb	r3, [r7, #2]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff ffa8 	bl	8009d7a <nRF24_LL_RW>
 8009e2a:	e015      	b.n	8009e58 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff ffa2 	bl	8009d7a <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8009e36:	78fb      	ldrb	r3, [r7, #3]
 8009e38:	2be1      	cmp	r3, #225	; 0xe1
 8009e3a:	d00d      	beq.n	8009e58 <nRF24_WriteReg+0x70>
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	2be2      	cmp	r3, #226	; 0xe2
 8009e40:	d00a      	beq.n	8009e58 <nRF24_WriteReg+0x70>
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	2be3      	cmp	r3, #227	; 0xe3
 8009e46:	d007      	beq.n	8009e58 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	2bff      	cmp	r3, #255	; 0xff
 8009e4c:	d004      	beq.n	8009e58 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 8009e4e:	78bb      	ldrb	r3, [r7, #2]
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7ff ff91 	bl	8009d7a <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009e58:	2101      	movs	r1, #1
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff ff59 	bl	8009d12 <nRF24_CSN_State>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8009e68:	b590      	push	{r4, r7, lr}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	461a      	mov	r2, r3
 8009e74:	460b      	mov	r3, r1
 8009e76:	72fb      	strb	r3, [r7, #11]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff ff47 	bl	8009d12 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	4619      	mov	r1, r3
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7ff ff76 	bl	8009d7a <nRF24_LL_RW>
  while (count--)
 8009e8e:	e008      	b.n	8009ea2 <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8009e90:	687c      	ldr	r4, [r7, #4]
 8009e92:	1c63      	adds	r3, r4, #1
 8009e94:	607b      	str	r3, [r7, #4]
 8009e96:	21ff      	movs	r1, #255	; 0xff
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff ff6e 	bl	8009d7a <nRF24_LL_RW>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	7023      	strb	r3, [r4, #0]
  while (count--)
 8009ea2:	7abb      	ldrb	r3, [r7, #10]
 8009ea4:	1e5a      	subs	r2, r3, #1
 8009ea6:	72ba      	strb	r2, [r7, #10]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f1      	bne.n	8009e90 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009eac:	2101      	movs	r1, #1
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff ff2f 	bl	8009d12 <nRF24_CSN_State>
}
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <nRF24_Init>:
    nRF24_LL_RW(device, *pBuf++);
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
}

void nRF24_Init(nRF24_Handler_t *device) {
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ff8d 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8009ece:	223f      	movs	r2, #63	; 0x3f
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ff88 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8009ed8:	2203      	movs	r2, #3
 8009eda:	2102      	movs	r1, #2
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff ff83 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	2103      	movs	r1, #3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff ff7e 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8009eec:	2203      	movs	r2, #3
 8009eee:	2104      	movs	r1, #4
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff ff79 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	2105      	movs	r1, #5
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff ff74 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8009f00:	220e      	movs	r2, #14
 8009f02:	2106      	movs	r1, #6
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff ff6f 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2107      	movs	r1, #7
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff ff6a 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 8009f14:	2200      	movs	r2, #0
 8009f16:	2111      	movs	r1, #17
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff ff65 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2112      	movs	r1, #18
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff ff60 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2113      	movs	r1, #19
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff ff5b 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8009f32:	2200      	movs	r2, #0
 8009f34:	2114      	movs	r1, #20
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff ff56 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2115      	movs	r1, #21
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff ff51 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8009f46:	2200      	movs	r2, #0
 8009f48:	2116      	movs	r1, #22
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff ff4c 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 8009f50:	2200      	movs	r2, #0
 8009f52:	211c      	movs	r1, #28
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ff47 	bl	8009de8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	211d      	movs	r1, #29
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff ff42 	bl	8009de8 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa63 	bl	800a430 <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fa53 	bl	800a416 <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fa6a 	bl	800a44a <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009f76:	2101      	movs	r1, #1
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff feca 	bl	8009d12 <nRF24_CSN_State>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8009f92:	2100      	movs	r1, #0
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff06 	bl	8009da6 <nRF24_ReadReg>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d104      	bne.n	8009fae <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	e003      	b.n	8009fb6 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	f023 0302 	bic.w	r3, r3, #2
 8009fb4:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	2100      	movs	r1, #0
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ff13 	bl	8009de8 <nRF24_WriteReg>
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fee4 	bl	8009da6 <nRF24_ReadReg>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8009fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	b25a      	sxtb	r2, r3
 8009ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	b25b      	sxtb	r3, r3
 8009ffc:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	461a      	mov	r2, r3
 800a002:	2100      	movs	r1, #0
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff feef 	bl	8009de8 <nRF24_WriteReg>
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	461a      	mov	r2, r3
 800a022:	2105      	movs	r1, #5
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff fedf 	bl	8009de8 <nRF24_WriteReg>
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	460b      	mov	r3, r1
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	2b06      	cmp	r3, #6
 800a046:	f200 813e 	bhi.w	800a2c6 <nRF24_SetAddr+0x292>
 800a04a:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <nRF24_SetAddr+0x1c>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a06d 	.word	0x0800a06d
 800a054:	0800a0c3 	.word	0x0800a0c3
 800a058:	0800a119 	.word	0x0800a119
 800a05c:	0800a16f 	.word	0x0800a16f
 800a060:	0800a1c5 	.word	0x0800a1c5
 800a064:	0800a21b 	.word	0x0800a21b
 800a068:	0800a271 	.word	0x0800a271
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a06c:	2103      	movs	r1, #3
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff fe99 	bl	8009da6 <nRF24_ReadReg>
 800a074:	4603      	mov	r3, r0
 800a076:	3301      	adds	r3, #1
 800a078:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a082:	2100      	movs	r1, #0
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff fe44 	bl	8009d12 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	4a90      	ldr	r2, [pc, #576]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a08e:	5cd3      	ldrb	r3, [r2, r3]
 800a090:	f043 0320 	orr.w	r3, r3, #32
 800a094:	b2db      	uxtb	r3, r3
 800a096:	4619      	mov	r1, r3
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7ff fe6e 	bl	8009d7a <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	1e5a      	subs	r2, r3, #1
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff fe66 	bl	8009d7a <nRF24_LL_RW>
      } while (addr_width--);
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	1e5a      	subs	r2, r3, #1
 800a0b2:	75fa      	strb	r2, [r7, #23]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f2      	bne.n	800a09e <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7ff fe29 	bl	8009d12 <nRF24_CSN_State>
      break;
 800a0c0:	e102      	b.n	800a2c8 <nRF24_SetAddr+0x294>

    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a0c2:	2103      	movs	r1, #3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff fe6e 	bl	8009da6 <nRF24_ReadReg>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a0d8:	2100      	movs	r1, #0
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff fe19 	bl	8009d12 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	4a7b      	ldr	r2, [pc, #492]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a0e4:	5cd3      	ldrb	r3, [r2, r3]
 800a0e6:	f043 0320 	orr.w	r3, r3, #32
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7ff fe43 	bl	8009d7a <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	1e5a      	subs	r2, r3, #1
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7ff fe3b 	bl	8009d7a <nRF24_LL_RW>
      } while (addr_width--);
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	1e5a      	subs	r2, r3, #1
 800a108:	75fa      	strb	r2, [r7, #23]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1f2      	bne.n	800a0f4 <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 800a10e:	2101      	movs	r1, #1
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fdfe 	bl	8009d12 <nRF24_CSN_State>
      break;
 800a116:	e0d7      	b.n	800a2c8 <nRF24_SetAddr+0x294>

    case nRF24_PIPE2:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a118:	2103      	movs	r1, #3
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff fe43 	bl	8009da6 <nRF24_ReadReg>
 800a120:	4603      	mov	r3, r0
 800a122:	3301      	adds	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	4413      	add	r3, r2
 800a12c:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a12e:	2100      	movs	r1, #0
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f7ff fdee 	bl	8009d12 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	4a65      	ldr	r2, [pc, #404]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a13a:	5cd3      	ldrb	r3, [r2, r3]
 800a13c:	f043 0320 	orr.w	r3, r3, #32
 800a140:	b2db      	uxtb	r3, r3
 800a142:	4619      	mov	r1, r3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fe18 	bl	8009d7a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	1e5a      	subs	r2, r3, #1
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	4619      	mov	r1, r3
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fe10 	bl	8009d7a <nRF24_LL_RW>
	  } while (addr_width--);
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	1e5a      	subs	r2, r3, #1
 800a15e:	75fa      	strb	r2, [r7, #23]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1f2      	bne.n	800a14a <nRF24_SetAddr+0x116>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a164:	2101      	movs	r1, #1
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff fdd3 	bl	8009d12 <nRF24_CSN_State>
	  break;
 800a16c:	e0ac      	b.n	800a2c8 <nRF24_SetAddr+0x294>

    case nRF24_PIPE3:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a16e:	2103      	movs	r1, #3
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7ff fe18 	bl	8009da6 <nRF24_ReadReg>
 800a176:	4603      	mov	r3, r0
 800a178:	3301      	adds	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	4413      	add	r3, r2
 800a182:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a184:	2100      	movs	r1, #0
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff fdc3 	bl	8009d12 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	4a50      	ldr	r2, [pc, #320]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a190:	5cd3      	ldrb	r3, [r2, r3]
 800a192:	f043 0320 	orr.w	r3, r3, #32
 800a196:	b2db      	uxtb	r3, r3
 800a198:	4619      	mov	r1, r3
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff fded 	bl	8009d7a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	1e5a      	subs	r2, r3, #1
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fde5 	bl	8009d7a <nRF24_LL_RW>
	  } while (addr_width--);
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
 800a1b2:	1e5a      	subs	r2, r3, #1
 800a1b4:	75fa      	strb	r2, [r7, #23]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1f2      	bne.n	800a1a0 <nRF24_SetAddr+0x16c>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f7ff fda8 	bl	8009d12 <nRF24_CSN_State>
	  break;
 800a1c2:	e081      	b.n	800a2c8 <nRF24_SetAddr+0x294>


    case nRF24_PIPE4:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a1c4:	2103      	movs	r1, #3
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fded 	bl	8009da6 <nRF24_ReadReg>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a1da:	2100      	movs	r1, #0
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff fd98 	bl	8009d12 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	4a3a      	ldr	r2, [pc, #232]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a1e6:	5cd3      	ldrb	r3, [r2, r3]
 800a1e8:	f043 0320 	orr.w	r3, r3, #32
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7ff fdc2 	bl	8009d7a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	1e5a      	subs	r2, r3, #1
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff fdba 	bl	8009d7a <nRF24_LL_RW>
	  } while (addr_width--);
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	1e5a      	subs	r2, r3, #1
 800a20a:	75fa      	strb	r2, [r7, #23]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1f2      	bne.n	800a1f6 <nRF24_SetAddr+0x1c2>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a210:	2101      	movs	r1, #1
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff fd7d 	bl	8009d12 <nRF24_CSN_State>
	  break;
 800a218:	e056      	b.n	800a2c8 <nRF24_SetAddr+0x294>


    case nRF24_PIPE5:

    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a21a:	2103      	movs	r1, #3
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff fdc2 	bl	8009da6 <nRF24_ReadReg>
 800a222:	4603      	mov	r3, r0
 800a224:	3301      	adds	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a230:	2100      	movs	r1, #0
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff fd6d 	bl	8009d12 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	4a25      	ldr	r2, [pc, #148]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a23c:	5cd3      	ldrb	r3, [r2, r3]
 800a23e:	f043 0320 	orr.w	r3, r3, #32
 800a242:	b2db      	uxtb	r3, r3
 800a244:	4619      	mov	r1, r3
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff fd97 	bl	8009d7a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	1e5a      	subs	r2, r3, #1
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	4619      	mov	r1, r3
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff fd8f 	bl	8009d7a <nRF24_LL_RW>
	  } while (addr_width--);
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	1e5a      	subs	r2, r3, #1
 800a260:	75fa      	strb	r2, [r7, #23]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1f2      	bne.n	800a24c <nRF24_SetAddr+0x218>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a266:	2101      	movs	r1, #1
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fd52 	bl	8009d12 <nRF24_CSN_State>
	  break;
 800a26e:	e02b      	b.n	800a2c8 <nRF24_SetAddr+0x294>


    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a270:	2103      	movs	r1, #3
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff fd97 	bl	8009da6 <nRF24_ReadReg>
 800a278:	4603      	mov	r3, r0
 800a27a:	3301      	adds	r3, #1
 800a27c:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	4413      	add	r3, r2
 800a284:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a286:	2100      	movs	r1, #0
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff fd42 	bl	8009d12 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	4a0f      	ldr	r2, [pc, #60]	; (800a2d0 <nRF24_SetAddr+0x29c>)
 800a292:	5cd3      	ldrb	r3, [r2, r3]
 800a294:	f043 0320 	orr.w	r3, r3, #32
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	4619      	mov	r1, r3
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fd6c 	bl	8009d7a <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	1e5a      	subs	r2, r3, #1
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7ff fd64 	bl	8009d7a <nRF24_LL_RW>
      } while (addr_width--);
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	1e5a      	subs	r2, r3, #1
 800a2b6:	75fa      	strb	r2, [r7, #23]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1f2      	bne.n	800a2a2 <nRF24_SetAddr+0x26e>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 800a2bc:	2101      	movs	r1, #1
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff fd27 	bl	8009d12 <nRF24_CSN_State>
      break;
 800a2c4:	e000      	b.n	800a2c8 <nRF24_SetAddr+0x294>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 800a2c6:	bf00      	nop
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	0800b654 	.word	0x0800b654

0800a2d4 <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	70fb      	strb	r3, [r7, #3]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70bb      	strb	r3, [r7, #2]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800a2ee:	2102      	movs	r1, #2
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff fd58 	bl	8009da6 <nRF24_ReadReg>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	b25a      	sxtb	r2, r3
 800a2fa:	78fb      	ldrb	r3, [r7, #3]
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a302:	b25b      	sxtb	r3, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	b25b      	sxtb	r3, r3
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a30e:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	461a      	mov	r2, r3
 800a314:	2102      	movs	r1, #2
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fd66 	bl	8009de8 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	4a1a      	ldr	r2, [pc, #104]	; (800a388 <nRF24_SetRXPipe+0xb4>)
 800a320:	5cd1      	ldrb	r1, [r2, r3]
 800a322:	787b      	ldrb	r3, [r7, #1]
 800a324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	461a      	mov	r2, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff fd5b 	bl	8009de8 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800a332:	2101      	movs	r1, #1
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fd36 	bl	8009da6 <nRF24_ReadReg>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 800a33e:	78bb      	ldrb	r3, [r7, #2]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d10a      	bne.n	800a35a <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	2201      	movs	r2, #1
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	b25a      	sxtb	r2, r3
 800a34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a352:	4313      	orrs	r3, r2
 800a354:	b25b      	sxtb	r3, r3
 800a356:	73fb      	strb	r3, [r7, #15]
 800a358:	e00b      	b.n	800a372 <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	2201      	movs	r2, #1
 800a35e:	fa02 f303 	lsl.w	r3, r2, r3
 800a362:	b25b      	sxtb	r3, r3
 800a364:	43db      	mvns	r3, r3
 800a366:	b25a      	sxtb	r2, r3
 800a368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a36c:	4013      	ands	r3, r2
 800a36e:	b25b      	sxtb	r3, r3
 800a370:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	461a      	mov	r2, r3
 800a376:	2101      	movs	r1, #1
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff fd35 	bl	8009de8 <nRF24_WriteReg>
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	0800b64c 	.word	0x0800b64c

0800a38c <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	d905      	bls.n	800a3aa <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff fd20 	bl	8009de8 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 800a3a8:	e017      	b.n	800a3da <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fcfa 	bl	8009da6 <nRF24_ReadReg>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	b25b      	sxtb	r3, r3
 800a3c0:	43db      	mvns	r3, r3
 800a3c2:	b25a      	sxtb	r2, r3
 800a3c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	b25b      	sxtb	r3, r3
 800a3cc:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff fd07 	bl	8009de8 <nRF24_WriteReg>
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a3ea:	2107      	movs	r1, #7
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff fcda 	bl	8009da6 <nRF24_ReadReg>
 800a3f2:	4603      	mov	r3, r0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <nRF24_GetConfig>:

uint8_t nRF24_GetConfig(nRF24_Handler_t *device) {
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fccd 	bl	8009da6 <nRF24_ReadReg>
 800a40c:	4603      	mov	r3, r0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800a41e:	22ff      	movs	r2, #255	; 0xff
 800a420:	21e1      	movs	r1, #225	; 0xe1
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fce0 	bl	8009de8 <nRF24_WriteReg>
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800a438:	22ff      	movs	r2, #255	; 0xff
 800a43a:	21e2      	movs	r1, #226	; 0xe2
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fcd3 	bl	8009de8 <nRF24_WriteReg>
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a452:	2107      	movs	r1, #7
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fca6 	bl	8009da6 <nRF24_ReadReg>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a464:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	461a      	mov	r2, r3
 800a46a:	2107      	movs	r1, #7
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fcbb 	bl	8009de8 <nRF24_WriteReg>
}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <nRF24_ClearIRQFlagsRx>:
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
  reg |= nRF24_MASK_STATUS_IRQ_TX;
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
}

void nRF24_ClearIRQFlagsRx(nRF24_Handler_t *device) {
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DRbits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a482:	2107      	movs	r1, #7
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fc8e 	bl	8009da6 <nRF24_ReadReg>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_RX;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a494:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	461a      	mov	r2, r3
 800a49a:	2107      	movs	r1, #7
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff fca3 	bl	8009de8 <nRF24_WriteReg>
}
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <nRF24_ReadPayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800a4b8:	2107      	movs	r1, #7
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff fc73 	bl	8009da6 <nRF24_ReadReg>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	105b      	asrs	r3, r3, #1
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d817      	bhi.n	800a502 <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	4a0f      	ldr	r2, [pc, #60]	; (800a514 <nRF24_ReadPayload+0x68>)
 800a4d6:	5cd3      	ldrb	r3, [r2, r3]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff fc63 	bl	8009da6 <nRF24_ReadReg>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	2161      	movs	r1, #97	; 0x61
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7ff fcb5 	bl	8009e68 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	e003      	b.n	800a50a <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 800a508:	23ff      	movs	r3, #255	; 0xff
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	0800b64c 	.word	0x0800b64c

0800a518 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800a524:	887b      	ldrh	r3, [r7, #2]
 800a526:	0a1b      	lsrs	r3, r3, #8
 800a528:	b29b      	uxth	r3, r3
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 800a530:	887b      	ldrh	r3, [r7, #2]
 800a532:	b2da      	uxtb	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	791b      	ldrb	r3, [r3, #4]
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	b299      	uxth	r1, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f103 0209 	add.w	r2, r3, #9
 800a54e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	2302      	movs	r3, #2
 800a556:	f7f8 ffa9 	bl	80034ac <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
 800a560:	b299      	uxth	r1, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	1d5a      	adds	r2, r3, #5
 800a566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	2301      	movs	r3, #1
 800a56e:	f7f9 f891 	bl	8003694 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	795b      	ldrb	r3, [r3, #5]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 800a57e:	b580      	push	{r7, lr}
 800a580:	b086      	sub	sp, #24
 800a582:	af02      	add	r7, sp, #8
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	807b      	strh	r3, [r7, #2]
 800a58a:	4613      	mov	r3, r2
 800a58c:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800a58e:	887b      	ldrh	r3, [r7, #2]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	b29b      	uxth	r3, r3
 800a594:	b2da      	uxtb	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 800a59a:	887b      	ldrh	r3, [r7, #2]
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	791b      	ldrb	r3, [r3, #4]
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	787a      	ldrb	r2, [r7, #1]
 800a5ae:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	b299      	uxth	r1, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f103 0209 	add.w	r2, r3, #9
 800a5be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	f7f8 ff71 	bl	80034ac <HAL_I2C_Master_Transmit>
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	79fa      	ldrb	r2, [r7, #7]
 800a5ea:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff ff92 	bl	800a518 <VL6180X_Read8>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2bb4      	cmp	r3, #180	; 0xb4
 800a5f8:	d001      	beq.n	800a5fe <VL6180X_Init+0x2c>
    return false;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e011      	b.n	800a622 <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 800a5fe:	2116      	movs	r1, #22
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff ff89 	bl	800a518 <VL6180X_Read8>
 800a606:	4603      	mov	r3, r0
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d007      	beq.n	800a620 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 f80a 	bl	800a62a <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800a616:	2200      	movs	r2, #0
 800a618:	2116      	movs	r1, #22
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7ff ffaf 	bl	800a57e <VL6180X_Write8>
  }

  return true;
 800a620:	2301      	movs	r3, #1
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 800a632:	2201      	movs	r2, #1
 800a634:	f240 2107 	movw	r1, #519	; 0x207
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff ffa0 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 800a63e:	2201      	movs	r2, #1
 800a640:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff9a 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 800a64a:	2200      	movs	r2, #0
 800a64c:	2196      	movs	r1, #150	; 0x96
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff ff95 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 800a654:	22fd      	movs	r2, #253	; 0xfd
 800a656:	2197      	movs	r1, #151	; 0x97
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ff90 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 800a65e:	2200      	movs	r2, #0
 800a660:	21e3      	movs	r1, #227	; 0xe3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff ff8b 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 800a668:	2204      	movs	r2, #4
 800a66a:	21e4      	movs	r1, #228	; 0xe4
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ff86 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 800a672:	2202      	movs	r2, #2
 800a674:	21e5      	movs	r1, #229	; 0xe5
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff ff81 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 800a67c:	2201      	movs	r2, #1
 800a67e:	21e6      	movs	r1, #230	; 0xe6
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff ff7c 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 800a686:	2203      	movs	r2, #3
 800a688:	21e7      	movs	r1, #231	; 0xe7
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff ff77 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 800a690:	2202      	movs	r2, #2
 800a692:	21f5      	movs	r1, #245	; 0xf5
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff ff72 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 800a69a:	2205      	movs	r2, #5
 800a69c:	21d9      	movs	r1, #217	; 0xd9
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff ff6d 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 800a6a4:	22ce      	movs	r2, #206	; 0xce
 800a6a6:	21db      	movs	r1, #219	; 0xdb
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ff68 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	21dc      	movs	r1, #220	; 0xdc
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ff63 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 800a6b8:	22f8      	movs	r2, #248	; 0xf8
 800a6ba:	21dd      	movs	r1, #221	; 0xdd
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff ff5e 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	219f      	movs	r1, #159	; 0x9f
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff ff59 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 800a6cc:	223c      	movs	r2, #60	; 0x3c
 800a6ce:	21a3      	movs	r1, #163	; 0xa3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff ff54 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	21b7      	movs	r1, #183	; 0xb7
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff ff4f 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 800a6e0:	223c      	movs	r2, #60	; 0x3c
 800a6e2:	21bb      	movs	r1, #187	; 0xbb
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ff4a 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 800a6ea:	2209      	movs	r2, #9
 800a6ec:	21b2      	movs	r1, #178	; 0xb2
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff ff45 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800a6f4:	2209      	movs	r2, #9
 800a6f6:	21ca      	movs	r1, #202	; 0xca
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ff40 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 800a6fe:	2201      	movs	r2, #1
 800a700:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff ff3a 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 800a70a:	2217      	movs	r2, #23
 800a70c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff ff34 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800a716:	2200      	movs	r2, #0
 800a718:	f240 11ad 	movw	r1, #429	; 0x1ad
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff ff2e 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800a722:	2205      	movs	r2, #5
 800a724:	21ff      	movs	r1, #255	; 0xff
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff ff29 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 800a72c:	2205      	movs	r2, #5
 800a72e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff ff23 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 800a738:	2205      	movs	r2, #5
 800a73a:	f240 1199 	movw	r1, #409	; 0x199
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff ff1d 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800a744:	221b      	movs	r2, #27
 800a746:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff ff17 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 800a750:	223e      	movs	r2, #62	; 0x3e
 800a752:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff ff11 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 800a75c:	221f      	movs	r2, #31
 800a75e:	f240 11a7 	movw	r1, #423	; 0x1a7
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff ff0b 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 800a768:	2200      	movs	r2, #0
 800a76a:	2130      	movs	r1, #48	; 0x30
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff ff06 	bl	800a57e <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 800a772:	2210      	movs	r2, #16
 800a774:	2111      	movs	r1, #17
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff ff01 	bl	800a57e <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 800a77c:	2230      	movs	r2, #48	; 0x30
 800a77e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fefb 	bl	800a57e <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 800a788:	2246      	movs	r2, #70	; 0x46
 800a78a:	213f      	movs	r1, #63	; 0x3f
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff fef6 	bl	800a57e <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 800a792:	22ff      	movs	r2, #255	; 0xff
 800a794:	2131      	movs	r1, #49	; 0x31
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fef1 	bl	800a57e <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 800a79c:	2263      	movs	r2, #99	; 0x63
 800a79e:	2141      	movs	r1, #65	; 0x41
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff feec 	bl	800a57e <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	212e      	movs	r1, #46	; 0x2e
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fee7 	bl	800a57e <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 800a7b0:	2209      	movs	r2, #9
 800a7b2:	211b      	movs	r1, #27
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff fee2 	bl	800a57e <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 800a7ba:	2231      	movs	r2, #49	; 0x31
 800a7bc:	213e      	movs	r1, #62	; 0x3e
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fedd 	bl	800a57e <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 800a7c4:	2224      	movs	r2, #36	; 0x24
 800a7c6:	2114      	movs	r1, #20
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff fed8 	bl	800a57e <VL6180X_Write8>
                        // Ready threshold event'
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 800a7de:	bf00      	nop
 800a7e0:	214d      	movs	r1, #77	; 0x4d
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fe98 	bl	800a518 <VL6180X_Read8>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0f6      	beq.n	800a7e0 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	2118      	movs	r1, #24
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fec1 	bl	800a57e <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 800a7fc:	bf00      	nop
 800a7fe:	214f      	movs	r1, #79	; 0x4f
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fe89 	bl	800a518 <VL6180X_Read8>
 800a806:	4603      	mov	r3, r0
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d0f6      	beq.n	800a7fe <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 800a810:	2162      	movs	r1, #98	; 0x62
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff fe80 	bl	800a518 <VL6180X_Read8>
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 800a81c:	2207      	movs	r2, #7
 800a81e:	2115      	movs	r1, #21
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff feac 	bl	800a57e <VL6180X_Write8>

  return range;
 800a826:	7bfb      	ldrb	r3, [r7, #15]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <memset>:
 800a830:	4402      	add	r2, r0
 800a832:	4603      	mov	r3, r0
 800a834:	4293      	cmp	r3, r2
 800a836:	d100      	bne.n	800a83a <memset+0xa>
 800a838:	4770      	bx	lr
 800a83a:	f803 1b01 	strb.w	r1, [r3], #1
 800a83e:	e7f9      	b.n	800a834 <memset+0x4>

0800a840 <__errno>:
 800a840:	4b01      	ldr	r3, [pc, #4]	; (800a848 <__errno+0x8>)
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	20000090 	.word	0x20000090

0800a84c <__libc_init_array>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	4d0d      	ldr	r5, [pc, #52]	; (800a884 <__libc_init_array+0x38>)
 800a850:	4c0d      	ldr	r4, [pc, #52]	; (800a888 <__libc_init_array+0x3c>)
 800a852:	1b64      	subs	r4, r4, r5
 800a854:	10a4      	asrs	r4, r4, #2
 800a856:	2600      	movs	r6, #0
 800a858:	42a6      	cmp	r6, r4
 800a85a:	d109      	bne.n	800a870 <__libc_init_array+0x24>
 800a85c:	4d0b      	ldr	r5, [pc, #44]	; (800a88c <__libc_init_array+0x40>)
 800a85e:	4c0c      	ldr	r4, [pc, #48]	; (800a890 <__libc_init_array+0x44>)
 800a860:	f000 fe82 	bl	800b568 <_init>
 800a864:	1b64      	subs	r4, r4, r5
 800a866:	10a4      	asrs	r4, r4, #2
 800a868:	2600      	movs	r6, #0
 800a86a:	42a6      	cmp	r6, r4
 800a86c:	d105      	bne.n	800a87a <__libc_init_array+0x2e>
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	f855 3b04 	ldr.w	r3, [r5], #4
 800a874:	4798      	blx	r3
 800a876:	3601      	adds	r6, #1
 800a878:	e7ee      	b.n	800a858 <__libc_init_array+0xc>
 800a87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87e:	4798      	blx	r3
 800a880:	3601      	adds	r6, #1
 800a882:	e7f2      	b.n	800a86a <__libc_init_array+0x1e>
 800a884:	0800b840 	.word	0x0800b840
 800a888:	0800b840 	.word	0x0800b840
 800a88c:	0800b840 	.word	0x0800b840
 800a890:	0800b844 	.word	0x0800b844

0800a894 <memcpy>:
 800a894:	440a      	add	r2, r1
 800a896:	4291      	cmp	r1, r2
 800a898:	f100 33ff 	add.w	r3, r0, #4294967295
 800a89c:	d100      	bne.n	800a8a0 <memcpy+0xc>
 800a89e:	4770      	bx	lr
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8aa:	4291      	cmp	r1, r2
 800a8ac:	d1f9      	bne.n	800a8a2 <memcpy+0xe>
 800a8ae:	bd10      	pop	{r4, pc}

0800a8b0 <sqrt>:
 800a8b0:	b508      	push	{r3, lr}
 800a8b2:	ed2d 8b04 	vpush	{d8-d9}
 800a8b6:	eeb0 8b40 	vmov.f64	d8, d0
 800a8ba:	f000 f8b1 	bl	800aa20 <__ieee754_sqrt>
 800a8be:	eeb4 8b48 	vcmp.f64	d8, d8
 800a8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c6:	d60c      	bvs.n	800a8e2 <sqrt+0x32>
 800a8c8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800a8e8 <sqrt+0x38>
 800a8cc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d4:	d505      	bpl.n	800a8e2 <sqrt+0x32>
 800a8d6:	f7ff ffb3 	bl	800a840 <__errno>
 800a8da:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a8de:	2321      	movs	r3, #33	; 0x21
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	ecbd 8b04 	vpop	{d8-d9}
 800a8e6:	bd08      	pop	{r3, pc}
	...

0800a8f0 <cos>:
 800a8f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8f2:	eeb0 7b40 	vmov.f64	d7, d0
 800a8f6:	ee17 3a90 	vmov	r3, s15
 800a8fa:	4a21      	ldr	r2, [pc, #132]	; (800a980 <cos+0x90>)
 800a8fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a900:	4293      	cmp	r3, r2
 800a902:	dc06      	bgt.n	800a912 <cos+0x22>
 800a904:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800a978 <cos+0x88>
 800a908:	b005      	add	sp, #20
 800a90a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a90e:	f000 b88b 	b.w	800aa28 <__kernel_cos>
 800a912:	4a1c      	ldr	r2, [pc, #112]	; (800a984 <cos+0x94>)
 800a914:	4293      	cmp	r3, r2
 800a916:	dd04      	ble.n	800a922 <cos+0x32>
 800a918:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a91c:	b005      	add	sp, #20
 800a91e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a922:	4668      	mov	r0, sp
 800a924:	f000 f944 	bl	800abb0 <__ieee754_rem_pio2>
 800a928:	f000 0003 	and.w	r0, r0, #3
 800a92c:	2801      	cmp	r0, #1
 800a92e:	d009      	beq.n	800a944 <cos+0x54>
 800a930:	2802      	cmp	r0, #2
 800a932:	d010      	beq.n	800a956 <cos+0x66>
 800a934:	b9b0      	cbnz	r0, 800a964 <cos+0x74>
 800a936:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a93a:	ed9d 0b00 	vldr	d0, [sp]
 800a93e:	f000 f873 	bl	800aa28 <__kernel_cos>
 800a942:	e7eb      	b.n	800a91c <cos+0x2c>
 800a944:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a948:	ed9d 0b00 	vldr	d0, [sp]
 800a94c:	f000 f8d8 	bl	800ab00 <__kernel_sin>
 800a950:	eeb1 0b40 	vneg.f64	d0, d0
 800a954:	e7e2      	b.n	800a91c <cos+0x2c>
 800a956:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a95a:	ed9d 0b00 	vldr	d0, [sp]
 800a95e:	f000 f863 	bl	800aa28 <__kernel_cos>
 800a962:	e7f5      	b.n	800a950 <cos+0x60>
 800a964:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a968:	ed9d 0b00 	vldr	d0, [sp]
 800a96c:	2001      	movs	r0, #1
 800a96e:	f000 f8c7 	bl	800ab00 <__kernel_sin>
 800a972:	e7d3      	b.n	800a91c <cos+0x2c>
 800a974:	f3af 8000 	nop.w
	...
 800a980:	3fe921fb 	.word	0x3fe921fb
 800a984:	7fefffff 	.word	0x7fefffff

0800a988 <sin>:
 800a988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a98a:	eeb0 7b40 	vmov.f64	d7, d0
 800a98e:	ee17 3a90 	vmov	r3, s15
 800a992:	4a21      	ldr	r2, [pc, #132]	; (800aa18 <sin+0x90>)
 800a994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a998:	4293      	cmp	r3, r2
 800a99a:	dc07      	bgt.n	800a9ac <sin+0x24>
 800a99c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800aa10 <sin+0x88>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	b005      	add	sp, #20
 800a9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9a8:	f000 b8aa 	b.w	800ab00 <__kernel_sin>
 800a9ac:	4a1b      	ldr	r2, [pc, #108]	; (800aa1c <sin+0x94>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	dd04      	ble.n	800a9bc <sin+0x34>
 800a9b2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a9b6:	b005      	add	sp, #20
 800a9b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9bc:	4668      	mov	r0, sp
 800a9be:	f000 f8f7 	bl	800abb0 <__ieee754_rem_pio2>
 800a9c2:	f000 0003 	and.w	r0, r0, #3
 800a9c6:	2801      	cmp	r0, #1
 800a9c8:	d00a      	beq.n	800a9e0 <sin+0x58>
 800a9ca:	2802      	cmp	r0, #2
 800a9cc:	d00f      	beq.n	800a9ee <sin+0x66>
 800a9ce:	b9c0      	cbnz	r0, 800aa02 <sin+0x7a>
 800a9d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9d4:	ed9d 0b00 	vldr	d0, [sp]
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f000 f891 	bl	800ab00 <__kernel_sin>
 800a9de:	e7ea      	b.n	800a9b6 <sin+0x2e>
 800a9e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9e4:	ed9d 0b00 	vldr	d0, [sp]
 800a9e8:	f000 f81e 	bl	800aa28 <__kernel_cos>
 800a9ec:	e7e3      	b.n	800a9b6 <sin+0x2e>
 800a9ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9f2:	ed9d 0b00 	vldr	d0, [sp]
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f000 f882 	bl	800ab00 <__kernel_sin>
 800a9fc:	eeb1 0b40 	vneg.f64	d0, d0
 800aa00:	e7d9      	b.n	800a9b6 <sin+0x2e>
 800aa02:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa06:	ed9d 0b00 	vldr	d0, [sp]
 800aa0a:	f000 f80d 	bl	800aa28 <__kernel_cos>
 800aa0e:	e7f5      	b.n	800a9fc <sin+0x74>
	...
 800aa18:	3fe921fb 	.word	0x3fe921fb
 800aa1c:	7fefffff 	.word	0x7fefffff

0800aa20 <__ieee754_sqrt>:
 800aa20:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800aa24:	4770      	bx	lr
	...

0800aa28 <__kernel_cos>:
 800aa28:	ee10 1a90 	vmov	r1, s1
 800aa2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aa30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa34:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800aa38:	da05      	bge.n	800aa46 <__kernel_cos+0x1e>
 800aa3a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800aa3e:	ee17 3a90 	vmov	r3, s15
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d03d      	beq.n	800aac2 <__kernel_cos+0x9a>
 800aa46:	ee20 5b00 	vmul.f64	d5, d0, d0
 800aa4a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800aa4e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800aac8 <__kernel_cos+0xa0>
 800aa52:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800aad0 <__kernel_cos+0xa8>
 800aa56:	eea5 4b07 	vfma.f64	d4, d5, d7
 800aa5a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800aad8 <__kernel_cos+0xb0>
 800aa5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aa62:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800aae0 <__kernel_cos+0xb8>
 800aa66:	eea7 4b05 	vfma.f64	d4, d7, d5
 800aa6a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800aae8 <__kernel_cos+0xc0>
 800aa6e:	4b22      	ldr	r3, [pc, #136]	; (800aaf8 <__kernel_cos+0xd0>)
 800aa70:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aa74:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800aaf0 <__kernel_cos+0xc8>
 800aa78:	4299      	cmp	r1, r3
 800aa7a:	eea7 4b05 	vfma.f64	d4, d7, d5
 800aa7e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800aa82:	ee24 4b05 	vmul.f64	d4, d4, d5
 800aa86:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aa8a:	eea5 1b04 	vfma.f64	d1, d5, d4
 800aa8e:	dc04      	bgt.n	800aa9a <__kernel_cos+0x72>
 800aa90:	ee37 7b41 	vsub.f64	d7, d7, d1
 800aa94:	ee36 0b47 	vsub.f64	d0, d6, d7
 800aa98:	4770      	bx	lr
 800aa9a:	4b18      	ldr	r3, [pc, #96]	; (800aafc <__kernel_cos+0xd4>)
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	dc0d      	bgt.n	800aabc <__kernel_cos+0x94>
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800aaa6:	ec43 2b15 	vmov	d5, r2, r3
 800aaaa:	ee36 0b45 	vsub.f64	d0, d6, d5
 800aaae:	ee37 7b45 	vsub.f64	d7, d7, d5
 800aab2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800aab6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800aaba:	4770      	bx	lr
 800aabc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800aac0:	e7f3      	b.n	800aaaa <__kernel_cos+0x82>
 800aac2:	eeb0 0b46 	vmov.f64	d0, d6
 800aac6:	4770      	bx	lr
 800aac8:	be8838d4 	.word	0xbe8838d4
 800aacc:	bda8fae9 	.word	0xbda8fae9
 800aad0:	bdb4b1c4 	.word	0xbdb4b1c4
 800aad4:	3e21ee9e 	.word	0x3e21ee9e
 800aad8:	809c52ad 	.word	0x809c52ad
 800aadc:	be927e4f 	.word	0xbe927e4f
 800aae0:	19cb1590 	.word	0x19cb1590
 800aae4:	3efa01a0 	.word	0x3efa01a0
 800aae8:	16c15177 	.word	0x16c15177
 800aaec:	bf56c16c 	.word	0xbf56c16c
 800aaf0:	5555554c 	.word	0x5555554c
 800aaf4:	3fa55555 	.word	0x3fa55555
 800aaf8:	3fd33332 	.word	0x3fd33332
 800aafc:	3fe90000 	.word	0x3fe90000

0800ab00 <__kernel_sin>:
 800ab00:	ee10 3a90 	vmov	r3, s1
 800ab04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab08:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab0c:	da04      	bge.n	800ab18 <__kernel_sin+0x18>
 800ab0e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ab12:	ee17 3a90 	vmov	r3, s15
 800ab16:	b35b      	cbz	r3, 800ab70 <__kernel_sin+0x70>
 800ab18:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ab1c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ab20:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ab78 <__kernel_sin+0x78>
 800ab24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ab80 <__kernel_sin+0x80>
 800ab28:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ab2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ab88 <__kernel_sin+0x88>
 800ab30:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ab34:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ab90 <__kernel_sin+0x90>
 800ab38:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ab3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ab98 <__kernel_sin+0x98>
 800ab40:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ab44:	b930      	cbnz	r0, 800ab54 <__kernel_sin+0x54>
 800ab46:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800aba0 <__kernel_sin+0xa0>
 800ab4a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ab4e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ab52:	4770      	bx	lr
 800ab54:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ab58:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ab5c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ab60:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ab64:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800aba8 <__kernel_sin+0xa8>
 800ab68:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ab6c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	f3af 8000 	nop.w
 800ab78:	5acfd57c 	.word	0x5acfd57c
 800ab7c:	3de5d93a 	.word	0x3de5d93a
 800ab80:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab84:	be5ae5e6 	.word	0xbe5ae5e6
 800ab88:	57b1fe7d 	.word	0x57b1fe7d
 800ab8c:	3ec71de3 	.word	0x3ec71de3
 800ab90:	19c161d5 	.word	0x19c161d5
 800ab94:	bf2a01a0 	.word	0xbf2a01a0
 800ab98:	1110f8a6 	.word	0x1110f8a6
 800ab9c:	3f811111 	.word	0x3f811111
 800aba0:	55555549 	.word	0x55555549
 800aba4:	bfc55555 	.word	0xbfc55555
 800aba8:	55555549 	.word	0x55555549
 800abac:	3fc55555 	.word	0x3fc55555

0800abb0 <__ieee754_rem_pio2>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	eeb0 7b40 	vmov.f64	d7, d0
 800abb6:	ee17 5a90 	vmov	r5, s15
 800abba:	4b99      	ldr	r3, [pc, #612]	; (800ae20 <__ieee754_rem_pio2+0x270>)
 800abbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800abc0:	429e      	cmp	r6, r3
 800abc2:	b088      	sub	sp, #32
 800abc4:	4604      	mov	r4, r0
 800abc6:	dc07      	bgt.n	800abd8 <__ieee754_rem_pio2+0x28>
 800abc8:	2200      	movs	r2, #0
 800abca:	2300      	movs	r3, #0
 800abcc:	ed84 0b00 	vstr	d0, [r4]
 800abd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800abd4:	2000      	movs	r0, #0
 800abd6:	e01b      	b.n	800ac10 <__ieee754_rem_pio2+0x60>
 800abd8:	4b92      	ldr	r3, [pc, #584]	; (800ae24 <__ieee754_rem_pio2+0x274>)
 800abda:	429e      	cmp	r6, r3
 800abdc:	dc3b      	bgt.n	800ac56 <__ieee754_rem_pio2+0xa6>
 800abde:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800ade0 <__ieee754_rem_pio2+0x230>
 800abe8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800abec:	dd19      	ble.n	800ac22 <__ieee754_rem_pio2+0x72>
 800abee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800abf2:	429e      	cmp	r6, r3
 800abf4:	d00e      	beq.n	800ac14 <__ieee754_rem_pio2+0x64>
 800abf6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ade8 <__ieee754_rem_pio2+0x238>
 800abfa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800abfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ac02:	ed84 5b00 	vstr	d5, [r4]
 800ac06:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac0a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	b008      	add	sp, #32
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800adf0 <__ieee754_rem_pio2+0x240>
 800ac18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800adf8 <__ieee754_rem_pio2+0x248>
 800ac20:	e7eb      	b.n	800abfa <__ieee754_rem_pio2+0x4a>
 800ac22:	429e      	cmp	r6, r3
 800ac24:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ac28:	d00e      	beq.n	800ac48 <__ieee754_rem_pio2+0x98>
 800ac2a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800ade8 <__ieee754_rem_pio2+0x238>
 800ac2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ac32:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ac36:	ed84 5b00 	vstr	d5, [r4]
 800ac3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac42:	ed84 7b02 	vstr	d7, [r4, #8]
 800ac46:	e7e3      	b.n	800ac10 <__ieee754_rem_pio2+0x60>
 800ac48:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800adf0 <__ieee754_rem_pio2+0x240>
 800ac4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ac50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800adf8 <__ieee754_rem_pio2+0x248>
 800ac54:	e7eb      	b.n	800ac2e <__ieee754_rem_pio2+0x7e>
 800ac56:	4b74      	ldr	r3, [pc, #464]	; (800ae28 <__ieee754_rem_pio2+0x278>)
 800ac58:	429e      	cmp	r6, r3
 800ac5a:	dc70      	bgt.n	800ad3e <__ieee754_rem_pio2+0x18e>
 800ac5c:	f000 f8ec 	bl	800ae38 <fabs>
 800ac60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ac64:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ae00 <__ieee754_rem_pio2+0x250>
 800ac68:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ac6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ac70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ac74:	ee17 0a90 	vmov	r0, s15
 800ac78:	eeb1 4b45 	vneg.f64	d4, d5
 800ac7c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ade0 <__ieee754_rem_pio2+0x230>
 800ac80:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ac84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800ade8 <__ieee754_rem_pio2+0x238>
 800ac88:	281f      	cmp	r0, #31
 800ac8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ac92:	dc08      	bgt.n	800aca6 <__ieee754_rem_pio2+0xf6>
 800ac94:	4b65      	ldr	r3, [pc, #404]	; (800ae2c <__ieee754_rem_pio2+0x27c>)
 800ac96:	1e42      	subs	r2, r0, #1
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	42b3      	cmp	r3, r6
 800ac9e:	d002      	beq.n	800aca6 <__ieee754_rem_pio2+0xf6>
 800aca0:	ed84 6b00 	vstr	d6, [r4]
 800aca4:	e024      	b.n	800acf0 <__ieee754_rem_pio2+0x140>
 800aca6:	ee16 3a90 	vmov	r3, s13
 800acaa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800acae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800acb2:	2b10      	cmp	r3, #16
 800acb4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800acb8:	ddf2      	ble.n	800aca0 <__ieee754_rem_pio2+0xf0>
 800acba:	eeb0 6b40 	vmov.f64	d6, d0
 800acbe:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800adf0 <__ieee754_rem_pio2+0x240>
 800acc2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800acc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800acca:	eea4 7b03 	vfma.f64	d7, d4, d3
 800acce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800adf8 <__ieee754_rem_pio2+0x248>
 800acd2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800acd6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800acda:	ee13 3a90 	vmov	r3, s7
 800acde:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b31      	cmp	r3, #49	; 0x31
 800ace6:	dc17      	bgt.n	800ad18 <__ieee754_rem_pio2+0x168>
 800ace8:	eeb0 0b46 	vmov.f64	d0, d6
 800acec:	ed84 3b00 	vstr	d3, [r4]
 800acf0:	ed94 6b00 	vldr	d6, [r4]
 800acf4:	2d00      	cmp	r5, #0
 800acf6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800acfa:	ee30 0b47 	vsub.f64	d0, d0, d7
 800acfe:	ed84 0b02 	vstr	d0, [r4, #8]
 800ad02:	da85      	bge.n	800ac10 <__ieee754_rem_pio2+0x60>
 800ad04:	eeb1 6b46 	vneg.f64	d6, d6
 800ad08:	eeb1 0b40 	vneg.f64	d0, d0
 800ad0c:	ed84 6b00 	vstr	d6, [r4]
 800ad10:	ed84 0b02 	vstr	d0, [r4, #8]
 800ad14:	4240      	negs	r0, r0
 800ad16:	e77b      	b.n	800ac10 <__ieee754_rem_pio2+0x60>
 800ad18:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800ae08 <__ieee754_rem_pio2+0x258>
 800ad1c:	eeb0 0b46 	vmov.f64	d0, d6
 800ad20:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ad24:	ee36 6b40 	vsub.f64	d6, d6, d0
 800ad28:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ad2c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800ae10 <__ieee754_rem_pio2+0x260>
 800ad30:	eeb0 7b46 	vmov.f64	d7, d6
 800ad34:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800ad38:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ad3c:	e7b0      	b.n	800aca0 <__ieee754_rem_pio2+0xf0>
 800ad3e:	4b3c      	ldr	r3, [pc, #240]	; (800ae30 <__ieee754_rem_pio2+0x280>)
 800ad40:	429e      	cmp	r6, r3
 800ad42:	dd06      	ble.n	800ad52 <__ieee754_rem_pio2+0x1a2>
 800ad44:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ad48:	ed80 7b02 	vstr	d7, [r0, #8]
 800ad4c:	ed80 7b00 	vstr	d7, [r0]
 800ad50:	e740      	b.n	800abd4 <__ieee754_rem_pio2+0x24>
 800ad52:	1532      	asrs	r2, r6, #20
 800ad54:	ee10 0a10 	vmov	r0, s0
 800ad58:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ad5c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ad60:	ec41 0b17 	vmov	d7, r0, r1
 800ad64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ad68:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800ae18 <__ieee754_rem_pio2+0x268>
 800ad6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ad70:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad74:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ad78:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ad7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ad80:	a808      	add	r0, sp, #32
 800ad82:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ad86:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad8a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ad8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ad92:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad96:	2103      	movs	r1, #3
 800ad98:	ed30 7b02 	vldmdb	r0!, {d7}
 800ad9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ada0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada4:	460b      	mov	r3, r1
 800ada6:	f101 31ff 	add.w	r1, r1, #4294967295
 800adaa:	d0f5      	beq.n	800ad98 <__ieee754_rem_pio2+0x1e8>
 800adac:	4921      	ldr	r1, [pc, #132]	; (800ae34 <__ieee754_rem_pio2+0x284>)
 800adae:	9101      	str	r1, [sp, #4]
 800adb0:	2102      	movs	r1, #2
 800adb2:	9100      	str	r1, [sp, #0]
 800adb4:	a802      	add	r0, sp, #8
 800adb6:	4621      	mov	r1, r4
 800adb8:	f000 f84a 	bl	800ae50 <__kernel_rem_pio2>
 800adbc:	2d00      	cmp	r5, #0
 800adbe:	f6bf af27 	bge.w	800ac10 <__ieee754_rem_pio2+0x60>
 800adc2:	ed94 7b00 	vldr	d7, [r4]
 800adc6:	eeb1 7b47 	vneg.f64	d7, d7
 800adca:	ed84 7b00 	vstr	d7, [r4]
 800adce:	ed94 7b02 	vldr	d7, [r4, #8]
 800add2:	eeb1 7b47 	vneg.f64	d7, d7
 800add6:	ed84 7b02 	vstr	d7, [r4, #8]
 800adda:	e79b      	b.n	800ad14 <__ieee754_rem_pio2+0x164>
 800addc:	f3af 8000 	nop.w
 800ade0:	54400000 	.word	0x54400000
 800ade4:	3ff921fb 	.word	0x3ff921fb
 800ade8:	1a626331 	.word	0x1a626331
 800adec:	3dd0b461 	.word	0x3dd0b461
 800adf0:	1a600000 	.word	0x1a600000
 800adf4:	3dd0b461 	.word	0x3dd0b461
 800adf8:	2e037073 	.word	0x2e037073
 800adfc:	3ba3198a 	.word	0x3ba3198a
 800ae00:	6dc9c883 	.word	0x6dc9c883
 800ae04:	3fe45f30 	.word	0x3fe45f30
 800ae08:	2e000000 	.word	0x2e000000
 800ae0c:	3ba3198a 	.word	0x3ba3198a
 800ae10:	252049c1 	.word	0x252049c1
 800ae14:	397b839a 	.word	0x397b839a
 800ae18:	00000000 	.word	0x00000000
 800ae1c:	41700000 	.word	0x41700000
 800ae20:	3fe921fb 	.word	0x3fe921fb
 800ae24:	4002d97b 	.word	0x4002d97b
 800ae28:	413921fb 	.word	0x413921fb
 800ae2c:	0800b65c 	.word	0x0800b65c
 800ae30:	7fefffff 	.word	0x7fefffff
 800ae34:	0800b6dc 	.word	0x0800b6dc

0800ae38 <fabs>:
 800ae38:	ec51 0b10 	vmov	r0, r1, d0
 800ae3c:	ee10 2a10 	vmov	r2, s0
 800ae40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae44:	ec43 2b10 	vmov	d0, r2, r3
 800ae48:	4770      	bx	lr
 800ae4a:	0000      	movs	r0, r0
 800ae4c:	0000      	movs	r0, r0
	...

0800ae50 <__kernel_rem_pio2>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	ed2d 8b06 	vpush	{d8-d10}
 800ae58:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	9002      	str	r0, [sp, #8]
 800ae60:	49c3      	ldr	r1, [pc, #780]	; (800b170 <__kernel_rem_pio2+0x320>)
 800ae62:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800ae6a:	9901      	ldr	r1, [sp, #4]
 800ae6c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae6e:	f112 0f14 	cmn.w	r2, #20
 800ae72:	bfa8      	it	ge
 800ae74:	1ed0      	subge	r0, r2, #3
 800ae76:	f101 3aff 	add.w	sl, r1, #4294967295
 800ae7a:	bfaa      	itet	ge
 800ae7c:	2418      	movge	r4, #24
 800ae7e:	2000      	movlt	r0, #0
 800ae80:	fb90 f0f4 	sdivge	r0, r0, r4
 800ae84:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800b158 <__kernel_rem_pio2+0x308>
 800ae88:	f06f 0417 	mvn.w	r4, #23
 800ae8c:	fb00 4404 	mla	r4, r0, r4, r4
 800ae90:	eba0 060a 	sub.w	r6, r0, sl
 800ae94:	4414      	add	r4, r2
 800ae96:	eb09 0c0a 	add.w	ip, r9, sl
 800ae9a:	ad1a      	add	r5, sp, #104	; 0x68
 800ae9c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800aea0:	2200      	movs	r2, #0
 800aea2:	4562      	cmp	r2, ip
 800aea4:	dd10      	ble.n	800aec8 <__kernel_rem_pio2+0x78>
 800aea6:	9a01      	ldr	r2, [sp, #4]
 800aea8:	a91a      	add	r1, sp, #104	; 0x68
 800aeaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800aeae:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800aeb2:	f04f 0c00 	mov.w	ip, #0
 800aeb6:	45cc      	cmp	ip, r9
 800aeb8:	dc26      	bgt.n	800af08 <__kernel_rem_pio2+0xb8>
 800aeba:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800b158 <__kernel_rem_pio2+0x308>
 800aebe:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aec2:	4616      	mov	r6, r2
 800aec4:	2500      	movs	r5, #0
 800aec6:	e015      	b.n	800aef4 <__kernel_rem_pio2+0xa4>
 800aec8:	42d6      	cmn	r6, r2
 800aeca:	d409      	bmi.n	800aee0 <__kernel_rem_pio2+0x90>
 800aecc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800aed0:	ee07 1a90 	vmov	s15, r1
 800aed4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aed8:	eca5 7b02 	vstmia	r5!, {d7}
 800aedc:	3201      	adds	r2, #1
 800aede:	e7e0      	b.n	800aea2 <__kernel_rem_pio2+0x52>
 800aee0:	eeb0 7b46 	vmov.f64	d7, d6
 800aee4:	e7f8      	b.n	800aed8 <__kernel_rem_pio2+0x88>
 800aee6:	ecbe 5b02 	vldmia	lr!, {d5}
 800aeea:	ed96 6b00 	vldr	d6, [r6]
 800aeee:	3501      	adds	r5, #1
 800aef0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aef4:	4555      	cmp	r5, sl
 800aef6:	f1a6 0608 	sub.w	r6, r6, #8
 800aefa:	ddf4      	ble.n	800aee6 <__kernel_rem_pio2+0x96>
 800aefc:	eca8 7b02 	vstmia	r8!, {d7}
 800af00:	f10c 0c01 	add.w	ip, ip, #1
 800af04:	3208      	adds	r2, #8
 800af06:	e7d6      	b.n	800aeb6 <__kernel_rem_pio2+0x66>
 800af08:	aa06      	add	r2, sp, #24
 800af0a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800b160 <__kernel_rem_pio2+0x310>
 800af0e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b168 <__kernel_rem_pio2+0x318>
 800af12:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800af16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800af1a:	9204      	str	r2, [sp, #16]
 800af1c:	9303      	str	r3, [sp, #12]
 800af1e:	464d      	mov	r5, r9
 800af20:	00eb      	lsls	r3, r5, #3
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	ab92      	add	r3, sp, #584	; 0x248
 800af26:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800af2a:	f10d 0b18 	add.w	fp, sp, #24
 800af2e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800af30:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800af34:	465e      	mov	r6, fp
 800af36:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800af3a:	4628      	mov	r0, r5
 800af3c:	2800      	cmp	r0, #0
 800af3e:	f1a2 0208 	sub.w	r2, r2, #8
 800af42:	dc48      	bgt.n	800afd6 <__kernel_rem_pio2+0x186>
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fa17 	bl	800b378 <scalbn>
 800af4a:	eeb0 8b40 	vmov.f64	d8, d0
 800af4e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800af52:	ee28 0b00 	vmul.f64	d0, d8, d0
 800af56:	f000 fa8f 	bl	800b478 <floor>
 800af5a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800af5e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800af62:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800af66:	2c00      	cmp	r4, #0
 800af68:	ee17 8a90 	vmov	r8, s15
 800af6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af70:	ee38 8b47 	vsub.f64	d8, d8, d7
 800af74:	dd41      	ble.n	800affa <__kernel_rem_pio2+0x1aa>
 800af76:	1e68      	subs	r0, r5, #1
 800af78:	ab06      	add	r3, sp, #24
 800af7a:	f1c4 0c18 	rsb	ip, r4, #24
 800af7e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800af82:	fa46 f20c 	asr.w	r2, r6, ip
 800af86:	4490      	add	r8, r2
 800af88:	fa02 f20c 	lsl.w	r2, r2, ip
 800af8c:	1ab6      	subs	r6, r6, r2
 800af8e:	f1c4 0217 	rsb	r2, r4, #23
 800af92:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800af96:	4116      	asrs	r6, r2
 800af98:	2e00      	cmp	r6, #0
 800af9a:	dd3d      	ble.n	800b018 <__kernel_rem_pio2+0x1c8>
 800af9c:	f04f 0c00 	mov.w	ip, #0
 800afa0:	f108 0801 	add.w	r8, r8, #1
 800afa4:	4660      	mov	r0, ip
 800afa6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800afaa:	4565      	cmp	r5, ip
 800afac:	dc6a      	bgt.n	800b084 <__kernel_rem_pio2+0x234>
 800afae:	2c00      	cmp	r4, #0
 800afb0:	dd04      	ble.n	800afbc <__kernel_rem_pio2+0x16c>
 800afb2:	2c01      	cmp	r4, #1
 800afb4:	d07b      	beq.n	800b0ae <__kernel_rem_pio2+0x25e>
 800afb6:	2c02      	cmp	r4, #2
 800afb8:	f000 8083 	beq.w	800b0c2 <__kernel_rem_pio2+0x272>
 800afbc:	2e02      	cmp	r6, #2
 800afbe:	d12b      	bne.n	800b018 <__kernel_rem_pio2+0x1c8>
 800afc0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800afc4:	ee30 8b48 	vsub.f64	d8, d0, d8
 800afc8:	b330      	cbz	r0, 800b018 <__kernel_rem_pio2+0x1c8>
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f9d4 	bl	800b378 <scalbn>
 800afd0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800afd4:	e020      	b.n	800b018 <__kernel_rem_pio2+0x1c8>
 800afd6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800afda:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800afde:	3801      	subs	r0, #1
 800afe0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800afe4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800afe8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800afec:	eca6 0a01 	vstmia	r6!, {s0}
 800aff0:	ed92 0b00 	vldr	d0, [r2]
 800aff4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800aff8:	e7a0      	b.n	800af3c <__kernel_rem_pio2+0xec>
 800affa:	d105      	bne.n	800b008 <__kernel_rem_pio2+0x1b8>
 800affc:	1e6a      	subs	r2, r5, #1
 800affe:	ab06      	add	r3, sp, #24
 800b000:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b004:	15f6      	asrs	r6, r6, #23
 800b006:	e7c7      	b.n	800af98 <__kernel_rem_pio2+0x148>
 800b008:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b00c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b014:	da34      	bge.n	800b080 <__kernel_rem_pio2+0x230>
 800b016:	2600      	movs	r6, #0
 800b018:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b020:	f040 80aa 	bne.w	800b178 <__kernel_rem_pio2+0x328>
 800b024:	f105 3bff 	add.w	fp, r5, #4294967295
 800b028:	4658      	mov	r0, fp
 800b02a:	2200      	movs	r2, #0
 800b02c:	4548      	cmp	r0, r9
 800b02e:	da50      	bge.n	800b0d2 <__kernel_rem_pio2+0x282>
 800b030:	2a00      	cmp	r2, #0
 800b032:	d06b      	beq.n	800b10c <__kernel_rem_pio2+0x2bc>
 800b034:	ab06      	add	r3, sp, #24
 800b036:	3c18      	subs	r4, #24
 800b038:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 8087 	beq.w	800b150 <__kernel_rem_pio2+0x300>
 800b042:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b046:	4620      	mov	r0, r4
 800b048:	f000 f996 	bl	800b378 <scalbn>
 800b04c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800b160 <__kernel_rem_pio2+0x310>
 800b050:	f10b 0201 	add.w	r2, fp, #1
 800b054:	a96a      	add	r1, sp, #424	; 0x1a8
 800b056:	00d3      	lsls	r3, r2, #3
 800b058:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b05c:	465a      	mov	r2, fp
 800b05e:	2a00      	cmp	r2, #0
 800b060:	f280 80b8 	bge.w	800b1d4 <__kernel_rem_pio2+0x384>
 800b064:	465a      	mov	r2, fp
 800b066:	2a00      	cmp	r2, #0
 800b068:	f2c0 80d6 	blt.w	800b218 <__kernel_rem_pio2+0x3c8>
 800b06c:	a96a      	add	r1, sp, #424	; 0x1a8
 800b06e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800b072:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800b158 <__kernel_rem_pio2+0x308>
 800b076:	4d3f      	ldr	r5, [pc, #252]	; (800b174 <__kernel_rem_pio2+0x324>)
 800b078:	2000      	movs	r0, #0
 800b07a:	ebab 0102 	sub.w	r1, fp, r2
 800b07e:	e0c0      	b.n	800b202 <__kernel_rem_pio2+0x3b2>
 800b080:	2602      	movs	r6, #2
 800b082:	e78b      	b.n	800af9c <__kernel_rem_pio2+0x14c>
 800b084:	f8db 2000 	ldr.w	r2, [fp]
 800b088:	b958      	cbnz	r0, 800b0a2 <__kernel_rem_pio2+0x252>
 800b08a:	b122      	cbz	r2, 800b096 <__kernel_rem_pio2+0x246>
 800b08c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800b090:	f8cb 2000 	str.w	r2, [fp]
 800b094:	2201      	movs	r2, #1
 800b096:	f10c 0c01 	add.w	ip, ip, #1
 800b09a:	f10b 0b04 	add.w	fp, fp, #4
 800b09e:	4610      	mov	r0, r2
 800b0a0:	e783      	b.n	800afaa <__kernel_rem_pio2+0x15a>
 800b0a2:	ebae 0202 	sub.w	r2, lr, r2
 800b0a6:	f8cb 2000 	str.w	r2, [fp]
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	e7f3      	b.n	800b096 <__kernel_rem_pio2+0x246>
 800b0ae:	f105 3cff 	add.w	ip, r5, #4294967295
 800b0b2:	ab06      	add	r3, sp, #24
 800b0b4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b0b8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b0bc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800b0c0:	e77c      	b.n	800afbc <__kernel_rem_pio2+0x16c>
 800b0c2:	f105 3cff 	add.w	ip, r5, #4294967295
 800b0c6:	ab06      	add	r3, sp, #24
 800b0c8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b0cc:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800b0d0:	e7f4      	b.n	800b0bc <__kernel_rem_pio2+0x26c>
 800b0d2:	ab06      	add	r3, sp, #24
 800b0d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b0d8:	3801      	subs	r0, #1
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	e7a6      	b.n	800b02c <__kernel_rem_pio2+0x1dc>
 800b0de:	3201      	adds	r2, #1
 800b0e0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b0e4:	2e00      	cmp	r6, #0
 800b0e6:	d0fa      	beq.n	800b0de <__kernel_rem_pio2+0x28e>
 800b0e8:	9b05      	ldr	r3, [sp, #20]
 800b0ea:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b0ee:	eb0d 0003 	add.w	r0, sp, r3
 800b0f2:	9b01      	ldr	r3, [sp, #4]
 800b0f4:	18ee      	adds	r6, r5, r3
 800b0f6:	ab1a      	add	r3, sp, #104	; 0x68
 800b0f8:	f105 0c01 	add.w	ip, r5, #1
 800b0fc:	3898      	subs	r0, #152	; 0x98
 800b0fe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b102:	442a      	add	r2, r5
 800b104:	4562      	cmp	r2, ip
 800b106:	da04      	bge.n	800b112 <__kernel_rem_pio2+0x2c2>
 800b108:	4615      	mov	r5, r2
 800b10a:	e709      	b.n	800af20 <__kernel_rem_pio2+0xd0>
 800b10c:	9804      	ldr	r0, [sp, #16]
 800b10e:	2201      	movs	r2, #1
 800b110:	e7e6      	b.n	800b0e0 <__kernel_rem_pio2+0x290>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b118:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b11c:	9305      	str	r3, [sp, #20]
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b126:	2500      	movs	r5, #0
 800b128:	eca6 7b02 	vstmia	r6!, {d7}
 800b12c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800b158 <__kernel_rem_pio2+0x308>
 800b130:	46b0      	mov	r8, r6
 800b132:	4555      	cmp	r5, sl
 800b134:	dd04      	ble.n	800b140 <__kernel_rem_pio2+0x2f0>
 800b136:	eca0 7b02 	vstmia	r0!, {d7}
 800b13a:	f10c 0c01 	add.w	ip, ip, #1
 800b13e:	e7e1      	b.n	800b104 <__kernel_rem_pio2+0x2b4>
 800b140:	ecbe 5b02 	vldmia	lr!, {d5}
 800b144:	ed38 6b02 	vldmdb	r8!, {d6}
 800b148:	3501      	adds	r5, #1
 800b14a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b14e:	e7f0      	b.n	800b132 <__kernel_rem_pio2+0x2e2>
 800b150:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b154:	e76e      	b.n	800b034 <__kernel_rem_pio2+0x1e4>
 800b156:	bf00      	nop
	...
 800b164:	3e700000 	.word	0x3e700000
 800b168:	00000000 	.word	0x00000000
 800b16c:	41700000 	.word	0x41700000
 800b170:	0800b828 	.word	0x0800b828
 800b174:	0800b7e8 	.word	0x0800b7e8
 800b178:	4260      	negs	r0, r4
 800b17a:	eeb0 0b48 	vmov.f64	d0, d8
 800b17e:	f000 f8fb 	bl	800b378 <scalbn>
 800b182:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800b360 <__kernel_rem_pio2+0x510>
 800b186:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18e:	db18      	blt.n	800b1c2 <__kernel_rem_pio2+0x372>
 800b190:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800b368 <__kernel_rem_pio2+0x518>
 800b194:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b198:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b19c:	aa06      	add	r2, sp, #24
 800b19e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800b1a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800b1a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b1aa:	f105 0b01 	add.w	fp, r5, #1
 800b1ae:	ee10 3a10 	vmov	r3, s0
 800b1b2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b1b6:	ee17 3a10 	vmov	r3, s14
 800b1ba:	3418      	adds	r4, #24
 800b1bc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800b1c0:	e73f      	b.n	800b042 <__kernel_rem_pio2+0x1f2>
 800b1c2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b1c6:	aa06      	add	r2, sp, #24
 800b1c8:	ee10 3a10 	vmov	r3, s0
 800b1cc:	46ab      	mov	fp, r5
 800b1ce:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b1d2:	e736      	b.n	800b042 <__kernel_rem_pio2+0x1f2>
 800b1d4:	a806      	add	r0, sp, #24
 800b1d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b1da:	9001      	str	r0, [sp, #4]
 800b1dc:	ee07 0a90 	vmov	s15, r0
 800b1e0:	3a01      	subs	r2, #1
 800b1e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b1e6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800b1ea:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b1ee:	ed21 7b02 	vstmdb	r1!, {d7}
 800b1f2:	e734      	b.n	800b05e <__kernel_rem_pio2+0x20e>
 800b1f4:	ecb5 5b02 	vldmia	r5!, {d5}
 800b1f8:	ecb4 6b02 	vldmia	r4!, {d6}
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b202:	4548      	cmp	r0, r9
 800b204:	dc01      	bgt.n	800b20a <__kernel_rem_pio2+0x3ba>
 800b206:	4288      	cmp	r0, r1
 800b208:	ddf4      	ble.n	800b1f4 <__kernel_rem_pio2+0x3a4>
 800b20a:	a842      	add	r0, sp, #264	; 0x108
 800b20c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b210:	ed81 7b00 	vstr	d7, [r1]
 800b214:	3a01      	subs	r2, #1
 800b216:	e726      	b.n	800b066 <__kernel_rem_pio2+0x216>
 800b218:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b21a:	2a02      	cmp	r2, #2
 800b21c:	dc0a      	bgt.n	800b234 <__kernel_rem_pio2+0x3e4>
 800b21e:	2a00      	cmp	r2, #0
 800b220:	dc2e      	bgt.n	800b280 <__kernel_rem_pio2+0x430>
 800b222:	d047      	beq.n	800b2b4 <__kernel_rem_pio2+0x464>
 800b224:	f008 0007 	and.w	r0, r8, #7
 800b228:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800b22c:	ecbd 8b06 	vpop	{d8-d10}
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b236:	2a03      	cmp	r2, #3
 800b238:	d1f4      	bne.n	800b224 <__kernel_rem_pio2+0x3d4>
 800b23a:	a942      	add	r1, sp, #264	; 0x108
 800b23c:	f1a3 0208 	sub.w	r2, r3, #8
 800b240:	440a      	add	r2, r1
 800b242:	4611      	mov	r1, r2
 800b244:	4658      	mov	r0, fp
 800b246:	2800      	cmp	r0, #0
 800b248:	f1a1 0108 	sub.w	r1, r1, #8
 800b24c:	dc55      	bgt.n	800b2fa <__kernel_rem_pio2+0x4aa>
 800b24e:	4659      	mov	r1, fp
 800b250:	2901      	cmp	r1, #1
 800b252:	f1a2 0208 	sub.w	r2, r2, #8
 800b256:	dc60      	bgt.n	800b31a <__kernel_rem_pio2+0x4ca>
 800b258:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800b370 <__kernel_rem_pio2+0x520>
 800b25c:	aa42      	add	r2, sp, #264	; 0x108
 800b25e:	4413      	add	r3, r2
 800b260:	f1bb 0f01 	cmp.w	fp, #1
 800b264:	dc69      	bgt.n	800b33a <__kernel_rem_pio2+0x4ea>
 800b266:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800b26a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800b26e:	2e00      	cmp	r6, #0
 800b270:	d16a      	bne.n	800b348 <__kernel_rem_pio2+0x4f8>
 800b272:	ed87 5b00 	vstr	d5, [r7]
 800b276:	ed87 6b02 	vstr	d6, [r7, #8]
 800b27a:	ed87 7b04 	vstr	d7, [r7, #16]
 800b27e:	e7d1      	b.n	800b224 <__kernel_rem_pio2+0x3d4>
 800b280:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800b370 <__kernel_rem_pio2+0x520>
 800b284:	aa42      	add	r2, sp, #264	; 0x108
 800b286:	4413      	add	r3, r2
 800b288:	465a      	mov	r2, fp
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	da26      	bge.n	800b2dc <__kernel_rem_pio2+0x48c>
 800b28e:	b35e      	cbz	r6, 800b2e8 <__kernel_rem_pio2+0x498>
 800b290:	eeb1 7b46 	vneg.f64	d7, d6
 800b294:	ed87 7b00 	vstr	d7, [r7]
 800b298:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800b29c:	aa44      	add	r2, sp, #272	; 0x110
 800b29e:	2301      	movs	r3, #1
 800b2a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b2a4:	459b      	cmp	fp, r3
 800b2a6:	da22      	bge.n	800b2ee <__kernel_rem_pio2+0x49e>
 800b2a8:	b10e      	cbz	r6, 800b2ae <__kernel_rem_pio2+0x45e>
 800b2aa:	eeb1 7b47 	vneg.f64	d7, d7
 800b2ae:	ed87 7b02 	vstr	d7, [r7, #8]
 800b2b2:	e7b7      	b.n	800b224 <__kernel_rem_pio2+0x3d4>
 800b2b4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b370 <__kernel_rem_pio2+0x520>
 800b2b8:	aa42      	add	r2, sp, #264	; 0x108
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f1bb 0f00 	cmp.w	fp, #0
 800b2c0:	da05      	bge.n	800b2ce <__kernel_rem_pio2+0x47e>
 800b2c2:	b10e      	cbz	r6, 800b2c8 <__kernel_rem_pio2+0x478>
 800b2c4:	eeb1 7b47 	vneg.f64	d7, d7
 800b2c8:	ed87 7b00 	vstr	d7, [r7]
 800b2cc:	e7aa      	b.n	800b224 <__kernel_rem_pio2+0x3d4>
 800b2ce:	ed33 6b02 	vldmdb	r3!, {d6}
 800b2d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b2da:	e7ef      	b.n	800b2bc <__kernel_rem_pio2+0x46c>
 800b2dc:	ed33 7b02 	vldmdb	r3!, {d7}
 800b2e0:	3a01      	subs	r2, #1
 800b2e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b2e6:	e7d0      	b.n	800b28a <__kernel_rem_pio2+0x43a>
 800b2e8:	eeb0 7b46 	vmov.f64	d7, d6
 800b2ec:	e7d2      	b.n	800b294 <__kernel_rem_pio2+0x444>
 800b2ee:	ecb2 6b02 	vldmia	r2!, {d6}
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b2f8:	e7d4      	b.n	800b2a4 <__kernel_rem_pio2+0x454>
 800b2fa:	ed91 7b00 	vldr	d7, [r1]
 800b2fe:	ed91 5b02 	vldr	d5, [r1, #8]
 800b302:	3801      	subs	r0, #1
 800b304:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b30c:	ed81 6b00 	vstr	d6, [r1]
 800b310:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b314:	ed81 7b02 	vstr	d7, [r1, #8]
 800b318:	e795      	b.n	800b246 <__kernel_rem_pio2+0x3f6>
 800b31a:	ed92 7b00 	vldr	d7, [r2]
 800b31e:	ed92 5b02 	vldr	d5, [r2, #8]
 800b322:	3901      	subs	r1, #1
 800b324:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b328:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b32c:	ed82 6b00 	vstr	d6, [r2]
 800b330:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b334:	ed82 7b02 	vstr	d7, [r2, #8]
 800b338:	e78a      	b.n	800b250 <__kernel_rem_pio2+0x400>
 800b33a:	ed33 6b02 	vldmdb	r3!, {d6}
 800b33e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b342:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b346:	e78b      	b.n	800b260 <__kernel_rem_pio2+0x410>
 800b348:	eeb1 5b45 	vneg.f64	d5, d5
 800b34c:	eeb1 6b46 	vneg.f64	d6, d6
 800b350:	ed87 5b00 	vstr	d5, [r7]
 800b354:	eeb1 7b47 	vneg.f64	d7, d7
 800b358:	ed87 6b02 	vstr	d6, [r7, #8]
 800b35c:	e78d      	b.n	800b27a <__kernel_rem_pio2+0x42a>
 800b35e:	bf00      	nop
 800b360:	00000000 	.word	0x00000000
 800b364:	41700000 	.word	0x41700000
 800b368:	00000000 	.word	0x00000000
 800b36c:	3e700000 	.word	0x3e700000
	...

0800b378 <scalbn>:
 800b378:	ee10 1a90 	vmov	r1, s1
 800b37c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b380:	b98b      	cbnz	r3, 800b3a6 <scalbn+0x2e>
 800b382:	ee10 3a10 	vmov	r3, s0
 800b386:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b38a:	4319      	orrs	r1, r3
 800b38c:	d00a      	beq.n	800b3a4 <scalbn+0x2c>
 800b38e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800b440 <scalbn+0xc8>
 800b392:	4b37      	ldr	r3, [pc, #220]	; (800b470 <scalbn+0xf8>)
 800b394:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b398:	4298      	cmp	r0, r3
 800b39a:	da0b      	bge.n	800b3b4 <scalbn+0x3c>
 800b39c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800b448 <scalbn+0xd0>
 800b3a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b3a4:	4770      	bx	lr
 800b3a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d107      	bne.n	800b3be <scalbn+0x46>
 800b3ae:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b3b2:	4770      	bx	lr
 800b3b4:	ee10 1a90 	vmov	r1, s1
 800b3b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3bc:	3b36      	subs	r3, #54	; 0x36
 800b3be:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b3c2:	4290      	cmp	r0, r2
 800b3c4:	dd0d      	ble.n	800b3e2 <scalbn+0x6a>
 800b3c6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b450 <scalbn+0xd8>
 800b3ca:	ee10 3a90 	vmov	r3, s1
 800b3ce:	eeb0 6b47 	vmov.f64	d6, d7
 800b3d2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800b458 <scalbn+0xe0>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b3dc:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b3e0:	4770      	bx	lr
 800b3e2:	4418      	add	r0, r3
 800b3e4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800b3e8:	4298      	cmp	r0, r3
 800b3ea:	dcec      	bgt.n	800b3c6 <scalbn+0x4e>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	dd0a      	ble.n	800b406 <scalbn+0x8e>
 800b3f0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b3f4:	ec53 2b10 	vmov	r2, r3, d0
 800b3f8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b3fc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b400:	ec43 2b10 	vmov	d0, r2, r3
 800b404:	4770      	bx	lr
 800b406:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800b40a:	da09      	bge.n	800b420 <scalbn+0xa8>
 800b40c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b448 <scalbn+0xd0>
 800b410:	ee10 3a90 	vmov	r3, s1
 800b414:	eeb0 6b47 	vmov.f64	d6, d7
 800b418:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800b460 <scalbn+0xe8>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	e7db      	b.n	800b3d8 <scalbn+0x60>
 800b420:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b424:	ec53 2b10 	vmov	r2, r3, d0
 800b428:	3036      	adds	r0, #54	; 0x36
 800b42a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b42e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b432:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b468 <scalbn+0xf0>
 800b436:	ec43 2b10 	vmov	d0, r2, r3
 800b43a:	e7b1      	b.n	800b3a0 <scalbn+0x28>
 800b43c:	f3af 8000 	nop.w
 800b440:	00000000 	.word	0x00000000
 800b444:	43500000 	.word	0x43500000
 800b448:	c2f8f359 	.word	0xc2f8f359
 800b44c:	01a56e1f 	.word	0x01a56e1f
 800b450:	8800759c 	.word	0x8800759c
 800b454:	7e37e43c 	.word	0x7e37e43c
 800b458:	8800759c 	.word	0x8800759c
 800b45c:	fe37e43c 	.word	0xfe37e43c
 800b460:	c2f8f359 	.word	0xc2f8f359
 800b464:	81a56e1f 	.word	0x81a56e1f
 800b468:	00000000 	.word	0x00000000
 800b46c:	3c900000 	.word	0x3c900000
 800b470:	ffff3cb0 	.word	0xffff3cb0
 800b474:	00000000 	.word	0x00000000

0800b478 <floor>:
 800b478:	ee10 1a90 	vmov	r1, s1
 800b47c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b480:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b484:	2b13      	cmp	r3, #19
 800b486:	b530      	push	{r4, r5, lr}
 800b488:	ee10 0a10 	vmov	r0, s0
 800b48c:	ee10 5a10 	vmov	r5, s0
 800b490:	dc31      	bgt.n	800b4f6 <floor+0x7e>
 800b492:	2b00      	cmp	r3, #0
 800b494:	da15      	bge.n	800b4c2 <floor+0x4a>
 800b496:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b558 <floor+0xe0>
 800b49a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b49e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a6:	dd07      	ble.n	800b4b8 <floor+0x40>
 800b4a8:	2900      	cmp	r1, #0
 800b4aa:	da4e      	bge.n	800b54a <floor+0xd2>
 800b4ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b4b0:	4308      	orrs	r0, r1
 800b4b2:	d04d      	beq.n	800b550 <floor+0xd8>
 800b4b4:	492a      	ldr	r1, [pc, #168]	; (800b560 <floor+0xe8>)
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	ec43 2b10 	vmov	d0, r2, r3
 800b4c0:	e020      	b.n	800b504 <floor+0x8c>
 800b4c2:	4a28      	ldr	r2, [pc, #160]	; (800b564 <floor+0xec>)
 800b4c4:	411a      	asrs	r2, r3
 800b4c6:	ea01 0402 	and.w	r4, r1, r2
 800b4ca:	4304      	orrs	r4, r0
 800b4cc:	d01a      	beq.n	800b504 <floor+0x8c>
 800b4ce:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800b558 <floor+0xe0>
 800b4d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b4d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4de:	ddeb      	ble.n	800b4b8 <floor+0x40>
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	bfbe      	ittt	lt
 800b4e4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b4e8:	fa40 f303 	asrlt.w	r3, r0, r3
 800b4ec:	18c9      	addlt	r1, r1, r3
 800b4ee:	ea21 0102 	bic.w	r1, r1, r2
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e7e0      	b.n	800b4b8 <floor+0x40>
 800b4f6:	2b33      	cmp	r3, #51	; 0x33
 800b4f8:	dd05      	ble.n	800b506 <floor+0x8e>
 800b4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4fe:	d101      	bne.n	800b504 <floor+0x8c>
 800b500:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b504:	bd30      	pop	{r4, r5, pc}
 800b506:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b50a:	f04f 32ff 	mov.w	r2, #4294967295
 800b50e:	40e2      	lsrs	r2, r4
 800b510:	4210      	tst	r0, r2
 800b512:	d0f7      	beq.n	800b504 <floor+0x8c>
 800b514:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b558 <floor+0xe0>
 800b518:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b51c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b524:	ddc8      	ble.n	800b4b8 <floor+0x40>
 800b526:	2900      	cmp	r1, #0
 800b528:	da02      	bge.n	800b530 <floor+0xb8>
 800b52a:	2b14      	cmp	r3, #20
 800b52c:	d103      	bne.n	800b536 <floor+0xbe>
 800b52e:	3101      	adds	r1, #1
 800b530:	ea20 0002 	bic.w	r0, r0, r2
 800b534:	e7c0      	b.n	800b4b8 <floor+0x40>
 800b536:	2401      	movs	r4, #1
 800b538:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b53c:	fa04 f303 	lsl.w	r3, r4, r3
 800b540:	4418      	add	r0, r3
 800b542:	4285      	cmp	r5, r0
 800b544:	bf88      	it	hi
 800b546:	1909      	addhi	r1, r1, r4
 800b548:	e7f2      	b.n	800b530 <floor+0xb8>
 800b54a:	2000      	movs	r0, #0
 800b54c:	4601      	mov	r1, r0
 800b54e:	e7b3      	b.n	800b4b8 <floor+0x40>
 800b550:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b554:	e7b0      	b.n	800b4b8 <floor+0x40>
 800b556:	bf00      	nop
 800b558:	8800759c 	.word	0x8800759c
 800b55c:	7e37e43c 	.word	0x7e37e43c
 800b560:	bff00000 	.word	0xbff00000
 800b564:	000fffff 	.word	0x000fffff

0800b568 <_init>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr

0800b574 <_fini>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	bf00      	nop
 800b578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57a:	bc08      	pop	{r3}
 800b57c:	469e      	mov	lr, r3
 800b57e:	4770      	bx	lr
