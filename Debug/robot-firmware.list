
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009428  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009628  08009628  0000a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  0000b090  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  0000b090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009710  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004474  20000090  080097a0  0000b090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004504  080097a0  0000b504  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2bf  00000000  00000000  0000b0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e50  00000000  00000000  0002537d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  000291d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130a  00000000  00000000  0002aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ee  00000000  00000000  0002bd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df90  00000000  00000000  00031470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104079  00000000  00000000  0004f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006878  00000000  00000000  001534bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00159d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	08009610 	.word	0x08009610

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	08009610 	.word	0x08009610

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b09a      	sub	sp, #104	@ 0x68
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 fe80 	bl	800223a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f8f1 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 fbb9 	bl	8000cb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000542:	f000 fa1b 	bl	800097c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000546:	f000 f959 	bl	80007fc <MX_I2C1_Init>
  MX_I2C2_Init();
 800054a:	f000 f997 	bl	800087c <MX_I2C2_Init>
  MX_TIM2_Init();
 800054e:	f000 fa57 	bl	8000a00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 faa9 	bl	8000aa8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000556:	f000 fafd 	bl	8000b54 <MX_TIM5_Init>
  MX_TIM8_Init();
 800055a:	f000 fb51 	bl	8000c00 <MX_TIM8_Init>
  MX_I2C3_Init();
 800055e:	f000 f9cd 	bl	80008fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	/* Define wheels angles in motor.h */
	kinematic[0][0] = sin(WHEEL_ANGlE_1); kinematic[0][1] = -cos(WHEEL_ANGlE_1); kinematic[0][2] = -ROBOT_RADIO;
 8000562:	4b5a      	ldr	r3, [pc, #360]	@ (80006cc <main+0x19c>)
 8000564:	4a5a      	ldr	r2, [pc, #360]	@ (80006d0 <main+0x1a0>)
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <main+0x19c>)
 800056a:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	4b56      	ldr	r3, [pc, #344]	@ (80006cc <main+0x19c>)
 8000572:	4a58      	ldr	r2, [pc, #352]	@ (80006d4 <main+0x1a4>)
 8000574:	609a      	str	r2, [r3, #8]
	kinematic[1][0] = sin(WHEEL_ANGlE_2); kinematic[1][1] = -cos(WHEEL_ANGlE_2); kinematic[1][2] = -ROBOT_RADIO;
 8000576:	4b55      	ldr	r3, [pc, #340]	@ (80006cc <main+0x19c>)
 8000578:	4a57      	ldr	r2, [pc, #348]	@ (80006d8 <main+0x1a8>)
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <main+0x19c>)
 800057e:	4a57      	ldr	r2, [pc, #348]	@ (80006dc <main+0x1ac>)
 8000580:	611a      	str	r2, [r3, #16]
 8000582:	4b52      	ldr	r3, [pc, #328]	@ (80006cc <main+0x19c>)
 8000584:	4a53      	ldr	r2, [pc, #332]	@ (80006d4 <main+0x1a4>)
 8000586:	615a      	str	r2, [r3, #20]
	kinematic[2][0] = sin(WHEEL_ANGlE_3); kinematic[2][1] = -cos(WHEEL_ANGlE_3); kinematic[2][2] = -ROBOT_RADIO;
 8000588:	4b50      	ldr	r3, [pc, #320]	@ (80006cc <main+0x19c>)
 800058a:	4a55      	ldr	r2, [pc, #340]	@ (80006e0 <main+0x1b0>)
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b4f      	ldr	r3, [pc, #316]	@ (80006cc <main+0x19c>)
 8000590:	4a52      	ldr	r2, [pc, #328]	@ (80006dc <main+0x1ac>)
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	4b4d      	ldr	r3, [pc, #308]	@ (80006cc <main+0x19c>)
 8000596:	4a4f      	ldr	r2, [pc, #316]	@ (80006d4 <main+0x1a4>)
 8000598:	621a      	str	r2, [r3, #32]
	kinematic[3][0] = sin(WHEEL_ANGlE_4); kinematic[3][1] = -cos(WHEEL_ANGlE_4); kinematic[3][2] = -ROBOT_RADIO;
 800059a:	4b4c      	ldr	r3, [pc, #304]	@ (80006cc <main+0x19c>)
 800059c:	4a51      	ldr	r2, [pc, #324]	@ (80006e4 <main+0x1b4>)
 800059e:	625a      	str	r2, [r3, #36]	@ 0x24
 80005a0:	4b4a      	ldr	r3, [pc, #296]	@ (80006cc <main+0x19c>)
 80005a2:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80005a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a8:	4b48      	ldr	r3, [pc, #288]	@ (80006cc <main+0x19c>)
 80005aa:	4a4a      	ldr	r2, [pc, #296]	@ (80006d4 <main+0x1a4>)
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c

	for (uint8_t i = 0; i < 10; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80005b4:	e016      	b.n	80005e4 <main+0xb4>
	{
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 80005b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ba:	484b      	ldr	r0, [pc, #300]	@ (80006e8 <main+0x1b8>)
 80005bc:	f008 f81a 	bl	80085f4 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 80005c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c4:	4848      	ldr	r0, [pc, #288]	@ (80006e8 <main+0x1b8>)
 80005c6:	f008 f815 	bl	80085f4 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 80005ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ce:	4846      	ldr	r0, [pc, #280]	@ (80006e8 <main+0x1b8>)
 80005d0:	f008 f810 	bl	80085f4 <Board_LedToggle>
		HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	@ 0x64
 80005d6:	f001 fe5d 	bl	8002294 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++)
 80005da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80005de:	3301      	adds	r3, #1
 80005e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80005e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	d9e4      	bls.n	80005b6 <main+0x86>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of kickFlag */
  osMutexDef(kickFlag);
 80005ec:	2300      	movs	r3, #0
 80005ee:	663b      	str	r3, [r7, #96]	@ 0x60
  kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 80005f0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 f909 	bl	800580c <osMutexCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <main+0x1bc>)
 80005fe:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of kickQueue */
  osMessageQDef(kickQueue, 1, uint16_t);
 8000600:	4a3b      	ldr	r2, [pc, #236]	@ (80006f0 <main+0x1c0>)
 8000602:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060a:	e883 0003 	stmia.w	r3, {r0, r1}
  kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 800060e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 f989 	bl	800592c <osMessageCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a35      	ldr	r2, [pc, #212]	@ (80006f4 <main+0x1c4>)
 800061e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(nrf24Check, 16, uint16_t);
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <main+0x1c8>)
 8000622:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062a:	e883 0003 	stmia.w	r3, {r0, r1}
  nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 800062e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f005 f979 	bl	800592c <osMessageCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a2f      	ldr	r2, [pc, #188]	@ (80006fc <main+0x1cc>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of driveTask */
  osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <main+0x1d0>)
 8000642:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	6023      	str	r3, [r4, #0]
  driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8000650:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 f89d 	bl	8005796 <osThreadCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <main+0x1d4>)
 8000660:	6013      	str	r3, [r2, #0]

  /* definition and creation of radioTask */
  osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8000662:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <main+0x1d8>)
 8000664:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	6023      	str	r3, [r4, #0]
  radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8000672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f005 f88c 	bl	8005796 <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <main+0x1dc>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of kickTask */
  osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <main+0x1e0>)
 8000686:	f107 0414 	add.w	r4, r7, #20
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	6023      	str	r3, [r4, #0]
  kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 f87b 	bl	8005796 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <main+0x1e4>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <main+0x1e8>)
 80006a8:	463c      	mov	r4, r7
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	6023      	str	r3, [r4, #0]
  ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 80006b4:	463b      	mov	r3, r7
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 f86c 	bl	8005796 <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <main+0x1ec>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c4:	f005 f850 	bl	8005768 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <main+0x198>
 80006cc:	20000374 	.word	0x20000374
 80006d0:	3f5db3d7 	.word	0x3f5db3d7
 80006d4:	bda83e42 	.word	0xbda83e42
 80006d8:	3f441b7d 	.word	0x3f441b7d
 80006dc:	3f248dbb 	.word	0x3f248dbb
 80006e0:	bf441b7d 	.word	0xbf441b7d
 80006e4:	bf5db3d7 	.word	0xbf5db3d7
 80006e8:	40022000 	.word	0x40022000
 80006ec:	2000034c 	.word	0x2000034c
 80006f0:	08009628 	.word	0x08009628
 80006f4:	20000348 	.word	0x20000348
 80006f8:	08009630 	.word	0x08009630
 80006fc:	20000354 	.word	0x20000354
 8000700:	08009644 	.word	0x08009644
 8000704:	2000033c 	.word	0x2000033c
 8000708:	08009664 	.word	0x08009664
 800070c:	20000340 	.word	0x20000340
 8000710:	08009684 	.word	0x08009684
 8000714:	20000344 	.word	0x20000344
 8000718:	080096ac 	.word	0x080096ac
 800071c:	20000350 	.word	0x20000350

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	@ 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f008 ff0a 	bl	8009548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a2a      	ldr	r2, [pc, #168]	@ (80007f4 <SystemClock_Config+0xd4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <SystemClock_Config+0xd8>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800078c:	23d8      	movs	r3, #216	@ 0xd8
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fe43 	bl	800342c <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007ac:	f001 fa12 	bl	8001bd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b0:	f002 fdec 	bl	800338c <HAL_PWREx_EnableOverDrive>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ba:	f001 fa0b 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2107      	movs	r1, #7
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 f8d3 	bl	8003988 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007e8:	f001 f9f4 	bl	8001bd4 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	@ 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000838:	f002 f82a 	bl	8002890 <HAL_I2C_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000842:	f001 f9c7 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x74>)
 800084a:	f002 fd07 	bl	800325c <HAL_I2CEx_ConfigAnalogFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f001 f9be 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C1_Init+0x74>)
 800085c:	f002 fd49 	bl	80032f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f001 f9b5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000ac 	.word	0x200000ac
 8000874:	40005400 	.word	0x40005400
 8000878:	6000030d 	.word	0x6000030d

0800087c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <MX_I2C2_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <MX_I2C2_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8000886:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_I2C2_Init+0x74>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <MX_I2C2_Init+0x7c>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_I2C2_Init+0x74>)
 8000894:	2201      	movs	r2, #1
 8000896:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008b8:	f001 ffea 	bl	8002890 <HAL_I2C_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008c2:	f001 f987 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008ca:	f002 fcc7 	bl	800325c <HAL_I2CEx_ConfigAnalogFilter>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f001 f97e 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008dc:	f002 fd09 	bl	80032f2 <HAL_I2CEx_ConfigDigitalFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f001 f975 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000100 	.word	0x20000100
 80008f4:	40005800 	.word	0x40005800
 80008f8:	6000030d 	.word	0x6000030d

080008fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <MX_I2C3_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <MX_I2C3_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_I2C3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_I2C3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_I2C3_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000938:	f001 ffaa 	bl	8002890 <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000942:	f001 f947 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <MX_I2C3_Init+0x74>)
 800094a:	f002 fc87 	bl	800325c <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000954:	f001 f93e 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_I2C3_Init+0x74>)
 800095c:	f002 fcc9 	bl	80032f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000966:	f001 f935 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000154 	.word	0x20000154
 8000974:	40005c00 	.word	0x40005c00
 8000978:	6000030d 	.word	0x6000030d

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000982:	4a1e      	ldr	r2, [pc, #120]	@ (80009fc <MX_SPI1_Init+0x80>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000988:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000996:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800099a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009b2:	2218      	movs	r2, #24
 80009b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009d6:	2208      	movs	r2, #8
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009da:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009dc:	f003 fe40 	bl	8004660 <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f001 f8f5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 80009ea:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009f2:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001a8 	.word	0x200001a8
 80009fc:	40013000 	.word	0x40013000

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2224      	movs	r2, #36	@ 0x24
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fd9a 	bl	8009548 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a72:	f004 fb15 	bl	80050a0 <HAL_TIM_Encoder_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a7c:	f001 f8aa 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a8e:	f004 fd95 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a98:	f001 f89c 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	@ 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000020c 	.word	0x2000020c

08000aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2224      	movs	r2, #36	@ 0x24
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 fd46 	bl	8009548 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <MX_TIM3_Init+0xa8>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aec:	2303      	movs	r3, #3
 8000aee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000b18:	f004 fac2 	bl	80050a0 <HAL_TIM_Encoder_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b22:	f001 f857 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000b34:	f004 fd42 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b3e:	f001 f849 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	@ 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000258 	.word	0x20000258
 8000b50:	40000400 	.word	0x40000400

08000b54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2224      	movs	r2, #36	@ 0x24
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 fcf0 	bl	8009548 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <MX_TIM5_Init+0xa8>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000bc4:	f004 fa6c 	bl	80050a0 <HAL_TIM_Encoder_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000bce:	f001 f801 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000be0:	f004 fcec 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000bea:	f000 fff3 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	@ 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002a4 	.word	0x200002a4
 8000bfc:	40000c00 	.word	0x40000c00

08000c00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	@ 0x30
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2224      	movs	r2, #36	@ 0x24
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fc9a 	bl	8009548 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c20:	4a23      	ldr	r2, [pc, #140]	@ (8000cb0 <MX_TIM8_Init+0xb0>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c76:	f004 fa13 	bl	80050a0 <HAL_TIM_Encoder_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c80:	f000 ffa8 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c96:	f004 fc91 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ca0:	f000 ff98 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	@ 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200002f0 	.word	0x200002f0
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	@ 0x40
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4bb3      	ldr	r3, [pc, #716]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4ab2      	ldr	r2, [pc, #712]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4bb0      	ldr	r3, [pc, #704]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	4bad      	ldr	r3, [pc, #692]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4aac      	ldr	r2, [pc, #688]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4baa      	ldr	r3, [pc, #680]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	4ba7      	ldr	r3, [pc, #668]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4aa6      	ldr	r2, [pc, #664]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4ba4      	ldr	r3, [pc, #656]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0e:	623b      	str	r3, [r7, #32]
 8000d10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4ba1      	ldr	r3, [pc, #644]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4aa0      	ldr	r2, [pc, #640]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b9b      	ldr	r3, [pc, #620]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a9a      	ldr	r2, [pc, #616]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b98      	ldr	r3, [pc, #608]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b95      	ldr	r3, [pc, #596]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a94      	ldr	r2, [pc, #592]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b92      	ldr	r3, [pc, #584]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a8e      	ldr	r2, [pc, #568]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b8c      	ldr	r3, [pc, #560]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b89      	ldr	r3, [pc, #548]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a88      	ldr	r2, [pc, #544]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b86      	ldr	r3, [pc, #536]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	4b83      	ldr	r3, [pc, #524]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a82      	ldr	r2, [pc, #520]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b80      	ldr	r3, [pc, #512]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000da2:	4b7d      	ldr	r3, [pc, #500]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a7c      	ldr	r2, [pc, #496]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000da8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b7a      	ldr	r3, [pc, #488]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000dc0:	4876      	ldr	r0, [pc, #472]	@ (8000f9c <MX_GPIO_Init+0x2e8>)
 8000dc2:	f001 fd31 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f640 0138 	movw	r1, #2104	@ 0x838
 8000dcc:	4874      	ldr	r0, [pc, #464]	@ (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000dce:	f001 fd2b 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8000dd8:	4872      	ldr	r0, [pc, #456]	@ (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000dda:	f001 fd25 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de4:	4870      	ldr	r0, [pc, #448]	@ (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000de6:	f001 fd1f 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000df0:	486e      	ldr	r0, [pc, #440]	@ (8000fac <MX_GPIO_Init+0x2f8>)
 8000df2:	f001 fd19 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000dfc:	486c      	ldr	r0, [pc, #432]	@ (8000fb0 <MX_GPIO_Init+0x2fc>)
 8000dfe:	f001 fd13 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2101      	movs	r1, #1
 8000e06:	486b      	ldr	r0, [pc, #428]	@ (8000fb4 <MX_GPIO_Init+0x300>)
 8000e08:	f001 fd0e 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8000e12:	4869      	ldr	r0, [pc, #420]	@ (8000fb8 <MX_GPIO_Init+0x304>)
 8000e14:	f001 fd08 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	21c0      	movs	r1, #192	@ 0xc0
 8000e1c:	4867      	ldr	r0, [pc, #412]	@ (8000fbc <MX_GPIO_Init+0x308>)
 8000e1e:	f001 fd03 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000e22:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4858      	ldr	r0, [pc, #352]	@ (8000f9c <MX_GPIO_Init+0x2e8>)
 8000e3c:	f001 fb30 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8000e40:	f640 0338 	movw	r3, #2104	@ 0x838
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4851      	ldr	r0, [pc, #324]	@ (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000e5a:	f001 fb21 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4853      	ldr	r0, [pc, #332]	@ (8000fc0 <MX_GPIO_Init+0x30c>)
 8000e72:	f001 fb15 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e76:	2310      	movs	r3, #16
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e86:	4619      	mov	r1, r3
 8000e88:	4849      	ldr	r0, [pc, #292]	@ (8000fb0 <MX_GPIO_Init+0x2fc>)
 8000e8a:	f001 fb09 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4841      	ldr	r0, [pc, #260]	@ (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000ea2:	f001 fafd 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4838      	ldr	r0, [pc, #224]	@ (8000f9c <MX_GPIO_Init+0x2e8>)
 8000ebc:	f001 faf0 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4834      	ldr	r0, [pc, #208]	@ (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000ed4:	f001 fae4 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ed8:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482c      	ldr	r0, [pc, #176]	@ (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000ef2:	f001 fad5 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4826      	ldr	r0, [pc, #152]	@ (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000f10:	f001 fac6 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f14:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481f      	ldr	r0, [pc, #124]	@ (8000fac <MX_GPIO_Init+0x2f8>)
 8000f2e:	f001 fab7 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4819      	ldr	r0, [pc, #100]	@ (8000fb0 <MX_GPIO_Init+0x2fc>)
 8000f4c:	f001 faa8 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f64:	4619      	mov	r1, r3
 8000f66:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <MX_GPIO_Init+0x300>)
 8000f68:	f001 fa9a 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f6c:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <MX_GPIO_Init+0x304>)
 8000f86:	f001 fa8b 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f8a:	23c0      	movs	r3, #192	@ 0xc0
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e016      	b.n	8000fc4 <MX_GPIO_Init+0x310>
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40022400 	.word	0x40022400
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40022800 	.word	0x40022800
 8000fc0:	40021c00 	.word	0x40021c00
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <MX_GPIO_Init+0x32c>)
 8000fd2:	f001 fa65 	bl	80024a0 <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3740      	adds	r7, #64	@ 0x40
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022800 	.word	0x40022800

08000fe4 <nRF24_TxPacket>:


}


void nRF24_TxPacket(nRF24_Handler_t *device, uint8_t* Buf, uint32_t Len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff6:	4822      	ldr	r0, [pc, #136]	@ (8001080 <nRF24_TxPacket+0x9c>)
 8000ff8:	f001 fc16 	bl	8002828 <HAL_GPIO_WritePin>

	for(uint32_t i = 0; i < Len; i++)	{
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00c      	b.n	800101c <nRF24_TxPacket+0x38>
		device->tx_data[i] = *Buf++;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	7819      	ldrb	r1, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	3316      	adds	r3, #22
 8001012:	460a      	mov	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < Len; i++)	{
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3ee      	bcc.n	8001002 <nRF24_TxPacket+0x1e>
	}


	nRF24_WritePayload(device, device->tx_data, Len);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3316      	adds	r3, #22
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	4619      	mov	r1, r3
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f008 f8b7 	bl	80091a2 <nRF24_WritePayload>
	nRF24_CE_State(device, GPIO_PIN_SET);
 8001034:	2101      	movs	r1, #1
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f007 fc95 	bl	8008966 <nRF24_CE_State>

	while(!(status & (nRF24_FLAG_TX_DS)))	{
 800103c:	e006      	b.n	800104c <nRF24_TxPacket+0x68>
		status = nRF24_GetStatus(device);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f008 f833 	bl	80090aa <nRF24_GetStatus>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <nRF24_TxPacket+0xa0>)
 800104a:	701a      	strb	r2, [r3, #0]
	while(!(status & (nRF24_FLAG_TX_DS)))	{
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <nRF24_TxPacket+0xa0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f003 0320 	and.w	r3, r3, #32
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f2      	beq.n	800103e <nRF24_TxPacket+0x5a>
	}

	nRF24_ClearIRQFlagsTx(device);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f008 f872 	bl	8009142 <nRF24_ClearIRQFlagsTx>
	nRF24_FlushTX(device);
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f008 f83d 	bl	80090de <nRF24_FlushTX>

	nRF24_CE_State(device, GPIO_PIN_RESET);
 8001064:	2100      	movs	r1, #0
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f007 fc7d 	bl	8008966 <nRF24_CE_State>

	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <nRF24_TxPacket+0x9c>)
 8001074:	f001 fbd8 	bl	8002828 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40022000 	.word	0x40022000
 8001084:	2000035b 	.word	0x2000035b

08001088 <setSpeed>:
//}


float v_vel[3];
void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8001094:	4bb1      	ldr	r3, [pc, #708]	@ (800135c <setSpeed+0x2d4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800109a:	4bb0      	ldr	r3, [pc, #704]	@ (800135c <setSpeed+0x2d4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	da16      	bge.n	80010da <setSpeed+0x52>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3304      	adds	r3, #4
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010c2:	4313      	orrs	r3, r2
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	eeb1 7a67 	vneg.f32	s14, s15
 80010d0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001360 <setSpeed+0x2d8>
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	e013      	b.n	8001102 <setSpeed+0x7a>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3304      	adds	r3, #4
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010f0:	4313      	orrs	r3, r2
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fa:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8001360 <setSpeed+0x2d8>
 80010fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001102:	4b96      	ldr	r3, [pc, #600]	@ (800135c <setSpeed+0x2d4>)
 8001104:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3302      	adds	r3, #2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	da16      	bge.n	8001142 <setSpeed+0xba>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3304      	adds	r3, #4
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3302      	adds	r3, #2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800112a:	4313      	orrs	r3, r2
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	eeb1 7a67 	vneg.f32	s14, s15
 8001138:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8001360 <setSpeed+0x2d8>
 800113c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001140:	e013      	b.n	800116a <setSpeed+0xe2>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3302      	adds	r3, #2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001158:	4313      	orrs	r3, r2
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8001360 <setSpeed+0x2d8>
 8001166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116a:	4b7c      	ldr	r3, [pc, #496]	@ (800135c <setSpeed+0x2d4>)
 800116c:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3303      	adds	r3, #3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b25b      	sxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	da16      	bge.n	80011aa <setSpeed+0x122>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3304      	adds	r3, #4
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	01db      	lsls	r3, r3, #7
 8001184:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3303      	adds	r3, #3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001192:	4313      	orrs	r3, r2
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	eeb1 7a67 	vneg.f32	s14, s15
 80011a0:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8001360 <setSpeed+0x2d8>
 80011a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a8:	e013      	b.n	80011d2 <setSpeed+0x14a>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3304      	adds	r3, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	01db      	lsls	r3, r3, #7
 80011b2:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3303      	adds	r3, #3
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011c0:	4313      	orrs	r3, r2
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001360 <setSpeed+0x2d8>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	4b62      	ldr	r3, [pc, #392]	@ (800135c <setSpeed+0x2d4>)
 80011d4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 80011d8:	4b60      	ldr	r3, [pc, #384]	@ (800135c <setSpeed+0x2d4>)
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	edc7 7a08 	vstr	s15, [r7, #32]
 80011ea:	4b5c      	ldr	r3, [pc, #368]	@ (800135c <setSpeed+0x2d4>)
 80011ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80011f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 80011fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001200:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001204:	edd7 7a07 	vldr	s15, [r7, #28]
 8001208:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800120c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001210:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8001214:	edd7 7a06 	vldr	s15, [r7, #24]
 8001218:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800121c:	eeb0 0b47 	vmov.f64	d0, d7
 8001220:	f008 f9d2 	bl	80095c8 <sqrt>
 8001224:	eeb0 7b40 	vmov.f64	d7, d0
 8001228:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800122c:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 8001230:	edd7 6a08 	vldr	s13, [r7, #32]
 8001234:	ed97 7a06 	vldr	s14, [r7, #24]
 8001238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001240:	edd7 6a07 	vldr	s13, [r7, #28]
 8001244:	ed97 7a06 	vldr	s14, [r7, #24]
 8001248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124c:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 8001250:	edd7 7a06 	vldr	s15, [r7, #24]
 8001254:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001364 <setSpeed+0x2dc>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	dd23      	ble.n	80012aa <setSpeed+0x222>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 8001262:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <setSpeed+0x2e0>)
 8001264:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 8001266:	ed97 7a05 	vldr	s14, [r7, #20]
 800126a:	edd7 7a06 	vldr	s15, [r7, #24]
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 8001276:	ed97 7a04 	vldr	s14, [r7, #16]
 800127a:	edd7 7a06 	vldr	s15, [r7, #24]
 800127e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001282:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 8001286:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800128a:	edd7 7a08 	vldr	s15, [r7, #32]
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	4b32      	ldr	r3, [pc, #200]	@ (800135c <setSpeed+0x2d4>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 8001298:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800129c:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a4:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <setSpeed+0x2d4>)
 80012a6:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80012b0:	e04b      	b.n	800134a <setSpeed+0x2c2>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
		for (uint8_t j = 0; j < 3; j++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012be:	e020      	b.n	8001302 <setSpeed+0x27a>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 80012c0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80012c4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012c8:	4828      	ldr	r0, [pc, #160]	@ (800136c <setSpeed+0x2e4>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4403      	add	r3, r0
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012de:	4a1f      	ldr	r2, [pc, #124]	@ (800135c <setSpeed+0x2d4>)
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ec:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		for (uint8_t j = 0; j < 3; j++)
 80012f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012fc:	3301      	adds	r3, #1
 80012fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001306:	2b02      	cmp	r3, #2
 8001308:	d9da      	bls.n	80012c0 <setSpeed+0x238>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 800130a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	bfcc      	ite	gt
 8001318:	2301      	movgt	r3, #1
 800131a:	2300      	movle	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 8001332:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800133e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8001340:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001344:	3301      	adds	r3, #1
 8001346:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800134a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800134e:	2b03      	cmp	r3, #3
 8001350:	d9af      	bls.n	80012b2 <setSpeed+0x22a>
	}
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	@ 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000608 	.word	0x20000608
 8001360:	42c80000 	.word	0x42c80000
 8001364:	3dcccccd 	.word	0x3dcccccd
 8001368:	3dcccccd 	.word	0x3dcccccd
 800136c:	20000374 	.word	0x20000374

08001370 <getDribbler_speed>:

uint8_t getDribbler_speed(uint8_t *buffer)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	109b      	asrs	r3, r3, #2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	105b      	asrs	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <BallDetectorFunction>:

uint16_t ball_range;
uint16_t ball_accum;
uint8_t ball_meas_set[10];

void BallDetectorFunction(void const * argument) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  //uint32_t timeToWait = osKernelSysTick();
  VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 80013c0:	2229      	movs	r2, #41	@ 0x29
 80013c2:	4928      	ldr	r1, [pc, #160]	@ (8001464 <BallDetectorFunction+0xac>)
 80013c4:	4828      	ldr	r0, [pc, #160]	@ (8001468 <BallDetectorFunction+0xb0>)
 80013c6:	f007 ff90 	bl	80092ea <VL6180X_Init>
  ball_range = VL6180X_ReadRange(&range_sensor);
 80013ca:	4827      	ldr	r0, [pc, #156]	@ (8001468 <BallDetectorFunction+0xb0>)
 80013cc:	f008 f88f 	bl	80094ee <VL6180X_ReadRange>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b25      	ldr	r3, [pc, #148]	@ (800146c <BallDetectorFunction+0xb4>)
 80013d6:	801a      	strh	r2, [r3, #0]
  memset(ball_meas_set, ball_range, 10);
 80013d8:	4b24      	ldr	r3, [pc, #144]	@ (800146c <BallDetectorFunction+0xb4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	220a      	movs	r2, #10
 80013de:	4619      	mov	r1, r3
 80013e0:	4823      	ldr	r0, [pc, #140]	@ (8001470 <BallDetectorFunction+0xb8>)
 80013e2:	f008 f8b1 	bl	8009548 <memset>

  for (;;) {
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 80013e6:	4820      	ldr	r0, [pc, #128]	@ (8001468 <BallDetectorFunction+0xb0>)
 80013e8:	f008 f881 	bl	80094ee <VL6180X_ReadRange>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <BallDetectorFunction+0xb8>)
 80013f2:	701a      	strb	r2, [r3, #0]
    ball_accum = ball_meas_set[0];
 80013f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <BallDetectorFunction+0xb8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <BallDetectorFunction+0xbc>)
 80013fc:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 9; i > 0; i--) {
 80013fe:	2309      	movs	r3, #9
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e013      	b.n	800142c <BallDetectorFunction+0x74>
      ball_accum += ball_meas_set[i];
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <BallDetectorFunction+0xb8>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	461a      	mov	r2, r3
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <BallDetectorFunction+0xbc>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4413      	add	r3, r2
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <BallDetectorFunction+0xbc>)
 8001416:	801a      	strh	r2, [r3, #0]
      ball_meas_set[i] = ball_meas_set[i - 1];
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4914      	ldr	r1, [pc, #80]	@ (8001470 <BallDetectorFunction+0xb8>)
 8001420:	5c89      	ldrb	r1, [r1, r2]
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <BallDetectorFunction+0xb8>)
 8001424:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 9; i > 0; i--) {
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3b01      	subs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e8      	bne.n	8001404 <BallDetectorFunction+0x4c>
    }
    ball_range = ball_accum / 10;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <BallDetectorFunction+0xbc>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	4a10      	ldr	r2, [pc, #64]	@ (8001478 <BallDetectorFunction+0xc0>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <BallDetectorFunction+0xb4>)
 8001442:	801a      	strh	r2, [r3, #0]
    if (ball_range < VL6180X_THRESHOLD) {
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <BallDetectorFunction+0xb4>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2b40      	cmp	r3, #64	@ 0x40
 800144a:	d803      	bhi.n	8001454 <BallDetectorFunction+0x9c>
      ball_posession = 0x01;
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <BallDetectorFunction+0xc4>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e002      	b.n	800145a <BallDetectorFunction+0xa2>
    }
    else ball_posession = 0x00;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <BallDetectorFunction+0xc4>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f004 f9c2 	bl	80057e4 <osDelay>
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 8001460:	e7c1      	b.n	80013e6 <BallDetectorFunction+0x2e>
 8001462:	bf00      	nop
 8001464:	20000154 	.word	0x20000154
 8001468:	200005f4 	.word	0x200005f4
 800146c:	20000614 	.word	0x20000614
 8001470:	20000618 	.word	0x20000618
 8001474:	20000616 	.word	0x20000616
 8001478:	cccccccd 	.word	0xcccccccd
 800147c:	20000604 	.word	0x20000604

08001480 <DriveFunction>:
	*/

osEvent kick_event;
/* USER CODE END Header_DriveFunction */
void DriveFunction(void const * argument)
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b098      	sub	sp, #96	@ 0x60
 8001484:	af06      	add	r7, sp, #24
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Init PID sampler */
	uint32_t timeToWait = osKernelSysTick();
 8001488:	f004 f975 	bl	8005776 <osKernelSysTick>
 800148c:	4603      	mov	r3, r0
 800148e:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Init robot_id */
	robot_id = Board_GetID();
 8001490:	f007 f8c0 	bl	8008614 <Board_GetID>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4bbd      	ldr	r3, [pc, #756]	@ (8001790 <DriveFunction+0x310>)
 800149a:	801a      	strh	r2, [r3, #0]
	
	/* Init wheels motors DAC: 2.0[V] ref */
	MAX581x_Handler_t driveDAC;
	MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 800149c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014a0:	2202      	movs	r2, #2
 80014a2:	49bc      	ldr	r1, [pc, #752]	@ (8001794 <DriveFunction+0x314>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f006 ff41 	bl	800832c <MAX581x_Init>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 80014aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f006 ff89 	bl	80083ca <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 80014b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 ff82 	bl	80083ca <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 80014c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ca:	2200      	movs	r2, #0
 80014cc:	2102      	movs	r1, #2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f006 ff7b 	bl	80083ca <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 80014d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014d8:	2200      	movs	r2, #0
 80014da:	2103      	movs	r1, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	f006 ff74 	bl	80083ca <MAX581x_Code>
	
	/* Init dribbler motor DAC: 2.0[V] ref */
	MAX581x_Handler_t dribblerDAC;
	MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 80014e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e6:	2202      	movs	r2, #2
 80014e8:	49ab      	ldr	r1, [pc, #684]	@ (8001798 <DriveFunction+0x318>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 ff1e 	bl	800832c <MAX581x_Init>
	MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 80014f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 ff66 	bl	80083ca <MAX581x_Code>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001504:	48a5      	ldr	r0, [pc, #660]	@ (800179c <DriveFunction+0x31c>)
 8001506:	f001 f98f 	bl	8002828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	48a3      	ldr	r0, [pc, #652]	@ (800179c <DriveFunction+0x31c>)
 8001510:	f001 f98a 	bl	8002828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	48a0      	ldr	r0, [pc, #640]	@ (800179c <DriveFunction+0x31c>)
 800151a:	f001 f985 	bl	8002828 <HAL_GPIO_WritePin>
	
	/* Config motors GPIO and TIM */
	/* Motor 1 */
	motor[0].enablePin.GPIOx = GPIOA;
 800151e:	4ba0      	ldr	r3, [pc, #640]	@ (80017a0 <DriveFunction+0x320>)
 8001520:	4aa0      	ldr	r2, [pc, #640]	@ (80017a4 <DriveFunction+0x324>)
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
	motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 8001524:	4b9e      	ldr	r3, [pc, #632]	@ (80017a0 <DriveFunction+0x320>)
 8001526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800152a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	motor[0].dirPin.GPIOx = GPIOA;
 800152e:	4b9c      	ldr	r3, [pc, #624]	@ (80017a0 <DriveFunction+0x320>)
 8001530:	4a9c      	ldr	r2, [pc, #624]	@ (80017a4 <DriveFunction+0x324>)
 8001532:	65da      	str	r2, [r3, #92]	@ 0x5c
	motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 8001534:	4b9a      	ldr	r3, [pc, #616]	@ (80017a0 <DriveFunction+0x320>)
 8001536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	motor[0].brakePin.GPIOx = GPIOA;
 800153e:	4b98      	ldr	r3, [pc, #608]	@ (80017a0 <DriveFunction+0x320>)
 8001540:	4a98      	ldr	r2, [pc, #608]	@ (80017a4 <DriveFunction+0x324>)
 8001542:	665a      	str	r2, [r3, #100]	@ 0x64
	motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 8001544:	4b96      	ldr	r3, [pc, #600]	@ (80017a0 <DriveFunction+0x320>)
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	
	motor[0].encoder.count = &TIM3->CNT;
 800154e:	4b94      	ldr	r3, [pc, #592]	@ (80017a0 <DriveFunction+0x320>)
 8001550:	4a95      	ldr	r2, [pc, #596]	@ (80017a8 <DriveFunction+0x328>)
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
	motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 8001554:	4b95      	ldr	r3, [pc, #596]	@ (80017ac <DriveFunction+0x32c>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001560:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001568:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80017b0 <DriveFunction+0x330>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	4b8b      	ldr	r3, [pc, #556]	@ (80017a0 <DriveFunction+0x320>)
 8001572:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 8001576:	4b8a      	ldr	r3, [pc, #552]	@ (80017a0 <DriveFunction+0x320>)
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800157e:	4b88      	ldr	r3, [pc, #544]	@ (80017a0 <DriveFunction+0x320>)
 8001580:	4a8c      	ldr	r2, [pc, #560]	@ (80017b4 <DriveFunction+0x334>)
 8001582:	64da      	str	r2, [r3, #76]	@ 0x4c
	TIM3->CR1 = TIM_CR1_CEN;
 8001584:	4b89      	ldr	r3, [pc, #548]	@ (80017ac <DriveFunction+0x32c>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
	
	/* Motor 2 */
	motor[1].enablePin.GPIOx = GPIOC;
 800158a:	4b85      	ldr	r3, [pc, #532]	@ (80017a0 <DriveFunction+0x320>)
 800158c:	4a8a      	ldr	r2, [pc, #552]	@ (80017b8 <DriveFunction+0x338>)
 800158e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 8001592:	4b83      	ldr	r3, [pc, #524]	@ (80017a0 <DriveFunction+0x320>)
 8001594:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001598:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor[1].dirPin.GPIOx = GPIOC;
 800159c:	4b80      	ldr	r3, [pc, #512]	@ (80017a0 <DriveFunction+0x320>)
 800159e:	4a86      	ldr	r2, [pc, #536]	@ (80017b8 <DriveFunction+0x338>)
 80015a0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 80015a4:	4b7e      	ldr	r3, [pc, #504]	@ (80017a0 <DriveFunction+0x320>)
 80015a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015aa:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
	motor[1].brakePin.GPIOx = GPIOD;
 80015ae:	4b7c      	ldr	r3, [pc, #496]	@ (80017a0 <DriveFunction+0x320>)
 80015b0:	4a82      	ldr	r2, [pc, #520]	@ (80017bc <DriveFunction+0x33c>)
 80015b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 80015b6:	4b7a      	ldr	r3, [pc, #488]	@ (80017a0 <DriveFunction+0x320>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
	
	motor[1].encoder.count = &TIM8->CNT;
 80015be:	4b78      	ldr	r3, [pc, #480]	@ (80017a0 <DriveFunction+0x320>)
 80015c0:	4a7f      	ldr	r2, [pc, #508]	@ (80017c0 <DriveFunction+0x340>)
 80015c2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 80015c6:	4b7f      	ldr	r3, [pc, #508]	@ (80017c4 <DriveFunction+0x344>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80017b0 <DriveFunction+0x330>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <DriveFunction+0x320>)
 80015e4:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 80015e8:	4b6d      	ldr	r3, [pc, #436]	@ (80017a0 <DriveFunction+0x320>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
	motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80015f0:	4b6b      	ldr	r3, [pc, #428]	@ (80017a0 <DriveFunction+0x320>)
 80015f2:	4a70      	ldr	r2, [pc, #448]	@ (80017b4 <DriveFunction+0x334>)
 80015f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	TIM8->CR1 = TIM_CR1_CEN;
 80015f8:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <DriveFunction+0x344>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
	
	/* Motor 3 */
	motor[2].enablePin.GPIOx = GPIOK;
 80015fe:	4b68      	ldr	r3, [pc, #416]	@ (80017a0 <DriveFunction+0x320>)
 8001600:	4a71      	ldr	r2, [pc, #452]	@ (80017c8 <DriveFunction+0x348>)
 8001602:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 8001606:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <DriveFunction+0x320>)
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
	motor[2].dirPin.GPIOx = GPIOG;
 800160e:	4b64      	ldr	r3, [pc, #400]	@ (80017a0 <DriveFunction+0x320>)
 8001610:	4a6e      	ldr	r2, [pc, #440]	@ (80017cc <DriveFunction+0x34c>)
 8001612:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 8001616:	4b62      	ldr	r3, [pc, #392]	@ (80017a0 <DriveFunction+0x320>)
 8001618:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800161c:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	motor[2].brakePin.GPIOx = GPIOK;
 8001620:	4b5f      	ldr	r3, [pc, #380]	@ (80017a0 <DriveFunction+0x320>)
 8001622:	4a69      	ldr	r2, [pc, #420]	@ (80017c8 <DriveFunction+0x348>)
 8001624:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 8001628:	4b5d      	ldr	r3, [pc, #372]	@ (80017a0 <DriveFunction+0x320>)
 800162a:	2240      	movs	r2, #64	@ 0x40
 800162c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	
	motor[2].encoder.count = &TIM2->CNT;
 8001630:	4b5b      	ldr	r3, [pc, #364]	@ (80017a0 <DriveFunction+0x320>)
 8001632:	4a67      	ldr	r2, [pc, #412]	@ (80017d0 <DriveFunction+0x350>)
 8001634:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 8001638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001646:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80017b0 <DriveFunction+0x330>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	4b52      	ldr	r3, [pc, #328]	@ (80017a0 <DriveFunction+0x320>)
 8001658:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
	motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 800165c:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <DriveFunction+0x320>)
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8001664:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <DriveFunction+0x320>)
 8001666:	4a53      	ldr	r2, [pc, #332]	@ (80017b4 <DriveFunction+0x334>)
 8001668:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	TIM2->CR1 = TIM_CR1_CEN;
 800166c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
	
	/* Motor 4 */
	motor[3].enablePin.GPIOx = GPIOF;
 8001674:	4b4a      	ldr	r3, [pc, #296]	@ (80017a0 <DriveFunction+0x320>)
 8001676:	4a57      	ldr	r2, [pc, #348]	@ (80017d4 <DriveFunction+0x354>)
 8001678:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
	motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 800167c:	4b48      	ldr	r3, [pc, #288]	@ (80017a0 <DriveFunction+0x320>)
 800167e:	2220      	movs	r2, #32
 8001680:	f8a3 21cc 	strh.w	r2, [r3, #460]	@ 0x1cc
	motor[3].dirPin.GPIOx = GPIOF;
 8001684:	4b46      	ldr	r3, [pc, #280]	@ (80017a0 <DriveFunction+0x320>)
 8001686:	4a53      	ldr	r2, [pc, #332]	@ (80017d4 <DriveFunction+0x354>)
 8001688:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 800168c:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <DriveFunction+0x320>)
 800168e:	2208      	movs	r2, #8
 8001690:	f8a3 21d4 	strh.w	r2, [r3, #468]	@ 0x1d4
	motor[3].brakePin.GPIOx = GPIOF;
 8001694:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <DriveFunction+0x320>)
 8001696:	4a4f      	ldr	r2, [pc, #316]	@ (80017d4 <DriveFunction+0x354>)
 8001698:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
	motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 800169c:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <DriveFunction+0x320>)
 800169e:	2210      	movs	r2, #16
 80016a0:	f8a3 21dc 	strh.w	r2, [r3, #476]	@ 0x1dc

	motor[3].encoder.count = &TIM5->CNT;
 80016a4:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <DriveFunction+0x320>)
 80016a6:	4a4c      	ldr	r2, [pc, #304]	@ (80017d8 <DriveFunction+0x358>)
 80016a8:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
	motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <DriveFunction+0x35c>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016b8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80016bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80017b0 <DriveFunction+0x330>
 80016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c8:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <DriveFunction+0x320>)
 80016ca:	edc3 7a6e 	vstr	s15, [r3, #440]	@ 0x1b8
	motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <DriveFunction+0x320>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4
	motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80016d6:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <DriveFunction+0x320>)
 80016d8:	4a36      	ldr	r2, [pc, #216]	@ (80017b4 <DriveFunction+0x334>)
 80016da:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
	TIM5->CR1 = TIM_CR1_CEN;
 80016de:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <DriveFunction+0x35c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
	
	/* Config PID */
	PID_Params_t pidParams;
	pidParams.Kp = 12.0f;
 80016e4:	4b3e      	ldr	r3, [pc, #248]	@ (80017e0 <DriveFunction+0x360>)
 80016e6:	60fb      	str	r3, [r7, #12]
	pidParams.Ki = 4.5f;
 80016e8:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <DriveFunction+0x364>)
 80016ea:	613b      	str	r3, [r7, #16]
	pidParams.Kd = 0.0f;
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
	pidParams.outputMax = (float)(/*WHEEL_MAX_SPEED_RAD * 10.0f*/ 4095.0f);
 80016f2:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <DriveFunction+0x368>)
 80016f4:	61bb      	str	r3, [r7, #24]
	pidParams.outputMin = (float)(/*-WHEEL_MAX_SPEED_RAD * 10.0f*/ -4095.0f);
 80016f6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <DriveFunction+0x36c>)
 80016f8:	61fb      	str	r3, [r7, #28]
	pidParams.integralMax = pidParams.outputMax / 5.0f;
 80016fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80016fe:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001706:	edc7 7a08 	vstr	s15, [r7, #32]
	pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <DriveFunction+0x370>)
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24


	/* Enable motors and disable brake */
	for (uint8_t i = 0; i < 4; i++)
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001714:	e034      	b.n	8001780 <DriveFunction+0x300>
	{
		Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 8001716:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800171a:	4613      	mov	r3, r2
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <DriveFunction+0x320>)
 8001724:	4413      	add	r3, r2
 8001726:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800172a:	2201      	movs	r2, #1
 800172c:	4618      	mov	r0, r3
 800172e:	f007 f813 	bl	8008758 <Motor_Init>
		Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 8001732:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001736:	4613      	mov	r3, r2
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4a18      	ldr	r2, [pc, #96]	@ (80017a0 <DriveFunction+0x320>)
 8001740:	4413      	add	r3, r2
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f007 f89f 	bl	8008888 <Motor_SetBrake>
		PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 800174a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800174e:	4613      	mov	r3, r2
 8001750:	015b      	lsls	r3, r3, #5
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <DriveFunction+0x320>)
 8001758:	189d      	adds	r5, r3, r2
 800175a:	2301      	movs	r3, #1
 800175c:	9304      	str	r3, [sp, #16]
 800175e:	466c      	mov	r4, sp
 8001760:	f107 0318 	add.w	r3, r7, #24
 8001764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001770:	4628      	mov	r0, r5
 8001772:	f006 fe6d 	bl	8008450 <PID_Init>
	for (uint8_t i = 0; i < 4; i++)
 8001776:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800177a:	3301      	adds	r3, #1
 800177c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001780:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001784:	2b03      	cmp	r3, #3
 8001786:	d9c6      	bls.n	8001716 <DriveFunction+0x296>

	//Motor_Enable(&motor[0], MOTOR_STATUS_ENABLE);
	/* Infinite loop */
	for(;;)
	{						
		for (uint8_t i = 0; i < 4; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800178e:	e059      	b.n	8001844 <DriveFunction+0x3c4>
 8001790:	20000358 	.word	0x20000358
 8001794:	200000ac 	.word	0x200000ac
 8001798:	20000100 	.word	0x20000100
 800179c:	40022400 	.word	0x40022400
 80017a0:	200003a4 	.word	0x200003a4
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40000424 	.word	0x40000424
 80017ac:	40000400 	.word	0x40000400
 80017b0:	45000000 	.word	0x45000000
 80017b4:	3f714639 	.word	0x3f714639
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40010424 	.word	0x40010424
 80017c4:	40010400 	.word	0x40010400
 80017c8:	40022800 	.word	0x40022800
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40000024 	.word	0x40000024
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40000c24 	.word	0x40000c24
 80017dc:	40000c00 	.word	0x40000c00
 80017e0:	41400000 	.word	0x41400000
 80017e4:	40900000 	.word	0x40900000
 80017e8:	457ff000 	.word	0x457ff000
 80017ec:	c57ff000 	.word	0xc57ff000
 80017f0:	3a83126f 	.word	0x3a83126f
		{
			/* Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine */
			Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 80017f4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80017f8:	4613      	mov	r3, r2
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4a2a      	ldr	r2, [pc, #168]	@ (80018ac <DriveFunction+0x42c>)
 8001802:	441a      	add	r2, r3
 8001804:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001808:	4929      	ldr	r1, [pc, #164]	@ (80018b0 <DriveFunction+0x430>)
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	4619      	mov	r1, r3
 800181c:	4610      	mov	r0, r2
 800181e:	f006 ffbd 	bl	800879c <Motor_CLDrive>
			
			/* TODO: make dribbler files, variable speeds */
			MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <DriveFunction+0x434>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <DriveFunction+0x438>)
 800182a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800182e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f006 fdc8 	bl	80083ca <MAX581x_Code>
		for (uint8_t i = 0; i < 4; i++)
 800183a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800183e:	3301      	adds	r3, #1
 8001840:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001844:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001848:	2b03      	cmp	r3, #3
 800184a:	d9d3      	bls.n	80017f4 <DriveFunction+0x374>
		}

    if(ball_posession && kick_sel && kick_flag == KICKER_CHARGED) {
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <DriveFunction+0x43c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01d      	beq.n	8001890 <DriveFunction+0x410>
 8001854:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <DriveFunction+0x440>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d019      	beq.n	8001890 <DriveFunction+0x410>
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <DriveFunction+0x444>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d115      	bne.n	8001890 <DriveFunction+0x410>
      osMutexWait(kickFlagHandle, osWaitForever);
 8001864:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <DriveFunction+0x448>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	4618      	mov	r0, r3
 800186e:	f003 ffd9 	bl	8005824 <osMutexWait>
      kick_flag = KICKER_START;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <DriveFunction+0x444>)
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
      osMutexRelease(kickFlagHandle);
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <DriveFunction+0x448>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f004 f81f 	bl	80058c0 <osMutexRelease>
      osMessagePut(kickQueueHandle, 0, 0);
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <DriveFunction+0x44c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 f860 	bl	8005950 <osMessagePut>
    }   
		
		osMessagePut(nrf24CheckHandle, 0, 0);
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <DriveFunction+0x450>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f004 f859 	bl	8005950 <osMessagePut>
		osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 800189e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018a2:	2101      	movs	r1, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 f907 	bl	8005ab8 <osDelayUntil>
		for (uint8_t i = 0; i < 4; i++)
 80018aa:	e76d      	b.n	8001788 <DriveFunction+0x308>
 80018ac:	200003a4 	.word	0x200003a4
 80018b0:	20000364 	.word	0x20000364
 80018b4:	20000594 	.word	0x20000594
 80018b8:	080096c8 	.word	0x080096c8
 80018bc:	20000604 	.word	0x20000604
 80018c0:	20000595 	.word	0x20000595
 80018c4:	20000596 	.word	0x20000596
 80018c8:	2000034c 	.word	0x2000034c
 80018cc:	20000348 	.word	0x20000348
 80018d0:	20000354 	.word	0x20000354

080018d4 <RadioFunction>:
* @param argument: Not used
* @retval None
*/

/* USER CODE END Header_RadioFunction */
void RadioFunction(void const * argument) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN RadioFunction */


	nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 80018dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	4b71      	ldr	r3, [pc, #452]	@ (8001aa8 <RadioFunction+0x1d4>)
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ea:	4a6f      	ldr	r2, [pc, #444]	@ (8001aa8 <RadioFunction+0x1d4>)
 80018ec:	496f      	ldr	r1, [pc, #444]	@ (8001aac <RadioFunction+0x1d8>)
 80018ee:	4870      	ldr	r0, [pc, #448]	@ (8001ab0 <RadioFunction+0x1dc>)
 80018f0:	f007 f85d 	bl	80089ae <nRF24_HW_Init>
	nRF24_Init(&nrf_device);
 80018f4:	486e      	ldr	r0, [pc, #440]	@ (8001ab0 <RadioFunction+0x1dc>)
 80018f6:	f007 f946 	bl	8008b86 <nRF24_Init>

	// Configurar dirección y canal de RF
	nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 80018fa:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab4 <RadioFunction+0x1e0>)
 80018fc:	2100      	movs	r1, #0
 80018fe:	486c      	ldr	r0, [pc, #432]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001900:	f007 f9fc 	bl	8008cfc <nRF24_SetAddr>
	nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 8001904:	216a      	movs	r1, #106	@ 0x6a
 8001906:	486a      	ldr	r0, [pc, #424]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001908:	f007 f9e8 	bl	8008cdc <nRF24_SetRFChannel>
	nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 800190c:	231e      	movs	r3, #30
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	4867      	ldr	r0, [pc, #412]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001914:	f007 fb42 	bl	8008f9c <nRF24_SetRXPipe>

	// Encender y configurar en modo RX
	nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 8001918:	2102      	movs	r1, #2
 800191a:	4865      	ldr	r0, [pc, #404]	@ (8001ab0 <RadioFunction+0x1dc>)
 800191c:	f007 f998 	bl	8008c50 <nRF24_SetPowerMode>
	nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 8001920:	2101      	movs	r1, #1
 8001922:	4863      	ldr	r0, [pc, #396]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001924:	f007 f9b6 	bl	8008c94 <nRF24_SetOperationalMode>
	nRF24_RX_ON(&nrf_device);
 8001928:	2101      	movs	r1, #1
 800192a:	4861      	ldr	r0, [pc, #388]	@ (8001ab0 <RadioFunction+0x1dc>)
 800192c:	f007 f81b 	bl	8008966 <nRF24_CE_State>
	
	memset(nrf_device.rx_data, 0, 32);
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	4860      	ldr	r0, [pc, #384]	@ (8001ab8 <RadioFunction+0x1e4>)
 8001936:	f007 fe07 	bl	8009548 <memset>

	// Configurar el canal de transmisión una vez al inicio
	nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 800193a:	2106      	movs	r1, #6
 800193c:	485c      	ldr	r0, [pc, #368]	@ (8001ab0 <RadioFunction+0x1dc>)
 800193e:	f007 fb89 	bl	8009054 <nRF24_DisableAA>
	//robot pipe
	//tx_node_addr[4]=Board_GetID();
	tx_node_addr[4]=0;
 8001942:	4b5e      	ldr	r3, [pc, #376]	@ (8001abc <RadioFunction+0x1e8>)
 8001944:	2200      	movs	r2, #0
 8001946:	711a      	strb	r2, [r3, #4]
	nRF24_SetAddr(&nrf_device, nRF24_PIPETX, tx_node_addr);
 8001948:	4a5c      	ldr	r2, [pc, #368]	@ (8001abc <RadioFunction+0x1e8>)
 800194a:	2106      	movs	r1, #6
 800194c:	4858      	ldr	r0, [pc, #352]	@ (8001ab0 <RadioFunction+0x1dc>)
 800194e:	f007 f9d5 	bl	8008cfc <nRF24_SetAddr>
	config = nRF24_GetConfig(&nrf_device);
 8001952:	4857      	ldr	r0, [pc, #348]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001954:	f007 fbb6 	bl	80090c4 <nRF24_GetConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b58      	ldr	r3, [pc, #352]	@ (8001ac0 <RadioFunction+0x1ec>)
 800195e:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for(;;) {
	osMessageGet(nrf24CheckHandle, osWaitForever);
 8001960:	4b58      	ldr	r3, [pc, #352]	@ (8001ac4 <RadioFunction+0x1f0>)
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	463b      	mov	r3, r7
 8001966:	f04f 32ff 	mov.w	r2, #4294967295
 800196a:	4618      	mov	r0, r3
 800196c:	f004 f830 	bl	80059d0 <osMessageGet>
	status = nRF24_GetStatus(&nrf_device);
 8001970:	484f      	ldr	r0, [pc, #316]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001972:	f007 fb9a 	bl	80090aa <nRF24_GetStatus>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <RadioFunction+0x1f4>)
 800197c:	701a      	strb	r2, [r3, #0]
	config = nRF24_GetConfig(&nrf_device);
 800197e:	484c      	ldr	r0, [pc, #304]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001980:	f007 fba0 	bl	80090c4 <nRF24_GetConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <RadioFunction+0x1ec>)
 800198a:	701a      	strb	r2, [r3, #0]


	if (status & nRF24_FLAG_RX_DR) {
 800198c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac8 <RadioFunction+0x1f4>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0e3      	beq.n	8001960 <RadioFunction+0x8c>
		nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 8001998:	4a4c      	ldr	r2, [pc, #304]	@ (8001acc <RadioFunction+0x1f8>)
 800199a:	4947      	ldr	r1, [pc, #284]	@ (8001ab8 <RadioFunction+0x1e4>)
 800199c:	4844      	ldr	r0, [pc, #272]	@ (8001ab0 <RadioFunction+0x1dc>)
 800199e:	f007 fc11 	bl	80091c4 <nRF24_ReadPayload>
		nRF24_FlushRX(&nrf_device);
 80019a2:	4843      	ldr	r0, [pc, #268]	@ (8001ab0 <RadioFunction+0x1dc>)
 80019a4:	f007 fba8 	bl	80090f8 <nRF24_FlushRX>
		nRF24_ClearIRQFlagsRx(&nrf_device);
 80019a8:	4841      	ldr	r0, [pc, #260]	@ (8001ab0 <RadioFunction+0x1dc>)
 80019aa:	f007 fbe2 	bl	8009172 <nRF24_ClearIRQFlagsRx>

		// Procesar datos recibidos
		setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 80019ae:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <RadioFunction+0x1fc>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <RadioFunction+0x1e4>)
 80019be:	4413      	add	r3, r2
 80019c0:	4a44      	ldr	r2, [pc, #272]	@ (8001ad4 <RadioFunction+0x200>)
 80019c2:	4945      	ldr	r1, [pc, #276]	@ (8001ad8 <RadioFunction+0x204>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb5f 	bl	8001088 <setSpeed>
		dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <RadioFunction+0x1fc>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <RadioFunction+0x1e4>)
 80019da:	4413      	add	r3, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fcc7 	bl	8001370 <getDribbler_speed>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <RadioFunction+0x208>)
 80019e8:	701a      	strb	r2, [r3, #0]
		kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <RadioFunction+0x1fc>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <RadioFunction+0x1e4>)
 80019fa:	4413      	add	r3, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fcc9 	bl	8001394 <getKickerStatus>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <RadioFunction+0x20c>)
 8001a08:	701a      	strb	r2, [r3, #0]




		//PackageTxBuffer(txBuffer); //empaqueeta las velocidades en txbuffer
		memcpy(txBuffer, nrf_device.rx_data, sizeof(nrf_device.rx_data));
 8001a0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ae4 <RadioFunction+0x210>)
 8001a0c:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a0e:	4615      	mov	r5, r2
 8001a10:	f103 0436 	add.w	r4, r3, #54	@ 0x36
 8001a14:	6820      	ldr	r0, [r4, #0]
 8001a16:	6861      	ldr	r1, [r4, #4]
 8001a18:	68a2      	ldr	r2, [r4, #8]
 8001a1a:	68e3      	ldr	r3, [r4, #12]
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	6920      	ldr	r0, [r4, #16]
 8001a20:	6961      	ldr	r1, [r4, #20]
 8001a22:	69a2      	ldr	r2, [r4, #24]
 8001a24:	69e3      	ldr	r3, [r4, #28]
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}

		txBuffer[30] = Board_GetID() + 48;
 8001a28:	f006 fdf4 	bl	8008614 <Board_GetID>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	3330      	adds	r3, #48	@ 0x30
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <RadioFunction+0x210>)
 8001a36:	779a      	strb	r2, [r3, #30]
		txBuffer[31] = '\n';
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <RadioFunction+0x210>)
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	77da      	strb	r2, [r3, #31]
		//updateBuffer(txBuffer);


		// Cambiar a modo TX y enviar datos

		nRF24_RX_OFF(&nrf_device);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	481b      	ldr	r0, [pc, #108]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a42:	f006 ff90 	bl	8008966 <nRF24_CE_State>
		nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_TX);
 8001a46:	2100      	movs	r1, #0
 8001a48:	4819      	ldr	r0, [pc, #100]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a4a:	f007 f923 	bl	8008c94 <nRF24_SetOperationalMode>
		//osDelay(40); // Pequeña demora para asegurar que termine de configurarse, evita mandar paquetes erroneos

		while((config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001a4e:	e006      	b.n	8001a5e <RadioFunction+0x18a>
				config = nRF24_GetConfig(&nrf_device);
 8001a50:	4817      	ldr	r0, [pc, #92]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a52:	f007 fb37 	bl	80090c4 <nRF24_GetConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <RadioFunction+0x1ec>)
 8001a5c:	701a      	strb	r2, [r3, #0]
		while((config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <RadioFunction+0x1ec>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f2      	bne.n	8001a50 <RadioFunction+0x17c>
		}

		nRF24_TxPacket(&nrf_device, txBuffer, 32);
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	491d      	ldr	r1, [pc, #116]	@ (8001ae4 <RadioFunction+0x210>)
 8001a6e:	4810      	ldr	r0, [pc, #64]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a70:	f7ff fab8 	bl	8000fe4 <nRF24_TxPacket>

		// Volver a modo RX

		nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 8001a74:	2101      	movs	r1, #1
 8001a76:	480e      	ldr	r0, [pc, #56]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a78:	f007 f90c 	bl	8008c94 <nRF24_SetOperationalMode>
		while(!(config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001a7c:	e006      	b.n	8001a8c <RadioFunction+0x1b8>
					config = nRF24_GetConfig(&nrf_device);
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a80:	f007 fb20 	bl	80090c4 <nRF24_GetConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <RadioFunction+0x1ec>)
 8001a8a:	701a      	strb	r2, [r3, #0]
		while(!(config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <RadioFunction+0x1ec>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f2      	beq.n	8001a7e <RadioFunction+0x1aa>
			}

		nRF24_RX_ON(&nrf_device);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001a9c:	f006 ff63 	bl	8008966 <nRF24_CE_State>
		nRF24_ClearIRQFlags(&nrf_device);
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <RadioFunction+0x1dc>)
 8001aa2:	f007 fb36 	bl	8009112 <nRF24_ClearIRQFlags>
	osMessageGet(nrf24CheckHandle, osWaitForever);
 8001aa6:	e75b      	b.n	8001960 <RadioFunction+0x8c>
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	200001a8 	.word	0x200001a8
 8001ab0:	2000059c 	.word	0x2000059c
 8001ab4:	20000028 	.word	0x20000028
 8001ab8:	200005d2 	.word	0x200005d2
 8001abc:	20000020 	.word	0x20000020
 8001ac0:	2000035c 	.word	0x2000035c
 8001ac4:	20000354 	.word	0x20000354
 8001ac8:	2000035b 	.word	0x2000035b
 8001acc:	2000035a 	.word	0x2000035a
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	20000360 	.word	0x20000360
 8001ad8:	20000364 	.word	0x20000364
 8001adc:	20000594 	.word	0x20000594
 8001ae0:	20000595 	.word	0x20000595
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <KickFunction>:
* @retval None
*/
osEvent kicker_side;
/* USER CODE END Header_KickFunction */
void KickFunction(void const * argument)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN KickFunction */
  /* Infinite loop */
  for(;;)
  {

    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2110      	movs	r1, #16
 8001af4:	4827      	ldr	r0, [pc, #156]	@ (8001b94 <KickFunction+0xac>)
 8001af6:	f000 fe97 	bl	8002828 <HAL_GPIO_WritePin>
    osDelay(4000);
 8001afa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001afe:	f003 fe71 	bl	80057e4 <osDelay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2110      	movs	r1, #16
 8001b06:	4823      	ldr	r0, [pc, #140]	@ (8001b94 <KickFunction+0xac>)
 8001b08:	f000 fe8e 	bl	8002828 <HAL_GPIO_WritePin>

    osMutexWait(kickFlagHandle, osWaitForever);
 8001b0c:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <KickFunction+0xb0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fe85 	bl	8005824 <osMutexWait>
    kick_flag = KICKER_CHARGED;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <KickFunction+0xb4>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
    osMutexRelease(kickFlagHandle);
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <KickFunction+0xb0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fecb 	bl	80058c0 <osMutexRelease>

		kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <KickFunction+0xb8>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	4c1d      	ldr	r4, [pc, #116]	@ (8001ba4 <KickFunction+0xbc>)
 8001b30:	463b      	mov	r3, r7
 8001b32:	f04f 32ff 	mov.w	r2, #4294967295
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 ff4a 	bl	80059d0 <osMessageGet>
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b4c:	4816      	ldr	r0, [pc, #88]	@ (8001ba8 <KickFunction+0xc0>)
 8001b4e:	f000 fe6b 	bl	8002828 <HAL_GPIO_WritePin>
		osDelay(10);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f003 fe46 	bl	80057e4 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b5e:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <KickFunction+0xc0>)
 8001b60:	f000 fe62 	bl	8002828 <HAL_GPIO_WritePin>

		osMutexWait(kickFlagHandle, osWaitForever);
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <KickFunction+0xb0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fe59 	bl	8005824 <osMutexWait>
    kick_flag = KICKER_DISCHARGED;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <KickFunction+0xb4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    osMutexRelease(kickFlagHandle);
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <KickFunction+0xb0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fe9f 	bl	80058c0 <osMutexRelease>

		kick_count++;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <KickFunction+0xc4>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <KickFunction+0xc4>)
 8001b8c:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8001b8e:	bf00      	nop
 8001b90:	e7ae      	b.n	8001af0 <KickFunction+0x8>
 8001b92:	bf00      	nop
 8001b94:	40022400 	.word	0x40022400
 8001b98:	2000034c 	.word	0x2000034c
 8001b9c:	20000596 	.word	0x20000596
 8001ba0:	20000348 	.word	0x20000348
 8001ba4:	20000624 	.word	0x20000624
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	20000598 	.word	0x20000598

08001bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc2:	f000 fb47 	bl	8002254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <HAL_MspInit+0x4c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	f06f 0001 	mvn.w	r0, #1
 8001c22:	f000 fc13 	bl	800244c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0b2      	sub	sp, #200	@ 0xc8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c50:	2290      	movs	r2, #144	@ 0x90
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f007 fc77 	bl	8009548 <memset>
  if(hi2c->Instance==I2C1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a65      	ldr	r2, [pc, #404]	@ (8001df4 <HAL_I2C_MspInit+0x1c0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d13d      	bne.n	8001ce0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f8cb 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001c80:	f7ff ffa8 	bl	8001bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b5c      	ldr	r3, [pc, #368]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4a5b      	ldr	r2, [pc, #364]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c9c:	23c0      	movs	r3, #192	@ 0xc0
 8001c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca2:	2312      	movs	r3, #18
 8001ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	484e      	ldr	r0, [pc, #312]	@ (8001dfc <HAL_I2C_MspInit+0x1c8>)
 8001cc2:	f000 fbed 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a4b      	ldr	r2, [pc, #300]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b49      	ldr	r3, [pc, #292]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cde:	e085      	b.n	8001dec <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a46      	ldr	r2, [pc, #280]	@ (8001e00 <HAL_I2C_MspInit+0x1cc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d13d      	bne.n	8001d66 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 f888 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001d06:	f7ff ff65 	bl	8001bd4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b38      	ldr	r3, [pc, #224]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d40:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001d44:	4619      	mov	r1, r3
 8001d46:	482f      	ldr	r0, [pc, #188]	@ (8001e04 <HAL_I2C_MspInit+0x1d0>)
 8001d48:	f000 fbaa 	bl	80024a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	4a29      	ldr	r2, [pc, #164]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
}
 8001d64:	e042      	b.n	8001dec <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a27      	ldr	r2, [pc, #156]	@ (8001e08 <HAL_I2C_MspInit+0x1d4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d13d      	bne.n	8001dec <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 f845 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001d8c:	f7ff ff22 	bl	8001bd4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001da8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db0:	2312      	movs	r3, #18
 8001db2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dc8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480f      	ldr	r0, [pc, #60]	@ (8001e0c <HAL_I2C_MspInit+0x1d8>)
 8001dd0:	f000 fb66 	bl	80024a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001dda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_I2C_MspInit+0x1c4>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	bf00      	nop
 8001dee:	37c8      	adds	r7, #200	@ 0xc8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40005400 	.word	0x40005400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40005800 	.word	0x40005800
 8001e04:	40021400 	.word	0x40021400
 8001e08:	40005c00 	.word	0x40005c00
 8001e0c:	40021c00 	.word	0x40021c00

08001e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <HAL_SPI_MspInit+0x7c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d127      	bne.n	8001e82 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <HAL_SPI_MspInit+0x80>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	4a16      	ldr	r2, [pc, #88]	@ (8001e90 <HAL_SPI_MspInit+0x80>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3e:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_SPI_MspInit+0x80>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_SPI_MspInit+0x80>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a10      	ldr	r2, [pc, #64]	@ (8001e90 <HAL_SPI_MspInit+0x80>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_SPI_MspInit+0x80>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e62:	23e0      	movs	r3, #224	@ 0xe0
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e72:	2305      	movs	r3, #5
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <HAL_SPI_MspInit+0x84>)
 8001e7e:	f000 fb0f 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40013000 	.word	0x40013000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b090      	sub	sp, #64	@ 0x40
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d128      	bne.n	8001f0c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a54      	ldr	r2, [pc, #336]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b52      	ldr	r3, [pc, #328]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eea:	2303      	movs	r3, #3
 8001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001efa:	2301      	movs	r3, #1
 8001efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4849      	ldr	r0, [pc, #292]	@ (800202c <HAL_TIM_Encoder_MspInit+0x194>)
 8001f06:	f000 facb 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f0a:	e089      	b.n	8002020 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a47      	ldr	r2, [pc, #284]	@ (8002030 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d128      	bne.n	8001f68 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f46:	23c0      	movs	r3, #192	@ 0xc0
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f56:	2302      	movs	r3, #2
 8001f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4834      	ldr	r0, [pc, #208]	@ (8002034 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001f62:	f000 fa9d 	bl	80024a0 <HAL_GPIO_Init>
}
 8001f66:	e05b      	b.n	8002020 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a32      	ldr	r2, [pc, #200]	@ (8002038 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d129      	bne.n	8001fc6 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fa2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	481f      	ldr	r0, [pc, #124]	@ (800203c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001fc0:	f000 fa6e 	bl	80024a0 <HAL_GPIO_Init>
}
 8001fc4:	e02c      	b.n	8002020 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d127      	bne.n	8002020 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd4:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002000:	2360      	movs	r3, #96	@ 0x60
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002010:	2303      	movs	r3, #3
 8002012:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	480a      	ldr	r0, [pc, #40]	@ (8002044 <HAL_TIM_Encoder_MspInit+0x1ac>)
 800201c:	f000 fa40 	bl	80024a0 <HAL_GPIO_Init>
}
 8002020:	bf00      	nop
 8002022:	3740      	adds	r7, #64	@ 0x40
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000
 8002030:	40000400 	.word	0x40000400
 8002034:	40020800 	.word	0x40020800
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40021c00 	.word	0x40021c00
 8002040:	40010400 	.word	0x40010400
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	@ 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002058:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <HAL_InitTick+0xd0>)
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	4a2e      	ldr	r2, [pc, #184]	@ (8002118 <HAL_InitTick+0xd0>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6453      	str	r3, [r2, #68]	@ 0x44
 8002064:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <HAL_InitTick+0xd0>)
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f001 fe96 	bl	8003dac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002080:	f001 fe80 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8002084:	4603      	mov	r3, r0
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800208a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208c:	4a23      	ldr	r2, [pc, #140]	@ (800211c <HAL_InitTick+0xd4>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	3b01      	subs	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002098:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <HAL_InitTick+0xd8>)
 800209a:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <HAL_InitTick+0xdc>)
 800209c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_InitTick+0xd8>)
 80020a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_InitTick+0xd8>)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <HAL_InitTick+0xd8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_InitTick+0xd8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_InitTick+0xd8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80020be:	4818      	ldr	r0, [pc, #96]	@ (8002120 <HAL_InitTick+0xd8>)
 80020c0:	f002 ff14 	bl	8004eec <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80020ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11b      	bne.n	800210a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020d2:	4813      	ldr	r0, [pc, #76]	@ (8002120 <HAL_InitTick+0xd8>)
 80020d4:	f002 ff6c 	bl	8004fb0 <HAL_TIM_Base_Start_IT>
 80020d8:	4603      	mov	r3, r0
 80020da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80020de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d111      	bne.n	800210a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020e6:	2019      	movs	r0, #25
 80020e8:	f000 f9cc 	bl	8002484 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d808      	bhi.n	8002104 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020f2:	2200      	movs	r2, #0
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	2019      	movs	r0, #25
 80020f8:	f000 f9a8 	bl	800244c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_InitTick+0xe0>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e002      	b.n	800210a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800210a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800210e:	4618      	mov	r0, r3
 8002110:	3730      	adds	r7, #48	@ 0x30
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	431bde83 	.word	0x431bde83
 8002120:	20000630 	.word	0x20000630
 8002124:	40010000 	.word	0x40010000
 8002128:	20000034 	.word	0x20000034

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	bf00      	nop
 8002140:	e7fd      	b.n	800213e <HardFault_Handler+0x4>

08002142 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002146:	bf00      	nop
 8002148:	e7fd      	b.n	8002146 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	bf00      	nop
 8002150:	e7fd      	b.n	800214e <BusFault_Handler+0x4>

08002152 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002156:	bf00      	nop
 8002158:	e7fd      	b.n	8002156 <UsageFault_Handler+0x4>

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800216e:	f003 f83d 	bl	80051ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000630 	.word	0x20000630

0800217c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <SystemInit+0x5c>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <SystemInit+0x5c>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <SystemInit+0x60>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <SystemInit+0x60>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <SystemInit+0x60>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <SystemInit+0x60>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	490d      	ldr	r1, [pc, #52]	@ (80021dc <SystemInit+0x60>)
 80021a8:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <SystemInit+0x64>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <SystemInit+0x60>)
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <SystemInit+0x68>)
 80021b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <SystemInit+0x60>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a08      	ldr	r2, [pc, #32]	@ (80021dc <SystemInit+0x60>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <SystemInit+0x60>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <SystemInit+0x5c>)
 80021c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021cc:	609a      	str	r2, [r3, #8]
#endif
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	40023800 	.word	0x40023800
 80021e0:	fef6ffff 	.word	0xfef6ffff
 80021e4:	24003010 	.word	0x24003010

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ec:	480d      	ldr	r0, [pc, #52]	@ (8002224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ee:	490e      	ldr	r1, [pc, #56]	@ (8002228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021f0:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002204:	4c0b      	ldr	r4, [pc, #44]	@ (8002234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002212:	f7ff ffb3 	bl	800217c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f007 f9a5 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7fe f989 	bl	8000530 <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002220:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800222c:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8002230:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002234:	20004504 	.word	0x20004504

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>

0800223a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223e:	2003      	movs	r0, #3
 8002240:	f000 f8f9 	bl	8002436 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff feff 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224a:	f7ff fccb 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000038 	.word	0x20000038
 8002278:	2000067c 	.word	0x2000067c

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	2000067c 	.word	0x2000067c

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffde 	bl	800227c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000038 	.word	0x20000038

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <__NVIC_SetPriorityGrouping+0x40>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	@ (800231c <__NVIC_SetPriorityGrouping+0x40>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	05fa0000 	.word	0x05fa0000

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4907      	ldr	r1, [pc, #28]	@ (8002378 <__NVIC_EnableIRQ+0x38>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	@ (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	@ (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff4c 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245e:	f7ff ff61 	bl	8002324 <__NVIC_GetPriorityGrouping>
 8002462:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	6978      	ldr	r0, [r7, #20]
 800246a:	f7ff ffb1 	bl	80023d0 <NVIC_EncodePriority>
 800246e:	4602      	mov	r2, r0
 8002470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff80 	bl	800237c <__NVIC_SetPriority>
}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff54 	bl	8002340 <__NVIC_EnableIRQ>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e175      	b.n	80027ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8164 	bne.w	80027a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x56>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80be 	beq.w	80027a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b66      	ldr	r3, [pc, #408]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	4a65      	ldr	r2, [pc, #404]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002634:	6453      	str	r3, [r2, #68]	@ 0x44
 8002636:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_GPIO_Init+0x324>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002642:	4a61      	ldr	r2, [pc, #388]	@ (80027c8 <HAL_GPIO_Init+0x328>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	@ (80027cc <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d037      	beq.n	80026de <HAL_GPIO_Init+0x23e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a57      	ldr	r2, [pc, #348]	@ (80027d0 <HAL_GPIO_Init+0x330>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_GPIO_Init+0x23a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_GPIO_Init+0x334>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x236>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a55      	ldr	r2, [pc, #340]	@ (80027d8 <HAL_GPIO_Init+0x338>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x232>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a54      	ldr	r2, [pc, #336]	@ (80027dc <HAL_GPIO_Init+0x33c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x22e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a53      	ldr	r2, [pc, #332]	@ (80027e0 <HAL_GPIO_Init+0x340>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x22a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_GPIO_Init+0x344>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a51      	ldr	r2, [pc, #324]	@ (80027e8 <HAL_GPIO_Init+0x348>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x222>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a50      	ldr	r2, [pc, #320]	@ (80027ec <HAL_GPIO_Init+0x34c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x21e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4f      	ldr	r2, [pc, #316]	@ (80027f0 <HAL_GPIO_Init+0x350>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x21a>
 80026b6:	2309      	movs	r3, #9
 80026b8:	e012      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ba:	230a      	movs	r3, #10
 80026bc:	e010      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026be:	2308      	movs	r3, #8
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	@ (80027c8 <HAL_GPIO_Init+0x328>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a34      	ldr	r2, [pc, #208]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b32      	ldr	r3, [pc, #200]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a29      	ldr	r2, [pc, #164]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b28      	ldr	r3, [pc, #160]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a14      	ldr	r2, [pc, #80]	@ (80027f4 <HAL_GPIO_Init+0x354>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae86 	bls.w	80024c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022400 	.word	0x40022400
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e001      	b.n	800281a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
 8002834:	4613      	mov	r3, r2
 8002836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002844:	e003      	b.n	800284e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	041a      	lsls	r2, r3, #16
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43d9      	mvns	r1, r3
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	400b      	ands	r3, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	619a      	str	r2, [r3, #24]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e07f      	b.n	80029a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff f9bc 	bl	8001c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	@ 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e006      	b.n	8002918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d104      	bne.n	800292a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_I2C_Init+0x11c>)
 8002936:	430b      	orrs	r3, r1
 8002938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69d9      	ldr	r1, [r3, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	02008000 	.word	0x02008000

080029b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	461a      	mov	r2, r3
 80029bc:	460b      	mov	r3, r1
 80029be:	817b      	strh	r3, [r7, #10]
 80029c0:	4613      	mov	r3, r2
 80029c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	f040 80da 	bne.w	8002b86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_I2C_Master_Transmit+0x30>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0d3      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1d8>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029e8:	f7ff fc48 	bl	800227c <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2319      	movs	r3, #25
 80029f4:	2201      	movs	r2, #1
 80029f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f9e6 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0be      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2221      	movs	r2, #33	@ 0x21
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2210      	movs	r2, #16
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	893a      	ldrh	r2, [r7, #8]
 8002a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2bff      	cmp	r3, #255	@ 0xff
 8002a3a:	d90e      	bls.n	8002a5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	22ff      	movs	r2, #255	@ 0xff
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	8979      	ldrh	r1, [r7, #10]
 8002a4a:	4b51      	ldr	r3, [pc, #324]	@ (8002b90 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fbd0 	bl	80031f8 <I2C_TransferConfig>
 8002a58:	e06c      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	4b48      	ldr	r3, [pc, #288]	@ (8002b90 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fbbf 	bl	80031f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a7a:	e05b      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f9e3 	bl	8002e4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e07b      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d034      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x184>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d130      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2180      	movs	r1, #128	@ 0x80
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f975 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e04d      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2bff      	cmp	r3, #255	@ 0xff
 8002af4:	d90e      	bls.n	8002b14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	22ff      	movs	r2, #255	@ 0xff
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	2300      	movs	r3, #0
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fb73 	bl	80031f8 <I2C_TransferConfig>
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	8979      	ldrh	r1, [r7, #10]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fb62 	bl	80031f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d19e      	bne.n	8002a7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f9c2 	bl	8002ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01a      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	80002000 	.word	0x80002000
 8002b94:	fe00e800 	.word	0xfe00e800

08002b98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	f040 80db 	bne.w	8002d70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_Master_Receive+0x30>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0d4      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1da>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd0:	f7ff fb54 	bl	800227c <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2319      	movs	r3, #25
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f8f2 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0bf      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2222      	movs	r2, #34	@ 0x22
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2bff      	cmp	r3, #255	@ 0xff
 8002c22:	d90e      	bls.n	8002c42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	22ff      	movs	r2, #255	@ 0xff
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	4b52      	ldr	r3, [pc, #328]	@ (8002d7c <HAL_I2C_Master_Receive+0x1e4>)
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fadc 	bl	80031f8 <I2C_TransferConfig>
 8002c40:	e06d      	b.n	8002d1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	4b49      	ldr	r3, [pc, #292]	@ (8002d7c <HAL_I2C_Master_Receive+0x1e4>)
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 facb 	bl	80031f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c62:	e05c      	b.n	8002d1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	6a39      	ldr	r1, [r7, #32]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f96b 	bl	8002f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e07c      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d034      	beq.n	8002d1e <HAL_I2C_Master_Receive+0x186>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d130      	bne.n	8002d1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2180      	movs	r1, #128	@ 0x80
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f880 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e04d      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2bff      	cmp	r3, #255	@ 0xff
 8002cde:	d90e      	bls.n	8002cfe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	22ff      	movs	r2, #255	@ 0xff
 8002ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fa7e 	bl	80031f8 <I2C_TransferConfig>
 8002cfc:	e00f      	b.n	8002d1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	2300      	movs	r3, #0
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fa6d 	bl	80031f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d19d      	bne.n	8002c64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	6a39      	ldr	r1, [r7, #32]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f8cd 	bl	8002ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e01a      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2220      	movs	r2, #32
 8002d42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <HAL_I2C_Master_Receive+0x1e8>)
 8002d50:	400b      	ands	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	80002400 	.word	0x80002400
 8002d80:	fe00e800 	.word	0xfe00e800

08002d84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d103      	bne.n	8002da2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d007      	beq.n	8002dc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	619a      	str	r2, [r3, #24]
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e022      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d01e      	beq.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7ff fa49 	bl	800227c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d113      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e00f      	b.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d0cd      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e58:	e02c      	b.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f8ea 	bl	8003038 <I2C_IsErrorOccurred>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02a      	b.n	8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d01e      	beq.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7ff fa01 	bl	800227c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d113      	bne.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e007      	b.n	8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d1cb      	bne.n	8002e5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed8:	e028      	b.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8aa 	bl	8003038 <I2C_IsErrorOccurred>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e026      	b.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7ff f9c5 	bl	800227c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d113      	bne.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e007      	b.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d1cf      	bne.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f50:	e064      	b.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f86e 	bl	8003038 <I2C_IsErrorOccurred>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e062      	b.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d138      	bne.n	8002fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d105      	bne.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e04e      	b.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d107      	bne.n	8002fac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002faa:	e002      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e022      	b.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7ff f949 	bl	800227c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e007      	b.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d193      	bne.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	fe00e800 	.word	0xfe00e800

08003038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	@ 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d068      	beq.n	8003136 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2210      	movs	r2, #16
 800306a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800306c:	e049      	b.n	8003102 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d045      	beq.n	8003102 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7ff f901 	bl	800227c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_IsErrorOccurred+0x54>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d13a      	bne.n	8003102 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800309e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ae:	d121      	bne.n	80030f4 <I2C_IsErrorOccurred+0xbc>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030b6:	d01d      	beq.n	80030f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d01a      	beq.n	80030f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030ce:	f7ff f8d5 	bl	800227c <HAL_GetTick>
 80030d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d4:	e00e      	b.n	80030f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030d6:	f7ff f8d1 	bl	800227c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b19      	cmp	r3, #25
 80030e2:	d907      	bls.n	80030f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f043 0320 	orr.w	r3, r3, #32
 80030ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030f2:	e006      	b.n	8003102 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d1e9      	bne.n	80030d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d003      	beq.n	8003118 <I2C_IsErrorOccurred+0xe0>
 8003110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0aa      	beq.n	800306e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2220      	movs	r2, #32
 8003126:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800317a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800319c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01c      	beq.n	80031e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff fde9 	bl	8002d84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b0d      	ldr	r3, [pc, #52]	@ (80031f4 <I2C_IsErrorOccurred+0x1bc>)
 80031be:	400b      	ands	r3, r1
 80031c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3728      	adds	r7, #40	@ 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	fe00e800 	.word	0xfe00e800

080031f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	4613      	mov	r3, r2
 8003208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320a:	897b      	ldrh	r3, [r7, #10]
 800320c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003210:	7a7b      	ldrb	r3, [r7, #9]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003218:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	4313      	orrs	r3, r2
 8003222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003226:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	0d5b      	lsrs	r3, r3, #21
 8003232:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003236:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <I2C_TransferConfig+0x60>)
 8003238:	430b      	orrs	r3, r1
 800323a:	43db      	mvns	r3, r3
 800323c:	ea02 0103 	and.w	r1, r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	03ff63ff 	.word	0x03ff63ff

0800325c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b20      	cmp	r3, #32
 8003270:	d138      	bne.n	80032e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800327c:	2302      	movs	r3, #2
 800327e:	e032      	b.n	80032e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2224      	movs	r2, #36	@ 0x24
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b20      	cmp	r3, #32
 8003306:	d139      	bne.n	800337c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003312:	2302      	movs	r3, #2
 8003314:	e033      	b.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2224      	movs	r2, #36	@ 0x24
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b23      	ldr	r3, [pc, #140]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ba:	f7fe ff5f 	bl	800227c <HAL_GetTick>
 80033be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033c0:	e009      	b.n	80033d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c2:	f7fe ff5b 	bl	800227c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d0:	d901      	bls.n	80033d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e022      	b.n	800341c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e2:	d1ee      	bne.n	80033c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f0:	f7fe ff44 	bl	800227c <HAL_GetTick>
 80033f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033f6:	e009      	b.n	800340c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f8:	f7fe ff40 	bl	800227c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003406:	d901      	bls.n	800340c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e007      	b.n	800341c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003418:	d1ee      	bne.n	80033f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000

0800342c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e29b      	b.n	800397a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8087 	beq.w	800355e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003450:	4b96      	ldr	r3, [pc, #600]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b04      	cmp	r3, #4
 800345a:	d00c      	beq.n	8003476 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345c:	4b93      	ldr	r3, [pc, #588]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d112      	bne.n	800348e <HAL_RCC_OscConfig+0x62>
 8003468:	4b90      	ldr	r3, [pc, #576]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003474:	d10b      	bne.n	800348e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003476:	4b8d      	ldr	r3, [pc, #564]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d06c      	beq.n	800355c <HAL_RCC_OscConfig+0x130>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d168      	bne.n	800355c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e275      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x7a>
 8003498:	4b84      	ldr	r3, [pc, #528]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a83      	ldr	r2, [pc, #524]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800349e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e02e      	b.n	8003504 <HAL_RCC_OscConfig+0xd8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x9c>
 80034ae:	4b7f      	ldr	r3, [pc, #508]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b7c      	ldr	r3, [pc, #496]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7b      	ldr	r2, [pc, #492]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01d      	b.n	8003504 <HAL_RCC_OscConfig+0xd8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0xc0>
 80034d2:	4b76      	ldr	r3, [pc, #472]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a75      	ldr	r2, [pc, #468]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b73      	ldr	r3, [pc, #460]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a72      	ldr	r2, [pc, #456]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0xd8>
 80034ec:	4b6f      	ldr	r3, [pc, #444]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6e      	ldr	r2, [pc, #440]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b6c      	ldr	r3, [pc, #432]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe feb6 	bl	800227c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe feb2 	bl	800227c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	@ 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e229      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b61      	ldr	r3, [pc, #388]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fea2 	bl	800227c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fe9e 	bl	800227c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e215      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b57      	ldr	r3, [pc, #348]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x110>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d069      	beq.n	800363e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356a:	4b50      	ldr	r3, [pc, #320]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b4d      	ldr	r3, [pc, #308]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x190>
 8003582:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1e9      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b41      	ldr	r3, [pc, #260]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	493d      	ldr	r1, [pc, #244]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e040      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a38      	ldr	r2, [pc, #224]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fe54 	bl	800227c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d8:	f7fe fe50 	bl	800227c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4929      	ldr	r1, [pc, #164]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	e018      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360c:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fe30 	bl	800227c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe fe2c 	bl	800227c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1a3      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d038      	beq.n	80036bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003656:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe fe0d 	bl	800227c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe fe09 	bl	800227c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e180      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x23a>
 8003684:	e01a      	b.n	80036bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fe fdf3 	bl	800227c <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369a:	f7fe fdef 	bl	800227c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d903      	bls.n	80036b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e166      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
 80036ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	4b92      	ldr	r3, [pc, #584]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a4 	beq.w	8003812 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b8c      	ldr	r3, [pc, #560]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	4b89      	ldr	r3, [pc, #548]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	4a88      	ldr	r2, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e2:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f2:	4b83      	ldr	r3, [pc, #524]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d118      	bne.n	8003730 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036fe:	4b80      	ldr	r3, [pc, #512]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7f      	ldr	r2, [pc, #508]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370a:	f7fe fdb7 	bl	800227c <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003712:	f7fe fdb3 	bl	800227c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	@ 0x64
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e12a      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003724:	4b76      	ldr	r3, [pc, #472]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x31a>
 8003738:	4b70      	ldr	r3, [pc, #448]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	4a6f      	ldr	r2, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	@ 0x70
 8003744:	e02d      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x33c>
 800374e:	4b6b      	ldr	r3, [pc, #428]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003752:	4a6a      	ldr	r2, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	@ 0x70
 800375a:	4b68      	ldr	r3, [pc, #416]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	@ 0x70
 8003766:	e01c      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b05      	cmp	r3, #5
 800376e:	d10c      	bne.n	800378a <HAL_RCC_OscConfig+0x35e>
 8003770:	4b62      	ldr	r3, [pc, #392]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	@ 0x70
 800377c:	4b5f      	ldr	r3, [pc, #380]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
 8003788:	e00b      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 800378a:	4b5c      	ldr	r3, [pc, #368]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a5b      	ldr	r2, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	4b59      	ldr	r3, [pc, #356]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	4a58      	ldr	r2, [pc, #352]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fe fd67 	bl	800227c <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fe fd63 	bl	800227c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0d8      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	4b4c      	ldr	r3, [pc, #304]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ee      	beq.n	80037b2 <HAL_RCC_OscConfig+0x386>
 80037d4:	e014      	b.n	8003800 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fe fd51 	bl	800227c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fd4d 	bl	800227c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0c2      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ee      	bne.n	80037de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b3d      	ldr	r3, [pc, #244]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	4a3c      	ldr	r2, [pc, #240]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80ae 	beq.w	8003978 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d06d      	beq.n	8003904 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d14b      	bne.n	80038c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b32      	ldr	r3, [pc, #200]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a31      	ldr	r2, [pc, #196]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fd1e 	bl	800227c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fd1a 	bl	800227c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e091      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	019b      	lsls	r3, r3, #6
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a18      	ldr	r2, [pc, #96]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fcec 	bl	800227c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fce8 	bl	800227c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e05f      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x47c>
 80038c6:	e057      	b.n	8003978 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0b      	ldr	r2, [pc, #44]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fcd2 	bl	800227c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fcce 	bl	800227c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x4b0>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x54c>
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003904:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <HAL_RCC_OscConfig+0x558>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d030      	beq.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d129      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d122      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d119      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d10f      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0d0      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d910      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b67      	ldr	r3, [pc, #412]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 020f 	bic.w	r2, r3, #15
 80039b6:	4965      	ldr	r1, [pc, #404]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a58      	ldr	r2, [pc, #352]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 80039ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d040      	beq.n	8003aac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d115      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e073      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06b      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4936      	ldr	r1, [pc, #216]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fbfe 	bl	800227c <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe fbfa 	bl	800227c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e053      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b27      	ldr	r3, [pc, #156]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d210      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 020f 	bic.w	r2, r3, #15
 8003ac2:	4922      	ldr	r1, [pc, #136]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b06:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f821 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490a      	ldr	r1, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x1cc>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <HAL_RCC_ClockConfig+0x1d0>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x1d4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fa84 	bl	8002048 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	40023800 	.word	0x40023800
 8003b54:	080096d8 	.word	0x080096d8
 8003b58:	20000030 	.word	0x20000030
 8003b5c:	20000034 	.word	0x20000034

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b094      	sub	sp, #80	@ 0x50
 8003b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b70:	2300      	movs	r3, #0
 8003b72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b78:	4b79      	ldr	r3, [pc, #484]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d00d      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	f200 80e1 	bhi.w	8003d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b92:	e0db      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b98:	e0db      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4b73      	ldr	r3, [pc, #460]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b9e:	e0d8      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003baa:	4b6d      	ldr	r3, [pc, #436]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d063      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	0159      	lsls	r1, r3, #5
 8003be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be4:	0150      	lsls	r0, r2, #5
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4621      	mov	r1, r4
 8003bec:	1a51      	subs	r1, r2, r1
 8003bee:	6139      	str	r1, [r7, #16]
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c04:	4659      	mov	r1, fp
 8003c06:	018b      	lsls	r3, r1, #6
 8003c08:	4651      	mov	r1, sl
 8003c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c0e:	4651      	mov	r1, sl
 8003c10:	018a      	lsls	r2, r1, #6
 8003c12:	4651      	mov	r1, sl
 8003c14:	ebb2 0801 	subs.w	r8, r2, r1
 8003c18:	4659      	mov	r1, fp
 8003c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c32:	4690      	mov	r8, r2
 8003c34:	4699      	mov	r9, r3
 8003c36:	4623      	mov	r3, r4
 8003c38:	eb18 0303 	adds.w	r3, r8, r3
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	462b      	mov	r3, r5
 8003c40:	eb49 0303 	adc.w	r3, r9, r3
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c52:	4629      	mov	r1, r5
 8003c54:	024b      	lsls	r3, r1, #9
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	024a      	lsls	r2, r1, #9
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c66:	2200      	movs	r2, #0
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c70:	f7fc fae6 	bl	8000240 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c7c:	e058      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7e:	4b38      	ldr	r3, [pc, #224]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	2200      	movs	r2, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	4611      	mov	r1, r2
 8003c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	f04f 0000 	mov.w	r0, #0
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	0159      	lsls	r1, r3, #5
 8003ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003caa:	0150      	lsls	r0, r2, #5
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	00eb      	lsls	r3, r5, #3
 8003ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce6:	00e2      	lsls	r2, r4, #3
 8003ce8:	4614      	mov	r4, r2
 8003cea:	461d      	mov	r5, r3
 8003cec:	4643      	mov	r3, r8
 8003cee:	18e3      	adds	r3, r4, r3
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	eb45 0303 	adc.w	r3, r5, r3
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d06:	4629      	mov	r1, r5
 8003d08:	028b      	lsls	r3, r1, #10
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d10:	4621      	mov	r1, r4
 8003d12:	028a      	lsls	r2, r1, #10
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	61fa      	str	r2, [r7, #28]
 8003d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d24:	f7fc fa8c 	bl	8000240 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3750      	adds	r7, #80	@ 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	007a1200 	.word	0x007a1200

08003d6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000030 	.word	0x20000030

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d88:	f7ff fff0 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0b5b      	lsrs	r3, r3, #13
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	@ (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	080096e8 	.word	0x080096e8

08003dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	220f      	movs	r2, #15
 8003dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dbc:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <HAL_RCC_GetClockConfig+0x5c>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0203 	and.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e08 <HAL_RCC_GetClockConfig+0x5c>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_RCC_GetClockConfig+0x5c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dee:	4b07      	ldr	r3, [pc, #28]	@ (8003e0c <HAL_RCC_GetClockConfig+0x60>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40023c00 	.word	0x40023c00

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d012      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e38:	4b69      	ldr	r3, [pc, #420]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	4964      	ldr	r1, [pc, #400]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e78:	4959      	ldr	r1, [pc, #356]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e88:	d101      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d017      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	494a      	ldr	r1, [pc, #296]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec4:	d101      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 808b 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	4a39      	ldr	r2, [pc, #228]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f00:	4b37      	ldr	r3, [pc, #220]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f0c:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fe f9b0 	bl	800227c <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fe f9ac 	bl	800227c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	@ 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e38f      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f32:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f3e:	4b28      	ldr	r3, [pc, #160]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d035      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d02e      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f7e:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f84:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d114      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe f974 	bl	800227c <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	e00a      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fe f970 	bl	800227c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e351      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ee      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc6:	d111      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd4:	4b04      	ldr	r3, [pc, #16]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	4901      	ldr	r1, [pc, #4]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	0ffffcff 	.word	0x0ffffcff
 8003fec:	4bac      	ldr	r3, [pc, #688]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4aab      	ldr	r2, [pc, #684]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ff6:	6093      	str	r3, [r2, #8]
 8003ff8:	4ba9      	ldr	r3, [pc, #676]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	49a6      	ldr	r1, [pc, #664]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004016:	4ba2      	ldr	r3, [pc, #648]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401c:	4aa0      	ldr	r2, [pc, #640]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004022:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004026:	4b9e      	ldr	r3, [pc, #632]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	499b      	ldr	r1, [pc, #620]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004044:	4b96      	ldr	r3, [pc, #600]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004052:	4993      	ldr	r1, [pc, #588]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004066:	4b8e      	ldr	r3, [pc, #568]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004074:	498a      	ldr	r1, [pc, #552]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004088:	4b85      	ldr	r3, [pc, #532]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004096:	4982      	ldr	r1, [pc, #520]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040aa:	4b7d      	ldr	r3, [pc, #500]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4979      	ldr	r1, [pc, #484]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040cc:	4b74      	ldr	r3, [pc, #464]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	4971      	ldr	r1, [pc, #452]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ee:	4b6c      	ldr	r3, [pc, #432]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	f023 020c 	bic.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	4968      	ldr	r1, [pc, #416]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004110:	4b63      	ldr	r3, [pc, #396]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	4960      	ldr	r1, [pc, #384]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004132:	4b5b      	ldr	r3, [pc, #364]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	4957      	ldr	r1, [pc, #348]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004154:	4b52      	ldr	r3, [pc, #328]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004162:	494f      	ldr	r1, [pc, #316]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	4946      	ldr	r1, [pc, #280]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004198:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a6:	493e      	ldr	r1, [pc, #248]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041ba:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	4935      	ldr	r1, [pc, #212]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041dc:	4b30      	ldr	r3, [pc, #192]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ea:	492d      	ldr	r1, [pc, #180]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d011      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041fe:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800420c:	4924      	ldr	r1, [pc, #144]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800421e:	2301      	movs	r3, #1
 8004220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800423e:	4b18      	ldr	r3, [pc, #96]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424c:	4914      	ldr	r1, [pc, #80]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004260:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004270:	490b      	ldr	r1, [pc, #44]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004294:	4902      	ldr	r1, [pc, #8]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800429c:	e002      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042b0:	4b8a      	ldr	r3, [pc, #552]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	4986      	ldr	r1, [pc, #536]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042d4:	4b81      	ldr	r3, [pc, #516]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042e4:	497d      	ldr	r1, [pc, #500]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d006      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80d6 	beq.w	80044ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004300:	4b76      	ldr	r3, [pc, #472]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a75      	ldr	r2, [pc, #468]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fd ffb6 	bl	800227c <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004314:	f7fd ffb2 	bl	800227c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e195      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004326:	4b6d      	ldr	r3, [pc, #436]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d021      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004346:	4b65      	ldr	r3, [pc, #404]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004354:	4b61      	ldr	r3, [pc, #388]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	019a      	lsls	r2, r3, #6
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	4958      	ldr	r1, [pc, #352]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02e      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ac:	d129      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ae:	4b4b      	ldr	r3, [pc, #300]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043bc:	4b47      	ldr	r3, [pc, #284]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c2:	0f1b      	lsrs	r3, r3, #28
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	493e      	ldr	r1, [pc, #248]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043ea:	4b3c      	ldr	r3, [pc, #240]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f0:	f023 021f 	bic.w	r2, r3, #31
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4938      	ldr	r1, [pc, #224]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01d      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440e:	4b33      	ldr	r3, [pc, #204]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004414:	0e1b      	lsrs	r3, r3, #24
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800441c:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	0f1b      	lsrs	r3, r3, #28
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	019a      	lsls	r2, r3, #6
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	4926      	ldr	r1, [pc, #152]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	491a      	ldr	r1, [pc, #104]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800447a:	4b18      	ldr	r3, [pc, #96]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004480:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004486:	f7fd fef9 	bl	800227c <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800448e:	f7fd fef5 	bl	800227c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b64      	cmp	r3, #100	@ 0x64
 800449a:	d901      	bls.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0d8      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a0:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 80ce 	bne.w	8004650 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044b4:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd fedc 	bl	800227c <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044c6:	e00b      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044c8:	f7fd fed8 	bl	800227c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d904      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0bb      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044e0:	4b5e      	ldr	r3, [pc, #376]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ec:	d0ec      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02e      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d12a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004516:	4b51      	ldr	r3, [pc, #324]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004524:	4b4d      	ldr	r3, [pc, #308]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	4944      	ldr	r1, [pc, #272]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004552:	4b42      	ldr	r3, [pc, #264]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004558:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	493d      	ldr	r1, [pc, #244]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d022      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004580:	d11d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004582:	4b36      	ldr	r3, [pc, #216]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004590:	4b32      	ldr	r3, [pc, #200]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4929      	ldr	r1, [pc, #164]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d028      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ca:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	019a      	lsls	r2, r3, #6
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	431a      	orrs	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	4917      	ldr	r1, [pc, #92]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800460c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	4911      	ldr	r1, [pc, #68]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0e      	ldr	r2, [pc, #56]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fd fe28 	bl	800227c <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004630:	f7fd fe24 	bl	800227c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e007      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004642:	4b06      	ldr	r3, [pc, #24]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800464a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800464e:	d1ef      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e09d      	b.n	80047ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004682:	d009      	beq.n	8004698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
 800468a:	e005      	b.n	8004698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd fbac 	bl	8001e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046d8:	d902      	bls.n	80046e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e002      	b.n	80046e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046ee:	d007      	beq.n	8004700 <HAL_SPI_Init+0xa0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046f8:	d002      	beq.n	8004700 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	ea42 0103 	orr.w	r1, r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0204 	and.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800477c:	ea42 0103 	orr.w	r1, r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800479c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b08a      	sub	sp, #40	@ 0x28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047c4:	2301      	movs	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x26>
 80047d8:	2302      	movs	r3, #2
 80047da:	e1fb      	b.n	8004bd4 <HAL_SPI_TransmitReceive+0x41e>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e4:	f7fd fd4a 	bl	800227c <HAL_GetTick>
 80047e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004800:	7efb      	ldrb	r3, [r7, #27]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d00e      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x6e>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800480c:	d106      	bne.n	800481c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <HAL_SPI_TransmitReceive+0x66>
 8004816:	7efb      	ldrb	r3, [r7, #27]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d003      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004822:	e1cd      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x80>
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800483c:	e1c0      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b04      	cmp	r3, #4
 8004848:	d003      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2205      	movs	r2, #5
 800484e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	887a      	ldrh	r2, [r7, #2]
 800486a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	887a      	ldrh	r2, [r7, #2]
 800487e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004894:	d802      	bhi.n	800489c <HAL_SPI_TransmitReceive+0xe6>
 8004896:	8a3b      	ldrh	r3, [r7, #16]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d908      	bls.n	80048ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	e007      	b.n	80048be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c8:	2b40      	cmp	r3, #64	@ 0x40
 80048ca:	d007      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048e4:	d97c      	bls.n	80049e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x13e>
 80048ee:	8a7b      	ldrh	r3, [r7, #18]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d169      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004918:	e056      	b.n	80049c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d11b      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x1aa>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <HAL_SPI_TransmitReceive+0x1aa>
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	2b01      	cmp	r3, #1
 8004936:	d113      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d11c      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x1f2>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	b292      	uxth	r2, r2
 8004986:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a4:	2301      	movs	r3, #1
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049a8:	f7fd fc68 	bl	800227c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d807      	bhi.n	80049c8 <HAL_SPI_TransmitReceive+0x212>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d003      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80049c6:	e0fb      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1a3      	bne.n	800491a <HAL_SPI_TransmitReceive+0x164>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d19d      	bne.n	800491a <HAL_SPI_TransmitReceive+0x164>
 80049de:	e0df      	b.n	8004ba0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x23a>
 80049e8:	8a7b      	ldrh	r3, [r7, #18]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	f040 80cb 	bne.w	8004b86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d912      	bls.n	8004a20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	881a      	ldrh	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b02      	subs	r3, #2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a1e:	e0b2      	b.n	8004b86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a46:	e09e      	b.n	8004b86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d134      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x30a>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02f      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x30a>
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d12c      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d912      	bls.n	8004a96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a94:	e012      	b.n	8004abc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d148      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x3aa>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d042      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d923      	bls.n	8004b2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	b292      	uxth	r2, r2
 8004af2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	1c9a      	adds	r2, r3, #2
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b02      	subs	r3, #2
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d81f      	bhi.n	8004b5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	e016      	b.n	8004b5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f103 020c 	add.w	r2, r3, #12
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b60:	f7fd fb8c 	bl	800227c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d803      	bhi.n	8004b78 <HAL_SPI_TransmitReceive+0x3c2>
 8004b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x3c8>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004b84:	e01c      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f47f af5b 	bne.w	8004a48 <HAL_SPI_TransmitReceive+0x292>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f47f af54 	bne.w	8004a48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f937 	bl	8004e18 <SPI_EndRxTxTransaction>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	661a      	str	r2, [r3, #96]	@ 0x60
 8004bbc:	e000      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004bbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3728      	adds	r7, #40	@ 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bec:	f7fd fb46 	bl	800227c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bfc:	f7fd fb3e 	bl	800227c <HAL_GetTick>
 8004c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c02:	4b39      	ldr	r3, [pc, #228]	@ (8004ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	015b      	lsls	r3, r3, #5
 8004c08:	0d1b      	lsrs	r3, r3, #20
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c12:	e054      	b.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d050      	beq.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c1c:	f7fd fb2e 	bl	800227c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d13d      	bne.n	8004cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c4a:	d111      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c54:	d004      	beq.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5e:	d107      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c78:	d10f      	bne.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e017      	b.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d19b      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000030 	.word	0x20000030

08004cec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	@ 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cfe:	f7fd fabd 	bl	800227c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d0e:	f7fd fab5 	bl	800227c <HAL_GetTick>
 8004d12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	00da      	lsls	r2, r3, #3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	0d1b      	lsrs	r3, r3, #20
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d34:	e060      	b.n	8004df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d3c:	d107      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d050      	beq.n	8004df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d56:	f7fd fa91 	bl	800227c <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d902      	bls.n	8004d6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d13d      	bne.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d84:	d111      	bne.n	8004daa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8e:	d004      	beq.n	8004d9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d98:	d107      	bne.n	8004daa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db2:	d10f      	bne.n	8004dd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e010      	b.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d196      	bne.n	8004d36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	@ 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000030 	.word	0x20000030

08004e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff5b 	bl	8004cec <SPI_WaitFifoStateUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e046      	b.n	8004eda <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <SPI_EndRxTxTransaction+0xcc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a25      	ldr	r2, [pc, #148]	@ (8004ee8 <SPI_EndRxTxTransaction+0xd0>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	0d5b      	lsrs	r3, r3, #21
 8004e58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6a:	d112      	bne.n	8004e92 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	2180      	movs	r1, #128	@ 0x80
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff feb0 	bl	8004bdc <SPI_WaitFlagStateUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e023      	b.n	8004eda <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea8:	2b80      	cmp	r3, #128	@ 0x80
 8004eaa:	d0f2      	beq.n	8004e92 <SPI_EndRxTxTransaction+0x7a>
 8004eac:	e000      	b.n	8004eb0 <SPI_EndRxTxTransaction+0x98>
        break;
 8004eae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff ff15 	bl	8004cec <SPI_WaitFifoStateUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e000      	b.n	8004eda <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000030 	.word	0x20000030
 8004ee8:	165e9f81 	.word	0x165e9f81

08004eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e049      	b.n	8004f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f841 	bl	8004f9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 faa6 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d001      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e054      	b.n	8005072 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a26      	ldr	r2, [pc, #152]	@ (8005080 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff2:	d01d      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a22      	ldr	r2, [pc, #136]	@ (8005084 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a21      	ldr	r2, [pc, #132]	@ (8005088 <HAL_TIM_Base_Start_IT+0xd8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <HAL_TIM_Base_Start_IT+0xdc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <HAL_TIM_Base_Start_IT+0xe0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <HAL_TIM_Base_Start_IT+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <HAL_TIM_Base_Start_IT+0xe8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d115      	bne.n	800505c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	4b19      	ldr	r3, [pc, #100]	@ (800509c <HAL_TIM_Base_Start_IT+0xec>)
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b06      	cmp	r3, #6
 8005040:	d015      	beq.n	800506e <HAL_TIM_Base_Start_IT+0xbe>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005048:	d011      	beq.n	800506e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	e008      	b.n	800506e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e000      	b.n	8005070 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40010400 	.word	0x40010400
 8005094:	40014000 	.word	0x40014000
 8005098:	40001800 	.word	0x40001800
 800509c:	00010007 	.word	0x00010007

080050a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e08f      	b.n	80051d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fc fee5 	bl	8001e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b3e      	ldr	r3, [pc, #248]	@ (80051dc <HAL_TIM_Encoder_Init+0x13c>)
 80050e2:	400b      	ands	r3, r1
 80050e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 f9c3 	bl	800547c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_TIM_Encoder_Init+0x140>)
 800511c:	4013      	ands	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	4313      	orrs	r3, r2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <HAL_TIM_Encoder_Init+0x144>)
 8005136:	4013      	ands	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4b2a      	ldr	r3, [pc, #168]	@ (80051e8 <HAL_TIM_Encoder_Init+0x148>)
 800513e:	4013      	ands	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	4313      	orrs	r3, r2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	011a      	lsls	r2, r3, #4
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	031b      	lsls	r3, r3, #12
 8005160:	4313      	orrs	r3, r2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4313      	orrs	r3, r2
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	fffebff8 	.word	0xfffebff8
 80051e0:	fffffcfc 	.word	0xfffffcfc
 80051e4:	fffff3f3 	.word	0xfffff3f3
 80051e8:	ffff0f0f 	.word	0xffff0f0f

080051ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d122      	bne.n	8005248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b02      	cmp	r3, #2
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0202 	mvn.w	r2, #2
 8005218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f905 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8f7 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f908 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b04      	cmp	r3, #4
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0204 	mvn.w	r2, #4
 800526c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8db 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8cd 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f8de 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0208 	mvn.w	r2, #8
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2204      	movs	r2, #4
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8b1 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8a3 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8b4 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b10      	cmp	r3, #16
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0210 	mvn.w	r2, #16
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2208      	movs	r2, #8
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f887 	bl	800543e <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f879 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f88a 	bl	8005452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0201 	mvn.w	r2, #1
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc fc20 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537a:	2b80      	cmp	r3, #128	@ 0x80
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005388:	2b80      	cmp	r3, #128	@ 0x80
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f9a8 	bl	80056ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b6:	2b80      	cmp	r3, #128	@ 0x80
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f99b 	bl	8005700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f838 	bl	8005466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b20      	cmp	r3, #32
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0220 	mvn.w	r2, #32
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f95b 	bl	80056d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a40      	ldr	r2, [pc, #256]	@ (8005590 <TIM_Base_SetConfig+0x114>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3d      	ldr	r2, [pc, #244]	@ (8005594 <TIM_Base_SetConfig+0x118>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3c      	ldr	r2, [pc, #240]	@ (8005598 <TIM_Base_SetConfig+0x11c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a3b      	ldr	r2, [pc, #236]	@ (800559c <TIM_Base_SetConfig+0x120>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3a      	ldr	r2, [pc, #232]	@ (80055a0 <TIM_Base_SetConfig+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d108      	bne.n	80054ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005590 <TIM_Base_SetConfig+0x114>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02b      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054dc:	d027      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005594 <TIM_Base_SetConfig+0x118>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d023      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005598 <TIM_Base_SetConfig+0x11c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01f      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	@ (800559c <TIM_Base_SetConfig+0x120>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01b      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a29      	ldr	r2, [pc, #164]	@ (80055a0 <TIM_Base_SetConfig+0x124>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d017      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a28      	ldr	r2, [pc, #160]	@ (80055a4 <TIM_Base_SetConfig+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a27      	ldr	r2, [pc, #156]	@ (80055a8 <TIM_Base_SetConfig+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00f      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a26      	ldr	r2, [pc, #152]	@ (80055ac <TIM_Base_SetConfig+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00b      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a25      	ldr	r2, [pc, #148]	@ (80055b0 <TIM_Base_SetConfig+0x134>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <TIM_Base_SetConfig+0x138>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a23      	ldr	r2, [pc, #140]	@ (80055b8 <TIM_Base_SetConfig+0x13c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d108      	bne.n	8005540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0a      	ldr	r2, [pc, #40]	@ (8005590 <TIM_Base_SetConfig+0x114>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0xf8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0c      	ldr	r2, [pc, #48]	@ (80055a0 <TIM_Base_SetConfig+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d103      	bne.n	800557c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	615a      	str	r2, [r3, #20]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800
 80055b0:	40001800 	.word	0x40001800
 80055b4:	40001c00 	.word	0x40001c00
 80055b8:	40002000 	.word	0x40002000

080055bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e06d      	b.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a30      	ldr	r2, [pc, #192]	@ (80056bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2f      	ldr	r2, [pc, #188]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d108      	bne.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800560e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005620:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a20      	ldr	r2, [pc, #128]	@ (80056bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005646:	d01d      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1c      	ldr	r2, [pc, #112]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1a      	ldr	r2, [pc, #104]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a16      	ldr	r2, [pc, #88]	@ (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10c      	bne.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40001800 	.word	0x40001800

080056d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005726:	2b84      	cmp	r3, #132	@ 0x84
 8005728:	d005      	beq.n	8005736 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800572a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	3303      	adds	r3, #3
 8005734:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800574a:	f3ef 8305 	mrs	r3, IPSR
 800574e:	607b      	str	r3, [r7, #4]
  return(result);
 8005750:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800576c:	f001 fb54 	bl	8006e18 <vTaskStartScheduler>
  
  return osOK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	bd80      	pop	{r7, pc}

08005776 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800577a:	f7ff ffe3 	bl	8005744 <inHandlerMode>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005784:	f001 fc52 	bl	800702c <xTaskGetTickCountFromISR>
 8005788:	4603      	mov	r3, r0
 800578a:	e002      	b.n	8005792 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800578c:	f001 fc3e 	bl	800700c <xTaskGetTickCount>
 8005790:	4603      	mov	r3, r0
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	bd80      	pop	{r7, pc}

08005796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005798:	b087      	sub	sp, #28
 800579a:	af02      	add	r7, sp, #8
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685c      	ldr	r4, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ac:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ffad 	bl	8005714 <makeFreeRtosPriority>
 80057ba:	4602      	mov	r2, r0
 80057bc:	f107 030c 	add.w	r3, r7, #12
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	9200      	str	r2, [sp, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4632      	mov	r2, r6
 80057c8:	4629      	mov	r1, r5
 80057ca:	4620      	mov	r0, r4
 80057cc:	f001 f930 	bl	8006a30 <xTaskCreate>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <osDelay+0x16>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	e000      	b.n	80057fc <osDelay+0x18>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fad3 	bl	8006da8 <vTaskDelay>
  
  return osOK;
 8005802:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005814:	2001      	movs	r0, #1
 8005816:	f000 fafd 	bl	8005e14 <xQueueCreateMutex>
 800581a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <osMutexWait+0x18>
    return osErrorParameter;
 8005838:	2380      	movs	r3, #128	@ 0x80
 800583a:	e03a      	b.n	80058b2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d103      	bne.n	8005850 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e009      	b.n	8005864 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <osMutexWait+0x40>
      ticks = 1;
 8005860:	2301      	movs	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005864:	f7ff ff6e 	bl	8005744 <inHandlerMode>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d017      	beq.n	800589e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	461a      	mov	r2, r3
 8005874:	2100      	movs	r1, #0
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 ff2a 	bl	80066d0 <xQueueReceiveFromISR>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <osMutexWait+0x62>
      return osErrorOS;
 8005882:	23ff      	movs	r3, #255	@ 0xff
 8005884:	e015      	b.n	80058b2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <osMutexWait+0x8c>
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <osMutexWait+0x98>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	e008      	b.n	80058b0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fdfd 	bl	80064a0 <xQueueSemaphoreTake>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d001      	beq.n	80058b0 <osMutexWait+0x8c>
    return osErrorOS;
 80058ac:	23ff      	movs	r3, #255	@ 0xff
 80058ae:	e000      	b.n	80058b2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80058d0:	f7ff ff38 	bl	8005744 <inHandlerMode>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fc5c 	bl	800619e <xQueueGiveFromISR>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <osMutexRelease+0x30>
      return osErrorOS;
 80058ec:	23ff      	movs	r3, #255	@ 0xff
 80058ee:	e017      	b.n	8005920 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d013      	beq.n	800591e <osMutexRelease+0x5e>
 80058f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <osMutexRelease+0x68>)
 80058f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	e00a      	b.n	800591e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005908:	2300      	movs	r3, #0
 800590a:	2200      	movs	r2, #0
 800590c:	2100      	movs	r1, #0
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fa98 	bl	8005e44 <xQueueGenericSend>
 8005914:	4603      	mov	r3, r0
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800591a:	23ff      	movs	r3, #255	@ 0xff
 800591c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	4619      	mov	r1, r3
 8005942:	f000 f9ef 	bl	8005d24 <xQueueGenericCreate>
 8005946:	4603      	mov	r3, r0
#endif
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <osMessagePut+0x1e>
    ticks = 1;
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800596e:	f7ff fee9 	bl	8005744 <inHandlerMode>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d018      	beq.n	80059aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005978:	f107 0210 	add.w	r2, r7, #16
 800597c:	f107 0108 	add.w	r1, r7, #8
 8005980:	2300      	movs	r3, #0
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fb68 	bl	8006058 <xQueueGenericSendFromISR>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d001      	beq.n	8005992 <osMessagePut+0x42>
      return osErrorOS;
 800598e:	23ff      	movs	r3, #255	@ 0xff
 8005990:	e018      	b.n	80059c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d014      	beq.n	80059c2 <osMessagePut+0x72>
 8005998:	4b0c      	ldr	r3, [pc, #48]	@ (80059cc <osMessagePut+0x7c>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	e00b      	b.n	80059c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80059aa:	f107 0108 	add.w	r1, r7, #8
 80059ae:	2300      	movs	r3, #0
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fa46 	bl	8005e44 <xQueueGenericSend>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d001      	beq.n	80059c2 <osMessagePut+0x72>
      return osErrorOS;
 80059be:	23ff      	movs	r3, #255	@ 0xff
 80059c0:	e000      	b.n	80059c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b08b      	sub	sp, #44	@ 0x2c
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80059ea:	2380      	movs	r3, #128	@ 0x80
 80059ec:	617b      	str	r3, [r7, #20]
    return event;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	461c      	mov	r4, r3
 80059f2:	f107 0314 	add.w	r3, r7, #20
 80059f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059fe:	e054      	b.n	8005aaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d103      	bne.n	8005a18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a16:	e009      	b.n	8005a2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d006      	beq.n	8005a2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <osMessageGet+0x5c>
      ticks = 1;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005a2c:	f7ff fe8a 	bl	8005744 <inHandlerMode>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01c      	beq.n	8005a70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005a36:	f107 0220 	add.w	r2, r7, #32
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	68b8      	ldr	r0, [r7, #8]
 8005a44:	f000 fe44 	bl	80066d0 <xQueueReceiveFromISR>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005a4e:	2310      	movs	r3, #16
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e001      	b.n	8005a58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01d      	beq.n	8005a9a <osMessageGet+0xca>
 8005a5e:	4b15      	ldr	r3, [pc, #84]	@ (8005ab4 <osMessageGet+0xe4>)
 8005a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	e014      	b.n	8005a9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	3304      	adds	r3, #4
 8005a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68b8      	ldr	r0, [r7, #8]
 8005a7c:	f000 fc28 	bl	80062d0 <xQueueReceive>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d102      	bne.n	8005a8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005a86:	2310      	movs	r3, #16
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e006      	b.n	8005a9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <osMessageGet+0xc6>
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <osMessageGet+0xc8>
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	461c      	mov	r4, r3
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	372c      	adds	r7, #44	@ 0x2c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd90      	pop	{r4, r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <osDelayUntil+0x18>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	e000      	b.n	8005ad2 <osDelayUntil+0x1a>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 f8e1 	bl	8006c9c <vTaskDelayUntil>
  
  return osOK;
 8005ada:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f103 0208 	add.w	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 0208 	add.w	r2, r3, #8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f103 0208 	add.w	r2, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d103      	bne.n	8005ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e00c      	b.n	8005bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e002      	b.n	8005bb4 <vListInsert+0x2e>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d2f6      	bcs.n	8005bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6892      	ldr	r2, [r2, #8]
 8005c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6852      	ldr	r2, [r2, #4]
 8005c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d103      	bne.n	8005c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10d      	bne.n	8005c7c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	b672      	cpsid	i
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	b662      	cpsie	i
 8005c74:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005c7c:	f002 f826 	bl	8007ccc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	68f9      	ldr	r1, [r7, #12]
 8005c8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	441a      	add	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	3b01      	subs	r3, #1
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	22ff      	movs	r2, #255	@ 0xff
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	22ff      	movs	r2, #255	@ 0xff
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d114      	bne.n	8005cfc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01a      	beq.n	8005d10 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3310      	adds	r3, #16
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 faf8 	bl	80072d4 <xTaskRemoveFromEventList>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d012      	beq.n	8005d10 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cea:	4b0d      	ldr	r3, [pc, #52]	@ (8005d20 <xQueueGenericReset+0xd4>)
 8005cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	e009      	b.n	8005d10 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3310      	adds	r3, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff feef 	bl	8005ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3324      	adds	r3, #36	@ 0x24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff feea 	bl	8005ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d10:	f002 f812 	bl	8007d38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d14:	2301      	movs	r3, #1
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	@ 0x28
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10d      	bne.n	8005d54 <xQueueGenericCreate+0x30>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	b672      	cpsid	i
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	b662      	cpsie	i
 8005d4c:	613b      	str	r3, [r7, #16]
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	e004      	b.n	8005d6a <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3348      	adds	r3, #72	@ 0x48
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f002 f8da 	bl	8007f28 <pvPortMalloc>
 8005d74:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	3348      	adds	r3, #72	@ 0x48
 8005d84:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d86:	79fa      	ldrb	r2, [r7, #7]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f805 	bl	8005da2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d98:	69bb      	ldr	r3, [r7, #24]
	}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e002      	b.n	8005dc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	69b8      	ldr	r0, [r7, #24]
 8005dd4:	f7ff ff3a 	bl	8005c4c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e00:	2300      	movs	r3, #0
 8005e02:	2200      	movs	r2, #0
 8005e04:	2100      	movs	r1, #0
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f81c 	bl	8005e44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6939      	ldr	r1, [r7, #16]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	f7ff ff79 	bl	8005d24 <xQueueGenericCreate>
 8005e32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ffd3 	bl	8005de0 <prvInitialiseMutex>

		return xNewQueue;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
	}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08e      	sub	sp, #56	@ 0x38
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <xQueueGenericSend+0x38>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	b672      	cpsid	i
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	b662      	cpsie	i
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <xQueueGenericSend+0x46>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <xQueueGenericSend+0x4a>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <xQueueGenericSend+0x4c>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <xQueueGenericSend+0x6c>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	b672      	cpsid	i
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	b662      	cpsie	i
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d103      	bne.n	8005ebe <xQueueGenericSend+0x7a>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <xQueueGenericSend+0x7e>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueGenericSend+0x80>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10d      	bne.n	8005ee4 <xQueueGenericSend+0xa0>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	623b      	str	r3, [r7, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ee4:	f001 fb9c 	bl	8007620 <xTaskGetSchedulerState>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <xQueueGenericSend+0xb0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <xQueueGenericSend+0xb4>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <xQueueGenericSend+0xb6>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <xQueueGenericSend+0xd6>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	b672      	cpsid	i
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	b662      	cpsie	i
 8005f12:	61fb      	str	r3, [r7, #28]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f1a:	f001 fed7 	bl	8007ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <xQueueGenericSend+0xec>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d129      	bne.n	8005f84 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f36:	f000 fc6b 	bl	8006810 <prvCopyDataToQueue>
 8005f3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	3324      	adds	r3, #36	@ 0x24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 f9c3 	bl	80072d4 <xTaskRemoveFromEventList>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f54:	4b3f      	ldr	r3, [pc, #252]	@ (8006054 <xQueueGenericSend+0x210>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	e00a      	b.n	8005f7c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f6c:	4b39      	ldr	r3, [pc, #228]	@ (8006054 <xQueueGenericSend+0x210>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f7c:	f001 fedc 	bl	8007d38 <vPortExitCritical>
				return pdPASS;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e063      	b.n	800604c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f8a:	f001 fed5 	bl	8007d38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e05c      	b.n	800604c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 f9ff 	bl	80073a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fa6:	f001 fec7 	bl	8007d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005faa:	f000 ff81 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fae:	f001 fe8d 	bl	8007ccc <vPortEnterCritical>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d103      	bne.n	8005fc8 <xQueueGenericSend+0x184>
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d103      	bne.n	8005fde <xQueueGenericSend+0x19a>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fde:	f001 feab 	bl	8007d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fe2:	1d3a      	adds	r2, r7, #4
 8005fe4:	f107 0314 	add.w	r3, r7, #20
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 f9ee 	bl	80073cc <xTaskCheckForTimeOut>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d124      	bne.n	8006040 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ff8:	f000 fd02 	bl	8006a00 <prvIsQueueFull>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	3310      	adds	r3, #16
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4611      	mov	r1, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f001 f93a 	bl	8007284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006012:	f000 fc8d 	bl	8006930 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006016:	f000 ff59 	bl	8006ecc <xTaskResumeAll>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f47f af7c 	bne.w	8005f1a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006022:	4b0c      	ldr	r3, [pc, #48]	@ (8006054 <xQueueGenericSend+0x210>)
 8006024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	e772      	b.n	8005f1a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006036:	f000 fc7b 	bl	8006930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800603a:	f000 ff47 	bl	8006ecc <xTaskResumeAll>
 800603e:	e76c      	b.n	8005f1a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006042:	f000 fc75 	bl	8006930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006046:	f000 ff41 	bl	8006ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800604a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800604c:	4618      	mov	r0, r3
 800604e:	3738      	adds	r7, #56	@ 0x38
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	@ 0x38
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10d      	bne.n	800608c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	b672      	cpsid	i
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	b662      	cpsie	i
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <xQueueGenericSendFromISR+0x42>
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <xQueueGenericSendFromISR+0x46>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <xQueueGenericSendFromISR+0x48>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10d      	bne.n	80060c0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a8:	b672      	cpsid	i
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	b662      	cpsie	i
 80060b8:	623b      	str	r3, [r7, #32]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d103      	bne.n	80060ce <xQueueGenericSendFromISR+0x76>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <xQueueGenericSendFromISR+0x7a>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <xQueueGenericSendFromISR+0x7c>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	b672      	cpsid	i
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	b662      	cpsie	i
 80060ec:	61fb      	str	r3, [r7, #28]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060f4:	f001 fed2 	bl	8007e9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060f8:	f3ef 8211 	mrs	r2, BASEPRI
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	b672      	cpsid	i
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	b662      	cpsie	i
 8006110:	61ba      	str	r2, [r7, #24]
 8006112:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006114:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	429a      	cmp	r2, r3
 8006122:	d302      	bcc.n	800612a <xQueueGenericSendFromISR+0xd2>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d12c      	bne.n	8006184 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800613a:	f000 fb69 	bl	8006810 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800613e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d112      	bne.n	800616e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d016      	beq.n	800617e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	3324      	adds	r3, #36	@ 0x24
 8006154:	4618      	mov	r0, r3
 8006156:	f001 f8bd 	bl	80072d4 <xTaskRemoveFromEventList>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e007      	b.n	800617e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800616e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006172:	3301      	adds	r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	b25a      	sxtb	r2, r3
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800617e:	2301      	movs	r3, #1
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006182:	e001      	b.n	8006188 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006184:	2300      	movs	r3, #0
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006192:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006196:	4618      	mov	r0, r3
 8006198:	3738      	adds	r7, #56	@ 0x38
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b08e      	sub	sp, #56	@ 0x38
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <xQueueGiveFromISR+0x30>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	b672      	cpsid	i
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	b662      	cpsie	i
 80061c6:	623b      	str	r3, [r7, #32]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	b672      	cpsid	i
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	b662      	cpsie	i
 80061ea:	61fb      	str	r3, [r7, #28]
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <xQueueGiveFromISR+0x64>
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <xQueueGiveFromISR+0x68>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <xQueueGiveFromISR+0x6a>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10d      	bne.n	8006228 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	b672      	cpsid	i
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	b662      	cpsie	i
 8006220:	61bb      	str	r3, [r7, #24]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006228:	f001 fe38 	bl	8007e9c <vPortValidateInterruptPriority>
	__asm volatile
 800622c:	f3ef 8211 	mrs	r2, BASEPRI
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	b672      	cpsid	i
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	b662      	cpsie	i
 8006244:	617a      	str	r2, [r7, #20]
 8006246:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006248:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800624a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006258:	429a      	cmp	r2, r3
 800625a:	d22b      	bcs.n	80062b4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800626e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d112      	bne.n	800629e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d016      	beq.n	80062ae <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	3324      	adds	r3, #36	@ 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f825 	bl	80072d4 <xTaskRemoveFromEventList>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00e      	beq.n	80062ae <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e007      	b.n	80062ae <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800629e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a2:	3301      	adds	r3, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	b25a      	sxtb	r2, r3
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062ae:	2301      	movs	r3, #1
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b2:	e001      	b.n	80062b8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f383 8811 	msr	BASEPRI, r3
}
 80062c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3738      	adds	r7, #56	@ 0x38
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	@ 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <xQueueReceive+0x36>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	b672      	cpsid	i
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	b662      	cpsie	i
 80062fe:	623b      	str	r3, [r7, #32]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <xQueueReceive+0x44>
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <xQueueReceive+0x48>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <xQueueReceive+0x4a>
 8006318:	2300      	movs	r3, #0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <xQueueReceive+0x6a>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	b672      	cpsid	i
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	b662      	cpsie	i
 8006332:	61fb      	str	r3, [r7, #28]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800633a:	f001 f971 	bl	8007620 <xTaskGetSchedulerState>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <xQueueReceive+0x7a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <xQueueReceive+0x7e>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <xQueueReceive+0x80>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10d      	bne.n	8006370 <xQueueReceive+0xa0>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006358:	b672      	cpsid	i
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	b662      	cpsie	i
 8006368:	61bb      	str	r3, [r7, #24]
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006370:	f001 fcac 	bl	8007ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01f      	beq.n	80063c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006384:	f000 faae 	bl	80068e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	1e5a      	subs	r2, r3, #1
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00f      	beq.n	80063b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	3310      	adds	r3, #16
 800639c:	4618      	mov	r0, r3
 800639e:	f000 ff99 	bl	80072d4 <xTaskRemoveFromEventList>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063a8:	4b3c      	ldr	r3, [pc, #240]	@ (800649c <xQueueReceive+0x1cc>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063b8:	f001 fcbe 	bl	8007d38 <vPortExitCritical>
				return pdPASS;
 80063bc:	2301      	movs	r3, #1
 80063be:	e069      	b.n	8006494 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063c6:	f001 fcb7 	bl	8007d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e062      	b.n	8006494 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d106      	bne.n	80063e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063d4:	f107 0310 	add.w	r3, r7, #16
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 ffe1 	bl	80073a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063de:	2301      	movs	r3, #1
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063e2:	f001 fca9 	bl	8007d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063e6:	f000 fd63 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ea:	f001 fc6f 	bl	8007ccc <vPortEnterCritical>
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d103      	bne.n	8006404 <xQueueReceive+0x134>
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800640a:	b25b      	sxtb	r3, r3
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d103      	bne.n	800641a <xQueueReceive+0x14a>
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800641a:	f001 fc8d 	bl	8007d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800641e:	1d3a      	adds	r2, r7, #4
 8006420:	f107 0310 	add.w	r3, r7, #16
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 ffd0 	bl	80073cc <xTaskCheckForTimeOut>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d123      	bne.n	800647a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006434:	f000 face 	bl	80069d4 <prvIsQueueEmpty>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	3324      	adds	r3, #36	@ 0x24
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f000 ff1c 	bl	8007284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800644c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800644e:	f000 fa6f 	bl	8006930 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006452:	f000 fd3b 	bl	8006ecc <xTaskResumeAll>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d189      	bne.n	8006370 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800645c:	4b0f      	ldr	r3, [pc, #60]	@ (800649c <xQueueReceive+0x1cc>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	e780      	b.n	8006370 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800646e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006470:	f000 fa5e 	bl	8006930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006474:	f000 fd2a 	bl	8006ecc <xTaskResumeAll>
 8006478:	e77a      	b.n	8006370 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800647a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800647c:	f000 fa58 	bl	8006930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006480:	f000 fd24 	bl	8006ecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006486:	f000 faa5 	bl	80069d4 <prvIsQueueEmpty>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	f43f af6f 	beq.w	8006370 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006494:	4618      	mov	r0, r3
 8006496:	3730      	adds	r7, #48	@ 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08e      	sub	sp, #56	@ 0x38
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	b672      	cpsid	i
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	b662      	cpsie	i
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	e7fd      	b.n	80064d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	b672      	cpsid	i
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	b662      	cpsie	i
 80064f4:	61fb      	str	r3, [r7, #28]
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	e7fd      	b.n	80064f8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064fc:	f001 f890 	bl	8007620 <xTaskGetSchedulerState>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <xQueueSemaphoreTake+0x6c>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <xQueueSemaphoreTake+0x70>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <xQueueSemaphoreTake+0x72>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	b672      	cpsid	i
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	b662      	cpsie	i
 800652a:	61bb      	str	r3, [r7, #24]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006532:	f001 fbcb 	bl	8007ccc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d024      	beq.n	800658c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800654a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006552:	f001 fa2f 	bl	80079b4 <pvTaskIncrementMutexHeldCount>
 8006556:	4602      	mov	r2, r0
 8006558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800655c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	3310      	adds	r3, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f000 feb3 	bl	80072d4 <xTaskRemoveFromEventList>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006574:	4b55      	ldr	r3, [pc, #340]	@ (80066cc <xQueueSemaphoreTake+0x22c>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006584:	f001 fbd8 	bl	8007d38 <vPortExitCritical>
				return pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	e09a      	b.n	80066c2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d114      	bne.n	80065bc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	617b      	str	r3, [r7, #20]
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80065b4:	f001 fbc0 	bl	8007d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e082      	b.n	80066c2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 feea 	bl	80073a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065d0:	f001 fbb2 	bl	8007d38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d4:	f000 fc6c 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d8:	f001 fb78 	bl	8007ccc <vPortEnterCritical>
 80065dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d103      	bne.n	80065f2 <xQueueSemaphoreTake+0x152>
 80065ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d103      	bne.n	8006608 <xQueueSemaphoreTake+0x168>
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006608:	f001 fb96 	bl	8007d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800660c:	463a      	mov	r2, r7
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fed9 	bl	80073cc <xTaskCheckForTimeOut>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d132      	bne.n	8006686 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006622:	f000 f9d7 	bl	80069d4 <prvIsQueueEmpty>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d026      	beq.n	800667a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800662c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006634:	f001 fb4a 	bl	8007ccc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f001 f80d 	bl	800765c <xTaskPriorityInherit>
 8006642:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006644:	f001 fb78 	bl	8007d38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664a:	3324      	adds	r3, #36	@ 0x24
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	4611      	mov	r1, r2
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fe17 	bl	8007284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006658:	f000 f96a 	bl	8006930 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800665c:	f000 fc36 	bl	8006ecc <xTaskResumeAll>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	f47f af65 	bne.w	8006532 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006668:	4b18      	ldr	r3, [pc, #96]	@ (80066cc <xQueueSemaphoreTake+0x22c>)
 800666a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	e75b      	b.n	8006532 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800667a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800667c:	f000 f958 	bl	8006930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006680:	f000 fc24 	bl	8006ecc <xTaskResumeAll>
 8006684:	e755      	b.n	8006532 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006688:	f000 f952 	bl	8006930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800668c:	f000 fc1e 	bl	8006ecc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006692:	f000 f99f 	bl	80069d4 <prvIsQueueEmpty>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	f43f af4a 	beq.w	8006532 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80066a4:	f001 fb12 	bl	8007ccc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80066a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066aa:	f000 f899 	bl	80067e0 <prvGetDisinheritPriorityAfterTimeout>
 80066ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 f8dc 	bl	8007874 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80066bc:	f001 fb3c 	bl	8007d38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3738      	adds	r7, #56	@ 0x38
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	@ 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	b672      	cpsid	i
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	b662      	cpsie	i
 80066fa:	623b      	str	r3, [r7, #32]
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	e7fd      	b.n	80066fe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <xQueueReceiveFromISR+0x40>
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <xQueueReceiveFromISR+0x44>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <xQueueReceiveFromISR+0x46>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10d      	bne.n	8006736 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	b672      	cpsid	i
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	b662      	cpsie	i
 800672e:	61fb      	str	r3, [r7, #28]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006736:	f001 fbb1 	bl	8007e9c <vPortValidateInterruptPriority>
	__asm volatile
 800673a:	f3ef 8211 	mrs	r2, BASEPRI
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	b672      	cpsid	i
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	b662      	cpsie	i
 8006752:	61ba      	str	r2, [r7, #24]
 8006754:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006756:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02f      	beq.n	80067c6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800676c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006774:	f000 f8b6 	bl	80068e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	1e5a      	subs	r2, r3, #1
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006780:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d112      	bne.n	80067b0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d016      	beq.n	80067c0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	3310      	adds	r3, #16
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fd9c 	bl	80072d4 <xTaskRemoveFromEventList>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e007      	b.n	80067c0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80067b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067b4:	3301      	adds	r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	b25a      	sxtb	r2, r3
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80067c0:	2301      	movs	r3, #1
 80067c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c4:	e001      	b.n	80067ca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f383 8811 	msr	BASEPRI, r3
}
 80067d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3738      	adds	r7, #56	@ 0x38
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1c3 0307 	rsb	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e001      	b.n	8006802 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006802:	68fb      	ldr	r3, [r7, #12]
	}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10d      	bne.n	800684a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d14d      	bne.n	80068d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ff8e 	bl	800775c <xTaskPriorityDisinherit>
 8006840:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
 8006848:	e043      	b.n	80068d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d119      	bne.n	8006884 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6858      	ldr	r0, [r3, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	461a      	mov	r2, r3
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	f002 fea6 	bl	80095ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d32b      	bcc.n	80068d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	e026      	b.n	80068d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68d8      	ldr	r0, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688c:	461a      	mov	r2, r3
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	f002 fe8c 	bl	80095ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	425b      	negs	r3, r3
 800689e:	441a      	add	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d207      	bcs.n	80068c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	425b      	negs	r3, r3
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d105      	bne.n	80068d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068da:	697b      	ldr	r3, [r7, #20]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d018      	beq.n	8006928 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	441a      	add	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	d303      	bcc.n	8006918 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68d9      	ldr	r1, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006920:	461a      	mov	r2, r3
 8006922:	6838      	ldr	r0, [r7, #0]
 8006924:	f002 fe42 	bl	80095ac <memcpy>
	}
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006938:	f001 f9c8 	bl	8007ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006942:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006944:	e011      	b.n	800696a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	d012      	beq.n	8006974 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3324      	adds	r3, #36	@ 0x24
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fcbe 	bl	80072d4 <xTaskRemoveFromEventList>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800695e:	f000 fd9d 	bl	800749c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	3b01      	subs	r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dce9      	bgt.n	8006946 <prvUnlockQueue+0x16>
 8006972:	e000      	b.n	8006976 <prvUnlockQueue+0x46>
					break;
 8006974:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	22ff      	movs	r2, #255	@ 0xff
 800697a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800697e:	f001 f9db 	bl	8007d38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006982:	f001 f9a3 	bl	8007ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800698c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800698e:	e011      	b.n	80069b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d012      	beq.n	80069be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3310      	adds	r3, #16
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fc99 	bl	80072d4 <xTaskRemoveFromEventList>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069a8:	f000 fd78 	bl	800749c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dce9      	bgt.n	8006990 <prvUnlockQueue+0x60>
 80069bc:	e000      	b.n	80069c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	22ff      	movs	r2, #255	@ 0xff
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069c8:	f001 f9b6 	bl	8007d38 <vPortExitCritical>
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069dc:	f001 f976 	bl	8007ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069e8:	2301      	movs	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e001      	b.n	80069f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069f2:	f001 f9a1 	bl	8007d38 <vPortExitCritical>

	return xReturn;
 80069f6:	68fb      	ldr	r3, [r7, #12]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a08:	f001 f960 	bl	8007ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d102      	bne.n	8006a1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e001      	b.n	8006a22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a22:	f001 f989 	bl	8007d38 <vPortExitCritical>

	return xReturn;
 8006a26:	68fb      	ldr	r3, [r7, #12]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08c      	sub	sp, #48	@ 0x30
 8006a34:	af04      	add	r7, sp, #16
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fa6f 	bl	8007f28 <pvPortMalloc>
 8006a4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a52:	2054      	movs	r0, #84	@ 0x54
 8006a54:	f001 fa68 	bl	8007f28 <pvPortMalloc>
 8006a58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a66:	e005      	b.n	8006a74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f001 fb2b 	bl	80080c4 <vPortFree>
 8006a6e:	e001      	b.n	8006a74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d013      	beq.n	8006aa2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f80e 	bl	8006ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a96:	69f8      	ldr	r0, [r7, #28]
 8006a98:	f000 f896 	bl	8006bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	e002      	b.n	8006aa8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b088      	sub	sp, #32
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006aca:	440b      	add	r3, r1
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f023 0307 	bic.w	r3, r3, #7
 8006ad8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00d      	beq.n	8006b00 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae8:	b672      	cpsid	i
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	b662      	cpsie	i
 8006af8:	617b      	str	r3, [r7, #20]
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	e7fd      	b.n	8006afc <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01f      	beq.n	8006b46 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	e012      	b.n	8006b32 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	7819      	ldrb	r1, [r3, #0]
 8006b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	3334      	adds	r3, #52	@ 0x34
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	2b0f      	cmp	r3, #15
 8006b36:	d9e9      	bls.n	8006b0c <prvInitialiseNewTask+0x5a>
 8006b38:	e000      	b.n	8006b3c <prvInitialiseNewTask+0x8a>
			{
				break;
 8006b3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b44:	e003      	b.n	8006b4e <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d901      	bls.n	8006b58 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b54:	2306      	movs	r3, #6
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b62:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2200      	movs	r2, #0
 8006b68:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe ffd8 	bl	8005b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	3318      	adds	r3, #24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe ffd3 	bl	8005b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	f1c3 0207 	rsb	r2, r3, #7
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	68f9      	ldr	r1, [r7, #12]
 8006ba6:	69b8      	ldr	r0, [r7, #24]
 8006ba8:	f000 ff7e 	bl	8007aa8 <pxPortInitialiseStack>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bbe:	bf00      	nop
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bd0:	f001 f87c 	bl	8007ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c80 <prvAddNewTaskToReadyList+0xb8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	4a29      	ldr	r2, [pc, #164]	@ (8006c80 <prvAddNewTaskToReadyList+0xb8>)
 8006bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bde:	4b29      	ldr	r3, [pc, #164]	@ (8006c84 <prvAddNewTaskToReadyList+0xbc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006be6:	4a27      	ldr	r2, [pc, #156]	@ (8006c84 <prvAddNewTaskToReadyList+0xbc>)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bec:	4b24      	ldr	r3, [pc, #144]	@ (8006c80 <prvAddNewTaskToReadyList+0xb8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d110      	bne.n	8006c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bf4:	f000 fc76 	bl	80074e4 <prvInitialiseTaskLists>
 8006bf8:	e00d      	b.n	8006c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bfa:	4b23      	ldr	r3, [pc, #140]	@ (8006c88 <prvAddNewTaskToReadyList+0xc0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c02:	4b20      	ldr	r3, [pc, #128]	@ (8006c84 <prvAddNewTaskToReadyList+0xbc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d802      	bhi.n	8006c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c10:	4a1c      	ldr	r2, [pc, #112]	@ (8006c84 <prvAddNewTaskToReadyList+0xbc>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c16:	4b1d      	ldr	r3, [pc, #116]	@ (8006c8c <prvAddNewTaskToReadyList+0xc4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c8c <prvAddNewTaskToReadyList+0xc4>)
 8006c1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c24:	2201      	movs	r2, #1
 8006c26:	409a      	lsls	r2, r3
 8006c28:	4b19      	ldr	r3, [pc, #100]	@ (8006c90 <prvAddNewTaskToReadyList+0xc8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	4a18      	ldr	r2, [pc, #96]	@ (8006c90 <prvAddNewTaskToReadyList+0xc8>)
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <prvAddNewTaskToReadyList+0xcc>)
 8006c40:	441a      	add	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f7fe ff78 	bl	8005b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c4e:	f001 f873 	bl	8007d38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c52:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <prvAddNewTaskToReadyList+0xc0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <prvAddNewTaskToReadyList+0xbc>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d207      	bcs.n	8006c78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <prvAddNewTaskToReadyList+0xd0>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20000780 	.word	0x20000780
 8006c84:	20000680 	.word	0x20000680
 8006c88:	2000078c 	.word	0x2000078c
 8006c8c:	2000079c 	.word	0x2000079c
 8006c90:	20000788 	.word	0x20000788
 8006c94:	20000684 	.word	0x20000684
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	@ 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <vTaskDelayUntil+0x30>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	617b      	str	r3, [r7, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <vTaskDelayUntil+0x52>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd6:	b672      	cpsid	i
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	b662      	cpsie	i
 8006ce6:	613b      	str	r3, [r7, #16]
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8006cee:	4b2b      	ldr	r3, [pc, #172]	@ (8006d9c <vTaskDelayUntil+0x100>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <vTaskDelayUntil+0x76>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	b672      	cpsid	i
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	b662      	cpsie	i
 8006d0a:	60fb      	str	r3, [r7, #12]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8006d12:	f000 f8cd 	bl	8006eb0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006d16:	4b22      	ldr	r3, [pc, #136]	@ (8006da0 <vTaskDelayUntil+0x104>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	4413      	add	r3, r2
 8006d24:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d20b      	bcs.n	8006d48 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d211      	bcs.n	8006d5e <vTaskDelayUntil+0xc2>
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d90d      	bls.n	8006d5e <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006d42:	2301      	movs	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d46:	e00a      	b.n	8006d5e <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d303      	bcc.n	8006d5a <vTaskDelayUntil+0xbe>
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d901      	bls.n	8006d5e <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fe32 	bl	80079dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006d78:	f000 f8a8 	bl	8006ecc <xTaskResumeAll>
 8006d7c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d107      	bne.n	8006d94 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8006d84:	4b07      	ldr	r3, [pc, #28]	@ (8006da4 <vTaskDelayUntil+0x108>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d94:	bf00      	nop
 8006d96:	3728      	adds	r7, #40	@ 0x28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	200007a8 	.word	0x200007a8
 8006da0:	20000784 	.word	0x20000784
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01a      	beq.n	8006df0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dba:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <vTaskDelay+0x68>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <vTaskDelay+0x36>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc6:	b672      	cpsid	i
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	b662      	cpsie	i
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006dde:	f000 f867 	bl	8006eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006de2:	2100      	movs	r1, #0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fdf9 	bl	80079dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dea:	f000 f86f 	bl	8006ecc <xTaskResumeAll>
 8006dee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d107      	bne.n	8006e06 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <vTaskDelay+0x6c>)
 8006df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	200007a8 	.word	0x200007a8
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e98 <vTaskStartScheduler+0x80>)
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	2300      	movs	r3, #0
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	2280      	movs	r2, #128	@ 0x80
 8006e2a:	491c      	ldr	r1, [pc, #112]	@ (8006e9c <vTaskStartScheduler+0x84>)
 8006e2c:	481c      	ldr	r0, [pc, #112]	@ (8006ea0 <vTaskStartScheduler+0x88>)
 8006e2e:	f7ff fdff 	bl	8006a30 <xTaskCreate>
 8006e32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d118      	bne.n	8006e6c <vTaskStartScheduler+0x54>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	b672      	cpsid	i
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	b662      	cpsie	i
 8006e4e:	60bb      	str	r3, [r7, #8]
}
 8006e50:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e52:	4b14      	ldr	r3, [pc, #80]	@ (8006ea4 <vTaskStartScheduler+0x8c>)
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ea8 <vTaskStartScheduler+0x90>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e60:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <vTaskStartScheduler+0x94>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e66:	f000 feb3 	bl	8007bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e6a:	e011      	b.n	8006e90 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d10d      	bne.n	8006e90 <vTaskStartScheduler+0x78>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	b672      	cpsid	i
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	b662      	cpsie	i
 8006e88:	607b      	str	r3, [r7, #4]
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	e7fd      	b.n	8006e8c <vTaskStartScheduler+0x74>
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200007a4 	.word	0x200007a4
 8006e9c:	080096c0 	.word	0x080096c0
 8006ea0:	080074b5 	.word	0x080074b5
 8006ea4:	200007a0 	.word	0x200007a0
 8006ea8:	2000078c 	.word	0x2000078c
 8006eac:	20000784 	.word	0x20000784

08006eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <vTaskSuspendAll+0x18>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	4a03      	ldr	r2, [pc, #12]	@ (8006ec8 <vTaskSuspendAll+0x18>)
 8006ebc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	200007a8 	.word	0x200007a8

08006ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eda:	4b43      	ldr	r3, [pc, #268]	@ (8006fe8 <xTaskResumeAll+0x11c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <xTaskResumeAll+0x32>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	b672      	cpsid	i
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	b662      	cpsie	i
 8006ef6:	603b      	str	r3, [r7, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006efe:	f000 fee5 	bl	8007ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f02:	4b39      	ldr	r3, [pc, #228]	@ (8006fe8 <xTaskResumeAll+0x11c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4a37      	ldr	r2, [pc, #220]	@ (8006fe8 <xTaskResumeAll+0x11c>)
 8006f0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0c:	4b36      	ldr	r3, [pc, #216]	@ (8006fe8 <xTaskResumeAll+0x11c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d161      	bne.n	8006fd8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f14:	4b35      	ldr	r3, [pc, #212]	@ (8006fec <xTaskResumeAll+0x120>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d05d      	beq.n	8006fd8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1c:	e02e      	b.n	8006f7c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1e:	4b34      	ldr	r3, [pc, #208]	@ (8006ff0 <xTaskResumeAll+0x124>)
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3318      	adds	r3, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fe64 	bl	8005bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fe5f 	bl	8005bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	2201      	movs	r2, #1
 8006f40:	409a      	lsls	r2, r3
 8006f42:	4b2c      	ldr	r3, [pc, #176]	@ (8006ff4 <xTaskResumeAll+0x128>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff4 <xTaskResumeAll+0x128>)
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4a27      	ldr	r2, [pc, #156]	@ (8006ff8 <xTaskResumeAll+0x12c>)
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f7fe fdeb 	bl	8005b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6c:	4b23      	ldr	r3, [pc, #140]	@ (8006ffc <xTaskResumeAll+0x130>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d302      	bcc.n	8006f7c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006f76:	4b22      	ldr	r3, [pc, #136]	@ (8007000 <xTaskResumeAll+0x134>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ff0 <xTaskResumeAll+0x124>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1cc      	bne.n	8006f1e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f8a:	f000 fb29 	bl	80075e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8007004 <xTaskResumeAll+0x138>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f9a:	f000 f859 	bl	8007050 <xTaskIncrementTick>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006fa4:	4b16      	ldr	r3, [pc, #88]	@ (8007000 <xTaskResumeAll+0x134>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f1      	bne.n	8006f9a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006fb6:	4b13      	ldr	r3, [pc, #76]	@ (8007004 <xTaskResumeAll+0x138>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fbc:	4b10      	ldr	r3, [pc, #64]	@ (8007000 <xTaskResumeAll+0x134>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007008 <xTaskResumeAll+0x13c>)
 8006fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fd8:	f000 feae 	bl	8007d38 <vPortExitCritical>

	return xAlreadyYielded;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200007a8 	.word	0x200007a8
 8006fec:	20000780 	.word	0x20000780
 8006ff0:	20000740 	.word	0x20000740
 8006ff4:	20000788 	.word	0x20000788
 8006ff8:	20000684 	.word	0x20000684
 8006ffc:	20000680 	.word	0x20000680
 8007000:	20000794 	.word	0x20000794
 8007004:	20000790 	.word	0x20000790
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007012:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <xTaskGetTickCount+0x1c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007018:	687b      	ldr	r3, [r7, #4]
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000784 	.word	0x20000784

0800702c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007032:	f000 ff33 	bl	8007e9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007036:	2300      	movs	r3, #0
 8007038:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800703a:	4b04      	ldr	r3, [pc, #16]	@ (800704c <xTaskGetTickCountFromISR+0x20>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007040:	683b      	ldr	r3, [r7, #0]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000784 	.word	0x20000784

08007050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705a:	4b50      	ldr	r3, [pc, #320]	@ (800719c <xTaskIncrementTick+0x14c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f040 808b 	bne.w	800717a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007064:	4b4e      	ldr	r3, [pc, #312]	@ (80071a0 <xTaskIncrementTick+0x150>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800706c:	4a4c      	ldr	r2, [pc, #304]	@ (80071a0 <xTaskIncrementTick+0x150>)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d123      	bne.n	80070c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007078:	4b4a      	ldr	r3, [pc, #296]	@ (80071a4 <xTaskIncrementTick+0x154>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <xTaskIncrementTick+0x4e>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	b672      	cpsid	i
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	b662      	cpsie	i
 8007096:	603b      	str	r3, [r7, #0]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <xTaskIncrementTick+0x4a>
 800709e:	4b41      	ldr	r3, [pc, #260]	@ (80071a4 <xTaskIncrementTick+0x154>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	4b40      	ldr	r3, [pc, #256]	@ (80071a8 <xTaskIncrementTick+0x158>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3e      	ldr	r2, [pc, #248]	@ (80071a4 <xTaskIncrementTick+0x154>)
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	4a3e      	ldr	r2, [pc, #248]	@ (80071a8 <xTaskIncrementTick+0x158>)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	4b3e      	ldr	r3, [pc, #248]	@ (80071ac <xTaskIncrementTick+0x15c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	4a3c      	ldr	r2, [pc, #240]	@ (80071ac <xTaskIncrementTick+0x15c>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	f000 fa90 	bl	80075e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070c0:	4b3b      	ldr	r3, [pc, #236]	@ (80071b0 <xTaskIncrementTick+0x160>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d348      	bcc.n	800715c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ca:	4b36      	ldr	r3, [pc, #216]	@ (80071a4 <xTaskIncrementTick+0x154>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d4:	4b36      	ldr	r3, [pc, #216]	@ (80071b0 <xTaskIncrementTick+0x160>)
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	601a      	str	r2, [r3, #0]
					break;
 80070dc:	e03e      	b.n	800715c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070de:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <xTaskIncrementTick+0x154>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d203      	bcs.n	80070fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070f6:	4a2e      	ldr	r2, [pc, #184]	@ (80071b0 <xTaskIncrementTick+0x160>)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070fc:	e02e      	b.n	800715c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fd78 	bl	8005bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	3318      	adds	r3, #24
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe fd6f 	bl	8005bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	2201      	movs	r2, #1
 8007120:	409a      	lsls	r2, r3
 8007122:	4b24      	ldr	r3, [pc, #144]	@ (80071b4 <xTaskIncrementTick+0x164>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	4a22      	ldr	r2, [pc, #136]	@ (80071b4 <xTaskIncrementTick+0x164>)
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4a1f      	ldr	r2, [pc, #124]	@ (80071b8 <xTaskIncrementTick+0x168>)
 800713a:	441a      	add	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	3304      	adds	r3, #4
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f7fe fcfb 	bl	8005b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714c:	4b1b      	ldr	r3, [pc, #108]	@ (80071bc <xTaskIncrementTick+0x16c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	429a      	cmp	r2, r3
 8007154:	d3b9      	bcc.n	80070ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715a:	e7b6      	b.n	80070ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800715c:	4b17      	ldr	r3, [pc, #92]	@ (80071bc <xTaskIncrementTick+0x16c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007162:	4915      	ldr	r1, [pc, #84]	@ (80071b8 <xTaskIncrementTick+0x168>)
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d907      	bls.n	8007184 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e004      	b.n	8007184 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800717a:	4b11      	ldr	r3, [pc, #68]	@ (80071c0 <xTaskIncrementTick+0x170>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3301      	adds	r3, #1
 8007180:	4a0f      	ldr	r2, [pc, #60]	@ (80071c0 <xTaskIncrementTick+0x170>)
 8007182:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007184:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <xTaskIncrementTick+0x174>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007190:	697b      	ldr	r3, [r7, #20]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200007a8 	.word	0x200007a8
 80071a0:	20000784 	.word	0x20000784
 80071a4:	20000738 	.word	0x20000738
 80071a8:	2000073c 	.word	0x2000073c
 80071ac:	20000798 	.word	0x20000798
 80071b0:	200007a0 	.word	0x200007a0
 80071b4:	20000788 	.word	0x20000788
 80071b8:	20000684 	.word	0x20000684
 80071bc:	20000680 	.word	0x20000680
 80071c0:	20000790 	.word	0x20000790
 80071c4:	20000794 	.word	0x20000794

080071c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ce:	4b28      	ldr	r3, [pc, #160]	@ (8007270 <vTaskSwitchContext+0xa8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071d6:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <vTaskSwitchContext+0xac>)
 80071d8:	2201      	movs	r2, #1
 80071da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071dc:	e042      	b.n	8007264 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80071de:	4b25      	ldr	r3, [pc, #148]	@ (8007274 <vTaskSwitchContext+0xac>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e4:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <vTaskSwitchContext+0xb0>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	fab3 f383 	clz	r3, r3
 80071f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	f1c3 031f 	rsb	r3, r3, #31
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	4920      	ldr	r1, [pc, #128]	@ (800727c <vTaskSwitchContext+0xb4>)
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10d      	bne.n	800722a <vTaskSwitchContext+0x62>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	607b      	str	r3, [r7, #4]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <vTaskSwitchContext+0x5e>
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4a11      	ldr	r2, [pc, #68]	@ (800727c <vTaskSwitchContext+0xb4>)
 8007236:	4413      	add	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3308      	adds	r3, #8
 800724c:	429a      	cmp	r2, r3
 800724e:	d104      	bne.n	800725a <vTaskSwitchContext+0x92>
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4a07      	ldr	r2, [pc, #28]	@ (8007280 <vTaskSwitchContext+0xb8>)
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	200007a8 	.word	0x200007a8
 8007274:	20000794 	.word	0x20000794
 8007278:	20000788 	.word	0x20000788
 800727c:	20000684 	.word	0x20000684
 8007280:	20000680 	.word	0x20000680

08007284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	b672      	cpsid	i
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	b662      	cpsie	i
 80072a8:	60fb      	str	r3, [r7, #12]
}
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
 80072ae:	e7fd      	b.n	80072ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <vTaskPlaceOnEventList+0x4c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3318      	adds	r3, #24
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fe fc64 	bl	8005b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072be:	2101      	movs	r1, #1
 80072c0:	6838      	ldr	r0, [r7, #0]
 80072c2:	f000 fb8b 	bl	80079dc <prvAddCurrentTaskToDelayedList>
}
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000680 	.word	0x20000680

080072d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10d      	bne.n	8007306 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	b672      	cpsid	i
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	b662      	cpsie	i
 80072fe:	60fb      	str	r3, [r7, #12]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	3318      	adds	r3, #24
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fc74 	bl	8005bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007310:	4b1d      	ldr	r3, [pc, #116]	@ (8007388 <xTaskRemoveFromEventList+0xb4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11c      	bne.n	8007352 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	3304      	adds	r3, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fc6b 	bl	8005bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	2201      	movs	r2, #1
 8007328:	409a      	lsls	r2, r3
 800732a:	4b18      	ldr	r3, [pc, #96]	@ (800738c <xTaskRemoveFromEventList+0xb8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4313      	orrs	r3, r2
 8007330:	4a16      	ldr	r2, [pc, #88]	@ (800738c <xTaskRemoveFromEventList+0xb8>)
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4a13      	ldr	r2, [pc, #76]	@ (8007390 <xTaskRemoveFromEventList+0xbc>)
 8007342:	441a      	add	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	3304      	adds	r3, #4
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7fe fbf7 	bl	8005b3e <vListInsertEnd>
 8007350:	e005      	b.n	800735e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3318      	adds	r3, #24
 8007356:	4619      	mov	r1, r3
 8007358:	480e      	ldr	r0, [pc, #56]	@ (8007394 <xTaskRemoveFromEventList+0xc0>)
 800735a:	f7fe fbf0 	bl	8005b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007362:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <xTaskRemoveFromEventList+0xc4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	429a      	cmp	r2, r3
 800736a:	d905      	bls.n	8007378 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007370:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <xTaskRemoveFromEventList+0xc8>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e001      	b.n	800737c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800737c:	697b      	ldr	r3, [r7, #20]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200007a8 	.word	0x200007a8
 800738c:	20000788 	.word	0x20000788
 8007390:	20000684 	.word	0x20000684
 8007394:	20000740 	.word	0x20000740
 8007398:	20000680 	.word	0x20000680
 800739c:	20000794 	.word	0x20000794

080073a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073a8:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <vTaskInternalSetTimeOutState+0x24>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073b0:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <vTaskInternalSetTimeOutState+0x28>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	605a      	str	r2, [r3, #4]
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	20000798 	.word	0x20000798
 80073c8:	20000784 	.word	0x20000784

080073cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10d      	bne.n	80073f8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	b672      	cpsid	i
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	b662      	cpsie	i
 80073f0:	613b      	str	r3, [r7, #16]
}
 80073f2:	bf00      	nop
 80073f4:	bf00      	nop
 80073f6:	e7fd      	b.n	80073f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	b672      	cpsid	i
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	b662      	cpsie	i
 8007412:	60fb      	str	r3, [r7, #12]
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800741a:	f000 fc57 	bl	8007ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800741e:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <xTaskCheckForTimeOut+0xc8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d102      	bne.n	800743e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e023      	b.n	8007486 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b15      	ldr	r3, [pc, #84]	@ (8007498 <xTaskCheckForTimeOut+0xcc>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d007      	beq.n	800745a <xTaskCheckForTimeOut+0x8e>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	429a      	cmp	r2, r3
 8007452:	d302      	bcc.n	800745a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007454:	2301      	movs	r3, #1
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e015      	b.n	8007486 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	429a      	cmp	r2, r3
 8007462:	d20b      	bcs.n	800747c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff95 	bl	80073a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e004      	b.n	8007486 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007482:	2301      	movs	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007486:	f000 fc57 	bl	8007d38 <vPortExitCritical>

	return xReturn;
 800748a:	69fb      	ldr	r3, [r7, #28]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000784 	.word	0x20000784
 8007498:	20000798 	.word	0x20000798

0800749c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074a0:	4b03      	ldr	r3, [pc, #12]	@ (80074b0 <vTaskMissedYield+0x14>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000794 	.word	0x20000794

080074b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074bc:	f000 f852 	bl	8007564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074c0:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <prvIdleTask+0x28>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d9f9      	bls.n	80074bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <prvIdleTask+0x2c>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d8:	e7f0      	b.n	80074bc <prvIdleTask+0x8>
 80074da:	bf00      	nop
 80074dc:	20000684 	.word	0x20000684
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ea:	2300      	movs	r3, #0
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	e00c      	b.n	800750a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4a12      	ldr	r2, [pc, #72]	@ (8007544 <prvInitialiseTaskLists+0x60>)
 80074fc:	4413      	add	r3, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe faf0 	bl	8005ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b06      	cmp	r3, #6
 800750e:	d9ef      	bls.n	80074f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007510:	480d      	ldr	r0, [pc, #52]	@ (8007548 <prvInitialiseTaskLists+0x64>)
 8007512:	f7fe fae7 	bl	8005ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007516:	480d      	ldr	r0, [pc, #52]	@ (800754c <prvInitialiseTaskLists+0x68>)
 8007518:	f7fe fae4 	bl	8005ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800751c:	480c      	ldr	r0, [pc, #48]	@ (8007550 <prvInitialiseTaskLists+0x6c>)
 800751e:	f7fe fae1 	bl	8005ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007522:	480c      	ldr	r0, [pc, #48]	@ (8007554 <prvInitialiseTaskLists+0x70>)
 8007524:	f7fe fade 	bl	8005ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007528:	480b      	ldr	r0, [pc, #44]	@ (8007558 <prvInitialiseTaskLists+0x74>)
 800752a:	f7fe fadb 	bl	8005ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <prvInitialiseTaskLists+0x78>)
 8007530:	4a05      	ldr	r2, [pc, #20]	@ (8007548 <prvInitialiseTaskLists+0x64>)
 8007532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007534:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <prvInitialiseTaskLists+0x7c>)
 8007536:	4a05      	ldr	r2, [pc, #20]	@ (800754c <prvInitialiseTaskLists+0x68>)
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000684 	.word	0x20000684
 8007548:	20000710 	.word	0x20000710
 800754c:	20000724 	.word	0x20000724
 8007550:	20000740 	.word	0x20000740
 8007554:	20000754 	.word	0x20000754
 8007558:	2000076c 	.word	0x2000076c
 800755c:	20000738 	.word	0x20000738
 8007560:	2000073c 	.word	0x2000073c

08007564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800756a:	e019      	b.n	80075a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800756c:	f000 fbae 	bl	8007ccc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007570:	4b10      	ldr	r3, [pc, #64]	@ (80075b4 <prvCheckTasksWaitingTermination+0x50>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fb3b 	bl	8005bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007582:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <prvCheckTasksWaitingTermination+0x54>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3b01      	subs	r3, #1
 8007588:	4a0b      	ldr	r2, [pc, #44]	@ (80075b8 <prvCheckTasksWaitingTermination+0x54>)
 800758a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800758c:	4b0b      	ldr	r3, [pc, #44]	@ (80075bc <prvCheckTasksWaitingTermination+0x58>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <prvCheckTasksWaitingTermination+0x58>)
 8007594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007596:	f000 fbcf 	bl	8007d38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f810 	bl	80075c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075a0:	4b06      	ldr	r3, [pc, #24]	@ (80075bc <prvCheckTasksWaitingTermination+0x58>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e1      	bne.n	800756c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000754 	.word	0x20000754
 80075b8:	20000780 	.word	0x20000780
 80075bc:	20000768 	.word	0x20000768

080075c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fd79 	bl	80080c4 <vPortFree>
			vPortFree( pxTCB );
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fd76 	bl	80080c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007618 <prvResetNextTaskUnblockTime+0x38>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075f0:	4b0a      	ldr	r3, [pc, #40]	@ (800761c <prvResetNextTaskUnblockTime+0x3c>)
 80075f2:	f04f 32ff 	mov.w	r2, #4294967295
 80075f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075f8:	e008      	b.n	800760c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fa:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <prvResetNextTaskUnblockTime+0x38>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a04      	ldr	r2, [pc, #16]	@ (800761c <prvResetNextTaskUnblockTime+0x3c>)
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	20000738 	.word	0x20000738
 800761c:	200007a0 	.word	0x200007a0

08007620 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007626:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <xTaskGetSchedulerState+0x34>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800762e:	2301      	movs	r3, #1
 8007630:	607b      	str	r3, [r7, #4]
 8007632:	e008      	b.n	8007646 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007634:	4b08      	ldr	r3, [pc, #32]	@ (8007658 <xTaskGetSchedulerState+0x38>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800763c:	2302      	movs	r3, #2
 800763e:	607b      	str	r3, [r7, #4]
 8007640:	e001      	b.n	8007646 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007646:	687b      	ldr	r3, [r7, #4]
	}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	2000078c 	.word	0x2000078c
 8007658:	200007a8 	.word	0x200007a8

0800765c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d069      	beq.n	8007746 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007676:	4b36      	ldr	r3, [pc, #216]	@ (8007750 <xTaskPriorityInherit+0xf4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	429a      	cmp	r2, r3
 800767e:	d259      	bcs.n	8007734 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	db06      	blt.n	8007696 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007688:	4b31      	ldr	r3, [pc, #196]	@ (8007750 <xTaskPriorityInherit+0xf4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768e:	f1c3 0207 	rsb	r2, r3, #7
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6959      	ldr	r1, [r3, #20]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007754 <xTaskPriorityInherit+0xf8>)
 80076a8:	4413      	add	r3, r2
 80076aa:	4299      	cmp	r1, r3
 80076ac:	d13a      	bne.n	8007724 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe faa0 	bl	8005bf8 <uxListRemove>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d115      	bne.n	80076ea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4924      	ldr	r1, [pc, #144]	@ (8007754 <xTaskPriorityInherit+0xf8>)
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <xTaskPriorityInherit+0x8e>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	2201      	movs	r2, #1
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	43da      	mvns	r2, r3
 80076e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007758 <xTaskPriorityInherit+0xfc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4013      	ands	r3, r2
 80076e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007758 <xTaskPriorityInherit+0xfc>)
 80076e8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ea:	4b19      	ldr	r3, [pc, #100]	@ (8007750 <xTaskPriorityInherit+0xf4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	2201      	movs	r2, #1
 80076fa:	409a      	lsls	r2, r3
 80076fc:	4b16      	ldr	r3, [pc, #88]	@ (8007758 <xTaskPriorityInherit+0xfc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4313      	orrs	r3, r2
 8007702:	4a15      	ldr	r2, [pc, #84]	@ (8007758 <xTaskPriorityInherit+0xfc>)
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4a10      	ldr	r2, [pc, #64]	@ (8007754 <xTaskPriorityInherit+0xf8>)
 8007714:	441a      	add	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3304      	adds	r3, #4
 800771a:	4619      	mov	r1, r3
 800771c:	4610      	mov	r0, r2
 800771e:	f7fe fa0e 	bl	8005b3e <vListInsertEnd>
 8007722:	e004      	b.n	800772e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007724:	4b0a      	ldr	r3, [pc, #40]	@ (8007750 <xTaskPriorityInherit+0xf4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800772e:	2301      	movs	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e008      	b.n	8007746 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007738:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <xTaskPriorityInherit+0xf4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	429a      	cmp	r2, r3
 8007740:	d201      	bcs.n	8007746 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007742:	2301      	movs	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007746:	68fb      	ldr	r3, [r7, #12]
	}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000680 	.word	0x20000680
 8007754:	20000684 	.word	0x20000684
 8007758:	20000788 	.word	0x20000788

0800775c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d074      	beq.n	800785c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007772:	4b3d      	ldr	r3, [pc, #244]	@ (8007868 <xTaskPriorityDisinherit+0x10c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	429a      	cmp	r2, r3
 800777a:	d00d      	beq.n	8007798 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007780:	b672      	cpsid	i
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	b662      	cpsie	i
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	e7fd      	b.n	8007794 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	b672      	cpsid	i
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	b662      	cpsie	i
 80077b4:	60bb      	str	r3, [r7, #8]
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	e7fd      	b.n	80077b8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c0:	1e5a      	subs	r2, r3, #1
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d044      	beq.n	800785c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d140      	bne.n	800785c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fa0a 	bl	8005bf8 <uxListRemove>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d115      	bne.n	8007816 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ee:	491f      	ldr	r1, [pc, #124]	@ (800786c <xTaskPriorityDisinherit+0x110>)
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xTaskPriorityDisinherit+0xba>
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	2201      	movs	r2, #1
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	43da      	mvns	r2, r3
 800780c:	4b18      	ldr	r3, [pc, #96]	@ (8007870 <xTaskPriorityDisinherit+0x114>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4013      	ands	r3, r2
 8007812:	4a17      	ldr	r2, [pc, #92]	@ (8007870 <xTaskPriorityDisinherit+0x114>)
 8007814:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007822:	f1c3 0207 	rsb	r2, r3, #7
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	2201      	movs	r2, #1
 8007830:	409a      	lsls	r2, r3
 8007832:	4b0f      	ldr	r3, [pc, #60]	@ (8007870 <xTaskPriorityDisinherit+0x114>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4313      	orrs	r3, r2
 8007838:	4a0d      	ldr	r2, [pc, #52]	@ (8007870 <xTaskPriorityDisinherit+0x114>)
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4a08      	ldr	r2, [pc, #32]	@ (800786c <xTaskPriorityDisinherit+0x110>)
 800784a:	441a      	add	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	3304      	adds	r3, #4
 8007850:	4619      	mov	r1, r3
 8007852:	4610      	mov	r0, r2
 8007854:	f7fe f973 	bl	8005b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007858:	2301      	movs	r3, #1
 800785a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800785c:	697b      	ldr	r3, [r7, #20]
	}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000680 	.word	0x20000680
 800786c:	20000684 	.word	0x20000684
 8007870:	20000788 	.word	0x20000788

08007874 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007882:	2301      	movs	r3, #1
 8007884:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8089 	beq.w	80079a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10d      	bne.n	80078b2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	60fb      	str	r3, [r7, #12]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d902      	bls.n	80078c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e002      	b.n	80078c8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d066      	beq.n	80079a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d161      	bne.n	80079a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078dc:	4b32      	ldr	r3, [pc, #200]	@ (80079a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d10d      	bne.n	8007902 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
 80078fa:	60bb      	str	r3, [r7, #8]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007906:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	db04      	blt.n	8007920 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f1c3 0207 	rsb	r2, r3, #7
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	6959      	ldr	r1, [r3, #20]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4a1f      	ldr	r2, [pc, #124]	@ (80079ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007930:	4413      	add	r3, r2
 8007932:	4299      	cmp	r1, r3
 8007934:	d134      	bne.n	80079a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	3304      	adds	r3, #4
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe f95c 	bl	8005bf8 <uxListRemove>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d115      	bne.n	8007972 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794a:	4918      	ldr	r1, [pc, #96]	@ (80079ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	2201      	movs	r2, #1
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	43da      	mvns	r2, r3
 8007968:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4013      	ands	r3, r2
 800796e:	4a10      	ldr	r2, [pc, #64]	@ (80079b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007970:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	2201      	movs	r2, #1
 8007978:	409a      	lsls	r2, r3
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4313      	orrs	r3, r2
 8007980:	4a0b      	ldr	r2, [pc, #44]	@ (80079b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4a06      	ldr	r2, [pc, #24]	@ (80079ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007992:	441a      	add	r2, r3
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe f8cf 	bl	8005b3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079a0:	bf00      	nop
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000680 	.word	0x20000680
 80079ac:	20000684 	.word	0x20000684
 80079b0:	20000788 	.word	0x20000788

080079b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079b8:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079c6:	3201      	adds	r2, #1
 80079c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80079ca:	4b03      	ldr	r3, [pc, #12]	@ (80079d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079cc:	681b      	ldr	r3, [r3, #0]
	}
 80079ce:	4618      	mov	r0, r3
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	20000680 	.word	0x20000680

080079dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079e6:	4b29      	ldr	r3, [pc, #164]	@ (8007a8c <prvAddCurrentTaskToDelayedList+0xb0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ec:	4b28      	ldr	r3, [pc, #160]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe f900 	bl	8005bf8 <uxListRemove>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079fe:	4b24      	ldr	r3, [pc, #144]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	2201      	movs	r2, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	43da      	mvns	r2, r3
 8007a0c:	4b21      	ldr	r3, [pc, #132]	@ (8007a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4013      	ands	r3, r2
 8007a12:	4a20      	ldr	r2, [pc, #128]	@ (8007a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d10a      	bne.n	8007a34 <prvAddCurrentTaskToDelayedList+0x58>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a24:	4b1a      	ldr	r3, [pc, #104]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	481a      	ldr	r0, [pc, #104]	@ (8007a98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a2e:	f7fe f886 	bl	8005b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a32:	e026      	b.n	8007a82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4413      	add	r3, r2
 8007a3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a3c:	4b14      	ldr	r3, [pc, #80]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d209      	bcs.n	8007a60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a4c:	4b13      	ldr	r3, [pc, #76]	@ (8007a9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	4b0f      	ldr	r3, [pc, #60]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7fe f894 	bl	8005b86 <vListInsert>
}
 8007a5e:	e010      	b.n	8007a82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a60:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b0a      	ldr	r3, [pc, #40]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7fe f88a 	bl	8005b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a72:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d202      	bcs.n	8007a82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a7c:	4a09      	ldr	r2, [pc, #36]	@ (8007aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6013      	str	r3, [r2, #0]
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000784 	.word	0x20000784
 8007a90:	20000680 	.word	0x20000680
 8007a94:	20000788 	.word	0x20000788
 8007a98:	2000076c 	.word	0x2000076c
 8007a9c:	2000073c 	.word	0x2000073c
 8007aa0:	20000738 	.word	0x20000738
 8007aa4:	200007a0 	.word	0x200007a0

08007aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3b04      	subs	r3, #4
 8007ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f023 0201 	bic.w	r2, r3, #1
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3b04      	subs	r3, #4
 8007ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8007b0c <pxPortInitialiseStack+0x64>)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3b14      	subs	r3, #20
 8007ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f06f 0202 	mvn.w	r2, #2
 8007af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3b20      	subs	r3, #32
 8007afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	08007b11 	.word	0x08007b11

08007b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b1a:	4b15      	ldr	r3, [pc, #84]	@ (8007b70 <prvTaskExitError+0x60>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d00d      	beq.n	8007b40 <prvTaskExitError+0x30>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	b672      	cpsid	i
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	b662      	cpsie	i
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <prvTaskExitError+0x2c>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	b672      	cpsid	i
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	b662      	cpsie	i
 8007b54:	60bb      	str	r3, [r7, #8]
}
 8007b56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b58:	bf00      	nop
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0fc      	beq.n	8007b5a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	2000003c 	.word	0x2000003c
	...

08007b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	@ (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	20000680 	.word	0x20000680
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ba8:	4808      	ldr	r0, [pc, #32]	@ (8007bcc <prvPortStartFirstTask+0x24>)
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f380 8808 	msr	MSP, r0
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8814 	msr	CONTROL, r0
 8007bba:	b662      	cpsie	i
 8007bbc:	b661      	cpsie	f
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	df00      	svc	0
 8007bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bca:	bf00      	nop
 8007bcc:	e000ed08 	.word	0xe000ed08

08007bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bd6:	4b37      	ldr	r3, [pc, #220]	@ (8007cb4 <xPortStartScheduler+0xe4>)
 8007bd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	22ff      	movs	r2, #255	@ 0xff
 8007be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8007cb8 <xPortStartScheduler+0xe8>)
 8007bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c04:	e009      	b.n	8007c1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c06:	4b2d      	ldr	r3, [pc, #180]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c22:	2b80      	cmp	r3, #128	@ 0x80
 8007c24:	d0ef      	beq.n	8007c06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c26:	4b25      	ldr	r3, [pc, #148]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f1c3 0307 	rsb	r3, r3, #7
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d00d      	beq.n	8007c4e <xPortStartScheduler+0x7e>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	b672      	cpsid	i
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	b662      	cpsie	i
 8007c46:	60bb      	str	r3, [r7, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	4a19      	ldr	r2, [pc, #100]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c58:	4b18      	ldr	r3, [pc, #96]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c60:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <xPortStartScheduler+0xec>)
 8007c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c6c:	4b14      	ldr	r3, [pc, #80]	@ (8007cc0 <xPortStartScheduler+0xf0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a13      	ldr	r2, [pc, #76]	@ (8007cc0 <xPortStartScheduler+0xf0>)
 8007c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c78:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <xPortStartScheduler+0xf0>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a10      	ldr	r2, [pc, #64]	@ (8007cc0 <xPortStartScheduler+0xf0>)
 8007c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c84:	f000 f8dc 	bl	8007e40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c88:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc4 <xPortStartScheduler+0xf4>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c8e:	f000 f8fb 	bl	8007e88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c92:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <xPortStartScheduler+0xf8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc8 <xPortStartScheduler+0xf8>)
 8007c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c9e:	f7ff ff83 	bl	8007ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ca2:	f7ff fa91 	bl	80071c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007ca6:	f7ff ff33 	bl	8007b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	e000e400 	.word	0xe000e400
 8007cb8:	200007ac 	.word	0x200007ac
 8007cbc:	200007b0 	.word	0x200007b0
 8007cc0:	e000ed20 	.word	0xe000ed20
 8007cc4:	2000003c 	.word	0x2000003c
 8007cc8:	e000ef34 	.word	0xe000ef34

08007ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd6:	b672      	cpsid	i
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	b662      	cpsie	i
 8007ce6:	607b      	str	r3, [r7, #4]
}
 8007ce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cea:	4b11      	ldr	r3, [pc, #68]	@ (8007d30 <vPortEnterCritical+0x64>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8007d30 <vPortEnterCritical+0x64>)
 8007cf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d30 <vPortEnterCritical+0x64>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d112      	bne.n	8007d22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <vPortEnterCritical+0x68>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <vPortEnterCritical+0x56>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	b672      	cpsid	i
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	b662      	cpsie	i
 8007d1a:	603b      	str	r3, [r7, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <vPortEnterCritical+0x52>
	}
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	2000003c 	.word	0x2000003c
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d3e:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <vPortExitCritical+0x54>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10d      	bne.n	8007d62 <vPortExitCritical+0x2a>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	607b      	str	r3, [r7, #4]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007d62:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <vPortExitCritical+0x54>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	4a08      	ldr	r2, [pc, #32]	@ (8007d8c <vPortExitCritical+0x54>)
 8007d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <vPortExitCritical+0x54>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <vPortExitCritical+0x48>
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f383 8811 	msr	BASEPRI, r3
}
 8007d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	2000003c 	.word	0x2000003c

08007d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d90:	f3ef 8009 	mrs	r0, PSP
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4b15      	ldr	r3, [pc, #84]	@ (8007df0 <pxCurrentTCBConst>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	f01e 0f10 	tst.w	lr, #16
 8007da0:	bf08      	it	eq
 8007da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007db4:	b672      	cpsid	i
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	b662      	cpsie	i
 8007dc4:	f7ff fa00 	bl	80071c8 <vTaskSwitchContext>
 8007dc8:	f04f 0000 	mov.w	r0, #0
 8007dcc:	f380 8811 	msr	BASEPRI, r0
 8007dd0:	bc09      	pop	{r0, r3}
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	6808      	ldr	r0, [r1, #0]
 8007dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	f01e 0f10 	tst.w	lr, #16
 8007dde:	bf08      	it	eq
 8007de0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007de4:	f380 8809 	msr	PSP, r0
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop

08007df0 <pxCurrentTCBConst>:
 8007df0:	20000680 	.word	0x20000680
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	b672      	cpsid	i
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	b662      	cpsie	i
 8007e12:	607b      	str	r3, [r7, #4]
}
 8007e14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e16:	f7ff f91b 	bl	8007050 <xTaskIncrementTick>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e20:	4b06      	ldr	r3, [pc, #24]	@ (8007e3c <SysTick_Handler+0x44>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f383 8811 	msr	BASEPRI, r3
}
 8007e32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e44:	4b0b      	ldr	r3, [pc, #44]	@ (8007e74 <vPortSetupTimerInterrupt+0x34>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e78 <vPortSetupTimerInterrupt+0x38>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e50:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <vPortSetupTimerInterrupt+0x3c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a0a      	ldr	r2, [pc, #40]	@ (8007e80 <vPortSetupTimerInterrupt+0x40>)
 8007e56:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5a:	099b      	lsrs	r3, r3, #6
 8007e5c:	4a09      	ldr	r2, [pc, #36]	@ (8007e84 <vPortSetupTimerInterrupt+0x44>)
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e62:	4b04      	ldr	r3, [pc, #16]	@ (8007e74 <vPortSetupTimerInterrupt+0x34>)
 8007e64:	2207      	movs	r2, #7
 8007e66:	601a      	str	r2, [r3, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	e000e010 	.word	0xe000e010
 8007e78:	e000e018 	.word	0xe000e018
 8007e7c:	20000030 	.word	0x20000030
 8007e80:	10624dd3 	.word	0x10624dd3
 8007e84:	e000e014 	.word	0xe000e014

08007e88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e98 <vPortEnableVFP+0x10>
 8007e8c:	6801      	ldr	r1, [r0, #0]
 8007e8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e92:	6001      	str	r1, [r0, #0]
 8007e94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e96:	bf00      	nop
 8007e98:	e000ed88 	.word	0xe000ed88

08007e9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ea2:	f3ef 8305 	mrs	r3, IPSR
 8007ea6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b0f      	cmp	r3, #15
 8007eac:	d917      	bls.n	8007ede <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eae:	4a1a      	ldr	r2, [pc, #104]	@ (8007f18 <vPortValidateInterruptPriority+0x7c>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007eb8:	4b18      	ldr	r3, [pc, #96]	@ (8007f1c <vPortValidateInterruptPriority+0x80>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	7afa      	ldrb	r2, [r7, #11]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d20d      	bcs.n	8007ede <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	b672      	cpsid	i
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	b662      	cpsie	i
 8007ed6:	607b      	str	r3, [r7, #4]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ede:	4b10      	ldr	r3, [pc, #64]	@ (8007f20 <vPortValidateInterruptPriority+0x84>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <vPortValidateInterruptPriority+0x88>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d90d      	bls.n	8007f0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	b672      	cpsid	i
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	b662      	cpsie	i
 8007f02:	603b      	str	r3, [r7, #0]
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <vPortValidateInterruptPriority+0x6a>
	}
 8007f0a:	bf00      	nop
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	e000e3f0 	.word	0xe000e3f0
 8007f1c:	200007ac 	.word	0x200007ac
 8007f20:	e000ed0c 	.word	0xe000ed0c
 8007f24:	200007b0 	.word	0x200007b0

08007f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08a      	sub	sp, #40	@ 0x28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f34:	f7fe ffbc 	bl	8006eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f38:	4b5d      	ldr	r3, [pc, #372]	@ (80080b0 <pvPortMalloc+0x188>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f40:	f000 f920 	bl	8008184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f44:	4b5b      	ldr	r3, [pc, #364]	@ (80080b4 <pvPortMalloc+0x18c>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f040 8094 	bne.w	800807a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d020      	beq.n	8007f9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007f58:	2208      	movs	r2, #8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d017      	beq.n	8007f9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f023 0307 	bic.w	r3, r3, #7
 8007f70:	3308      	adds	r3, #8
 8007f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00d      	beq.n	8007f9a <pvPortMalloc+0x72>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	b672      	cpsid	i
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	b662      	cpsie	i
 8007f92:	617b      	str	r3, [r7, #20]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d06c      	beq.n	800807a <pvPortMalloc+0x152>
 8007fa0:	4b45      	ldr	r3, [pc, #276]	@ (80080b8 <pvPortMalloc+0x190>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d867      	bhi.n	800807a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007faa:	4b44      	ldr	r3, [pc, #272]	@ (80080bc <pvPortMalloc+0x194>)
 8007fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fae:	4b43      	ldr	r3, [pc, #268]	@ (80080bc <pvPortMalloc+0x194>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fb4:	e004      	b.n	8007fc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d903      	bls.n	8007fd2 <pvPortMalloc+0xaa>
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f1      	bne.n	8007fb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fd2:	4b37      	ldr	r3, [pc, #220]	@ (80080b0 <pvPortMalloc+0x188>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d04e      	beq.n	800807a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	4413      	add	r3, r2
 8007fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	1ad2      	subs	r2, r2, r3
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d922      	bls.n	8008044 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <pvPortMalloc+0x104>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008014:	b672      	cpsid	i
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	b662      	cpsie	i
 8008024:	613b      	str	r3, [r7, #16]
}
 8008026:	bf00      	nop
 8008028:	bf00      	nop
 800802a:	e7fd      	b.n	8008028 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	1ad2      	subs	r2, r2, r3
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800803e:	69b8      	ldr	r0, [r7, #24]
 8008040:	f000 f902 	bl	8008248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008044:	4b1c      	ldr	r3, [pc, #112]	@ (80080b8 <pvPortMalloc+0x190>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <pvPortMalloc+0x190>)
 8008050:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008052:	4b19      	ldr	r3, [pc, #100]	@ (80080b8 <pvPortMalloc+0x190>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b1a      	ldr	r3, [pc, #104]	@ (80080c0 <pvPortMalloc+0x198>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d203      	bcs.n	8008066 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800805e:	4b16      	ldr	r3, [pc, #88]	@ (80080b8 <pvPortMalloc+0x190>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <pvPortMalloc+0x198>)
 8008064:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <pvPortMalloc+0x18c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	431a      	orrs	r2, r3
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800807a:	f7fe ff27 	bl	8006ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <pvPortMalloc+0x17c>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	b672      	cpsid	i
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	b662      	cpsie	i
 800809c:	60fb      	str	r3, [r7, #12]
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	e7fd      	b.n	80080a0 <pvPortMalloc+0x178>
	return pvReturn;
 80080a4:	69fb      	ldr	r3, [r7, #28]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3728      	adds	r7, #40	@ 0x28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200043bc 	.word	0x200043bc
 80080b4:	200043c8 	.word	0x200043c8
 80080b8:	200043c0 	.word	0x200043c0
 80080bc:	200043b4 	.word	0x200043b4
 80080c0:	200043c4 	.word	0x200043c4

080080c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d04e      	beq.n	8008174 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080d6:	2308      	movs	r3, #8
 80080d8:	425b      	negs	r3, r3
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	4b24      	ldr	r3, [pc, #144]	@ (800817c <vPortFree+0xb8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10d      	bne.n	800810e <vPortFree+0x4a>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f6:	b672      	cpsid	i
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	b662      	cpsie	i
 8008106:	60fb      	str	r3, [r7, #12]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00d      	beq.n	8008132 <vPortFree+0x6e>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	b672      	cpsid	i
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	b662      	cpsie	i
 800812a:	60bb      	str	r3, [r7, #8]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	4b11      	ldr	r3, [pc, #68]	@ (800817c <vPortFree+0xb8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d019      	beq.n	8008174 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d115      	bne.n	8008174 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	4b0b      	ldr	r3, [pc, #44]	@ (800817c <vPortFree+0xb8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	43db      	mvns	r3, r3
 8008152:	401a      	ands	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008158:	f7fe feaa 	bl	8006eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <vPortFree+0xbc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4413      	add	r3, r2
 8008166:	4a06      	ldr	r2, [pc, #24]	@ (8008180 <vPortFree+0xbc>)
 8008168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800816a:	6938      	ldr	r0, [r7, #16]
 800816c:	f000 f86c 	bl	8008248 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008170:	f7fe feac 	bl	8006ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008174:	bf00      	nop
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200043c8 	.word	0x200043c8
 8008180:	200043c0 	.word	0x200043c0

08008184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800818a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800818e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008190:	4b27      	ldr	r3, [pc, #156]	@ (8008230 <prvHeapInit+0xac>)
 8008192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3307      	adds	r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0307 	bic.w	r3, r3, #7
 80081aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008230 <prvHeapInit+0xac>)
 80081b4:	4413      	add	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008234 <prvHeapInit+0xb0>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008234 <prvHeapInit+0xb0>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081d0:	2208      	movs	r2, #8
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a15      	ldr	r2, [pc, #84]	@ (8008238 <prvHeapInit+0xb4>)
 80081e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081e6:	4b14      	ldr	r3, [pc, #80]	@ (8008238 <prvHeapInit+0xb4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2200      	movs	r2, #0
 80081ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ee:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <prvHeapInit+0xb4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008204:	4b0c      	ldr	r3, [pc, #48]	@ (8008238 <prvHeapInit+0xb4>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a0a      	ldr	r2, [pc, #40]	@ (800823c <prvHeapInit+0xb8>)
 8008212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4a09      	ldr	r2, [pc, #36]	@ (8008240 <prvHeapInit+0xbc>)
 800821a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800821c:	4b09      	ldr	r3, [pc, #36]	@ (8008244 <prvHeapInit+0xc0>)
 800821e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	200007b4 	.word	0x200007b4
 8008234:	200043b4 	.word	0x200043b4
 8008238:	200043bc 	.word	0x200043bc
 800823c:	200043c4 	.word	0x200043c4
 8008240:	200043c0 	.word	0x200043c0
 8008244:	200043c8 	.word	0x200043c8

08008248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008250:	4b28      	ldr	r3, [pc, #160]	@ (80082f4 <prvInsertBlockIntoFreeList+0xac>)
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e002      	b.n	800825c <prvInsertBlockIntoFreeList+0x14>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d8f7      	bhi.n	8008256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d108      	bne.n	800828a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	441a      	add	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d118      	bne.n	80082d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b15      	ldr	r3, [pc, #84]	@ (80082f8 <prvInsertBlockIntoFreeList+0xb0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d00d      	beq.n	80082c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e008      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082c6:	4b0c      	ldr	r3, [pc, #48]	@ (80082f8 <prvInsertBlockIntoFreeList+0xb0>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e003      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d002      	beq.n	80082e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	200043b4 	.word	0x200043b4
 80082f8:	200043bc 	.word	0x200043bc

080082fc <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af02      	add	r7, sp, #8
 8008302:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	791b      	ldrb	r3, [r3, #4]
 8008312:	4619      	mov	r1, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	1d5a      	adds	r2, r3, #5
 8008318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2303      	movs	r3, #3
 8008320:	f7fa fb46 	bl	80029b0 <HAL_I2C_Master_Transmit>
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8008340:	220f      	movs	r2, #15
 8008342:	2141      	movs	r1, #65	@ 0x41
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f80c 	bl	8008362 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	f043 0304 	orr.w	r3, r3, #4
 8008350:	b2db      	uxtb	r3, r3
 8008352:	4619      	mov	r1, r3
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f81f 	bl	8008398 <MAX581x_Reference>
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
 800836e:	4613      	mov	r3, r2
 8008370:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008378:	b2da      	uxtb	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	78ba      	ldrb	r2, [r7, #2]
 8008382:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff ffb6 	bl	80082fc <MAX581x_WriteCommand>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ff9d 	bl	80082fc <MAX581x_WriteCommand>
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
 80083d6:	4613      	mov	r3, r2
 80083d8:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 80083e0:	883b      	ldrh	r3, [r7, #0]
 80083e2:	091b      	lsrs	r3, r3, #4
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 80083ec:	883b      	ldrh	r3, [r7, #0]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f023 030f 	bic.w	r3, r3, #15
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ff7d 	bl	80082fc <MAX581x_WriteCommand>
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
 8008416:	4613      	mov	r3, r2
 8008418:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008426:	883b      	ldrh	r3, [r7, #0]
 8008428:	091b      	lsrs	r3, r3, #4
 800842a:	b29b      	uxth	r3, r3
 800842c:	b2da      	uxtb	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 8008432:	883b      	ldrh	r3, [r7, #0]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f023 030f 	bic.w	r3, r3, #15
 800843c:	b2da      	uxtb	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff ff5a 	bl	80082fc <MAX581x_WriteCommand>
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8008450:	b084      	sub	sp, #16
 8008452:	b4b0      	push	{r4, r5, r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	f107 001c 	add.w	r0, r7, #28
 800845e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	461d      	mov	r5, r3
 8008466:	f107 041c 	add.w	r4, r7, #28
 800846a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800846c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800846e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008472:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800847c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	pid->error = 0;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f04f 0200 	mov.w	r2, #0
 800848e:	625a      	str	r2, [r3, #36]	@ 0x24

	pid->lastMeasure = 0;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->integral = 0;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f04f 0200 	mov.w	r2, #0
 800849e:	62da      	str	r2, [r3, #44]	@ 0x2c

	pid->enable = enable;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bcb0      	pop	{r4, r5, r7}
 80084b2:	b004      	add	sp, #16
 80084b4:	4770      	bx	lr

080084b6 <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b087      	sub	sp, #28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	ed87 0a02 	vstr	s0, [r7, #8]
 80084c2:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d006      	beq.n	80084de <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	629a      	str	r2, [r3, #40]	@ 0x28
		pid->output = reference;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 80084dc:	e085      	b.n	80085ea <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80084ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80084ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	edd3 6a08 	vldr	s13, [r3, #32]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	edd3 7a01 	vldr	s15, [r3, #4]
 800850a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800850e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	if (pid->integral > pid->params.integralMax)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	edd3 7a05 	vldr	s15, [r3, #20]
 8008524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	dd04      	ble.n	8008538 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	695a      	ldr	r2, [r3, #20]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008536:	e014      	b.n	8008562 <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	edd3 7a05 	vldr	s15, [r3, #20]
 8008544:	eef1 7a67 	vneg.f32	s15, s15
 8008548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800854c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008550:	d507      	bpl.n	8008562 <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	edd3 7a05 	vldr	s15, [r3, #20]
 8008558:	eef1 7a67 	vneg.f32	s15, s15
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008568:	ed97 7a01 	vldr	s14, [r7, #4]
 800856c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008570:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	ed93 7a08 	vldr	s14, [r3, #32]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	edd3 7a00 	vldr	s15, [r3]
 8008580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800858a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	edd3 6a02 	vldr	s13, [r3, #8]
 8008594:	edd7 7a05 	vldr	s15, [r7, #20]
 8008598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800859c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (pid->output > pid->params.outputMax)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80085b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	dd04      	ble.n	80085c6 <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80085c4:	e00e      	b.n	80085e4 <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80085d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085da:	d503      	bpl.n	80085e4 <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	pid->lastMeasure = measure;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8008600:	887b      	ldrh	r3, [r7, #2]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fa f928 	bl	800285a <HAL_GPIO_TogglePin>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <Board_GetID>:

uint16_t Board_GetID()
{
 8008614:	b598      	push	{r3, r4, r7, lr}
 8008616:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008618:	2102      	movs	r1, #2
 800861a:	481b      	ldr	r0, [pc, #108]	@ (8008688 <Board_GetID+0x74>)
 800861c:	f7fa f8ec 	bl	80027f8 <HAL_GPIO_ReadPin>
 8008620:	4603      	mov	r3, r0
 8008622:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8008624:	2101      	movs	r1, #1
 8008626:	4818      	ldr	r0, [pc, #96]	@ (8008688 <Board_GetID+0x74>)
 8008628:	f7fa f8e6 	bl	80027f8 <HAL_GPIO_ReadPin>
 800862c:	4603      	mov	r3, r0
 800862e:	005b      	lsls	r3, r3, #1
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008630:	b21b      	sxth	r3, r3
 8008632:	4323      	orrs	r3, r4
 8008634:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800863a:	4814      	ldr	r0, [pc, #80]	@ (800868c <Board_GetID+0x78>)
 800863c:	f7fa f8dc 	bl	80027f8 <HAL_GPIO_ReadPin>
 8008640:	4603      	mov	r3, r0
 8008642:	009b      	lsls	r3, r3, #2
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8008644:	b21b      	sxth	r3, r3
 8008646:	4323      	orrs	r3, r4
 8008648:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 800864a:	2104      	movs	r1, #4
 800864c:	4810      	ldr	r0, [pc, #64]	@ (8008690 <Board_GetID+0x7c>)
 800864e:	f7fa f8d3 	bl	80027f8 <HAL_GPIO_ReadPin>
 8008652:	4603      	mov	r3, r0
 8008654:	00db      	lsls	r3, r3, #3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008656:	b21b      	sxth	r3, r3
 8008658:	4323      	orrs	r3, r4
 800865a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 800865c:	2110      	movs	r1, #16
 800865e:	480d      	ldr	r0, [pc, #52]	@ (8008694 <Board_GetID+0x80>)
 8008660:	f7fa f8ca 	bl	80027f8 <HAL_GPIO_ReadPin>
 8008664:	4603      	mov	r3, r0
 8008666:	011b      	lsls	r3, r3, #4
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8008668:	b21b      	sxth	r3, r3
 800866a:	4323      	orrs	r3, r4
 800866c:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 800866e:	2110      	movs	r1, #16
 8008670:	4809      	ldr	r0, [pc, #36]	@ (8008698 <Board_GetID+0x84>)
 8008672:	f7fa f8c1 	bl	80027f8 <HAL_GPIO_ReadPin>
 8008676:	4603      	mov	r3, r0
 8008678:	015b      	lsls	r3, r3, #5
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 800867a:	b21b      	sxth	r3, r3
 800867c:	4323      	orrs	r3, r4
 800867e:	b21b      	sxth	r3, r3
 8008680:	b29b      	uxth	r3, r3
}
 8008682:	4618      	mov	r0, r3
 8008684:	bd98      	pop	{r3, r4, r7, pc}
 8008686:	bf00      	nop
 8008688:	40022400 	.word	0x40022400
 800868c:	40022000 	.word	0x40022000
 8008690:	40020400 	.word	0x40020400
 8008694:	40020800 	.word	0x40020800
 8008698:	40021c00 	.word	0x40021c00
 800869c:	00000000 	.word	0x00000000

080086a0 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7c1b      	ldrb	r3, [r3, #16]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d002      	beq.n	80086ba <Encoder_Update+0x1a>
		return 0;
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e03a      	b.n	8008730 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 80086c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ce:	eef0 7ae7 	vabs.f32	s15, s15
 80086d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80086d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086de:	d502      	bpl.n	80086e6 <Encoder_Update+0x46>
 80086e0:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8008750 <Encoder_Update+0xb0>
 80086e4:	e005      	b.n	80086f2 <Encoder_Update+0x52>
 80086e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086f2:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 80086fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8008702:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800870a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8008748 <Encoder_Update+0xa8>
 800870e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8008712:	edd7 7a00 	vldr	s15, [r7]
 8008716:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008754 <Encoder_Update+0xb4>
 800871a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800871e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008722:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800872a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 800872e:	68fb      	ldr	r3, [r7, #12]
}
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eeb0 0a67 	vmov.f32	s0, s15
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	f3af 8000 	nop.w
 8008748:	54442d18 	.word	0x54442d18
 800874c:	400921fb 	.word	0x400921fb
 8008750:	00000000 	.word	0x00000000
 8008754:	46000000 	.word	0x46000000

08008758 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
 8008764:	4613      	mov	r3, r2
 8008766:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	78ba      	ldrb	r2, [r7, #2]
 800876c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	motorDevice->outputID = motorID;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motorDevice->refSpeed = 0;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	671a      	str	r2, [r3, #112]	@ 0x70
	motorDevice->measSpeed = 0;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	675a      	str	r2, [r3, #116]	@ 0x74
	Motor_Enable(motorDevice, enable);
 8008788:	78bb      	ldrb	r3, [r7, #2]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f857 	bl	8008840 <Motor_Enable>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed * WHEEL_GEAR_RATIO * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 80087aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80087ae:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80087b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80087b6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800883c <Motor_CLDrive+0xa0>
 80087ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80087d0:	eeb0 0a67 	vmov.f32	s0, s15
 80087d4:	4610      	mov	r0, r2
 80087d6:	f7ff ff63 	bl	80086a0 <Encoder_Update>
 80087da:	eef0 7a40 	vmov.f32	s15, s0
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80087f2:	eef0 0a47 	vmov.f32	s1, s14
 80087f6:	eeb0 0a67 	vmov.f32	s0, s15
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7ff fe5b 	bl	80084b6 <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008806:	eef0 7ae7 	vabs.f32	s15, s15
 800880a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800880e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	d503      	bpl.n	8008820 <Motor_CLDrive+0x84>
		motorDevice->pid.output = 0.0;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008826:	eeb0 0a67 	vmov.f32	s0, s15
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f84b 	bl	80088c8 <Motor_SetVoltage>
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	3cdd82fd 	.word	0x3cdd82fd

08008840 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008864:	2200      	movs	r2, #0
 8008866:	4619      	mov	r1, r3
 8008868:	f7f9 ffde 	bl	8002828 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 800886c:	e008      	b.n	8008880 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008878:	2201      	movs	r2, #1
 800887a:	4619      	mov	r1, r3
 800887c:	f7f9 ffd4 	bl	8002828 <HAL_GPIO_WritePin>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d109      	bne.n	80088ae <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088a4:	2200      	movs	r2, #0
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7f9 ffbe 	bl	8002828 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 80088ac:	e008      	b.n	80088c0 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088b8:	2201      	movs	r2, #1
 80088ba:	4619      	mov	r1, r3
 80088bc:	f7f9 ffb4 	bl	8002828 <HAL_GPIO_WritePin>
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 80088d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80088da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	db1d      	blt.n	8008920 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088ee:	2201      	movs	r2, #1
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7f9 ff99 	bl	8002828 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 80088f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80088fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088fe:	ee17 3a90 	vmov	r3, s15
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8008916:	461a      	mov	r2, r3
 8008918:	68b8      	ldr	r0, [r7, #8]
 800891a:	f7ff fd76 	bl	800840a <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 800891e:	e01e      	b.n	800895e <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800892a:	2200      	movs	r2, #0
 800892c:	4619      	mov	r1, r3
 800892e:	f7f9 ff7b 	bl	8002828 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8008932:	edd7 7a01 	vldr	s15, [r7, #4]
 8008936:	eef0 7ae7 	vabs.f32	s15, s15
 800893a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800893e:	ee17 3a90 	vmov	r3, s15
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8008956:	461a      	mov	r2, r3
 8008958:	68b8      	ldr	r0, [r7, #8]
 800895a:	f7ff fd56 	bl	800840a <MAX581x_CodeLoad>
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6898      	ldr	r0, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	8a5b      	ldrh	r3, [r3, #18]
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	4619      	mov	r1, r3
 800897e:	f7f9 ff53 	bl	8002828 <HAL_GPIO_WritePin>
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6858      	ldr	r0, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8a1b      	ldrh	r3, [r3, #16]
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7f9 ff41 	bl	8002828 <HAL_GPIO_WritePin>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	887a      	ldrh	r2, [r7, #2]
 80089cc:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8bba      	ldrh	r2, [r7, #28]
 80089d8:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 80089da:	2101      	movs	r1, #1
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff ffd4 	bl	800898a <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 80089e2:	2100      	movs	r1, #0
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f7ff ffbe 	bl	8008966 <nRF24_CE_State>
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b086      	sub	sp, #24
 80089f6:	af02      	add	r7, sp, #8
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f107 020f 	add.w	r2, r7, #15
 8008a06:	1cf9      	adds	r1, r7, #3
 8008a08:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f7fb fed1 	bl	80047b6 <HAL_SPI_TransmitReceive>
  return rxData;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff ffac 	bl	800898a <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ffd8 	bl	80089f2 <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008a42:	21ff      	movs	r1, #255	@ 0xff
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7ff ffd4 	bl	80089f2 <nRF24_LL_RW>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008a4e:	2101      	movs	r1, #1
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff ff9a 	bl	800898a <nRF24_CSN_State>

  return value;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008a70:	2100      	movs	r1, #0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff ff89 	bl	800898a <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	2b1f      	cmp	r3, #31
 8008a7c:	d812      	bhi.n	8008aa4 <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8008a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a82:	f003 031f 	and.w	r3, r3, #31
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	f043 0320 	orr.w	r3, r3, #32
 8008a8c:	b25b      	sxtb	r3, r3
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ffad 	bl	80089f2 <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 8008a98:	78bb      	ldrb	r3, [r7, #2]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ffa8 	bl	80089f2 <nRF24_LL_RW>
 8008aa2:	e015      	b.n	8008ad0 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff ffa2 	bl	80089f2 <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	2be1      	cmp	r3, #225	@ 0xe1
 8008ab2:	d00d      	beq.n	8008ad0 <nRF24_WriteReg+0x70>
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	2be2      	cmp	r3, #226	@ 0xe2
 8008ab8:	d00a      	beq.n	8008ad0 <nRF24_WriteReg+0x70>
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	2be3      	cmp	r3, #227	@ 0xe3
 8008abe:	d007      	beq.n	8008ad0 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	2bff      	cmp	r3, #255	@ 0xff
 8008ac4:	d004      	beq.n	8008ad0 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 8008ac6:	78bb      	ldrb	r3, [r7, #2]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff ff91 	bl	80089f2 <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ff59 	bl	800898a <nRF24_CSN_State>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008ae0:	b590      	push	{r4, r7, lr}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	461a      	mov	r2, r3
 8008aec:	460b      	mov	r3, r1
 8008aee:	72fb      	strb	r3, [r7, #11]
 8008af0:	4613      	mov	r3, r2
 8008af2:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008af4:	2100      	movs	r1, #0
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff ff47 	bl	800898a <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8008afc:	7afb      	ldrb	r3, [r7, #11]
 8008afe:	4619      	mov	r1, r3
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff ff76 	bl	80089f2 <nRF24_LL_RW>
  while (count--)
 8008b06:	e008      	b.n	8008b1a <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008b08:	687c      	ldr	r4, [r7, #4]
 8008b0a:	1c63      	adds	r3, r4, #1
 8008b0c:	607b      	str	r3, [r7, #4]
 8008b0e:	21ff      	movs	r1, #255	@ 0xff
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff ff6e 	bl	80089f2 <nRF24_LL_RW>
 8008b16:	4603      	mov	r3, r0
 8008b18:	7023      	strb	r3, [r4, #0]
  while (count--)
 8008b1a:	7abb      	ldrb	r3, [r7, #10]
 8008b1c:	1e5a      	subs	r2, r3, #1
 8008b1e:	72ba      	strb	r2, [r7, #10]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f1      	bne.n	8008b08 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b24:	2101      	movs	r1, #1
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff ff2f 	bl	800898a <nRF24_CSN_State>
}
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <nRF24_WriteMBReg>:

void nRF24_WriteMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	460b      	mov	r3, r1
 8008b42:	72fb      	strb	r3, [r7, #11]
 8008b44:	4613      	mov	r3, r2
 8008b46:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008b48:	2100      	movs	r1, #0
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff ff1d 	bl	800898a <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	4619      	mov	r1, r3
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f7ff ff4c 	bl	80089f2 <nRF24_LL_RW>
  while (count--)
 8008b5a:	e007      	b.n	8008b6c <nRF24_WriteMBReg+0x38>
  {
    nRF24_LL_RW(device, *pBuf++);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	4619      	mov	r1, r3
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff ff43 	bl	80089f2 <nRF24_LL_RW>
  while (count--)
 8008b6c:	7abb      	ldrb	r3, [r7, #10]
 8008b6e:	1e5a      	subs	r2, r3, #1
 8008b70:	72ba      	strb	r2, [r7, #10]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f2      	bne.n	8008b5c <nRF24_WriteMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b76:	2101      	movs	r1, #1
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7ff ff06 	bl	800898a <nRF24_CSN_State>
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <nRF24_Init>:

void nRF24_Init(nRF24_Handler_t *device) {
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8008b8e:	2208      	movs	r2, #8
 8008b90:	2100      	movs	r1, #0
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff ff64 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8008b98:	223f      	movs	r2, #63	@ 0x3f
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff ff5f 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff ff5a 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 8008bac:	2203      	movs	r2, #3
 8008bae:	2103      	movs	r1, #3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff ff55 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	2104      	movs	r1, #4
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff ff50 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	2105      	movs	r1, #5
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff ff4b 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8008bca:	220e      	movs	r2, #14
 8008bcc:	2106      	movs	r1, #6
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff ff46 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2107      	movs	r1, #7
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff41 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 8008bde:	2200      	movs	r2, #0
 8008be0:	2111      	movs	r1, #17
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff ff3c 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 8008be8:	2200      	movs	r2, #0
 8008bea:	2112      	movs	r1, #18
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff ff37 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2113      	movs	r1, #19
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff ff32 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2114      	movs	r1, #20
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ff2d 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 8008c06:	2200      	movs	r2, #0
 8008c08:	2115      	movs	r1, #21
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff ff28 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2116      	movs	r1, #22
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff ff23 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	211c      	movs	r1, #28
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff ff1e 	bl	8008a60 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8008c24:	2200      	movs	r2, #0
 8008c26:	211d      	movs	r1, #29
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff ff19 	bl	8008a60 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa62 	bl	80090f8 <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa52 	bl	80090de <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa69 	bl	8009112 <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008c40:	2101      	movs	r1, #1
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff fea1 	bl	800898a <nRF24_CSN_State>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff fedd 	bl	8008a1e <nRF24_ReadReg>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d104      	bne.n	8008c78 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	f043 0302 	orr.w	r3, r3, #2
 8008c74:	73fb      	strb	r3, [r7, #15]
 8008c76:	e003      	b.n	8008c80 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	f023 0302 	bic.w	r3, r3, #2
 8008c7e:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	461a      	mov	r2, r3
 8008c84:	2100      	movs	r1, #0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff feea 	bl	8008a60 <nRF24_WriteReg>
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff febb 	bl	8008a1e <nRF24_ReadReg>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	f023 0301 	bic.w	r3, r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8008cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	b25a      	sxtb	r2, r3
 8008cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fec6 	bl	8008a60 <nRF24_WriteReg>
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	461a      	mov	r2, r3
 8008cec:	2105      	movs	r1, #5
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff feb6 	bl	8008a60 <nRF24_WriteReg>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	460b      	mov	r3, r1
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	2b06      	cmp	r3, #6
 8008d0e:	f200 813e 	bhi.w	8008f8e <nRF24_SetAddr+0x292>
 8008d12:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <nRF24_SetAddr+0x1c>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d8b 	.word	0x08008d8b
 8008d20:	08008de1 	.word	0x08008de1
 8008d24:	08008e37 	.word	0x08008e37
 8008d28:	08008e8d 	.word	0x08008e8d
 8008d2c:	08008ee3 	.word	0x08008ee3
 8008d30:	08008f39 	.word	0x08008f39
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008d34:	2103      	movs	r1, #3
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff fe71 	bl	8008a1e <nRF24_ReadReg>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	3301      	adds	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff fe1c 	bl	800898a <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	4a90      	ldr	r2, [pc, #576]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008d56:	5cd3      	ldrb	r3, [r2, r3]
 8008d58:	f043 0320 	orr.w	r3, r3, #32
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff fe46 	bl	80089f2 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	1e5a      	subs	r2, r3, #1
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7ff fe3e 	bl	80089f2 <nRF24_LL_RW>
      } while (addr_width--);
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	1e5a      	subs	r2, r3, #1
 8008d7a:	75fa      	strb	r2, [r7, #23]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1f2      	bne.n	8008d66 <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008d80:	2101      	movs	r1, #1
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff fe01 	bl	800898a <nRF24_CSN_State>
      break;
 8008d88:	e102      	b.n	8008f90 <nRF24_SetAddr+0x294>

    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008d8a:	2103      	movs	r1, #3
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff fe46 	bl	8008a1e <nRF24_ReadReg>
 8008d92:	4603      	mov	r3, r0
 8008d94:	3301      	adds	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008da0:	2100      	movs	r1, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff fdf1 	bl	800898a <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	4a7b      	ldr	r2, [pc, #492]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008dac:	5cd3      	ldrb	r3, [r2, r3]
 8008dae:	f043 0320 	orr.w	r3, r3, #32
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	4619      	mov	r1, r3
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff fe1b 	bl	80089f2 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	1e5a      	subs	r2, r3, #1
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7ff fe13 	bl	80089f2 <nRF24_LL_RW>
      } while (addr_width--);
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	1e5a      	subs	r2, r3, #1
 8008dd0:	75fa      	strb	r2, [r7, #23]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f2      	bne.n	8008dbc <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff fdd6 	bl	800898a <nRF24_CSN_State>
      break;
 8008dde:	e0d7      	b.n	8008f90 <nRF24_SetAddr+0x294>

    case nRF24_PIPE2:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008de0:	2103      	movs	r1, #3
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fe1b 	bl	8008a1e <nRF24_ReadReg>
 8008de8:	4603      	mov	r3, r0
 8008dea:	3301      	adds	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008df6:	2100      	movs	r1, #0
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff fdc6 	bl	800898a <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008dfe:	7afb      	ldrb	r3, [r7, #11]
 8008e00:	4a65      	ldr	r2, [pc, #404]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008e02:	5cd3      	ldrb	r3, [r2, r3]
 8008e04:	f043 0320 	orr.w	r3, r3, #32
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff fdf0 	bl	80089f2 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	1e5a      	subs	r2, r3, #1
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff fde8 	bl	80089f2 <nRF24_LL_RW>
	  } while (addr_width--);
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	1e5a      	subs	r2, r3, #1
 8008e26:	75fa      	strb	r2, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1f2      	bne.n	8008e12 <nRF24_SetAddr+0x116>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff fdab 	bl	800898a <nRF24_CSN_State>
	  break;
 8008e34:	e0ac      	b.n	8008f90 <nRF24_SetAddr+0x294>

    case nRF24_PIPE3:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008e36:	2103      	movs	r1, #3
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fdf0 	bl	8008a1e <nRF24_ReadReg>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	3301      	adds	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff fd9b 	bl	800898a <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	4a50      	ldr	r2, [pc, #320]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008e58:	5cd3      	ldrb	r3, [r2, r3]
 8008e5a:	f043 0320 	orr.w	r3, r3, #32
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	4619      	mov	r1, r3
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7ff fdc5 	bl	80089f2 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	1e5a      	subs	r2, r3, #1
 8008e6c:	607a      	str	r2, [r7, #4]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fdbd 	bl	80089f2 <nRF24_LL_RW>
	  } while (addr_width--);
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	1e5a      	subs	r2, r3, #1
 8008e7c:	75fa      	strb	r2, [r7, #23]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f2      	bne.n	8008e68 <nRF24_SetAddr+0x16c>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008e82:	2101      	movs	r1, #1
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fd80 	bl	800898a <nRF24_CSN_State>
	  break;
 8008e8a:	e081      	b.n	8008f90 <nRF24_SetAddr+0x294>


    case nRF24_PIPE4:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008e8c:	2103      	movs	r1, #3
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fdc5 	bl	8008a1e <nRF24_ReadReg>
 8008e94:	4603      	mov	r3, r0
 8008e96:	3301      	adds	r3, #1
 8008e98:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff fd70 	bl	800898a <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	4a3a      	ldr	r2, [pc, #232]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008eae:	5cd3      	ldrb	r3, [r2, r3]
 8008eb0:	f043 0320 	orr.w	r3, r3, #32
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fd9a 	bl	80089f2 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	1e5a      	subs	r2, r3, #1
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff fd92 	bl	80089f2 <nRF24_LL_RW>
	  } while (addr_width--);
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	1e5a      	subs	r2, r3, #1
 8008ed2:	75fa      	strb	r2, [r7, #23]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f2      	bne.n	8008ebe <nRF24_SetAddr+0x1c2>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008ed8:	2101      	movs	r1, #1
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f7ff fd55 	bl	800898a <nRF24_CSN_State>
	  break;
 8008ee0:	e056      	b.n	8008f90 <nRF24_SetAddr+0x294>


    case nRF24_PIPE5:

    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008ee2:	2103      	movs	r1, #3
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fd9a 	bl	8008a1e <nRF24_ReadReg>
 8008eea:	4603      	mov	r3, r0
 8008eec:	3301      	adds	r3, #1
 8008eee:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008ef8:	2100      	movs	r1, #0
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff fd45 	bl	800898a <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	4a25      	ldr	r2, [pc, #148]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008f04:	5cd3      	ldrb	r3, [r2, r3]
 8008f06:	f043 0320 	orr.w	r3, r3, #32
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fd6f 	bl	80089f2 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7ff fd67 	bl	80089f2 <nRF24_LL_RW>
	  } while (addr_width--);
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	1e5a      	subs	r2, r3, #1
 8008f28:	75fa      	strb	r2, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f2      	bne.n	8008f14 <nRF24_SetAddr+0x218>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008f2e:	2101      	movs	r1, #1
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff fd2a 	bl	800898a <nRF24_CSN_State>
	  break;
 8008f36:	e02b      	b.n	8008f90 <nRF24_SetAddr+0x294>


    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008f38:	2103      	movs	r1, #3
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff fd6f 	bl	8008a1e <nRF24_ReadReg>
 8008f40:	4603      	mov	r3, r0
 8008f42:	3301      	adds	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008f4e:	2100      	movs	r1, #0
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff fd1a 	bl	800898a <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008f56:	7afb      	ldrb	r3, [r7, #11]
 8008f58:	4a0f      	ldr	r2, [pc, #60]	@ (8008f98 <nRF24_SetAddr+0x29c>)
 8008f5a:	5cd3      	ldrb	r3, [r2, r3]
 8008f5c:	f043 0320 	orr.w	r3, r3, #32
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fd44 	bl	80089f2 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	1e5a      	subs	r2, r3, #1
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	4619      	mov	r1, r3
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fd3c 	bl	80089f2 <nRF24_LL_RW>
      } while (addr_width--);
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	75fa      	strb	r2, [r7, #23]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f2      	bne.n	8008f6a <nRF24_SetAddr+0x26e>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008f84:	2101      	movs	r1, #1
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fcff 	bl	800898a <nRF24_CSN_State>
      break;
 8008f8c:	e000      	b.n	8008f90 <nRF24_SetAddr+0x294>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 8008f8e:	bf00      	nop
  }
}
 8008f90:	bf00      	nop
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	080096f8 	.word	0x080096f8

08008f9c <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	70fb      	strb	r3, [r7, #3]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70bb      	strb	r3, [r7, #2]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8008fb6:	2102      	movs	r1, #2
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fd30 	bl	8008a1e <nRF24_ReadReg>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	b25a      	sxtb	r2, r3
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fca:	b25b      	sxtb	r3, r3
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	b25b      	sxtb	r3, r3
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fd6:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2102      	movs	r1, #2
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff fd3e 	bl	8008a60 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8009050 <nRF24_SetRXPipe+0xb4>)
 8008fe8:	5cd1      	ldrb	r1, [r2, r3]
 8008fea:	787b      	ldrb	r3, [r7, #1]
 8008fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fd33 	bl	8008a60 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fd0e 	bl	8008a1e <nRF24_ReadReg>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 8009006:	78bb      	ldrb	r3, [r7, #2]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d10a      	bne.n	8009022 <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	2201      	movs	r2, #1
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	b25a      	sxtb	r2, r3
 8009016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901a:	4313      	orrs	r3, r2
 800901c:	b25b      	sxtb	r3, r3
 800901e:	73fb      	strb	r3, [r7, #15]
 8009020:	e00b      	b.n	800903a <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	2201      	movs	r2, #1
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	b25b      	sxtb	r3, r3
 800902c:	43db      	mvns	r3, r3
 800902e:	b25a      	sxtb	r2, r3
 8009030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009034:	4013      	ands	r3, r2
 8009036:	b25b      	sxtb	r3, r3
 8009038:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	461a      	mov	r2, r3
 800903e:	2101      	movs	r1, #1
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fd0d 	bl	8008a60 <nRF24_WriteReg>
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	080096f0 	.word	0x080096f0

08009054 <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	2b05      	cmp	r3, #5
 8009064:	d905      	bls.n	8009072 <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 8009066:	2200      	movs	r2, #0
 8009068:	2101      	movs	r1, #1
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff fcf8 	bl	8008a60 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 8009070:	e017      	b.n	80090a2 <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8009072:	2101      	movs	r1, #1
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fcd2 	bl	8008a1e <nRF24_ReadReg>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	2201      	movs	r2, #1
 8009082:	fa02 f303 	lsl.w	r3, r2, r3
 8009086:	b25b      	sxtb	r3, r3
 8009088:	43db      	mvns	r3, r3
 800908a:	b25a      	sxtb	r2, r3
 800908c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009090:	4013      	ands	r3, r2
 8009092:	b25b      	sxtb	r3, r3
 8009094:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	461a      	mov	r2, r3
 800909a:	2101      	movs	r1, #1
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fcdf 	bl	8008a60 <nRF24_WriteReg>
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 80090b2:	2107      	movs	r1, #7
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fcb2 	bl	8008a1e <nRF24_ReadReg>
 80090ba:	4603      	mov	r3, r0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <nRF24_GetConfig>:

uint8_t nRF24_GetConfig(nRF24_Handler_t *device) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_CONFIG);
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff fca5 	bl	8008a1e <nRF24_ReadReg>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80090e6:	22ff      	movs	r2, #255	@ 0xff
 80090e8:	21e1      	movs	r1, #225	@ 0xe1
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fcb8 	bl	8008a60 <nRF24_WriteReg>
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8009100:	22ff      	movs	r2, #255	@ 0xff
 8009102:	21e2      	movs	r1, #226	@ 0xe2
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7ff fcab 	bl	8008a60 <nRF24_WriteReg>
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800911a:	2107      	movs	r1, #7
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fc7e 	bl	8008a1e <nRF24_ReadReg>
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800912c:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	461a      	mov	r2, r3
 8009132:	2107      	movs	r1, #7
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff fc93 	bl	8008a60 <nRF24_WriteReg>
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <nRF24_ClearIRQFlagsTx>:

void nRF24_ClearIRQFlagsTx(nRF24_Handler_t *device) {
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800914a:	2107      	movs	r1, #7
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff fc66 	bl	8008a1e <nRF24_ReadReg>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_TX;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800915c:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	461a      	mov	r2, r3
 8009162:	2107      	movs	r1, #7
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fc7b 	bl	8008a60 <nRF24_WriteReg>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <nRF24_ClearIRQFlagsRx>:

void nRF24_ClearIRQFlagsRx(nRF24_Handler_t *device) {
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DRbits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800917a:	2107      	movs	r1, #7
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff fc4e 	bl	8008a1e <nRF24_ReadReg>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_RX;
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800918c:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	461a      	mov	r2, r3
 8009192:	2107      	movs	r1, #7
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fc63 	bl	8008a60 <nRF24_WriteReg>
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <nRF24_WritePayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	4613      	mov	r3, r2
 80091ae:	71fb      	strb	r3, [r7, #7]
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	21a0      	movs	r1, #160	@ 0xa0
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fcbc 	bl	8008b34 <nRF24_WriteMBReg>
}
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <nRF24_ReadPayload>:

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80091d0:	2107      	movs	r1, #7
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff fc23 	bl	8008a1e <nRF24_ReadReg>
 80091d8:	4603      	mov	r3, r0
 80091da:	105b      	asrs	r3, r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d817      	bhi.n	800921a <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	4a0f      	ldr	r2, [pc, #60]	@ (800922c <nRF24_ReadPayload+0x68>)
 80091ee:	5cd3      	ldrb	r3, [r2, r3]
 80091f0:	4619      	mov	r1, r3
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff fc13 	bl	8008a1e <nRF24_ReadReg>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	2161      	movs	r1, #97	@ 0x61
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff fc65 	bl	8008ae0 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	e003      	b.n	8009222 <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 8009220:	23ff      	movs	r3, #255	@ 0xff
}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	080096f0 	.word	0x080096f0

08009230 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af02      	add	r7, sp, #8
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800923c:	887b      	ldrh	r3, [r7, #2]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b29b      	uxth	r3, r3
 8009242:	b2da      	uxtb	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	b2da      	uxtb	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	791b      	ldrb	r3, [r3, #4]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	b299      	uxth	r1, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f103 0209 	add.w	r2, r3, #9
 8009266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	2302      	movs	r3, #2
 800926e:	f7f9 fb9f 	bl	80029b0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	b299      	uxth	r1, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	1d5a      	adds	r2, r3, #5
 800927e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2301      	movs	r3, #1
 8009286:	f7f9 fc87 	bl	8002b98 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	795b      	ldrb	r3, [r3, #5]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af02      	add	r7, sp, #8
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	807b      	strh	r3, [r7, #2]
 80092a2:	4613      	mov	r3, r2
 80092a4:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 80092a6:	887b      	ldrh	r3, [r7, #2]
 80092a8:	0a1b      	lsrs	r3, r3, #8
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 80092b2:	887b      	ldrh	r3, [r7, #2]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	791b      	ldrb	r3, [r3, #4]
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	787a      	ldrb	r2, [r7, #1]
 80092c6:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	b299      	uxth	r1, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0209 	add.w	r2, r3, #9
 80092d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2303      	movs	r3, #3
 80092de:	f7f9 fb67 	bl	80029b0 <HAL_I2C_Master_Transmit>
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	4613      	mov	r3, r2
 80092f6:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	79fa      	ldrb	r2, [r7, #7]
 8009302:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8009304:	2100      	movs	r1, #0
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7ff ff92 	bl	8009230 <VL6180X_Read8>
 800930c:	4603      	mov	r3, r0
 800930e:	2bb4      	cmp	r3, #180	@ 0xb4
 8009310:	d001      	beq.n	8009316 <VL6180X_Init+0x2c>
    return false;
 8009312:	2300      	movs	r3, #0
 8009314:	e011      	b.n	800933a <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 8009316:	2116      	movs	r1, #22
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff ff89 	bl	8009230 <VL6180X_Read8>
 800931e:	4603      	mov	r3, r0
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d007      	beq.n	8009338 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f80a 	bl	8009342 <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800932e:	2200      	movs	r2, #0
 8009330:	2116      	movs	r1, #22
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff ffaf 	bl	8009296 <VL6180X_Write8>
  }

  return true;
 8009338:	2301      	movs	r3, #1
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 800934a:	2201      	movs	r2, #1
 800934c:	f240 2107 	movw	r1, #519	@ 0x207
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ffa0 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 8009356:	2201      	movs	r2, #1
 8009358:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff ff9a 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 8009362:	2200      	movs	r2, #0
 8009364:	2196      	movs	r1, #150	@ 0x96
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff ff95 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 800936c:	22fd      	movs	r2, #253	@ 0xfd
 800936e:	2197      	movs	r1, #151	@ 0x97
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff ff90 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 8009376:	2200      	movs	r2, #0
 8009378:	21e3      	movs	r1, #227	@ 0xe3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff ff8b 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 8009380:	2204      	movs	r2, #4
 8009382:	21e4      	movs	r1, #228	@ 0xe4
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff ff86 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 800938a:	2202      	movs	r2, #2
 800938c:	21e5      	movs	r1, #229	@ 0xe5
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff ff81 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 8009394:	2201      	movs	r2, #1
 8009396:	21e6      	movs	r1, #230	@ 0xe6
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff ff7c 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 800939e:	2203      	movs	r2, #3
 80093a0:	21e7      	movs	r1, #231	@ 0xe7
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff ff77 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 80093a8:	2202      	movs	r2, #2
 80093aa:	21f5      	movs	r1, #245	@ 0xf5
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ff72 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 80093b2:	2205      	movs	r2, #5
 80093b4:	21d9      	movs	r1, #217	@ 0xd9
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff ff6d 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 80093bc:	22ce      	movs	r2, #206	@ 0xce
 80093be:	21db      	movs	r1, #219	@ 0xdb
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ff68 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 80093c6:	2203      	movs	r2, #3
 80093c8:	21dc      	movs	r1, #220	@ 0xdc
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff ff63 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 80093d0:	22f8      	movs	r2, #248	@ 0xf8
 80093d2:	21dd      	movs	r1, #221	@ 0xdd
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff ff5e 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 80093da:	2200      	movs	r2, #0
 80093dc:	219f      	movs	r1, #159	@ 0x9f
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff ff59 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 80093e4:	223c      	movs	r2, #60	@ 0x3c
 80093e6:	21a3      	movs	r1, #163	@ 0xa3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ff54 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 80093ee:	2200      	movs	r2, #0
 80093f0:	21b7      	movs	r1, #183	@ 0xb7
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff ff4f 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 80093f8:	223c      	movs	r2, #60	@ 0x3c
 80093fa:	21bb      	movs	r1, #187	@ 0xbb
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff ff4a 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 8009402:	2209      	movs	r2, #9
 8009404:	21b2      	movs	r1, #178	@ 0xb2
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff ff45 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800940c:	2209      	movs	r2, #9
 800940e:	21ca      	movs	r1, #202	@ 0xca
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff ff40 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 8009416:	2201      	movs	r2, #1
 8009418:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff ff3a 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 8009422:	2217      	movs	r2, #23
 8009424:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff34 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800942e:	2200      	movs	r2, #0
 8009430:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff2e 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800943a:	2205      	movs	r2, #5
 800943c:	21ff      	movs	r1, #255	@ 0xff
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ff29 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 8009444:	2205      	movs	r2, #5
 8009446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff ff23 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 8009450:	2205      	movs	r2, #5
 8009452:	f240 1199 	movw	r1, #409	@ 0x199
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff ff1d 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800945c:	221b      	movs	r2, #27
 800945e:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff ff17 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 8009468:	223e      	movs	r2, #62	@ 0x3e
 800946a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff ff11 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 8009474:	221f      	movs	r2, #31
 8009476:	f240 11a7 	movw	r1, #423	@ 0x1a7
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff ff0b 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 8009480:	2200      	movs	r2, #0
 8009482:	2130      	movs	r1, #48	@ 0x30
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff ff06 	bl	8009296 <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 800948a:	2210      	movs	r2, #16
 800948c:	2111      	movs	r1, #17
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff ff01 	bl	8009296 <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 8009494:	2230      	movs	r2, #48	@ 0x30
 8009496:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fefb 	bl	8009296 <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 80094a0:	2246      	movs	r2, #70	@ 0x46
 80094a2:	213f      	movs	r1, #63	@ 0x3f
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff fef6 	bl	8009296 <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 80094aa:	22ff      	movs	r2, #255	@ 0xff
 80094ac:	2131      	movs	r1, #49	@ 0x31
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff fef1 	bl	8009296 <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 80094b4:	2263      	movs	r2, #99	@ 0x63
 80094b6:	2141      	movs	r1, #65	@ 0x41
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff feec 	bl	8009296 <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 80094be:	2201      	movs	r2, #1
 80094c0:	212e      	movs	r1, #46	@ 0x2e
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fee7 	bl	8009296 <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 80094c8:	2209      	movs	r2, #9
 80094ca:	211b      	movs	r1, #27
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fee2 	bl	8009296 <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 80094d2:	2231      	movs	r2, #49	@ 0x31
 80094d4:	213e      	movs	r1, #62	@ 0x3e
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fedd 	bl	8009296 <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 80094dc:	2224      	movs	r2, #36	@ 0x24
 80094de:	2114      	movs	r1, #20
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fed8 	bl	8009296 <VL6180X_Write8>
                        // Ready threshold event'
}
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 80094f6:	bf00      	nop
 80094f8:	214d      	movs	r1, #77	@ 0x4d
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fe98 	bl	8009230 <VL6180X_Read8>
 8009500:	4603      	mov	r3, r0
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0f6      	beq.n	80094f8 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800950a:	2201      	movs	r2, #1
 800950c:	2118      	movs	r1, #24
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff fec1 	bl	8009296 <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 8009514:	bf00      	nop
 8009516:	214f      	movs	r1, #79	@ 0x4f
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff fe89 	bl	8009230 <VL6180X_Read8>
 800951e:	4603      	mov	r3, r0
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0f6      	beq.n	8009516 <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 8009528:	2162      	movs	r1, #98	@ 0x62
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff fe80 	bl	8009230 <VL6180X_Read8>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8009534:	2207      	movs	r2, #7
 8009536:	2115      	movs	r1, #21
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff feac 	bl	8009296 <VL6180X_Write8>

  return range;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <memset>:
 8009548:	4402      	add	r2, r0
 800954a:	4603      	mov	r3, r0
 800954c:	4293      	cmp	r3, r2
 800954e:	d100      	bne.n	8009552 <memset+0xa>
 8009550:	4770      	bx	lr
 8009552:	f803 1b01 	strb.w	r1, [r3], #1
 8009556:	e7f9      	b.n	800954c <memset+0x4>

08009558 <__errno>:
 8009558:	4b01      	ldr	r3, [pc, #4]	@ (8009560 <__errno+0x8>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20000040 	.word	0x20000040

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	@ (800959c <__libc_init_array+0x38>)
 8009568:	4c0d      	ldr	r4, [pc, #52]	@ (80095a0 <__libc_init_array+0x3c>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	2600      	movs	r6, #0
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	@ (80095a4 <__libc_init_array+0x40>)
 8009576:	4c0c      	ldr	r4, [pc, #48]	@ (80095a8 <__libc_init_array+0x44>)
 8009578:	f000 f84a 	bl	8009610 <_init>
 800957c:	1b64      	subs	r4, r4, r5
 800957e:	10a4      	asrs	r4, r4, #2
 8009580:	2600      	movs	r6, #0
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	08009708 	.word	0x08009708
 80095a0:	08009708 	.word	0x08009708
 80095a4:	08009708 	.word	0x08009708
 80095a8:	0800970c 	.word	0x0800970c

080095ac <memcpy>:
 80095ac:	440a      	add	r2, r1
 80095ae:	4291      	cmp	r1, r2
 80095b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b4:	d100      	bne.n	80095b8 <memcpy+0xc>
 80095b6:	4770      	bx	lr
 80095b8:	b510      	push	{r4, lr}
 80095ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c2:	4291      	cmp	r1, r2
 80095c4:	d1f9      	bne.n	80095ba <memcpy+0xe>
 80095c6:	bd10      	pop	{r4, pc}

080095c8 <sqrt>:
 80095c8:	b508      	push	{r3, lr}
 80095ca:	ed2d 8b04 	vpush	{d8-d9}
 80095ce:	eeb0 8b40 	vmov.f64	d8, d0
 80095d2:	f000 f819 	bl	8009608 <__ieee754_sqrt>
 80095d6:	eeb4 8b48 	vcmp.f64	d8, d8
 80095da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095de:	d60c      	bvs.n	80095fa <sqrt+0x32>
 80095e0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8009600 <sqrt+0x38>
 80095e4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80095e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ec:	d505      	bpl.n	80095fa <sqrt+0x32>
 80095ee:	f7ff ffb3 	bl	8009558 <__errno>
 80095f2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80095f6:	2321      	movs	r3, #33	@ 0x21
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	ecbd 8b04 	vpop	{d8-d9}
 80095fe:	bd08      	pop	{r3, pc}
	...

08009608 <__ieee754_sqrt>:
 8009608:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800960c:	4770      	bx	lr
	...

08009610 <_init>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	bf00      	nop
 8009614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009616:	bc08      	pop	{r3}
 8009618:	469e      	mov	lr, r3
 800961a:	4770      	bx	lr

0800961c <_fini>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr
