
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a670  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a870  0800a870  0000b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a94c  0800a94c  0000c090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a94c  0800a94c  0000b94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a954  0800a954  0000c090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a954  0800a954  0000b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a958  0800a958  0000b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a95c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004550  20000090  0800a9ec  0000c090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045e0  0800a9ec  0000c5e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fdf  00000000  00000000  0000c0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005033  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  000350d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cd  00000000  00000000  00036d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de6e  00000000  00000000  000382d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002692e  00000000  00000000  00066143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010992a  00000000  00000000  0008ca71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019639b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007630  00000000  00000000  001963e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a858 	.word	0x0800a858

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	0800a858 	.word	0x0800a858

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <BallDetectorFunction>:
#include "ball_detector_task.h"
#include "system_globals.h"
#include "vl6180x.h"
#include <string.h>

void BallDetectorFunction(void const * argument) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8000574:	2229      	movs	r2, #41	@ 0x29
 8000576:	4928      	ldr	r1, [pc, #160]	@ (8000618 <BallDetectorFunction+0xac>)
 8000578:	4828      	ldr	r0, [pc, #160]	@ (800061c <BallDetectorFunction+0xb0>)
 800057a:	f009 ffda 	bl	800a532 <VL6180X_Init>
    ball_range = VL6180X_ReadRange(&range_sensor);
 800057e:	4827      	ldr	r0, [pc, #156]	@ (800061c <BallDetectorFunction+0xb0>)
 8000580:	f00a f8d9 	bl	800a736 <VL6180X_ReadRange>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b25      	ldr	r3, [pc, #148]	@ (8000620 <BallDetectorFunction+0xb4>)
 800058a:	801a      	strh	r2, [r3, #0]
    memset(ball_meas_set, ball_range, 10);
 800058c:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <BallDetectorFunction+0xb4>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	220a      	movs	r2, #10
 8000592:	4619      	mov	r1, r3
 8000594:	4823      	ldr	r0, [pc, #140]	@ (8000624 <BallDetectorFunction+0xb8>)
 8000596:	f00a f8fb 	bl	800a790 <memset>
    for (;;) {
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 800059a:	4820      	ldr	r0, [pc, #128]	@ (800061c <BallDetectorFunction+0xb0>)
 800059c:	f00a f8cb 	bl	800a736 <VL6180X_ReadRange>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005a6:	701a      	strb	r2, [r3, #0]
        ball_accum = ball_meas_set[0];
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005b0:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 9; i > 0; i--) {
 80005b2:	2309      	movs	r3, #9
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e013      	b.n	80005e0 <BallDetectorFunction+0x74>
            ball_accum += ball_meas_set[i];
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005ca:	801a      	strh	r2, [r3, #0]
            ball_meas_set[i] = ball_meas_set[i - 1];
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4914      	ldr	r1, [pc, #80]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005d4:	5c89      	ldrb	r1, [r1, r2]
 80005d6:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005d8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 9; i > 0; i--) {
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	3b01      	subs	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1e8      	bne.n	80005b8 <BallDetectorFunction+0x4c>
        }
        ball_range = ball_accum / 10;
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4a10      	ldr	r2, [pc, #64]	@ (800062c <BallDetectorFunction+0xc0>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <BallDetectorFunction+0xb4>)
 80005f6:	801a      	strh	r2, [r3, #0]
        if (ball_range < VL6180X_THRESHOLD) {
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <BallDetectorFunction+0xb4>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b40      	cmp	r3, #64	@ 0x40
 80005fe:	d803      	bhi.n	8000608 <BallDetectorFunction+0x9c>
            ball_posession = 0x01;
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <BallDetectorFunction+0xc4>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e002      	b.n	800060e <BallDetectorFunction+0xa2>
        } else {
            ball_posession = 0x00;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <BallDetectorFunction+0xc4>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
        }
        osDelay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f006 fa0f 	bl	8006a32 <osDelay>
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 8000614:	e7c1      	b.n	800059a <BallDetectorFunction+0x2e>
 8000616:	bf00      	nop
 8000618:	20000488 	.word	0x20000488
 800061c:	200003ac 	.word	0x200003ac
 8000620:	200003be 	.word	0x200003be
 8000624:	200003c4 	.word	0x200003c4
 8000628:	200003c0 	.word	0x200003c0
 800062c:	cccccccd 	.word	0xcccccccd
 8000630:	200003bc 	.word	0x200003bc

08000634 <DriveFunction>:
#ifndef KICKER_START
#define KICKER_START 2
#endif

void DriveFunction(void const * argument)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b098      	sub	sp, #96	@ 0x60
 8000638:	af06      	add	r7, sp, #24
 800063a:	6078      	str	r0, [r7, #4]
    // Init PID sampler
    uint32_t timeToWait = osKernelSysTick();
 800063c:	f006 f9c2 	bl	80069c4 <osKernelSysTick>
 8000640:	4603      	mov	r3, r0
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
    // Init robot_id
    robot_id = Board_GetID();
 8000644:	f009 f90a 	bl	800985c <Board_GetID>
 8000648:	4603      	mov	r3, r0
 800064a:	b29a      	uxth	r2, r3
 800064c:	4bbd      	ldr	r3, [pc, #756]	@ (8000944 <DriveFunction+0x310>)
 800064e:	801a      	strh	r2, [r3, #0]

    // Init wheels motors DAC: 2.0[V] ref
    MAX581x_Handler_t driveDAC;
    MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 8000650:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000654:	2202      	movs	r2, #2
 8000656:	49bc      	ldr	r1, [pc, #752]	@ (8000948 <DriveFunction+0x314>)
 8000658:	4618      	mov	r0, r3
 800065a:	f008 ff8f 	bl	800957c <MAX581x_Init>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 800065e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f008 ffd7 	bl	800961a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 800066c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000670:	2200      	movs	r2, #0
 8000672:	2101      	movs	r1, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f008 ffd0 	bl	800961a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 800067a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f008 ffc9 	bl	800961a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 8000688:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800068c:	2200      	movs	r2, #0
 800068e:	2103      	movs	r1, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f008 ffc2 	bl	800961a <MAX581x_Code>

    // Init dribbler motor DAC: 2.0[V] ref
    MAX581x_Handler_t dribblerDAC;
    MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 8000696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800069a:	2202      	movs	r2, #2
 800069c:	49ab      	ldr	r1, [pc, #684]	@ (800094c <DriveFunction+0x318>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f008 ff6c 	bl	800957c <MAX581x_Init>
    MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 80006a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f008 ffb4 	bl	800961a <MAX581x_Code>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b8:	48a5      	ldr	r0, [pc, #660]	@ (8000950 <DriveFunction+0x31c>)
 80006ba:	f002 fd61 	bl	8003180 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	48a3      	ldr	r0, [pc, #652]	@ (8000950 <DriveFunction+0x31c>)
 80006c4:	f002 fd5c 	bl	8003180 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2140      	movs	r1, #64	@ 0x40
 80006cc:	48a0      	ldr	r0, [pc, #640]	@ (8000950 <DriveFunction+0x31c>)
 80006ce:	f002 fd57 	bl	8003180 <HAL_GPIO_WritePin>

    // Config motors GPIO and TIM
    // Motor 1
    motor[0].enablePin.GPIOx = GPIOA;
 80006d2:	4ba0      	ldr	r3, [pc, #640]	@ (8000954 <DriveFunction+0x320>)
 80006d4:	4aa0      	ldr	r2, [pc, #640]	@ (8000958 <DriveFunction+0x324>)
 80006d6:	655a      	str	r2, [r3, #84]	@ 0x54
    motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 80006d8:	4b9e      	ldr	r3, [pc, #632]	@ (8000954 <DriveFunction+0x320>)
 80006da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006de:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    motor[0].dirPin.GPIOx = GPIOA;
 80006e2:	4b9c      	ldr	r3, [pc, #624]	@ (8000954 <DriveFunction+0x320>)
 80006e4:	4a9c      	ldr	r2, [pc, #624]	@ (8000958 <DriveFunction+0x324>)
 80006e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 80006e8:	4b9a      	ldr	r3, [pc, #616]	@ (8000954 <DriveFunction+0x320>)
 80006ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    motor[0].brakePin.GPIOx = GPIOA;
 80006f2:	4b98      	ldr	r3, [pc, #608]	@ (8000954 <DriveFunction+0x320>)
 80006f4:	4a98      	ldr	r2, [pc, #608]	@ (8000958 <DriveFunction+0x324>)
 80006f6:	665a      	str	r2, [r3, #100]	@ 0x64
    motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 80006f8:	4b96      	ldr	r3, [pc, #600]	@ (8000954 <DriveFunction+0x320>)
 80006fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    motor[0].encoder.count = &TIM3->CNT;
 8000702:	4b94      	ldr	r3, [pc, #592]	@ (8000954 <DriveFunction+0x320>)
 8000704:	4a95      	ldr	r2, [pc, #596]	@ (800095c <DriveFunction+0x328>)
 8000706:	641a      	str	r2, [r3, #64]	@ 0x40
    motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 8000708:	4b95      	ldr	r3, [pc, #596]	@ (8000960 <DriveFunction+0x32c>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000714:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8000964 <DriveFunction+0x330>
 8000720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000724:	4b8b      	ldr	r3, [pc, #556]	@ (8000954 <DriveFunction+0x320>)
 8000726:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 800072a:	4b8a      	ldr	r3, [pc, #552]	@ (8000954 <DriveFunction+0x320>)
 800072c:	2201      	movs	r2, #1
 800072e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.001f;
 8000732:	4b88      	ldr	r3, [pc, #544]	@ (8000954 <DriveFunction+0x320>)
 8000734:	4a8c      	ldr	r2, [pc, #560]	@ (8000968 <DriveFunction+0x334>)
 8000736:	64da      	str	r2, [r3, #76]	@ 0x4c
    TIM3->CR1 = TIM_CR1_CEN;
 8000738:	4b89      	ldr	r3, [pc, #548]	@ (8000960 <DriveFunction+0x32c>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]

    // Motor 2
    motor[1].enablePin.GPIOx = GPIOC;
 800073e:	4b85      	ldr	r3, [pc, #532]	@ (8000954 <DriveFunction+0x320>)
 8000740:	4a8a      	ldr	r2, [pc, #552]	@ (800096c <DriveFunction+0x338>)
 8000742:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 8000746:	4b83      	ldr	r3, [pc, #524]	@ (8000954 <DriveFunction+0x320>)
 8000748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074c:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    motor[1].dirPin.GPIOx = GPIOC;
 8000750:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <DriveFunction+0x320>)
 8000752:	4a86      	ldr	r2, [pc, #536]	@ (800096c <DriveFunction+0x338>)
 8000754:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8000758:	4b7e      	ldr	r3, [pc, #504]	@ (8000954 <DriveFunction+0x320>)
 800075a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800075e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    motor[1].brakePin.GPIOx = GPIOD;
 8000762:	4b7c      	ldr	r3, [pc, #496]	@ (8000954 <DriveFunction+0x320>)
 8000764:	4a82      	ldr	r2, [pc, #520]	@ (8000970 <DriveFunction+0x33c>)
 8000766:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 800076a:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <DriveFunction+0x320>)
 800076c:	2201      	movs	r2, #1
 800076e:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    motor[1].encoder.count = &TIM8->CNT;
 8000772:	4b78      	ldr	r3, [pc, #480]	@ (8000954 <DriveFunction+0x320>)
 8000774:	4a7f      	ldr	r2, [pc, #508]	@ (8000974 <DriveFunction+0x340>)
 8000776:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 800077a:	4b7f      	ldr	r3, [pc, #508]	@ (8000978 <DriveFunction+0x344>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000786:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800078a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800078e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000964 <DriveFunction+0x330>
 8000792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000796:	4b6f      	ldr	r3, [pc, #444]	@ (8000954 <DriveFunction+0x320>)
 8000798:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
    motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 800079c:	4b6d      	ldr	r3, [pc, #436]	@ (8000954 <DriveFunction+0x320>)
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
    motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.001f;
 80007a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000954 <DriveFunction+0x320>)
 80007a6:	4a70      	ldr	r2, [pc, #448]	@ (8000968 <DriveFunction+0x334>)
 80007a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    TIM8->CR1 = TIM_CR1_CEN;
 80007ac:	4b72      	ldr	r3, [pc, #456]	@ (8000978 <DriveFunction+0x344>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]

    // Motor 3
    motor[2].enablePin.GPIOx = GPIOK;
 80007b2:	4b68      	ldr	r3, [pc, #416]	@ (8000954 <DriveFunction+0x320>)
 80007b4:	4a71      	ldr	r2, [pc, #452]	@ (800097c <DriveFunction+0x348>)
 80007b6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 80007ba:	4b66      	ldr	r3, [pc, #408]	@ (8000954 <DriveFunction+0x320>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
    motor[2].dirPin.GPIOx = GPIOG;
 80007c2:	4b64      	ldr	r3, [pc, #400]	@ (8000954 <DriveFunction+0x320>)
 80007c4:	4a6e      	ldr	r2, [pc, #440]	@ (8000980 <DriveFunction+0x34c>)
 80007c6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 80007ca:	4b62      	ldr	r3, [pc, #392]	@ (8000954 <DriveFunction+0x320>)
 80007cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007d0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
    motor[2].brakePin.GPIOx = GPIOK;
 80007d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000954 <DriveFunction+0x320>)
 80007d6:	4a69      	ldr	r2, [pc, #420]	@ (800097c <DriveFunction+0x348>)
 80007d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 80007dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000954 <DriveFunction+0x320>)
 80007de:	2240      	movs	r2, #64	@ 0x40
 80007e0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
    motor[2].encoder.count = &TIM2->CNT;
 80007e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000954 <DriveFunction+0x320>)
 80007e6:	4a67      	ldr	r2, [pc, #412]	@ (8000984 <DriveFunction+0x350>)
 80007e8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 80007ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f2:	ee07 3a90 	vmov	s15, r3
 80007f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80007fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000802:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8000964 <DriveFunction+0x330>
 8000806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800080a:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <DriveFunction+0x320>)
 800080c:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 8000810:	4b50      	ldr	r3, [pc, #320]	@ (8000954 <DriveFunction+0x320>)
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.001f;
 8000818:	4b4e      	ldr	r3, [pc, #312]	@ (8000954 <DriveFunction+0x320>)
 800081a:	4a53      	ldr	r2, [pc, #332]	@ (8000968 <DriveFunction+0x334>)
 800081c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    TIM2->CR1 = TIM_CR1_CEN;
 8000820:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]

    // Motor 4
    motor[3].enablePin.GPIOx = GPIOF;
 8000828:	4b4a      	ldr	r3, [pc, #296]	@ (8000954 <DriveFunction+0x320>)
 800082a:	4a57      	ldr	r2, [pc, #348]	@ (8000988 <DriveFunction+0x354>)
 800082c:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
    motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 8000830:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <DriveFunction+0x320>)
 8000832:	2220      	movs	r2, #32
 8000834:	f8a3 21cc 	strh.w	r2, [r3, #460]	@ 0x1cc
    motor[3].dirPin.GPIOx = GPIOF;
 8000838:	4b46      	ldr	r3, [pc, #280]	@ (8000954 <DriveFunction+0x320>)
 800083a:	4a53      	ldr	r2, [pc, #332]	@ (8000988 <DriveFunction+0x354>)
 800083c:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
    motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 8000840:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <DriveFunction+0x320>)
 8000842:	2208      	movs	r2, #8
 8000844:	f8a3 21d4 	strh.w	r2, [r3, #468]	@ 0x1d4
    motor[3].brakePin.GPIOx = GPIOF;
 8000848:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <DriveFunction+0x320>)
 800084a:	4a4f      	ldr	r2, [pc, #316]	@ (8000988 <DriveFunction+0x354>)
 800084c:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
    motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 8000850:	4b40      	ldr	r3, [pc, #256]	@ (8000954 <DriveFunction+0x320>)
 8000852:	2210      	movs	r2, #16
 8000854:	f8a3 21dc 	strh.w	r2, [r3, #476]	@ 0x1dc
    motor[3].encoder.count = &TIM5->CNT;
 8000858:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <DriveFunction+0x320>)
 800085a:	4a4c      	ldr	r2, [pc, #304]	@ (800098c <DriveFunction+0x358>)
 800085c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8000860:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <DriveFunction+0x35c>)
 8000862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000864:	ee07 3a90 	vmov	s15, r3
 8000868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800086c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000874:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000964 <DriveFunction+0x330>
 8000878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <DriveFunction+0x320>)
 800087e:	edc3 7a6e 	vstr	s15, [r3, #440]	@ 0x1b8
    motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 8000882:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <DriveFunction+0x320>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4
    motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.001f;
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <DriveFunction+0x320>)
 800088c:	4a36      	ldr	r2, [pc, #216]	@ (8000968 <DriveFunction+0x334>)
 800088e:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    TIM5->CR1 = TIM_CR1_CEN;
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <DriveFunction+0x35c>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]

    // Config PID
    PID_Params_t pidParams;
    pidParams.Kp = 12.0f;
 8000898:	4b3e      	ldr	r3, [pc, #248]	@ (8000994 <DriveFunction+0x360>)
 800089a:	60fb      	str	r3, [r7, #12]
    pidParams.Ki = 4.5f;
 800089c:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <DriveFunction+0x364>)
 800089e:	613b      	str	r3, [r7, #16]
    pidParams.Kd = 0.0f;
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
    pidParams.outputMax = (float)(4095.0f);
 80008a6:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <DriveFunction+0x368>)
 80008a8:	61bb      	str	r3, [r7, #24]
    pidParams.outputMin = (float)(-4095.0f);
 80008aa:	4b3d      	ldr	r3, [pc, #244]	@ (80009a0 <DriveFunction+0x36c>)
 80008ac:	61fb      	str	r3, [r7, #28]
    pidParams.integralMax = pidParams.outputMax / 5.0f;
 80008ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80008b2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ba:	edc7 7a08 	vstr	s15, [r7, #32]
    pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 80008be:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <DriveFunction+0x370>)
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Enable motors and disable brake
    for (uint8_t i = 0; i < 4; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80008c8:	e034      	b.n	8000934 <DriveFunction+0x300>
    {
        Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 80008ca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80008ce:	4613      	mov	r3, r2
 80008d0:	015b      	lsls	r3, r3, #5
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <DriveFunction+0x320>)
 80008d8:	4413      	add	r3, r2
 80008da:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80008de:	2201      	movs	r2, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f009 f861 	bl	80099a8 <Motor_Init>
        Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 80008e6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80008ea:	4613      	mov	r3, r2
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <DriveFunction+0x320>)
 80008f4:	4413      	add	r3, r2
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f009 f8e9 	bl	8009ad0 <Motor_SetBrake>
        PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 80008fe:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000902:	4613      	mov	r3, r2
 8000904:	015b      	lsls	r3, r3, #5
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <DriveFunction+0x320>)
 800090c:	189d      	adds	r5, r3, r2
 800090e:	2301      	movs	r3, #1
 8000910:	9304      	str	r3, [sp, #16]
 8000912:	466c      	mov	r4, sp
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000924:	4628      	mov	r0, r5
 8000926:	f008 feb7 	bl	8009698 <PID_Init>
    for (uint8_t i = 0; i < 4; i++)
 800092a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800092e:	3301      	adds	r3, #1
 8000930:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000938:	2b03      	cmp	r3, #3
 800093a:	d9c6      	bls.n	80008ca <DriveFunction+0x296>
    }

    // Infinite loop
    for(;;)
    {
        for (uint8_t i = 0; i < 4; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000942:	e059      	b.n	80009f8 <DriveFunction+0x3c4>
 8000944:	200000f8 	.word	0x200000f8
 8000948:	200003e0 	.word	0x200003e0
 800094c:	20000434 	.word	0x20000434
 8000950:	40022400 	.word	0x40022400
 8000954:	200001a0 	.word	0x200001a0
 8000958:	40020000 	.word	0x40020000
 800095c:	40000424 	.word	0x40000424
 8000960:	40000400 	.word	0x40000400
 8000964:	45000000 	.word	0x45000000
 8000968:	3dc104fb 	.word	0x3dc104fb
 800096c:	40020800 	.word	0x40020800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40010424 	.word	0x40010424
 8000978:	40010400 	.word	0x40010400
 800097c:	40022800 	.word	0x40022800
 8000980:	40021800 	.word	0x40021800
 8000984:	40000024 	.word	0x40000024
 8000988:	40021400 	.word	0x40021400
 800098c:	40000c24 	.word	0x40000c24
 8000990:	40000c00 	.word	0x40000c00
 8000994:	41400000 	.word	0x41400000
 8000998:	40900000 	.word	0x40900000
 800099c:	457ff000 	.word	0x457ff000
 80009a0:	c57ff000 	.word	0xc57ff000
 80009a4:	3a83126f 	.word	0x3a83126f
        {
            // Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine
            Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 80009a8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80009ac:	4613      	mov	r3, r2
 80009ae:	015b      	lsls	r3, r3, #5
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <DriveFunction+0x424>)
 80009b6:	441a      	add	r2, r3
 80009b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009bc:	4927      	ldr	r1, [pc, #156]	@ (8000a5c <DriveFunction+0x428>)
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009ca:	eeb0 0a67 	vmov.f32	s0, s15
 80009ce:	4619      	mov	r1, r3
 80009d0:	4610      	mov	r0, r2
 80009d2:	f009 f80b 	bl	80099ec <Motor_CLDrive>
            // TODO: make dribbler files, variable speeds
            MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 80009d6:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <DriveFunction+0x42c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <DriveFunction+0x430>)
 80009de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f008 fe16 	bl	800961a <MAX581x_Code>
        for (uint8_t i = 0; i < 4; i++)
 80009ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009f2:	3301      	adds	r3, #1
 80009f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80009f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d9d3      	bls.n	80009a8 <DriveFunction+0x374>
        }

        if(kick_sel && kick_flag == KICKER_CHARGED) {
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <DriveFunction+0x434>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d019      	beq.n	8000a3c <DriveFunction+0x408>
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <DriveFunction+0x438>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d115      	bne.n	8000a3c <DriveFunction+0x408>
            osMutexWait(kickFlagHandle, osWaitForever);
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <DriveFunction+0x43c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f006 f82b 	bl	8006a74 <osMutexWait>
            kick_flag = KICKER_START;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <DriveFunction+0x438>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	701a      	strb	r2, [r3, #0]
            osMutexRelease(kickFlagHandle);
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <DriveFunction+0x43c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f006 f871 	bl	8006b10 <osMutexRelease>
            osMessagePut(kickQueueHandle, 0, 0);
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <DriveFunction+0x440>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 f8b2 	bl	8006ba0 <osMessagePut>
        }

        osMessagePut(nrf24CheckHandle, 0, 0);
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <DriveFunction+0x444>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 f8ab 	bl	8006ba0 <osMessagePut>
        osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 8000a4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f006 f959 	bl	8006d08 <osDelayUntil>
        for (uint8_t i = 0; i < 4; i++)
 8000a56:	e771      	b.n	800093c <DriveFunction+0x308>
 8000a58:	200001a0 	.word	0x200001a0
 8000a5c:	20000160 	.word	0x20000160
 8000a60:	2000039c 	.word	0x2000039c
 8000a64:	0800a910 	.word	0x0800a910
 8000a68:	2000039d 	.word	0x2000039d
 8000a6c:	2000039e 	.word	0x2000039e
 8000a70:	200003a8 	.word	0x200003a8
 8000a74:	200003a4 	.word	0x200003a4
 8000a78:	20000158 	.word	0x20000158

08000a7c <setSpeed>:
    }
}

void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	@ 0x40
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]

	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8000a88:	4bac      	ldr	r3, [pc, #688]	@ (8000d3c <setSpeed+0x2c0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a8e:	4bab      	ldr	r3, [pc, #684]	@ (8000d3c <setSpeed+0x2c0>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F))/100.0f  : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F))/100.0f ;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	da16      	bge.n	8000ace <setSpeed+0x52>
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac0:	eeb1 7a67 	vneg.f32	s14, s15
 8000ac4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8000d40 <setSpeed+0x2c4>
 8000ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000acc:	e013      	b.n	8000af6 <setSpeed+0x7a>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aee:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000d40 <setSpeed+0x2c4>
 8000af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000af6:	4b91      	ldr	r3, [pc, #580]	@ (8000d3c <setSpeed+0x2c0>)
 8000af8:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F))/100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F))/100.0f ;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3302      	adds	r3, #2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da16      	bge.n	8000b36 <setSpeed+0xba>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3302      	adds	r3, #2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	ee07 3a90 	vmov	s15, r3
 8000b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b28:	eeb1 7a67 	vneg.f32	s14, s15
 8000b2c:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8000d40 <setSpeed+0x2c4>
 8000b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b34:	e013      	b.n	8000b5e <setSpeed+0xe2>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3302      	adds	r3, #2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	ee07 3a90 	vmov	s15, r3
 8000b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b56:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8000d40 <setSpeed+0x2c4>
 8000b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b5e:	4b77      	ldr	r3, [pc, #476]	@ (8000d3c <setSpeed+0x2c0>)
 8000b60:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F))/100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F))/100.0f ;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da16      	bge.n	8000b9e <setSpeed+0x122>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3304      	adds	r3, #4
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	01db      	lsls	r3, r3, #7
 8000b78:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3303      	adds	r3, #3
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b86:	4313      	orrs	r3, r2
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b90:	eeb1 7a67 	vneg.f32	s14, s15
 8000b94:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8000d40 <setSpeed+0x2c4>
 8000b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9c:	e013      	b.n	8000bc6 <setSpeed+0x14a>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	01db      	lsls	r3, r3, #7
 8000ba6:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3303      	adds	r3, #3
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	ee07 3a90 	vmov	s15, r3
 8000bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bbe:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8000d40 <setSpeed+0x2c4>
 8000bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d3c <setSpeed+0x2c0>)
 8000bc8:	edc3 7a02 	vstr	s15, [r3, #8]


	/* Limit linear velocity magnitude */
	float vel_mag = sqrt(v_vel[0]*v_vel[0] + v_vel[1]*v_vel[1]);
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <setSpeed+0x2c0>)
 8000bce:	ed93 7a00 	vldr	s14, [r3]
 8000bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d3c <setSpeed+0x2c0>)
 8000bd4:	edd3 7a00 	vldr	s15, [r3]
 8000bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bdc:	4b57      	ldr	r3, [pc, #348]	@ (8000d3c <setSpeed+0x2c0>)
 8000bde:	edd3 6a01 	vldr	s13, [r3, #4]
 8000be2:	4b56      	ldr	r3, [pc, #344]	@ (8000d3c <setSpeed+0x2c0>)
 8000be4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8000bf8:	f009 fe0a 	bl	800a810 <sqrt>
 8000bfc:	eeb0 7b40 	vmov.f64	d7, d0
 8000c00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c04:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	if (vel_mag > ROBOT_MAX_LINEAR_VEL)
 8000c08:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000c0c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8000c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c18:	dd1b      	ble.n	8000c52 <setSpeed+0x1d6>
	{
	    float scale = ROBOT_MAX_LINEAR_VEL / vel_mag;
 8000c1a:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 8000c1e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	    v_vel[0] *= scale;
 8000c2a:	4b44      	ldr	r3, [pc, #272]	@ (8000d3c <setSpeed+0x2c0>)
 8000c2c:	ed93 7a00 	vldr	s14, [r3]
 8000c30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c38:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <setSpeed+0x2c0>)
 8000c3a:	edc3 7a00 	vstr	s15, [r3]
	    v_vel[1] *= scale;
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d3c <setSpeed+0x2c0>)
 8000c40:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d3c <setSpeed+0x2c0>)
 8000c4e:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <setSpeed+0x2c0>)
 8000c54:	ed93 7a00 	vldr	s14, [r3]
 8000c58:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c60:	edc7 7a08 	vstr	s15, [r7, #32]
 8000c64:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <setSpeed+0x2c0>)
 8000c66:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c72:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 8000c76:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c8a:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8000c8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c96:	eeb0 0b47 	vmov.f64	d0, d7
 8000c9a:	f009 fdb9 	bl	800a810 <sqrt>
 8000c9e:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca6:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 8000caa:	edd7 6a08 	vldr	s13, [r7, #32]
 8000cae:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb6:	edc7 7a05 	vstr	s15, [r7, #20]
 8000cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8000cbe:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc6:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 8000cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cce:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	dd24      	ble.n	8000d26 <setSpeed+0x2aa>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 8000cdc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000ce0:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 8000ce2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cee:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 8000cf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfe:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 8000d02:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <setSpeed+0x2c0>)
 8000d10:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 8000d14:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000d18:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <setSpeed+0x2c0>)
 8000d22:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	

	for (uint8_t i = 0; i < 4; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000d2c:	e04f      	b.n	8000dce <setSpeed+0x352>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	@ 0x38
		for (uint8_t j = 0; j < 3; j++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d3a:	e024      	b.n	8000d86 <setSpeed+0x30a>
 8000d3c:	20000390 	.word	0x20000390
 8000d40:	42c80000 	.word	0x42c80000
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8000d44:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000d48:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8000d4c:	4824      	ldr	r0, [pc, #144]	@ (8000de0 <setSpeed+0x364>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4403      	add	r3, r0
 8000d5a:	ed93 7a00 	vldr	s14, [r3]
 8000d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d62:	4a20      	ldr	r2, [pc, #128]	@ (8000de4 <setSpeed+0x368>)
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d70:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d78:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		for (uint8_t j = 0; j < 3; j++)
 8000d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d80:	3301      	adds	r3, #1
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d9da      	bls.n	8000d44 <setSpeed+0x2c8>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 8000d8e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9a:	bfcc      	ite	gt
 8000d9c:	2301      	movgt	r3, #1
 8000d9e:	2300      	movle	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 8000db6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dc2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8000dc4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dc8:	3301      	adds	r3, #1
 8000dca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000dce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d9ab      	bls.n	8000d2e <setSpeed+0x2b2>
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3740      	adds	r7, #64	@ 0x40
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000170 	.word	0x20000170
 8000de4:	20000390 	.word	0x20000390

08000de8 <KickFunction>:
#include "kick_task.h"
#include "cmsis_os.h"
#include "stm32f7xx_hal.h"

void KickFunction(void const * argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        // --- Cargar el capacitor del kicker ---
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	4824      	ldr	r0, [pc, #144]	@ (8000e88 <KickFunction+0xa0>)
 8000df6:	f002 f9c3 	bl	8003180 <HAL_GPIO_WritePin>
        osDelay(4000);
 8000dfa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000dfe:	f005 fe18 	bl	8006a32 <osDelay>
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2110      	movs	r1, #16
 8000e06:	4820      	ldr	r0, [pc, #128]	@ (8000e88 <KickFunction+0xa0>)
 8000e08:	f002 f9ba 	bl	8003180 <HAL_GPIO_WritePin>

        // --- Marcar kicker como cargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <KickFunction+0xa4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fe2d 	bl	8006a74 <osMutexWait>
        kick_flag = KICKER_CHARGED;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <KickFunction+0xa8>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <KickFunction+0xa4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 fe73 	bl	8006b10 <osMutexRelease>

        // --- Esperar evento de disparo ---
        osEvent kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <KickFunction+0xac>)
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295
 8000e36:	4618      	mov	r0, r3
 8000e38:	f005 fef2 	bl	8006c20 <osMessageGet>

        // --- Activar el kicker (disparo) ---
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e42:	4815      	ldr	r0, [pc, #84]	@ (8000e98 <KickFunction+0xb0>)
 8000e44:	f002 f99c 	bl	8003180 <HAL_GPIO_WritePin>
        osDelay(10);
 8000e48:	200a      	movs	r0, #10
 8000e4a:	f005 fdf2 	bl	8006a32 <osDelay>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e54:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <KickFunction+0xb0>)
 8000e56:	f002 f993 	bl	8003180 <HAL_GPIO_WritePin>

        // --- Marcar kicker como descargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <KickFunction+0xa4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e62:	4618      	mov	r0, r3
 8000e64:	f005 fe06 	bl	8006a74 <osMutexWait>
        kick_flag = KICKER_DISCHARGED;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <KickFunction+0xa8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <KickFunction+0xa4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 fe4c 	bl	8006b10 <osMutexRelease>

        // --- Contador de disparos ---
        kick_count++;
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <KickFunction+0xb4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <KickFunction+0xb4>)
 8000e82:	801a      	strh	r2, [r3, #0]
    {
 8000e84:	bf00      	nop
 8000e86:	e7b3      	b.n	8000df0 <KickFunction+0x8>
 8000e88:	40022400 	.word	0x40022400
 8000e8c:	200003a8 	.word	0x200003a8
 8000e90:	2000039e 	.word	0x2000039e
 8000e94:	200003a4 	.word	0x200003a4
 8000e98:	40021400 	.word	0x40021400
 8000e9c:	200003a0 	.word	0x200003a0

08000ea0 <getDribbler_speed>:
    }
}

uint8_t getDribbler_speed(uint8_t *buffer)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	109b      	asrs	r3, r3, #2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	105b      	asrs	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eec:	f3bf 8f4f 	dsb	sy
}
 8000ef0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <__NVIC_SystemReset+0x24>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000efa:	4904      	ldr	r1, [pc, #16]	@ (8000f0c <__NVIC_SystemReset+0x24>)
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <__NVIC_SystemReset+0x28>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f02:	f3bf 8f4f 	dsb	sy
}
 8000f06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <__NVIC_SystemReset+0x20>
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0004 	.word	0x05fa0004

08000f14 <main>:
void DriveFunction(void const * argument);
void RadioFunction(void const * argument);
void KickFunction(void const * argument);

int main(void)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b09a      	sub	sp, #104	@ 0x68
 8000f18:	af00      	add	r7, sp, #0
    HAL_Init();
 8000f1a:	f001 fb50 	bl	80025be <HAL_Init>
    SystemClock_Config();
 8000f1e:	f000 fe59 	bl	8001bd4 <SystemClock_Config>
    MX_GPIO_Init();
 8000f22:	f001 f955 	bl	80021d0 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000f26:	f000 ff83 	bl	8001e30 <MX_SPI1_Init>
    MX_I2C1_Init();
 8000f2a:	f000 fec1 	bl	8001cb0 <MX_I2C1_Init>
    MX_I2C2_Init();
 8000f2e:	f000 feff 	bl	8001d30 <MX_I2C2_Init>
    MX_TIM2_Init();
 8000f32:	f000 fff3 	bl	8001f1c <MX_TIM2_Init>
    MX_TIM3_Init();
 8000f36:	f001 f845 	bl	8001fc4 <MX_TIM3_Init>
    MX_TIM5_Init();
 8000f3a:	f001 f899 	bl	8002070 <MX_TIM5_Init>
    MX_TIM8_Init();
 8000f3e:	f001 f8ed 	bl	800211c <MX_TIM8_Init>
    MX_I2C3_Init();
 8000f42:	f000 ff35 	bl	8001db0 <MX_I2C3_Init>
    MX_UART5_Init();
 8000f46:	f000 ffb5 	bl	8001eb4 <MX_UART5_Init>

    // AGREGAR: Inicialización explícita de motores
    Motor_Init(&motor[0], 0, MOTOR_STATUS_DISABLE);  // ← DISABLE al inicio
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4863      	ldr	r0, [pc, #396]	@ (80010dc <main+0x1c8>)
 8000f50:	f008 fd2a 	bl	80099a8 <Motor_Init>
    Motor_Init(&motor[1], 1, MOTOR_STATUS_DISABLE);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2101      	movs	r1, #1
 8000f58:	4861      	ldr	r0, [pc, #388]	@ (80010e0 <main+0x1cc>)
 8000f5a:	f008 fd25 	bl	80099a8 <Motor_Init>
    Motor_Init(&motor[2], 2, MOTOR_STATUS_DISABLE);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	4860      	ldr	r0, [pc, #384]	@ (80010e4 <main+0x1d0>)
 8000f64:	f008 fd20 	bl	80099a8 <Motor_Init>
    Motor_Init(&motor[3], 3, MOTOR_STATUS_DISABLE);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	485e      	ldr	r0, [pc, #376]	@ (80010e8 <main+0x1d4>)
 8000f6e:	f008 fd1b 	bl	80099a8 <Motor_Init>

    kinematic[0][0] = -1/sin(WHEEL_ANGlE_1); kinematic[0][1] = 1/cos(WHEEL_ANGlE_1); kinematic[0][2] = ROBOT_RADIO;
 8000f72:	4b5e      	ldr	r3, [pc, #376]	@ (80010ec <main+0x1d8>)
 8000f74:	4a5e      	ldr	r2, [pc, #376]	@ (80010f0 <main+0x1dc>)
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	4b5c      	ldr	r3, [pc, #368]	@ (80010ec <main+0x1d8>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	4b5a      	ldr	r3, [pc, #360]	@ (80010ec <main+0x1d8>)
 8000f82:	4a5c      	ldr	r2, [pc, #368]	@ (80010f4 <main+0x1e0>)
 8000f84:	609a      	str	r2, [r3, #8]
    kinematic[1][0] = -1/sin(WHEEL_ANGlE_2); kinematic[1][1] = 1/cos(WHEEL_ANGlE_2); kinematic[1][2] = ROBOT_RADIO;
 8000f86:	4b59      	ldr	r3, [pc, #356]	@ (80010ec <main+0x1d8>)
 8000f88:	4a5b      	ldr	r2, [pc, #364]	@ (80010f8 <main+0x1e4>)
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	4b57      	ldr	r3, [pc, #348]	@ (80010ec <main+0x1d8>)
 8000f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80010fc <main+0x1e8>)
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	4b56      	ldr	r3, [pc, #344]	@ (80010ec <main+0x1d8>)
 8000f94:	4a57      	ldr	r2, [pc, #348]	@ (80010f4 <main+0x1e0>)
 8000f96:	615a      	str	r2, [r3, #20]
    kinematic[2][0] = -1/sin(WHEEL_ANGlE_3); kinematic[2][1] = 1/cos(WHEEL_ANGlE_3); kinematic[2][2] = ROBOT_RADIO;
 8000f98:	4b54      	ldr	r3, [pc, #336]	@ (80010ec <main+0x1d8>)
 8000f9a:	4a59      	ldr	r2, [pc, #356]	@ (8001100 <main+0x1ec>)
 8000f9c:	619a      	str	r2, [r3, #24]
 8000f9e:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <main+0x1d8>)
 8000fa0:	4a56      	ldr	r2, [pc, #344]	@ (80010fc <main+0x1e8>)
 8000fa2:	61da      	str	r2, [r3, #28]
 8000fa4:	4b51      	ldr	r3, [pc, #324]	@ (80010ec <main+0x1d8>)
 8000fa6:	4a53      	ldr	r2, [pc, #332]	@ (80010f4 <main+0x1e0>)
 8000fa8:	621a      	str	r2, [r3, #32]
    kinematic[3][0] = -1/sin(WHEEL_ANGlE_4); kinematic[3][1] = 1/cos(WHEEL_ANGlE_4); kinematic[3][2] = ROBOT_RADIO;
 8000faa:	4b50      	ldr	r3, [pc, #320]	@ (80010ec <main+0x1d8>)
 8000fac:	4a55      	ldr	r2, [pc, #340]	@ (8001104 <main+0x1f0>)
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80010ec <main+0x1d8>)
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80010ec <main+0x1d8>)
 8000fba:	4a4e      	ldr	r2, [pc, #312]	@ (80010f4 <main+0x1e0>)
 8000fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Parpadeo de LEDs para indicar inicio
    for (uint8_t i = 0; i < 5; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000fc4:	e016      	b.n	8000ff4 <main+0xe0>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 8000fc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fca:	484f      	ldr	r0, [pc, #316]	@ (8001108 <main+0x1f4>)
 8000fcc:	f008 fc36 	bl	800983c <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 8000fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd4:	484c      	ldr	r0, [pc, #304]	@ (8001108 <main+0x1f4>)
 8000fd6:	f008 fc31 	bl	800983c <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 8000fda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fde:	484a      	ldr	r0, [pc, #296]	@ (8001108 <main+0x1f4>)
 8000fe0:	f008 fc2c 	bl	800983c <Board_LedToggle>
        HAL_Delay(100);
 8000fe4:	2064      	movs	r0, #100	@ 0x64
 8000fe6:	f001 fb17 	bl	8002618 <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 8000fea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d9e4      	bls.n	8000fc6 <main+0xb2>
    }

    // Mutex para el sistema de kick
    osMutexDef(kickFlag);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	663b      	str	r3, [r7, #96]	@ 0x60
    kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 8001000:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fd28 	bl	8006a5a <osMutexCreate>
 800100a:	4603      	mov	r3, r0
 800100c:	4a3f      	ldr	r2, [pc, #252]	@ (800110c <main+0x1f8>)
 800100e:	6013      	str	r3, [r2, #0]

    // Colas de mensajes
    osMessageQDef(kickQueue, 1, uint16_t);
 8001010:	4a3f      	ldr	r2, [pc, #252]	@ (8001110 <main+0x1fc>)
 8001012:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101a:	e883 0003 	stmia.w	r3, {r0, r1}
    kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 800101e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fda9 	bl	8006b7c <osMessageCreate>
 800102a:	4603      	mov	r3, r0
 800102c:	4a39      	ldr	r2, [pc, #228]	@ (8001114 <main+0x200>)
 800102e:	6013      	str	r3, [r2, #0]
    osMessageQDef(nrf24Check, 16, uint16_t);
 8001030:	4a39      	ldr	r2, [pc, #228]	@ (8001118 <main+0x204>)
 8001032:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800103a:	e883 0003 	stmia.w	r3, {r0, r1}
    nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 800103e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f005 fd99 	bl	8006b7c <osMessageCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a33      	ldr	r2, [pc, #204]	@ (800111c <main+0x208>)
 800104e:	6013      	str	r3, [r2, #0]

    // Tareas principales del sistema
    osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8001050:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <main+0x20c>)
 8001052:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	6023      	str	r3, [r4, #0]
    driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8001060:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f005 fcbc 	bl	80069e4 <osThreadCreate>
 800106c:	4603      	mov	r3, r0
 800106e:	4a2d      	ldr	r2, [pc, #180]	@ (8001124 <main+0x210>)
 8001070:	6013      	str	r3, [r2, #0]
    osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8001072:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <main+0x214>)
 8001074:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001078:	461d      	mov	r5, r3
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	6023      	str	r3, [r4, #0]
    radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8001082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fcab 	bl	80069e4 <osThreadCreate>
 800108e:	4603      	mov	r3, r0
 8001090:	4a26      	ldr	r2, [pc, #152]	@ (800112c <main+0x218>)
 8001092:	6013      	str	r3, [r2, #0]
    osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <main+0x21c>)
 8001096:	f107 0414 	add.w	r4, r7, #20
 800109a:	461d      	mov	r5, r3
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	6023      	str	r3, [r4, #0]
    kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fc9a 	bl	80069e4 <osThreadCreate>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a20      	ldr	r2, [pc, #128]	@ (8001134 <main+0x220>)
 80010b4:	6013      	str	r3, [r2, #0]
    osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <main+0x224>)
 80010b8:	463c      	mov	r4, r7
 80010ba:	461d      	mov	r5, r3
 80010bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	6023      	str	r3, [r4, #0]
    ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 80010c4:	463b      	mov	r3, r7
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fc8b 	bl	80069e4 <osThreadCreate>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <main+0x228>)
 80010d2:	6013      	str	r3, [r2, #0]

    osKernelStart(); // Inicia el scheduler RTOS
 80010d4:	f005 fc6f 	bl	80069b6 <osKernelStart>

    // Bucle infinito de seguridad (no debería llegar aquí)
    while (1) {}
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <main+0x1c4>
 80010dc:	200001a0 	.word	0x200001a0
 80010e0:	2000021c 	.word	0x2000021c
 80010e4:	20000298 	.word	0x20000298
 80010e8:	20000314 	.word	0x20000314
 80010ec:	20000170 	.word	0x20000170
 80010f0:	bf93cd3a 	.word	0xbf93cd3a
 80010f4:	3da83e42 	.word	0x3da83e42
 80010f8:	bfa71796 	.word	0xbfa71796
 80010fc:	bfc721f5 	.word	0xbfc721f5
 8001100:	3fa71796 	.word	0x3fa71796
 8001104:	3f93cd3a 	.word	0x3f93cd3a
 8001108:	40022000 	.word	0x40022000
 800110c:	200003a8 	.word	0x200003a8
 8001110:	0800a870 	.word	0x0800a870
 8001114:	200003a4 	.word	0x200003a4
 8001118:	0800a878 	.word	0x0800a878
 800111c:	20000158 	.word	0x20000158
 8001120:	0800a88c 	.word	0x0800a88c
 8001124:	200003d4 	.word	0x200003d4
 8001128:	0800a8ac 	.word	0x0800a8ac
 800112c:	200003d8 	.word	0x200003d8
 8001130:	0800a8cc 	.word	0x0800a8cc
 8001134:	200003dc 	.word	0x200003dc
 8001138:	0800a8f4 	.word	0x0800a8f4
 800113c:	200003d0 	.word	0x200003d0

08001140 <HAL_TIM_PeriodElapsedCallback>:
}

// Callback de periodo de timer (para HAL)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8001152:	f001 fa41 	bl	80025d8 <HAL_IncTick>
    }
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010000 	.word	0x40010000

08001164 <Error_Handler>:

// Handler de error simple
void Error_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    // Implementar manejo de error si es necesario
    NVIC_SystemReset();
 8001168:	f7ff febe 	bl	8000ee8 <__NVIC_SystemReset>

0800116c <RadioFunction>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

int fokk = 0;
void RadioFunction(void const * argument) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	6178      	str	r0, [r7, #20]
    // --- Inicialización del módulo nRF24 ---
    nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 8001174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <RadioFunction+0x17c>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001182:	4a59      	ldr	r2, [pc, #356]	@ (80012e8 <RadioFunction+0x17c>)
 8001184:	4959      	ldr	r1, [pc, #356]	@ (80012ec <RadioFunction+0x180>)
 8001186:	485a      	ldr	r0, [pc, #360]	@ (80012f0 <RadioFunction+0x184>)
 8001188:	f008 fd35 	bl	8009bf6 <nRF24_HW_Init>
    nRF24_Init(&nrf_device);
 800118c:	4858      	ldr	r0, [pc, #352]	@ (80012f0 <RadioFunction+0x184>)
 800118e:	f008 fe1e 	bl	8009dce <nRF24_Init>
    nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 8001192:	4a58      	ldr	r2, [pc, #352]	@ (80012f4 <RadioFunction+0x188>)
 8001194:	2100      	movs	r1, #0
 8001196:	4856      	ldr	r0, [pc, #344]	@ (80012f0 <RadioFunction+0x184>)
 8001198:	f008 fed4 	bl	8009f44 <nRF24_SetAddr>
    nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 800119c:	216b      	movs	r1, #107	@ 0x6b
 800119e:	4854      	ldr	r0, [pc, #336]	@ (80012f0 <RadioFunction+0x184>)
 80011a0:	f008 fec0 	bl	8009f24 <nRF24_SetRFChannel>
    nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 80011a4:	231e      	movs	r3, #30
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	4851      	ldr	r0, [pc, #324]	@ (80012f0 <RadioFunction+0x184>)
 80011ac:	f009 f81a 	bl	800a1e4 <nRF24_SetRXPipe>
    nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 80011b0:	2102      	movs	r1, #2
 80011b2:	484f      	ldr	r0, [pc, #316]	@ (80012f0 <RadioFunction+0x184>)
 80011b4:	f008 fe70 	bl	8009e98 <nRF24_SetPowerMode>
    nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 80011b8:	2101      	movs	r1, #1
 80011ba:	484d      	ldr	r0, [pc, #308]	@ (80012f0 <RadioFunction+0x184>)
 80011bc:	f008 fe8e 	bl	8009edc <nRF24_SetOperationalMode>
    nRF24_RX_ON(&nrf_device);
 80011c0:	2101      	movs	r1, #1
 80011c2:	484b      	ldr	r0, [pc, #300]	@ (80012f0 <RadioFunction+0x184>)
 80011c4:	f008 fcf3 	bl	8009bae <nRF24_CE_State>
    memset(nrf_device.rx_data, 0, 32);
 80011c8:	2220      	movs	r2, #32
 80011ca:	2100      	movs	r1, #0
 80011cc:	484a      	ldr	r0, [pc, #296]	@ (80012f8 <RadioFunction+0x18c>)
 80011ce:	f009 fadf 	bl	800a790 <memset>
    nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 80011d2:	2106      	movs	r1, #6
 80011d4:	4846      	ldr	r0, [pc, #280]	@ (80012f0 <RadioFunction+0x184>)
 80011d6:	f009 f861 	bl	800a29c <nRF24_DisableAA>
    tx_node_addr[4] = Board_GetID();
 80011da:	f008 fb3f 	bl	800985c <Board_GetID>
 80011de:	4603      	mov	r3, r0
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b46      	ldr	r3, [pc, #280]	@ (80012fc <RadioFunction+0x190>)
 80011e4:	711a      	strb	r2, [r3, #4]
    nRF24_SetAddr(&nrf_device, nRF24_PIPETX, tx_node_addr);
 80011e6:	4a45      	ldr	r2, [pc, #276]	@ (80012fc <RadioFunction+0x190>)
 80011e8:	2106      	movs	r1, #6
 80011ea:	4841      	ldr	r0, [pc, #260]	@ (80012f0 <RadioFunction+0x184>)
 80011ec:	f008 feaa 	bl	8009f44 <nRF24_SetAddr>
    nrf_config = nRF24_GetConfig(&nrf_device);
 80011f0:	483f      	ldr	r0, [pc, #252]	@ (80012f0 <RadioFunction+0x184>)
 80011f2:	f009 f88b 	bl	800a30c <nRF24_GetConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <RadioFunction+0x194>)
 80011fc:	701a      	strb	r2, [r3, #0]

    // --- Bucle principal de la tarea ---
    for (;;) {
        // Espera evento de la cola (sin timeout)
        osMessageGet(nrf24CheckHandle, osWaitForever);
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <RadioFunction+0x198>)
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	463b      	mov	r3, r7
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fd09 	bl	8006c20 <osMessageGet>

        // Actualiza estado del nRF24
        nrf_status = nRF24_GetStatus(&nrf_device);
 800120e:	4838      	ldr	r0, [pc, #224]	@ (80012f0 <RadioFunction+0x184>)
 8001210:	f009 f86f 	bl	800a2f2 <nRF24_GetStatus>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <RadioFunction+0x19c>)
 800121a:	701a      	strb	r2, [r3, #0]
        nrf_config = nRF24_GetConfig(&nrf_device);
 800121c:	4834      	ldr	r0, [pc, #208]	@ (80012f0 <RadioFunction+0x184>)
 800121e:	f009 f875 	bl	800a30c <nRF24_GetConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <RadioFunction+0x194>)
 8001228:	701a      	strb	r2, [r3, #0]


        // Si hay datos recibidos
        if (nrf_status & nRF24_FLAG_RX_DR) {
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <RadioFunction+0x19c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0e3      	beq.n	80011fe <RadioFunction+0x92>
            // --- Procesamiento de datos recibidos ---

            nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 8001236:	4a35      	ldr	r2, [pc, #212]	@ (800130c <RadioFunction+0x1a0>)
 8001238:	492f      	ldr	r1, [pc, #188]	@ (80012f8 <RadioFunction+0x18c>)
 800123a:	482d      	ldr	r0, [pc, #180]	@ (80012f0 <RadioFunction+0x184>)
 800123c:	f009 f8e6 	bl	800a40c <nRF24_ReadPayload>
            nRF24_FlushRX(&nrf_device);
 8001240:	482b      	ldr	r0, [pc, #172]	@ (80012f0 <RadioFunction+0x184>)
 8001242:	f009 f87d 	bl	800a340 <nRF24_FlushRX>
            nRF24_ClearIRQFlagsRx(&nrf_device);
 8001246:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <RadioFunction+0x184>)
 8001248:	f009 f8b7 	bl	800a3ba <nRF24_ClearIRQFlagsRx>

            setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 800124c:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <RadioFunction+0x1a4>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <RadioFunction+0x18c>)
 800125c:	4413      	add	r3, r2
 800125e:	4a2d      	ldr	r2, [pc, #180]	@ (8001314 <RadioFunction+0x1a8>)
 8001260:	492d      	ldr	r1, [pc, #180]	@ (8001318 <RadioFunction+0x1ac>)
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc0a 	bl	8000a7c <setSpeed>
            dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 8001268:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <RadioFunction+0x1a4>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <RadioFunction+0x18c>)
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe10 	bl	8000ea0 <getDribbler_speed>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b25      	ldr	r3, [pc, #148]	@ (800131c <RadioFunction+0x1b0>)
 8001286:	701a      	strb	r2, [r3, #0]
            kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <RadioFunction+0x1a4>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <RadioFunction+0x18c>)
 8001298:	4413      	add	r3, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe12 	bl	8000ec4 <getKickerStatus>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <RadioFunction+0x1b4>)
 80012a6:	701a      	strb	r2, [r3, #0]

            //Manda ball_posession solo si se tiene o se tuvo el frame anterior
            if ( radioTx_counter == robot_id){
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <RadioFunction+0x1b8>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <RadioFunction+0x1a4>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d108      	bne.n	80012c8 <RadioFunction+0x15c>
                updateBuffer(txBuffer); // 0 usa ball_posession
 80012b6:	481c      	ldr	r0, [pc, #112]	@ (8001328 <RadioFunction+0x1bc>)
 80012b8:	f000 f838 	bl	800132c <updateBuffer>
                Radio_SendPacket(&nrf_device, txBuffer, 32);
 80012bc:	2220      	movs	r2, #32
 80012be:	491a      	ldr	r1, [pc, #104]	@ (8001328 <RadioFunction+0x1bc>)
 80012c0:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <RadioFunction+0x184>)
 80012c2:	f000 f8b1 	bl	8001428 <Radio_SendPacket>
 80012c6:	e79a      	b.n	80011fe <RadioFunction+0x92>
            }else {
                if (radioTx_counter == 16){
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <RadioFunction+0x1b8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b10      	cmp	r3, #16
 80012ce:	d103      	bne.n	80012d8 <RadioFunction+0x16c>
                    radioTx_counter = 0;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <RadioFunction+0x1b8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e792      	b.n	80011fe <RadioFunction+0x92>
                }else{
                    radioTx_counter = radioTx_counter + 1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <RadioFunction+0x1b8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <RadioFunction+0x1b8>)
 80012e2:	701a      	strb	r2, [r3, #0]
        osMessageGet(nrf24CheckHandle, osWaitForever);
 80012e4:	e78b      	b.n	80011fe <RadioFunction+0x92>
 80012e6:	bf00      	nop
 80012e8:	40021800 	.word	0x40021800
 80012ec:	200004dc 	.word	0x200004dc
 80012f0:	20000100 	.word	0x20000100
 80012f4:	20000028 	.word	0x20000028
 80012f8:	20000136 	.word	0x20000136
 80012fc:	20000020 	.word	0x20000020
 8001300:	200000fc 	.word	0x200000fc
 8001304:	20000158 	.word	0x20000158
 8001308:	200000fb 	.word	0x200000fb
 800130c:	200000fa 	.word	0x200000fa
 8001310:	200000f8 	.word	0x200000f8
 8001314:	2000015c 	.word	0x2000015c
 8001318:	20000160 	.word	0x20000160
 800131c:	2000039c 	.word	0x2000039c
 8001320:	2000039d 	.word	0x2000039d
 8001324:	200003bd 	.word	0x200003bd
 8001328:	20000000 	.word	0x20000000

0800132c <updateBuffer>:
        }
    }
}


void updateBuffer(uint8_t *buffer) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

    // Fill buffer with zeros if necessary
    memset(&buffer[0], 0, 32);
 8001334:	2220      	movs	r2, #32
 8001336:	2100      	movs	r1, #0
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f009 fa29 	bl	800a790 <memset>

    
    // Set first byte: bits 0-2 = robot_id (3 bits), bit 3 = ball_possession (1 bit), bits 4-7 = 0
    uint8_t id_bits = (robot_id << 3); // 3 bits for robot_id
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <updateBuffer+0x4c>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	73fb      	strb	r3, [r7, #15]
    uint8_t ball_bit = (ball_posession == 0x01 ? 1 : 0); // 1 bit for ball_posession at bit 3
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <updateBuffer+0x50>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	73bb      	strb	r3, [r7, #14]
    buffer[0] = id_bits | ball_bit;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	4313      	orrs	r3, r2
 800135e:	b2da      	uxtb	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	701a      	strb	r2, [r3, #0]

    memcpy(&buffer[1], &ball_range, sizeof(uint16_t));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <updateBuffer+0x54>)
 800136a:	8812      	ldrh	r2, [r2, #0]
 800136c:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[3+4*1], &m1, sizeof(float));
    memcpy(&buffer[3+4*2], &m2, sizeof(float));
    memcpy(&buffer[3+4*3], &m3, sizeof(float));
    */

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000f8 	.word	0x200000f8
 800137c:	200003bc 	.word	0x200003bc
 8001380:	200003be 	.word	0x200003be

08001384 <nRF24_TxPacket>:


void nRF24_TxPacket(nRF24_Handler_t *device, uint8_t* Buf, uint32_t Len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001396:	4822      	ldr	r0, [pc, #136]	@ (8001420 <nRF24_TxPacket+0x9c>)
 8001398:	f001 fef2 	bl	8003180 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < Len; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00c      	b.n	80013bc <nRF24_TxPacket+0x38>
        device->tx_data[i] = *Buf++;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	7819      	ldrb	r1, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4413      	add	r3, r2
 80013b0:	3316      	adds	r3, #22
 80013b2:	460a      	mov	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < Len; i++) {
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3ee      	bcc.n	80013a2 <nRF24_TxPacket+0x1e>
    }

    nRF24_WritePayload(device, device->tx_data, Len);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3316      	adds	r3, #22
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f009 f80b 	bl	800a3ea <nRF24_WritePayload>
    nRF24_CE_State(device, GPIO_PIN_SET);
 80013d4:	2101      	movs	r1, #1
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f008 fbe9 	bl	8009bae <nRF24_CE_State>

    while (!(nrf_status & (nRF24_FLAG_TX_DS))) {
 80013dc:	e006      	b.n	80013ec <nRF24_TxPacket+0x68>
        nrf_status = nRF24_GetStatus(device);
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f008 ff87 	bl	800a2f2 <nRF24_GetStatus>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <nRF24_TxPacket+0xa0>)
 80013ea:	701a      	strb	r2, [r3, #0]
    while (!(nrf_status & (nRF24_FLAG_TX_DS))) {
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <nRF24_TxPacket+0xa0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f2      	beq.n	80013de <nRF24_TxPacket+0x5a>
    }

    nRF24_ClearIRQFlagsTx(device);
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f008 ffc6 	bl	800a38a <nRF24_ClearIRQFlagsTx>
    nRF24_FlushTX(device);
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f008 ff91 	bl	800a326 <nRF24_FlushTX>

    nRF24_CE_State(device, GPIO_PIN_RESET);
 8001404:	2100      	movs	r1, #0
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f008 fbd1 	bl	8009bae <nRF24_CE_State>

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <nRF24_TxPacket+0x9c>)
 8001414:	f001 feb4 	bl	8003180 <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40022000 	.word	0x40022000
 8001424:	200000fb 	.word	0x200000fb

08001428 <Radio_SendPacket>:

void Radio_SendPacket(nRF24_Handler_t *device, uint8_t *buffer, uint8_t len) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	71fb      	strb	r3, [r7, #7]
    nRF24_RX_OFF(device);
 8001436:	2100      	movs	r1, #0
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f008 fbb8 	bl	8009bae <nRF24_CE_State>
    nRF24_SetOperationalMode(device, nRF24_MODE_TX);
 800143e:	2100      	movs	r1, #0
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f008 fd4b 	bl	8009edc <nRF24_SetOperationalMode>
    while (nrf_config & nRF24_CONFIG_PRIM_RX) {
 8001446:	e006      	b.n	8001456 <Radio_SendPacket+0x2e>
        nrf_config = nRF24_GetConfig(device);
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f008 ff5f 	bl	800a30c <nRF24_GetConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <Radio_SendPacket+0x80>)
 8001454:	701a      	strb	r2, [r3, #0]
    while (nrf_config & nRF24_CONFIG_PRIM_RX) {
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <Radio_SendPacket+0x80>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f2      	bne.n	8001448 <Radio_SendPacket+0x20>
    }
    nRF24_TxPacket(device, buffer, len);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	461a      	mov	r2, r3
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff ff8b 	bl	8001384 <nRF24_TxPacket>

    // --- Regreso a modo RX ---
    nRF24_SetOperationalMode(device, nRF24_MODE_RX);
 800146e:	2101      	movs	r1, #1
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f008 fd33 	bl	8009edc <nRF24_SetOperationalMode>
    while (!(nrf_config & nRF24_CONFIG_PRIM_RX)) {
 8001476:	e006      	b.n	8001486 <Radio_SendPacket+0x5e>
        nrf_config = nRF24_GetConfig(device);
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f008 ff47 	bl	800a30c <nRF24_GetConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <Radio_SendPacket+0x80>)
 8001484:	701a      	strb	r2, [r3, #0]
    while (!(nrf_config & nRF24_CONFIG_PRIM_RX)) {
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <Radio_SendPacket+0x80>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f2      	beq.n	8001478 <Radio_SendPacket+0x50>
    }
    nRF24_RX_ON(device);
 8001492:	2101      	movs	r1, #1
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f008 fb8a 	bl	8009bae <nRF24_CE_State>
    nRF24_ClearIRQFlags(device);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f008 ff5d 	bl	800a35a <nRF24_ClearIRQFlags>
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000fc 	.word	0x200000fc

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	210f      	movs	r1, #15
 80014e6:	f06f 0001 	mvn.w	r0, #1
 80014ea:	f001 f971 	bl	80027d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0b2      	sub	sp, #200	@ 0xc8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	2290      	movs	r2, #144	@ 0x90
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f009 f937 	bl	800a790 <memset>
  if(hi2c->Instance==I2C1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a65      	ldr	r2, [pc, #404]	@ (80016bc <HAL_I2C_MspInit+0x1c0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d13d      	bne.n	80015a8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800152c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	4618      	mov	r0, r3
 800153e:	f003 f927 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001548:	f7ff fe0c 	bl	8001164 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b5c      	ldr	r3, [pc, #368]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a5b      	ldr	r2, [pc, #364]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b59      	ldr	r3, [pc, #356]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001564:	23c0      	movs	r3, #192	@ 0xc0
 8001566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001586:	4619      	mov	r1, r3
 8001588:	484e      	ldr	r0, [pc, #312]	@ (80016c4 <HAL_I2C_MspInit+0x1c8>)
 800158a:	f001 fc35 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158e:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 8001594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015a6:	e085      	b.n	80016b4 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a46      	ldr	r2, [pc, #280]	@ (80016c8 <HAL_I2C_MspInit+0x1cc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d13d      	bne.n	800162e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f8e4 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80015ce:	f7ff fdc9 	bl	8001164 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a3a      	ldr	r2, [pc, #232]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001602:	2304      	movs	r3, #4
 8001604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001608:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800160c:	4619      	mov	r1, r3
 800160e:	482f      	ldr	r0, [pc, #188]	@ (80016cc <HAL_I2C_MspInit+0x1d0>)
 8001610:	f001 fbf2 	bl	8002df8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	4a29      	ldr	r2, [pc, #164]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800161a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800161e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697b      	ldr	r3, [r7, #20]
}
 800162c:	e042      	b.n	80016b4 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <HAL_I2C_MspInit+0x1d4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d13d      	bne.n	80016b4 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4618      	mov	r0, r3
 800164a:	f003 f8a1 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001654:	f7ff fd86 	bl	8001164 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800165e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001662:	6313      	str	r3, [r2, #48]	@ 0x30
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001670:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001678:	2312      	movs	r3, #18
 800167a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800168a:	2304      	movs	r3, #4
 800168c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001690:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001694:	4619      	mov	r1, r3
 8001696:	480f      	ldr	r0, [pc, #60]	@ (80016d4 <HAL_I2C_MspInit+0x1d8>)
 8001698:	f001 fbae 	bl	8002df8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 80016a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_I2C_MspInit+0x1c4>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	bf00      	nop
 80016b6:	37c8      	adds	r7, #200	@ 0xc8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40005800 	.word	0x40005800
 80016cc:	40021400 	.word	0x40021400
 80016d0:	40005c00 	.word	0x40005c00
 80016d4:	40021c00 	.word	0x40021c00

080016d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_SPI_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d127      	bne.n	800174a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800172a:	23e0      	movs	r3, #224	@ 0xe0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173a:	2305      	movs	r3, #5
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <HAL_SPI_MspInit+0x84>)
 8001746:	f001 fb57 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40013000 	.word	0x40013000
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	@ 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001780:	d128      	bne.n	80017d4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001782:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a5a      	ldr	r2, [pc, #360]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a54      	ldr	r2, [pc, #336]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b2:	2303      	movs	r3, #3
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017c2:	2301      	movs	r3, #1
 80017c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	4849      	ldr	r0, [pc, #292]	@ (80018f4 <HAL_TIM_Encoder_MspInit+0x194>)
 80017ce:	f001 fb13 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017d2:	e089      	b.n	80018e8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a47      	ldr	r2, [pc, #284]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x198>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d128      	bne.n	8001830 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017de:	4b44      	ldr	r3, [pc, #272]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	4a43      	ldr	r2, [pc, #268]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b3e      	ldr	r3, [pc, #248]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a3d      	ldr	r2, [pc, #244]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	@ 0xc0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800181e:	2302      	movs	r3, #2
 8001820:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	4834      	ldr	r0, [pc, #208]	@ (80018fc <HAL_TIM_Encoder_MspInit+0x19c>)
 800182a:	f001 fae5 	bl	8002df8 <HAL_GPIO_Init>
}
 800182e:	e05b      	b.n	80018e8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a32      	ldr	r2, [pc, #200]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d129      	bne.n	800188e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800183a:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	4a2c      	ldr	r2, [pc, #176]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6413      	str	r3, [r2, #64]	@ 0x40
 8001846:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800186a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800187c:	2302      	movs	r3, #2
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	481f      	ldr	r0, [pc, #124]	@ (8001904 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001888:	f001 fab6 	bl	8002df8 <HAL_GPIO_Init>
}
 800188c:	e02c      	b.n	80018e8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d127      	bne.n	80018e8 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80018a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0x190>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018c8:	2360      	movs	r3, #96	@ 0x60
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018d8:	2303      	movs	r3, #3
 80018da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	480a      	ldr	r0, [pc, #40]	@ (800190c <HAL_TIM_Encoder_MspInit+0x1ac>)
 80018e4:	f001 fa88 	bl	8002df8 <HAL_GPIO_Init>
}
 80018e8:	bf00      	nop
 80018ea:	3740      	adds	r7, #64	@ 0x40
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40000c00 	.word	0x40000c00
 8001904:	40021c00 	.word	0x40021c00
 8001908:	40010400 	.word	0x40010400
 800190c:	40022000 	.word	0x40022000

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ae      	sub	sp, #184	@ 0xb8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2290      	movs	r2, #144	@ 0x90
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f008 ff2d 	bl	800a790 <memset>
  if(huart->Instance==UART5)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a74 <HAL_UART_MspInit+0x164>)
 800193c:	4293      	cmp	r3, r2
 800193e:	f040 8095 	bne.w	8001a6c <HAL_UART_MspInit+0x15c>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001946:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001948:	2300      	movs	r3, #0
 800194a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4618      	mov	r0, r3
 8001952:	f002 ff1d 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800195c:	f7ff fc02 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001960:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a44      	ldr	r2, [pc, #272]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 8001966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b3f      	ldr	r3, [pc, #252]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	6313      	str	r3, [r2, #48]	@ 0x30
 8001984:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	4a38      	ldr	r2, [pc, #224]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6313      	str	r3, [r2, #48]	@ 0x30
 800199c:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <HAL_UART_MspInit+0x168>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019c2:	2308      	movs	r3, #8
 80019c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019cc:	4619      	mov	r1, r3
 80019ce:	482b      	ldr	r0, [pc, #172]	@ (8001a7c <HAL_UART_MspInit+0x16c>)
 80019d0:	f001 fa12 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019d4:	2304      	movs	r3, #4
 80019d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019ec:	2308      	movs	r3, #8
 80019ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4821      	ldr	r0, [pc, #132]	@ (8001a80 <HAL_UART_MspInit+0x170>)
 80019fa:	f001 f9fd 	bl	8002df8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80019fe:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a00:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <HAL_UART_MspInit+0x178>)
 8001a02:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a0a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a0e:	2240      	movs	r2, #64	@ 0x40
 8001a10:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a1e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a38:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001a40:	4810      	ldr	r0, [pc, #64]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a42:	f000 feef 	bl	8002824 <HAL_DMA_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001a4c:	f7ff fb8a 	bl	8001164 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a54:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <HAL_UART_MspInit+0x174>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Configurar NVIC para DMA (opcional pero recomendado) */
       HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	202f      	movs	r0, #47	@ 0x2f
 8001a62:	f000 feb5 	bl	80027d0 <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a66:	202f      	movs	r0, #47	@ 0x2f
 8001a68:	f000 fece 	bl	8002808 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	37b8      	adds	r7, #184	@ 0xb8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005000 	.word	0x40005000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	200006f8 	.word	0x200006f8
 8001a88:	400260b8 	.word	0x400260b8

08001a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <HAL_InitTick+0xd0>)
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ab4:	f107 020c 	add.w	r2, r7, #12
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fe34 	bl	800472c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ac4:	f002 fe1e 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad0:	4a23      	ldr	r2, [pc, #140]	@ (8001b60 <HAL_InitTick+0xd4>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001ade:	4a22      	ldr	r2, [pc, #136]	@ (8001b68 <HAL_InitTick+0xdc>)
 8001ae0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001ae4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001aea:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b02:	4818      	ldr	r0, [pc, #96]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001b04:	f003 feb2 	bl	800586c <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11b      	bne.n	8001b4e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b16:	4813      	ldr	r0, [pc, #76]	@ (8001b64 <HAL_InitTick+0xd8>)
 8001b18:	f003 ff0a 	bl	8005930 <HAL_TIM_Base_Start_IT>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d111      	bne.n	8001b4e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b2a:	2019      	movs	r0, #25
 8001b2c:	f000 fe6c 	bl	8002808 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d808      	bhi.n	8001b48 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b36:	2200      	movs	r2, #0
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	2019      	movs	r0, #25
 8001b3c:	f000 fe48 	bl	80027d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b40:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_InitTick+0xe0>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e002      	b.n	8001b4e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3730      	adds	r7, #48	@ 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	200000ac 	.word	0x200000ac
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	20000034 	.word	0x20000034

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	bf00      	nop
 8001b84:	e7fd      	b.n	8001b82 <HardFault_Handler+0x4>

08001b86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8a:	bf00      	nop
 8001b8c:	e7fd      	b.n	8001b8a <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	bf00      	nop
 8001b94:	e7fd      	b.n	8001b92 <BusFault_Handler+0x4>

08001b96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9a:	bf00      	nop
 8001b9c:	e7fd      	b.n	8001b9a <UsageFault_Handler+0x4>

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bb2:	f003 ffdb 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200000ac 	.word	0x200000ac

08001bc0 <DMA1_Stream7_IRQHandler>:
        // La transmisión ha terminado
    }
}

void DMA1_Stream7_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA1_Stream7_IRQHandler+0x10>)
 8001bc6:	f000 fedb 	bl	8002980 <HAL_DMA_IRQHandler>
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200006f8 	.word	0x200006f8

08001bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	@ 0x50
 8001bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2234      	movs	r2, #52	@ 0x34
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f008 fdd4 	bl	800a790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <SystemClock_Config+0xd4>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca8 <SystemClock_Config+0xd4>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <SystemClock_Config+0xd4>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <SystemClock_Config+0xd8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <SystemClock_Config+0xd8>)
 8001c16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <SystemClock_Config+0xd8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c40:	23d8      	movs	r3, #216	@ 0xd8
 8001c42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 f895 	bl	8003d84 <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c60:	f7ff fa80 	bl	8001164 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c64:	f002 f83e 	bl	8003ce4 <HAL_PWREx_EnableOverDrive>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c6e:	f7ff fa79 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	230f      	movs	r3, #15
 8001c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c76:	2302      	movs	r3, #2
 8001c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c7e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	2107      	movs	r1, #7
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fb25 	bl	80042e0 <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001c9c:	f7ff fa62 	bl	8001164 <Error_Handler>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3750      	adds	r7, #80	@ 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000

08001cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d28 <MX_I2C1_Init+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <MX_I2C1_Init+0x7c>)
 8001cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cea:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cec:	f001 fa7c 	bl	80031e8 <HAL_I2C_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cf6:	f7ff fa35 	bl	8001164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4809      	ldr	r0, [pc, #36]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001cfe:	f001 ff59 	bl	8003bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d08:	f7ff fa2c 	bl	8001164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_I2C1_Init+0x74>)
 8001d10:	f001 ff9b 	bl	8003c4a <HAL_I2CEx_ConfigDigitalFilter>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d1a:	f7ff fa23 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003e0 	.word	0x200003e0
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	6000030d 	.word	0x6000030d

08001d30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d36:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <MX_I2C2_Init+0x78>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <MX_I2C2_Init+0x7c>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d40:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d46:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d6a:	480e      	ldr	r0, [pc, #56]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d6c:	f001 fa3c 	bl	80031e8 <HAL_I2C_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d76:	f7ff f9f5 	bl	8001164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d7e:	f001 ff19 	bl	8003bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d88:	f7ff f9ec 	bl	8001164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_I2C2_Init+0x74>)
 8001d90:	f001 ff5b 	bl	8003c4a <HAL_I2CEx_ConfigDigitalFilter>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d9a:	f7ff f9e3 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000434 	.word	0x20000434
 8001da8:	40005800 	.word	0x40005800
 8001dac:	6000030d 	.word	0x6000030d

08001db0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001db6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <MX_I2C3_Init+0x78>)
 8001db8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <MX_I2C3_Init+0x7c>)
 8001dbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dde:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dea:	480e      	ldr	r0, [pc, #56]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dec:	f001 f9fc 	bl	80031e8 <HAL_I2C_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001df6:	f7ff f9b5 	bl	8001164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001dfe:	f001 fed9 	bl	8003bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001e08:	f7ff f9ac 	bl	8001164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_I2C3_Init+0x74>)
 8001e10:	f001 ff1b 	bl	8003c4a <HAL_I2CEx_ConfigDigitalFilter>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001e1a:	f7ff f9a3 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000488 	.word	0x20000488
 8001e28:	40005c00 	.word	0x40005c00
 8001e2c:	6000030d 	.word	0x6000030d

08001e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e36:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb0 <MX_SPI1_Init+0x80>)
 8001e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e48:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e4a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e66:	2218      	movs	r2, #24
 8001e68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e7e:	2207      	movs	r2, #7
 8001e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e8e:	4807      	ldr	r0, [pc, #28]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001e90:	f003 f8a6 	bl	8004fe0 <HAL_SPI_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e9a:	f7ff f963 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 8001e9e:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <MX_SPI1_Init+0x7c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ea6:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200004dc 	.word	0x200004dc
 8001eb0:	40013000 	.word	0x40013000

08001eb4 <MX_UART5_Init>:
  * @param None
  * @retval None
  */

void MX_UART5_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001eba:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <MX_UART5_Init+0x64>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001ef8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001efc:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_UART5_Init+0x60>)
 8001f00:	f004 f8c8 	bl	8006094 <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8001f0a:	f7ff f92b 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000670 	.word	0x20000670
 8001f18:	40005000 	.word	0x40005000

08001f1c <MX_TIM2_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);

}

void MX_TIM2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2224      	movs	r2, #36	@ 0x24
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f008 fc30 	bl	800a790 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f62:	2303      	movs	r3, #3
 8001f64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001f8e:	f003 fd47 	bl	8005a20 <HAL_TIM_Encoder_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f98:	f7ff f8e4 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <MX_TIM2_Init+0xa4>)
 8001faa:	f003 ffc7 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001fb4:	f7ff f8d6 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	3730      	adds	r7, #48	@ 0x30
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000540 	.word	0x20000540

08001fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2224      	movs	r2, #36	@ 0x24
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f008 fbdc 	bl	800a790 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	463b      	mov	r3, r7
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8001fe4:	4a21      	ldr	r2, [pc, #132]	@ (800206c <MX_TIM3_Init+0xa8>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8001ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002008:	2303      	movs	r3, #3
 800200a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002010:	2301      	movs	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002020:	2301      	movs	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8002034:	f003 fcf4 	bl	8005a20 <HAL_TIM_Encoder_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800203e:	f7ff f891 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800204a:	463b      	mov	r3, r7
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	@ (8002068 <MX_TIM3_Init+0xa4>)
 8002050:	f003 ff74 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800205a:	f7ff f883 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	@ 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000058c 	.word	0x2000058c
 800206c:	40000400 	.word	0x40000400

08002070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	2224      	movs	r2, #36	@ 0x24
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f008 fb86 	bl	800a790 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	463b      	mov	r3, r7
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800208e:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <MX_TIM5_Init+0xa4>)
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <MX_TIM5_Init+0xa8>)
 8002092:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002094:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <MX_TIM5_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <MX_TIM5_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80020a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <MX_TIM5_Init+0xa4>)
 80020a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_TIM5_Init+0xa4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <MX_TIM5_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020b4:	2303      	movs	r3, #3
 80020b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_TIM5_Init+0xa4>)
 80020e0:	f003 fc9e 	bl	8005a20 <HAL_TIM_Encoder_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80020ea:	f7ff f83b 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020f6:	463b      	mov	r3, r7
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	@ (8002114 <MX_TIM5_Init+0xa4>)
 80020fc:	f003 ff1e 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002106:	f7ff f82d 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	3730      	adds	r7, #48	@ 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200005d8 	.word	0x200005d8
 8002118:	40000c00 	.word	0x40000c00

0800211c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	@ 0x30
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2224      	movs	r2, #36	@ 0x24
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f008 fb30 	bl	800a790 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800213a:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <MX_TIM8_Init+0xac>)
 800213c:	4a23      	ldr	r2, [pc, #140]	@ (80021cc <MX_TIM8_Init+0xb0>)
 800213e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002140:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <MX_TIM8_Init+0xac>)
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <MX_TIM8_Init+0xac>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800214c:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <MX_TIM8_Init+0xac>)
 800214e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002152:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <MX_TIM8_Init+0xac>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <MX_TIM8_Init+0xac>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <MX_TIM8_Init+0xac>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002166:	2303      	movs	r3, #3
 8002168:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800216e:	2301      	movs	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800217e:	2301      	movs	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	4619      	mov	r1, r3
 8002190:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <MX_TIM8_Init+0xac>)
 8002192:	f003 fc45 	bl	8005a20 <HAL_TIM_Encoder_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800219c:	f7fe ffe2 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021ac:	463b      	mov	r3, r7
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <MX_TIM8_Init+0xac>)
 80021b2:	f003 fec3 	bl	8005f3c <HAL_TIMEx_MasterConfigSynchronization>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80021bc:	f7fe ffd2 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	3730      	adds	r7, #48	@ 0x30
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000624 	.word	0x20000624
 80021cc:	40010400 	.word	0x40010400

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b090      	sub	sp, #64	@ 0x40
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021e6:	4bb3      	ldr	r3, [pc, #716]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4ab2      	ldr	r2, [pc, #712]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80021ec:	f043 0320 	orr.w	r3, r3, #32
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4bb0      	ldr	r3, [pc, #704]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021fe:	4bad      	ldr	r3, [pc, #692]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4aac      	ldr	r2, [pc, #688]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4baa      	ldr	r3, [pc, #680]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002216:	4ba7      	ldr	r3, [pc, #668]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4aa6      	ldr	r2, [pc, #664]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800221c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4ba4      	ldr	r3, [pc, #656]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4ba1      	ldr	r3, [pc, #644]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4aa0      	ldr	r2, [pc, #640]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b9e      	ldr	r3, [pc, #632]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	4b9b      	ldr	r3, [pc, #620]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a9a      	ldr	r2, [pc, #616]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b98      	ldr	r3, [pc, #608]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4b95      	ldr	r3, [pc, #596]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a94      	ldr	r2, [pc, #592]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b92      	ldr	r3, [pc, #584]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002276:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a8e      	ldr	r2, [pc, #568]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800227c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b8c      	ldr	r3, [pc, #560]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	4b89      	ldr	r3, [pc, #548]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a88      	ldr	r2, [pc, #544]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a6:	4b83      	ldr	r3, [pc, #524]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a82      	ldr	r2, [pc, #520]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80022ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b80      	ldr	r3, [pc, #512]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80022be:	4b7d      	ldr	r3, [pc, #500]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a7c      	ldr	r2, [pc, #496]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80022c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b7a      	ldr	r3, [pc, #488]	@ (80024b4 <MX_GPIO_Init+0x2e4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80022dc:	4876      	ldr	r0, [pc, #472]	@ (80024b8 <MX_GPIO_Init+0x2e8>)
 80022de:	f000 ff4f 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f640 0138 	movw	r1, #2104	@ 0x838
 80022e8:	4874      	ldr	r0, [pc, #464]	@ (80024bc <MX_GPIO_Init+0x2ec>)
 80022ea:	f000 ff49 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80022f4:	4872      	ldr	r0, [pc, #456]	@ (80024c0 <MX_GPIO_Init+0x2f0>)
 80022f6:	f000 ff43 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002300:	4870      	ldr	r0, [pc, #448]	@ (80024c4 <MX_GPIO_Init+0x2f4>)
 8002302:	f000 ff3d 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800230c:	486e      	ldr	r0, [pc, #440]	@ (80024c8 <MX_GPIO_Init+0x2f8>)
 800230e:	f000 ff37 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002318:	486c      	ldr	r0, [pc, #432]	@ (80024cc <MX_GPIO_Init+0x2fc>)
 800231a:	f000 ff31 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	486b      	ldr	r0, [pc, #428]	@ (80024d0 <MX_GPIO_Init+0x300>)
 8002324:	f000 ff2c 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 800232e:	4869      	ldr	r0, [pc, #420]	@ (80024d4 <MX_GPIO_Init+0x304>)
 8002330:	f000 ff26 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	21c0      	movs	r1, #192	@ 0xc0
 8002338:	4867      	ldr	r0, [pc, #412]	@ (80024d8 <MX_GPIO_Init+0x308>)
 800233a:	f000 ff21 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800233e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002354:	4619      	mov	r1, r3
 8002356:	4858      	ldr	r0, [pc, #352]	@ (80024b8 <MX_GPIO_Init+0x2e8>)
 8002358:	f000 fd4e 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 800235c:	f640 0338 	movw	r3, #2104	@ 0x838
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800236e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002372:	4619      	mov	r1, r3
 8002374:	4851      	ldr	r0, [pc, #324]	@ (80024bc <MX_GPIO_Init+0x2ec>)
 8002376:	f000 fd3f 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800237a:	2310      	movs	r3, #16
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238a:	4619      	mov	r1, r3
 800238c:	4853      	ldr	r0, [pc, #332]	@ (80024dc <MX_GPIO_Init+0x30c>)
 800238e:	f000 fd33 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002392:	2310      	movs	r3, #16
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	4849      	ldr	r0, [pc, #292]	@ (80024cc <MX_GPIO_Init+0x2fc>)
 80023a6:	f000 fd27 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023aa:	2304      	movs	r3, #4
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ae:	2300      	movs	r3, #0
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ba:	4619      	mov	r1, r3
 80023bc:	4841      	ldr	r0, [pc, #260]	@ (80024c4 <MX_GPIO_Init+0x2f4>)
 80023be:	f000 fd1b 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	4838      	ldr	r0, [pc, #224]	@ (80024b8 <MX_GPIO_Init+0x2e8>)
 80023d8:	f000 fd0e 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023dc:	2303      	movs	r3, #3
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ec:	4619      	mov	r1, r3
 80023ee:	4834      	ldr	r0, [pc, #208]	@ (80024c0 <MX_GPIO_Init+0x2f0>)
 80023f0:	f000 fd02 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80023f4:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002406:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240a:	4619      	mov	r1, r3
 800240c:	482c      	ldr	r0, [pc, #176]	@ (80024c0 <MX_GPIO_Init+0x2f0>)
 800240e:	f000 fcf3 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002418:	2301      	movs	r3, #1
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	4826      	ldr	r0, [pc, #152]	@ (80024c4 <MX_GPIO_Init+0x2f4>)
 800242c:	f000 fce4 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002430:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002446:	4619      	mov	r1, r3
 8002448:	481f      	ldr	r0, [pc, #124]	@ (80024c8 <MX_GPIO_Init+0x2f8>)
 800244a:	f000 fcd5 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800244e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	4819      	ldr	r0, [pc, #100]	@ (80024cc <MX_GPIO_Init+0x2fc>)
 8002468:	f000 fcc6 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800246c:	2301      	movs	r3, #1
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002470:	2301      	movs	r3, #1
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002480:	4619      	mov	r1, r3
 8002482:	4813      	ldr	r0, [pc, #76]	@ (80024d0 <MX_GPIO_Init+0x300>)
 8002484:	f000 fcb8 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8002488:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	2301      	movs	r3, #1
 8002490:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800249a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	480c      	ldr	r0, [pc, #48]	@ (80024d4 <MX_GPIO_Init+0x304>)
 80024a2:	f000 fca9 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a6:	23c0      	movs	r3, #192	@ 0xc0
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e016      	b.n	80024e0 <MX_GPIO_Init+0x310>
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40022400 	.word	0x40022400
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021800 	.word	0x40021800
 80024d8:	40022800 	.word	0x40022800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ea:	4619      	mov	r1, r3
 80024ec:	4803      	ldr	r0, [pc, #12]	@ (80024fc <MX_GPIO_Init+0x32c>)
 80024ee:	f000 fc83 	bl	8002df8 <HAL_GPIO_Init>

}
 80024f2:	bf00      	nop
 80024f4:	3740      	adds	r7, #64	@ 0x40
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022800 	.word	0x40022800

08002500 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	4b15      	ldr	r3, [pc, #84]	@ (800255c <SystemInit+0x5c>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	4a14      	ldr	r2, [pc, #80]	@ (800255c <SystemInit+0x5c>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <SystemInit+0x60>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <SystemInit+0x60>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <SystemInit+0x60>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <SystemInit+0x60>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	490d      	ldr	r1, [pc, #52]	@ (8002560 <SystemInit+0x60>)
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <SystemInit+0x64>)
 800252e:	4013      	ands	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <SystemInit+0x60>)
 8002534:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <SystemInit+0x68>)
 8002536:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <SystemInit+0x60>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <SystemInit+0x60>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002542:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <SystemInit+0x60>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800254a:	4b04      	ldr	r3, [pc, #16]	@ (800255c <SystemInit+0x5c>)
 800254c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002550:	609a      	str	r2, [r3, #8]
#endif
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00
 8002560:	40023800 	.word	0x40023800
 8002564:	fef6ffff 	.word	0xfef6ffff
 8002568:	24003010 	.word	0x24003010

0800256c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800256c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002570:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002572:	490e      	ldr	r1, [pc, #56]	@ (80025ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002574:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0b      	ldr	r2, [pc, #44]	@ (80025b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002588:	4c0b      	ldr	r4, [pc, #44]	@ (80025b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002596:	f7ff ffb3 	bl	8002500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259a:	f008 f907 	bl	800a7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259e:	f7fe fcb9 	bl	8000f14 <main>
  bx  lr    
 80025a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80025b0:	0800a95c 	.word	0x0800a95c
  ldr r2, =_sbss
 80025b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80025b8:	200045e0 	.word	0x200045e0

080025bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025bc:	e7fe      	b.n	80025bc <ADC_IRQHandler>

080025be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c2:	2003      	movs	r0, #3
 80025c4:	f000 f8f9 	bl	80027ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff fa5f 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ce:	f7fe ff6d 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000038 	.word	0x20000038
 80025fc:	20000758 	.word	0x20000758

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000758 	.word	0x20000758

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000038 	.word	0x20000038

08002660 <__NVIC_SetPriorityGrouping>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	4313      	orrs	r3, r2
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00
 80026a4:	05fa0000 	.word	0x05fa0000

080026a8 <__NVIC_GetPriorityGrouping>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	@ (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff4c 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e2:	f7ff ff61 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 80027e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	6978      	ldr	r0, [r7, #20]
 80027ee:	f7ff ffb1 	bl	8002754 <NVIC_EncodePriority>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff80 	bl	8002700 <__NVIC_SetPriority>
}
 8002800:	bf00      	nop
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff54 	bl	80026c4 <__NVIC_EnableIRQ>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff fee6 	bl	8002600 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e099      	b.n	8002974 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002860:	e00f      	b.n	8002882 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002862:	f7ff fecd 	bl	8002600 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b05      	cmp	r3, #5
 800286e:	d908      	bls.n	8002882 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e078      	b.n	8002974 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e8      	bne.n	8002862 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4b38      	ldr	r3, [pc, #224]	@ (800297c <HAL_DMA_Init+0x158>)
 800289c:	4013      	ands	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d107      	bne.n	80028ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	4313      	orrs	r3, r2
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0307 	bic.w	r3, r3, #7
 8002902:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	2b04      	cmp	r3, #4
 8002914:	d117      	bne.n	8002946 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f9e9 	bl	8002d00 <DMA_CheckFifoParam>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2240      	movs	r2, #64	@ 0x40
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002942:	2301      	movs	r3, #1
 8002944:	e016      	b.n	8002974 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9a0 	bl	8002c94 <DMA_CalcBaseAndBitshift>
 8002954:	4603      	mov	r3, r0
 8002956:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	223f      	movs	r2, #63	@ 0x3f
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	e010803f 	.word	0xe010803f

08002980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800298c:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc8 <HAL_DMA_IRQHandler+0x248>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a8e      	ldr	r2, [pc, #568]	@ (8002bcc <HAL_DMA_IRQHandler+0x24c>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	2208      	movs	r2, #8
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2208      	movs	r2, #8
 80029da:	409a      	lsls	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	2201      	movs	r2, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	2201      	movs	r2, #1
 8002a10:	409a      	lsls	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	2204      	movs	r2, #4
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	2204      	movs	r2, #4
 8002a46:	409a      	lsls	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	f043 0204 	orr.w	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d043      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d03c      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d108      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d024      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e01f      	b.n	8002af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e016      	b.n	8002af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0208 	bic.w	r2, r2, #8
 8002ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	2220      	movs	r2, #32
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 808f 	beq.w	8002c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8087 	beq.w	8002c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	2220      	movs	r2, #32
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d136      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0216 	bic.w	r2, r2, #22
 8002b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x1da>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0208 	bic.w	r2, r2, #8
 8002b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	223f      	movs	r2, #63	@ 0x3f
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07e      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
        }
        return;
 8002b96:	e079      	b.n	8002c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01d      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e02c      	b.n	8002c20 <HAL_DMA_IRQHandler+0x2a0>
 8002bc6:	bf00      	nop
 8002bc8:	20000030 	.word	0x20000030
 8002bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d023      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e01e      	b.n	8002c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10f      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0210 	bic.w	r2, r2, #16
 8002bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d032      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d022      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2205      	movs	r2, #5
 8002c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d307      	bcc.n	8002c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f2      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x2cc>
 8002c66:	e000      	b.n	8002c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e000      	b.n	8002c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c8c:	bf00      	nop
    }
  }
}
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3b10      	subs	r3, #16
 8002ca4:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <DMA_CalcBaseAndBitshift+0x60>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d908      	bls.n	8002cd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x68>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	1d1a      	adds	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cd2:	e006      	b.n	8002ce2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x68>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	aaaaaaab 	.word	0xaaaaaaab
 8002cf8:	0800a934 	.word	0x0800a934
 8002cfc:	fffffc00 	.word	0xfffffc00

08002d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11f      	bne.n	8002d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d856      	bhi.n	8002dce <DMA_CheckFifoParam+0xce>
 8002d20:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <DMA_CheckFifoParam+0x28>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d4b 	.word	0x08002d4b
 8002d30:	08002d39 	.word	0x08002d39
 8002d34:	08002dcf 	.word	0x08002dcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d046      	beq.n	8002dd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e043      	b.n	8002dd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d52:	d140      	bne.n	8002dd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e03d      	b.n	8002dd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d62:	d121      	bne.n	8002da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d837      	bhi.n	8002dda <DMA_CheckFifoParam+0xda>
 8002d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <DMA_CheckFifoParam+0x70>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d87 	.word	0x08002d87
 8002d78:	08002d81 	.word	0x08002d81
 8002d7c:	08002d99 	.word	0x08002d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e030      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d025      	beq.n	8002dde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d96:	e022      	b.n	8002dde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002da0:	d11f      	bne.n	8002de2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002da6:	e01c      	b.n	8002de2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d903      	bls.n	8002db6 <DMA_CheckFifoParam+0xb6>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d003      	beq.n	8002dbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002db4:	e018      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dba:	e015      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e00b      	b.n	8002de6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e00a      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e008      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e006      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e004      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dde:	bf00      	nop
 8002de0:	e002      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <DMA_CheckFifoParam+0xe8>
      break;
 8002de6:	bf00      	nop
    }
  } 
  
  return status; 
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e175      	b.n	8003104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8164 	bne.w	80030fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d005      	beq.n	8002e4e <HAL_GPIO_Init+0x56>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d130      	bne.n	8002eb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 0201 	and.w	r2, r3, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d017      	beq.n	8002eec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d123      	bne.n	8002f40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80be 	beq.w	80030fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_GPIO_Init+0x324>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_GPIO_Init+0x324>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f8e:	4b63      	ldr	r3, [pc, #396]	@ (800311c <HAL_GPIO_Init+0x324>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f9a:	4a61      	ldr	r2, [pc, #388]	@ (8003120 <HAL_GPIO_Init+0x328>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	@ (8003124 <HAL_GPIO_Init+0x32c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d037      	beq.n	8003036 <HAL_GPIO_Init+0x23e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	@ (8003128 <HAL_GPIO_Init+0x330>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_GPIO_Init+0x23a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a56      	ldr	r2, [pc, #344]	@ (800312c <HAL_GPIO_Init+0x334>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <HAL_GPIO_Init+0x236>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	@ (8003130 <HAL_GPIO_Init+0x338>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d025      	beq.n	800302a <HAL_GPIO_Init+0x232>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	@ (8003134 <HAL_GPIO_Init+0x33c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x22e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	@ (8003138 <HAL_GPIO_Init+0x340>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x22a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	@ (800313c <HAL_GPIO_Init+0x344>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x226>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	@ (8003140 <HAL_GPIO_Init+0x348>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x222>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a50      	ldr	r2, [pc, #320]	@ (8003144 <HAL_GPIO_Init+0x34c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x21e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4f      	ldr	r2, [pc, #316]	@ (8003148 <HAL_GPIO_Init+0x350>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x21a>
 800300e:	2309      	movs	r3, #9
 8003010:	e012      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003012:	230a      	movs	r3, #10
 8003014:	e010      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003016:	2308      	movs	r3, #8
 8003018:	e00e      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301a:	2307      	movs	r3, #7
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301e:	2306      	movs	r3, #6
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	@ (8003120 <HAL_GPIO_Init+0x328>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b3d      	ldr	r3, [pc, #244]	@ (800314c <HAL_GPIO_Init+0x354>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a34      	ldr	r2, [pc, #208]	@ (800314c <HAL_GPIO_Init+0x354>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b32      	ldr	r3, [pc, #200]	@ (800314c <HAL_GPIO_Init+0x354>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a29      	ldr	r2, [pc, #164]	@ (800314c <HAL_GPIO_Init+0x354>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030aa:	4b28      	ldr	r3, [pc, #160]	@ (800314c <HAL_GPIO_Init+0x354>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ce:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_GPIO_Init+0x354>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_GPIO_Init+0x354>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f8:	4a14      	ldr	r2, [pc, #80]	@ (800314c <HAL_GPIO_Init+0x354>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae86 	bls.w	8002e18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	@ 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40022000 	.word	0x40022000
 8003148:	40022400 	.word	0x40022400
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e001      	b.n	8003172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c4:	887a      	ldrh	r2, [r7, #2]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	041a      	lsls	r2, r3, #16
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	400b      	ands	r3, r1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	619a      	str	r2, [r3, #24]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe f974 	bl	80014fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	@ 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e006      	b.n	8003270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800326e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d104      	bne.n	8003282 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <HAL_I2C_Init+0x11c>)
 800328e:	430b      	orrs	r3, r1
 8003290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69d9      	ldr	r1, [r3, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	02008000 	.word	0x02008000

08003308 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	817b      	strh	r3, [r7, #10]
 8003318:	4613      	mov	r3, r2
 800331a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	f040 80da 	bne.w	80034de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x30>
 8003334:	2302      	movs	r3, #2
 8003336:	e0d3      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003340:	f7ff f95e 	bl	8002600 <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2319      	movs	r3, #25
 800334c:	2201      	movs	r2, #1
 800334e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f9e6 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0be      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2221      	movs	r2, #33	@ 0x21
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2210      	movs	r2, #16
 800336e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2bff      	cmp	r3, #255	@ 0xff
 8003392:	d90e      	bls.n	80033b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	22ff      	movs	r2, #255	@ 0xff
 8003398:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	4b51      	ldr	r3, [pc, #324]	@ (80034e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fbd0 	bl	8003b50 <I2C_TransferConfig>
 80033b0:	e06c      	b.n	800348c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	8979      	ldrh	r1, [r7, #10]
 80033c4:	4b48      	ldr	r3, [pc, #288]	@ (80034e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fbbf 	bl	8003b50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033d2:	e05b      	b.n	800348c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	6a39      	ldr	r1, [r7, #32]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f9e3 	bl	80037a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e07b      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d034      	beq.n	800348c <HAL_I2C_Master_Transmit+0x184>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d130      	bne.n	800348c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	@ 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f975 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04d      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2bff      	cmp	r3, #255	@ 0xff
 800344c:	d90e      	bls.n	800346c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22ff      	movs	r2, #255	@ 0xff
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003458:	b2da      	uxtb	r2, r3
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	2300      	movs	r3, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fb73 	bl	8003b50 <I2C_TransferConfig>
 800346a:	e00f      	b.n	800348c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	b2da      	uxtb	r2, r3
 800347c:	8979      	ldrh	r1, [r7, #10]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fb62 	bl	8003b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d19e      	bne.n	80033d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6a39      	ldr	r1, [r7, #32]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f9c2 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01a      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2220      	movs	r2, #32
 80034b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_I2C_Master_Transmit+0x1e4>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	80002000 	.word	0x80002000
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	461a      	mov	r2, r3
 80034fc:	460b      	mov	r3, r1
 80034fe:	817b      	strh	r3, [r7, #10]
 8003500:	4613      	mov	r3, r2
 8003502:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b20      	cmp	r3, #32
 800350e:	f040 80db 	bne.w	80036c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_I2C_Master_Receive+0x30>
 800351c:	2302      	movs	r3, #2
 800351e:	e0d4      	b.n	80036ca <HAL_I2C_Master_Receive+0x1da>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003528:	f7ff f86a 	bl	8002600 <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2319      	movs	r3, #25
 8003534:	2201      	movs	r2, #1
 8003536:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f8f2 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0bf      	b.n	80036ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2222      	movs	r2, #34	@ 0x22
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2210      	movs	r2, #16
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	893a      	ldrh	r2, [r7, #8]
 800356a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2bff      	cmp	r3, #255	@ 0xff
 800357a:	d90e      	bls.n	800359a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	22ff      	movs	r2, #255	@ 0xff
 8003580:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003586:	b2da      	uxtb	r2, r3
 8003588:	8979      	ldrh	r1, [r7, #10]
 800358a:	4b52      	ldr	r3, [pc, #328]	@ (80036d4 <HAL_I2C_Master_Receive+0x1e4>)
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fadc 	bl	8003b50 <I2C_TransferConfig>
 8003598:	e06d      	b.n	8003676 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	8979      	ldrh	r1, [r7, #10]
 80035ac:	4b49      	ldr	r3, [pc, #292]	@ (80036d4 <HAL_I2C_Master_Receive+0x1e4>)
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 facb 	bl	8003b50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035ba:	e05c      	b.n	8003676 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	6a39      	ldr	r1, [r7, #32]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f96b 	bl	800389c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e07c      	b.n	80036ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d034      	beq.n	8003676 <HAL_I2C_Master_Receive+0x186>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d130      	bne.n	8003676 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	@ 0x80
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f880 	bl	8003724 <I2C_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e04d      	b.n	80036ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	2bff      	cmp	r3, #255	@ 0xff
 8003636:	d90e      	bls.n	8003656 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	22ff      	movs	r2, #255	@ 0xff
 800363c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa7e 	bl	8003b50 <I2C_TransferConfig>
 8003654:	e00f      	b.n	8003676 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	b2da      	uxtb	r2, r3
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fa6d 	bl	8003b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d19d      	bne.n	80035bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	6a39      	ldr	r1, [r7, #32]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f8cd 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e01a      	b.n	80036ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2220      	movs	r2, #32
 800369a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <HAL_I2C_Master_Receive+0x1e8>)
 80036a8:	400b      	ands	r3, r1
 80036aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	80002400 	.word	0x80002400
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d103      	bne.n	80036fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d007      	beq.n	8003718 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	619a      	str	r2, [r3, #24]
  }
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003734:	e022      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d01e      	beq.n	800377c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fe ff5f 	bl	8002600 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d113      	bne.n	800377c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e00f      	b.n	800379c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	429a      	cmp	r2, r3
 8003798:	d0cd      	beq.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037b0:	e02c      	b.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8ea 	bl	8003990 <I2C_IsErrorOccurred>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e02a      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d01e      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe ff17 	bl	8002600 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d113      	bne.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e007      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d1cb      	bne.n	80037b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003830:	e028      	b.n	8003884 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8aa 	bl	8003990 <I2C_IsErrorOccurred>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e026      	b.n	8003894 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe fedb 	bl	8002600 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d113      	bne.n	8003884 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e007      	b.n	8003894 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b20      	cmp	r3, #32
 8003890:	d1cf      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a8:	e064      	b.n	8003974 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f86e 	bl	8003990 <I2C_IsErrorOccurred>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e062      	b.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d138      	bne.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d105      	bne.n	80038e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e04e      	b.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d107      	bne.n	8003904 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2210      	movs	r2, #16
 80038fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2204      	movs	r2, #4
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
 8003902:	e002      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800391e:	400b      	ands	r3, r1
 8003920:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e022      	b.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe fe5f 	bl	8002600 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10f      	bne.n	8003974 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e007      	b.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d193      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	fe00e800 	.word	0xfe00e800

08003990 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d068      	beq.n	8003a8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2210      	movs	r2, #16
 80039c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039c4:	e049      	b.n	8003a5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d045      	beq.n	8003a5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fe fe17 	bl	8002600 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_IsErrorOccurred+0x54>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13a      	bne.n	8003a5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a06:	d121      	bne.n	8003a4c <I2C_IsErrorOccurred+0xbc>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a0e:	d01d      	beq.n	8003a4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d01a      	beq.n	8003a4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a26:	f7fe fdeb 	bl	8002600 <HAL_GetTick>
 8003a2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a2c:	e00e      	b.n	8003a4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a2e:	f7fe fde7 	bl	8002600 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b19      	cmp	r3, #25
 8003a3a:	d907      	bls.n	8003a4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f043 0320 	orr.w	r3, r3, #32
 8003a42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a4a:	e006      	b.n	8003a5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d1e9      	bne.n	8003a2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d003      	beq.n	8003a70 <I2C_IsErrorOccurred+0xe0>
 8003a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0aa      	beq.n	80039c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ab0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ad2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01c      	beq.n	8003b3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff fde9 	bl	80036dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <I2C_IsErrorOccurred+0x1bc>)
 8003b16:	400b      	ands	r3, r1
 8003b18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3728      	adds	r7, #40	@ 0x28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	fe00e800 	.word	0xfe00e800

08003b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b68:	7a7b      	ldrb	r3, [r7, #9]
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	0d5b      	lsrs	r3, r3, #21
 8003b8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b8e:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <I2C_TransferConfig+0x60>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	43db      	mvns	r3, r3
 8003b94:	ea02 0103 	and.w	r1, r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	03ff63ff 	.word	0x03ff63ff

08003bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d138      	bne.n	8003c3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e032      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	@ 0x24
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d139      	bne.n	8003cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e033      	b.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2224      	movs	r2, #36	@ 0x24
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	4a22      	ldr	r2, [pc, #136]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d06:	4b1e      	ldr	r3, [pc, #120]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d12:	f7fe fc75 	bl	8002600 <HAL_GetTick>
 8003d16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d18:	e009      	b.n	8003d2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d1a:	f7fe fc71 	bl	8002600 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d28:	d901      	bls.n	8003d2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e022      	b.n	8003d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d2e:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d3c:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0f      	ldr	r2, [pc, #60]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d48:	f7fe fc5a 	bl	8002600 <HAL_GetTick>
 8003d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d4e:	e009      	b.n	8003d64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d50:	f7fe fc56 	bl	8002600 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d5e:	d901      	bls.n	8003d64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e007      	b.n	8003d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d70:	d1ee      	bne.n	8003d50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40007000 	.word	0x40007000

08003d84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e29b      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8087 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da8:	4b96      	ldr	r3, [pc, #600]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00c      	beq.n	8003dce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db4:	4b93      	ldr	r3, [pc, #588]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d112      	bne.n	8003de6 <HAL_RCC_OscConfig+0x62>
 8003dc0:	4b90      	ldr	r3, [pc, #576]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dce:	4b8d      	ldr	r3, [pc, #564]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d06c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x130>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d168      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e275      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x7a>
 8003df0:	4b84      	ldr	r3, [pc, #528]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a83      	ldr	r2, [pc, #524]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e02e      	b.n	8003e5c <HAL_RCC_OscConfig+0xd8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x9c>
 8003e06:	4b7f      	ldr	r3, [pc, #508]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b7c      	ldr	r3, [pc, #496]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a7b      	ldr	r2, [pc, #492]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e01d      	b.n	8003e5c <HAL_RCC_OscConfig+0xd8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0xc0>
 8003e2a:	4b76      	ldr	r3, [pc, #472]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a75      	ldr	r2, [pc, #468]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b73      	ldr	r3, [pc, #460]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a72      	ldr	r2, [pc, #456]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0xd8>
 8003e44:	4b6f      	ldr	r3, [pc, #444]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6e      	ldr	r2, [pc, #440]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b6c      	ldr	r3, [pc, #432]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6b      	ldr	r2, [pc, #428]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fbcc 	bl	8002600 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fe fbc8 	bl	8002600 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	@ 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e229      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b61      	ldr	r3, [pc, #388]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe8>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fbb8 	bl	8002600 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe fbb4 	bl	8002600 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e215      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	4b57      	ldr	r3, [pc, #348]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x110>
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d069      	beq.n	8003f96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec2:	4b50      	ldr	r3, [pc, #320]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ece:	4b4d      	ldr	r3, [pc, #308]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d11c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x190>
 8003eda:	4b4a      	ldr	r3, [pc, #296]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x17a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1e9      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b41      	ldr	r3, [pc, #260]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	493d      	ldr	r1, [pc, #244]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	e040      	b.n	8003f96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d023      	beq.n	8003f64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1c:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a38      	ldr	r2, [pc, #224]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe fb6a 	bl	8002600 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fe fb66 	bl	8002600 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e1c7      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b30      	ldr	r3, [pc, #192]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4929      	ldr	r1, [pc, #164]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
 8003f62:	e018      	b.n	8003f96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f64:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fb46 	bl	8002600 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fe fb42 	bl	8002600 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1a3      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d038      	beq.n	8004014 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d019      	beq.n	8003fde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b16      	ldr	r3, [pc, #88]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fb23 	bl	8002600 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbe:	f7fe fb1f 	bl	8002600 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e180      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x23a>
 8003fdc:	e01a      	b.n	8004014 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fde:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fe fb09 	bl	8002600 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff2:	f7fe fb05 	bl	8002600 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d903      	bls.n	8004008 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e166      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
 8004004:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	4b92      	ldr	r3, [pc, #584]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1ee      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a4 	beq.w	800416a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b8c      	ldr	r3, [pc, #560]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b89      	ldr	r3, [pc, #548]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a88      	ldr	r2, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b86      	ldr	r3, [pc, #536]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404a:	4b83      	ldr	r3, [pc, #524]	@ (8004258 <HAL_RCC_OscConfig+0x4d4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004056:	4b80      	ldr	r3, [pc, #512]	@ (8004258 <HAL_RCC_OscConfig+0x4d4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7f      	ldr	r2, [pc, #508]	@ (8004258 <HAL_RCC_OscConfig+0x4d4>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fe facd 	bl	8002600 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fe fac9 	bl	8002600 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b64      	cmp	r3, #100	@ 0x64
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e12a      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407c:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCC_OscConfig+0x4d4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x31a>
 8004090:	4b70      	ldr	r3, [pc, #448]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a6f      	ldr	r2, [pc, #444]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
 800409c:	e02d      	b.n	80040fa <HAL_RCC_OscConfig+0x376>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x33c>
 80040a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b2:	4b68      	ldr	r3, [pc, #416]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a67      	ldr	r2, [pc, #412]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x376>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x35e>
 80040c8:	4b62      	ldr	r3, [pc, #392]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040cc:	4a61      	ldr	r2, [pc, #388]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x376>
 80040e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ee:	4b59      	ldr	r3, [pc, #356]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	4a58      	ldr	r2, [pc, #352]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fe fa7d 	bl	8002600 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fe fa79 	bl	8002600 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0d8      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b4c      	ldr	r3, [pc, #304]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x386>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fe fa67 	bl	8002600 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe fa63 	bl	8002600 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0c2      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	4a3c      	ldr	r2, [pc, #240]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80ae 	beq.w	80042d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004174:	4b37      	ldr	r3, [pc, #220]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d06d      	beq.n	800425c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d14b      	bne.n	8004220 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b32      	ldr	r3, [pc, #200]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a31      	ldr	r2, [pc, #196]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fa34 	bl	8002600 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fe fa30 	bl	8002600 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e091      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b29      	ldr	r3, [pc, #164]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	491b      	ldr	r1, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe fa02 	bl	8002600 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004200:	f7fe f9fe 	bl	8002600 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e05f      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x47c>
 800421e:	e057      	b.n	80042d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0b      	ldr	r2, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe f9e8 	bl	8002600 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fe f9e4 	bl	8002600 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e045      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <HAL_RCC_OscConfig+0x4d0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x4b0>
 8004252:	e03d      	b.n	80042d0 <HAL_RCC_OscConfig+0x54c>
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800425c:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <HAL_RCC_OscConfig+0x558>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d030      	beq.n	80042cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d129      	bne.n	80042cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d122      	bne.n	80042cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004292:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004294:	4293      	cmp	r3, r2
 8004296:	d119      	bne.n	80042cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d10f      	bne.n	80042cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800

080042e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0d0      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f8:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d910      	bls.n	8004328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b67      	ldr	r3, [pc, #412]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 020f 	bic.w	r2, r3, #15
 800430e:	4965      	ldr	r1, [pc, #404]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d040      	beq.n	8004404 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d115      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e073      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b2:	4b3d      	ldr	r3, [pc, #244]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06b      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c2:	4b39      	ldr	r3, [pc, #228]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 0203 	bic.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4936      	ldr	r1, [pc, #216]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fe f914 	bl	8002600 <HAL_GetTick>
 80043d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043dc:	f7fe f910 	bl	8002600 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e053      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 020c 	and.w	r2, r3, #12
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	429a      	cmp	r2, r3
 8004402:	d1eb      	bne.n	80043dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004404:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d210      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 020f 	bic.w	r2, r3, #15
 800441a:	4922      	ldr	r1, [pc, #136]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f821 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x1cc>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1d0>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fafa 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0800a91c 	.word	0x0800a91c
 80044b0:	20000030 	.word	0x20000030
 80044b4:	20000034 	.word	0x20000034

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b094      	sub	sp, #80	@ 0x50
 80044be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c4:	2300      	movs	r3, #0
 80044c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d0:	4b79      	ldr	r3, [pc, #484]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d00d      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x40>
 80044dc:	2b08      	cmp	r3, #8
 80044de:	f200 80e1 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ea:	e0db      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b73      	ldr	r3, [pc, #460]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f0:	e0db      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f2:	4b73      	ldr	r3, [pc, #460]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f6:	e0d8      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f8:	4b6f      	ldr	r3, [pc, #444]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004502:	4b6d      	ldr	r3, [pc, #436]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b6a      	ldr	r3, [pc, #424]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	2200      	movs	r2, #0
 8004516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004518:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	@ 0x34
 8004526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453c:	0150      	lsls	r0, r2, #5
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4621      	mov	r1, r4
 8004544:	1a51      	subs	r1, r2, r1
 8004546:	6139      	str	r1, [r7, #16]
 8004548:	4629      	mov	r1, r5
 800454a:	eb63 0301 	sbc.w	r3, r3, r1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800455c:	4659      	mov	r1, fp
 800455e:	018b      	lsls	r3, r1, #6
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004566:	4651      	mov	r1, sl
 8004568:	018a      	lsls	r2, r1, #6
 800456a:	4651      	mov	r1, sl
 800456c:	ebb2 0801 	subs.w	r8, r2, r1
 8004570:	4659      	mov	r1, fp
 8004572:	eb63 0901 	sbc.w	r9, r3, r1
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458a:	4690      	mov	r8, r2
 800458c:	4699      	mov	r9, r3
 800458e:	4623      	mov	r3, r4
 8004590:	eb18 0303 	adds.w	r3, r8, r3
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	462b      	mov	r3, r5
 8004598:	eb49 0303 	adc.w	r3, r9, r3
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045aa:	4629      	mov	r1, r5
 80045ac:	024b      	lsls	r3, r1, #9
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b4:	4621      	mov	r1, r4
 80045b6:	024a      	lsls	r2, r1, #9
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045be:	2200      	movs	r2, #0
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045c8:	f7fb fe3a 	bl	8000240 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d4:	e058      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b38      	ldr	r3, [pc, #224]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	4611      	mov	r1, r2
 80045e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	0159      	lsls	r1, r3, #5
 80045fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004602:	0150      	lsls	r0, r2, #5
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4641      	mov	r1, r8
 800460a:	ebb2 0a01 	subs.w	sl, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb63 0b01 	sbc.w	fp, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004628:	ebb2 040a 	subs.w	r4, r2, sl
 800462c:	eb63 050b 	sbc.w	r5, r3, fp
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	464b      	mov	r3, r9
 800464c:	eb45 0303 	adc.w	r3, r5, r3
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	61fa      	str	r2, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	f7fb fde0 	bl	8000240 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004698:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80046a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3750      	adds	r7, #80	@ 0x50
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	007a1200 	.word	0x007a1200

080046c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c8:	4b03      	ldr	r3, [pc, #12]	@ (80046d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000030 	.word	0x20000030

080046dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	0800a92c 	.word	0x0800a92c

08004704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004708:	f7ff ffdc 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0b5b      	lsrs	r3, r3, #13
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800a92c 	.word	0x0800a92c

0800472c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	220f      	movs	r2, #15
 800473a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800473c:	4b12      	ldr	r3, [pc, #72]	@ (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0203 	and.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004748:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004760:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	08db      	lsrs	r3, r3, #3
 8004766:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <HAL_RCC_GetClockConfig+0x60>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 020f 	and.w	r2, r3, #15
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	40023c00 	.word	0x40023c00

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b8:	4b69      	ldr	r3, [pc, #420]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a68      	ldr	r2, [pc, #416]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047c2:	6093      	str	r3, [r2, #8]
 80047c4:	4b66      	ldr	r3, [pc, #408]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	4964      	ldr	r1, [pc, #400]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	4959      	ldr	r1, [pc, #356]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004808:	d101      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004826:	4b4e      	ldr	r3, [pc, #312]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800482c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	494a      	ldr	r1, [pc, #296]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004846:	2301      	movs	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 808b 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	4b3a      	ldr	r3, [pc, #232]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	4a39      	ldr	r2, [pc, #228]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800487e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004880:	4b37      	ldr	r3, [pc, #220]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800488c:	4b35      	ldr	r3, [pc, #212]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a34      	ldr	r2, [pc, #208]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004898:	f7fd feb2 	bl	8002600 <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a0:	f7fd feae 	bl	8002600 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	@ 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e38f      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048be:	4b28      	ldr	r3, [pc, #160]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d035      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d02e      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048dc:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048fe:	4a18      	ldr	r2, [pc, #96]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004904:	4b16      	ldr	r3, [pc, #88]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d114      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd fe76 	bl	8002600 <HAL_GetTick>
 8004914:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fd fe72 	bl	8002600 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e351      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ee      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004946:	d111      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004954:	4b04      	ldr	r3, [pc, #16]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004956:	400b      	ands	r3, r1
 8004958:	4901      	ldr	r1, [pc, #4]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000
 8004968:	0ffffcff 	.word	0x0ffffcff
 800496c:	4bac      	ldr	r3, [pc, #688]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4aab      	ldr	r2, [pc, #684]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004976:	6093      	str	r3, [r2, #8]
 8004978:	4ba9      	ldr	r3, [pc, #676]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004984:	49a6      	ldr	r1, [pc, #664]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	4313      	orrs	r3, r2
 8004988:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004996:	4ba2      	ldr	r3, [pc, #648]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800499c:	4aa0      	ldr	r2, [pc, #640]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049a6:	4b9e      	ldr	r3, [pc, #632]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	499b      	ldr	r1, [pc, #620]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c4:	4b96      	ldr	r3, [pc, #600]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d2:	4993      	ldr	r1, [pc, #588]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f4:	498a      	ldr	r1, [pc, #552]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a08:	4b85      	ldr	r3, [pc, #532]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a16:	4982      	ldr	r1, [pc, #520]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4979      	ldr	r1, [pc, #484]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4c:	4b74      	ldr	r3, [pc, #464]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	4971      	ldr	r1, [pc, #452]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a74:	f023 020c 	bic.w	r2, r3, #12
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7c:	4968      	ldr	r1, [pc, #416]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a90:	4b63      	ldr	r3, [pc, #396]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9e:	4960      	ldr	r1, [pc, #384]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac0:	4957      	ldr	r1, [pc, #348]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad4:	4b52      	ldr	r3, [pc, #328]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ada:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae2:	494f      	ldr	r1, [pc, #316]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004af6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	4946      	ldr	r1, [pc, #280]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b18:	4b41      	ldr	r3, [pc, #260]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b26:	493e      	ldr	r1, [pc, #248]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b48:	4935      	ldr	r1, [pc, #212]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b5c:	4b30      	ldr	r3, [pc, #192]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6a:	492d      	ldr	r1, [pc, #180]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b7e:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b8c:	4924      	ldr	r1, [pc, #144]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbe:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bcc:	4914      	ldr	r1, [pc, #80]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004be0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bf0:	490b      	ldr	r1, [pc, #44]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00f      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c14:	4902      	ldr	r1, [pc, #8]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c1c:	e002      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c30:	4b8a      	ldr	r3, [pc, #552]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	4986      	ldr	r1, [pc, #536]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c54:	4b81      	ldr	r3, [pc, #516]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c5a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c64:	497d      	ldr	r1, [pc, #500]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d006      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80d6 	beq.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c80:	4b76      	ldr	r3, [pc, #472]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a75      	ldr	r2, [pc, #468]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8c:	f7fd fcb8 	bl	8002600 <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c94:	f7fd fcb4 	bl	8002600 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e195      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d021      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d11d      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cc6:	4b65      	ldr	r3, [pc, #404]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cd4:	4b61      	ldr	r3, [pc, #388]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4958      	ldr	r1, [pc, #352]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d02e      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d2c:	d129      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d34:	0c1b      	lsrs	r3, r3, #16
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d3c:	4b47      	ldr	r3, [pc, #284]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d42:	0f1b      	lsrs	r3, r3, #28
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	019a      	lsls	r2, r3, #6
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	061b      	lsls	r3, r3, #24
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	071b      	lsls	r3, r3, #28
 8004d62:	493e      	ldr	r1, [pc, #248]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d70:	f023 021f 	bic.w	r2, r3, #31
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	4938      	ldr	r1, [pc, #224]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01d      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d8e:	4b33      	ldr	r3, [pc, #204]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d94:	0e1b      	lsrs	r3, r3, #24
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004da2:	0f1b      	lsrs	r3, r3, #28
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	019a      	lsls	r2, r3, #6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	4926      	ldr	r1, [pc, #152]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d011      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	019a      	lsls	r2, r3, #6
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	491a      	ldr	r1, [pc, #104]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dfa:	4b18      	ldr	r3, [pc, #96]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e06:	f7fd fbfb 	bl	8002600 <HAL_GetTick>
 8004e0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e0e:	f7fd fbf7 	bl	8002600 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b64      	cmp	r3, #100	@ 0x64
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0d8      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e20:	4b0e      	ldr	r3, [pc, #56]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	f040 80ce 	bne.w	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a08      	ldr	r2, [pc, #32]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e40:	f7fd fbde 	bl	8002600 <HAL_GetTick>
 8004e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e46:	e00b      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e48:	f7fd fbda 	bl	8002600 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	@ 0x64
 8004e54:	d904      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0bb      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e60:	4b5e      	ldr	r3, [pc, #376]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6c:	d0ec      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d02e      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d12a      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e96:	4b51      	ldr	r3, [pc, #324]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	0f1b      	lsrs	r3, r3, #28
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	019a      	lsls	r2, r3, #6
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	071b      	lsls	r3, r3, #28
 8004eca:	4944      	ldr	r1, [pc, #272]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ed2:	4b42      	ldr	r3, [pc, #264]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	493d      	ldr	r1, [pc, #244]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d022      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f00:	d11d      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f02:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f10:	4b32      	ldr	r3, [pc, #200]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f16:	0f1b      	lsrs	r3, r3, #28
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	019a      	lsls	r2, r3, #6
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	061b      	lsls	r3, r3, #24
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	071b      	lsls	r3, r3, #28
 8004f36:	4929      	ldr	r1, [pc, #164]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d028      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	0e1b      	lsrs	r3, r3, #24
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f58:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	019a      	lsls	r2, r3, #6
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	4917      	ldr	r1, [pc, #92]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f86:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4911      	ldr	r1, [pc, #68]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa8:	f7fd fb2a 	bl	8002600 <HAL_GetTick>
 8004fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fb0:	f7fd fb26 	bl	8002600 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e007      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fce:	d1ef      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800

08004fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e09d      	b.n	800512e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005002:	d009      	beq.n	8005018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
 800500a:	e005      	b.n	8005018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fb50 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800504e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005058:	d902      	bls.n	8005060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e002      	b.n	8005066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800506e:	d007      	beq.n	8005080 <HAL_SPI_Init+0xa0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005078:	d002      	beq.n	8005080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 0204 	and.w	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050fc:	ea42 0103 	orr.w	r1, r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800511c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b08a      	sub	sp, #40	@ 0x28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005144:	2301      	movs	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_SPI_TransmitReceive+0x26>
 8005158:	2302      	movs	r3, #2
 800515a:	e1fb      	b.n	8005554 <HAL_SPI_TransmitReceive+0x41e>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005164:	f7fd fa4c 	bl	8002600 <HAL_GetTick>
 8005168:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005170:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005178:	887b      	ldrh	r3, [r7, #2]
 800517a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800517c:	887b      	ldrh	r3, [r7, #2]
 800517e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005180:	7efb      	ldrb	r3, [r7, #27]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d00e      	beq.n	80051a4 <HAL_SPI_TransmitReceive+0x6e>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800518c:	d106      	bne.n	800519c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_SPI_TransmitReceive+0x66>
 8005196:	7efb      	ldrb	r3, [r7, #27]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d003      	beq.n	80051a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800519c:	2302      	movs	r3, #2
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80051a2:	e1cd      	b.n	8005540 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x80>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x80>
 80051b0:	887b      	ldrh	r3, [r7, #2]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80051bc:	e1c0      	b.n	8005540 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d003      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2205      	movs	r2, #5
 80051ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	887a      	ldrh	r2, [r7, #2]
 80051e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	887a      	ldrh	r2, [r7, #2]
 80051ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	887a      	ldrh	r2, [r7, #2]
 80051f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	887a      	ldrh	r2, [r7, #2]
 80051fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005214:	d802      	bhi.n	800521c <HAL_SPI_TransmitReceive+0xe6>
 8005216:	8a3b      	ldrh	r3, [r7, #16]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d908      	bls.n	800522e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	e007      	b.n	800523e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005248:	2b40      	cmp	r3, #64	@ 0x40
 800524a:	d007      	beq.n	800525c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800525a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005264:	d97c      	bls.n	8005360 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x13e>
 800526e:	8a7b      	ldrh	r3, [r7, #18]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d169      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	881a      	ldrh	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005298:	e056      	b.n	8005348 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d11b      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x1aa>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d016      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x1aa>
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d113      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	881a      	ldrh	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	1c9a      	adds	r2, r3, #2
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d11c      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x1f2>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	b292      	uxth	r2, r2
 8005306:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530c:	1c9a      	adds	r2, r3, #2
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005324:	2301      	movs	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005328:	f7fd f96a 	bl	8002600 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005334:	429a      	cmp	r2, r3
 8005336:	d807      	bhi.n	8005348 <HAL_SPI_TransmitReceive+0x212>
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d003      	beq.n	8005348 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005346:	e0fb      	b.n	8005540 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1a3      	bne.n	800529a <HAL_SPI_TransmitReceive+0x164>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d19d      	bne.n	800529a <HAL_SPI_TransmitReceive+0x164>
 800535e:	e0df      	b.n	8005520 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x23a>
 8005368:	8a7b      	ldrh	r3, [r7, #18]
 800536a:	2b01      	cmp	r3, #1
 800536c:	f040 80cb 	bne.w	8005506 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d912      	bls.n	80053a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	881a      	ldrh	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b02      	subs	r3, #2
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800539e:	e0b2      	b.n	8005506 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c6:	e09e      	b.n	8005506 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d134      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x30a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02f      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x30a>
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d12c      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d912      	bls.n	8005416 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b02      	subs	r3, #2
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005414:	e012      	b.n	800543c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d148      	bne.n	80054e0 <HAL_SPI_TransmitReceive+0x3aa>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d042      	beq.n	80054e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d923      	bls.n	80054ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	b292      	uxth	r2, r2
 8005472:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b02      	subs	r3, #2
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d81f      	bhi.n	80054dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	e016      	b.n	80054dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f103 020c 	add.w	r2, r3, #12
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054dc:	2301      	movs	r3, #1
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054e0:	f7fd f88e 	bl	8002600 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d803      	bhi.n	80054f8 <HAL_SPI_TransmitReceive+0x3c2>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d102      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x3c8>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005504:	e01c      	b.n	8005540 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	f47f af5b 	bne.w	80053c8 <HAL_SPI_TransmitReceive+0x292>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	f47f af54 	bne.w	80053c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f937 	bl	8005798 <SPI_EndRxTxTransaction>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	661a      	str	r2, [r3, #96]	@ 0x60
 800553c:	e000      	b.n	8005540 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800553e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005554:	4618      	mov	r0, r3
 8005556:	3728      	adds	r7, #40	@ 0x28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800556c:	f7fd f848 	bl	8002600 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	4413      	add	r3, r2
 800557a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800557c:	f7fd f840 	bl	8002600 <HAL_GetTick>
 8005580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005582:	4b39      	ldr	r3, [pc, #228]	@ (8005668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	015b      	lsls	r3, r3, #5
 8005588:	0d1b      	lsrs	r3, r3, #20
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005592:	e054      	b.n	800563e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d050      	beq.n	800563e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800559c:	f7fd f830 	bl	8002600 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d902      	bls.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d13d      	bne.n	800562e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ca:	d111      	bne.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d4:	d004      	beq.n	80055e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055de:	d107      	bne.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f8:	d10f      	bne.n	800561a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e017      	b.n	800565e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3b01      	subs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	429a      	cmp	r2, r3
 800565a:	d19b      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000030 	.word	0x20000030

0800566c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	@ 0x28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800567e:	f7fc ffbf 	bl	8002600 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	4413      	add	r3, r2
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800568e:	f7fc ffb7 	bl	8002600 <HAL_GetTick>
 8005692:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800569c:	4b3d      	ldr	r3, [pc, #244]	@ (8005794 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00da      	lsls	r2, r3, #3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	0d1b      	lsrs	r3, r3, #20
 80056ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056b4:	e060      	b.n	8005778 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056bc:	d107      	bne.n	80056ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d050      	beq.n	8005778 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d6:	f7fc ff93 	bl	8002600 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d902      	bls.n	80056ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d13d      	bne.n	8005768 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005704:	d111      	bne.n	800572a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570e:	d004      	beq.n	800571a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005718:	d107      	bne.n	800572a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005728:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005732:	d10f      	bne.n	8005754 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005752:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e010      	b.n	800578a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	3b01      	subs	r3, #1
 8005776:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d196      	bne.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	@ 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000030 	.word	0x20000030

08005798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ff5b 	bl	800566c <SPI_WaitFifoStateUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e046      	b.n	800585a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057cc:	4b25      	ldr	r3, [pc, #148]	@ (8005864 <SPI_EndRxTxTransaction+0xcc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a25      	ldr	r2, [pc, #148]	@ (8005868 <SPI_EndRxTxTransaction+0xd0>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	0d5b      	lsrs	r3, r3, #21
 80057d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ea:	d112      	bne.n	8005812 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2180      	movs	r1, #128	@ 0x80
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff feb0 	bl	800555c <SPI_WaitFlagStateUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e023      	b.n	800585a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3b01      	subs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	2b80      	cmp	r3, #128	@ 0x80
 800582a:	d0f2      	beq.n	8005812 <SPI_EndRxTxTransaction+0x7a>
 800582c:	e000      	b.n	8005830 <SPI_EndRxTxTransaction+0x98>
        break;
 800582e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff15 	bl	800566c <SPI_WaitFifoStateUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e000      	b.n	800585a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000030 	.word	0x20000030
 8005868:	165e9f81 	.word	0x165e9f81

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e049      	b.n	8005912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f841 	bl	800591a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 faa6 	bl	8005dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e054      	b.n	80059f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a26      	ldr	r2, [pc, #152]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005972:	d01d      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a22      	ldr	r2, [pc, #136]	@ (8005a04 <HAL_TIM_Base_Start_IT+0xd4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	@ (8005a08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a0c <HAL_TIM_Base_Start_IT+0xdc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <HAL_TIM_Base_Start_IT+0xe0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a14 <HAL_TIM_Base_Start_IT+0xe4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x80>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xe8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d115      	bne.n	80059dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	4b19      	ldr	r3, [pc, #100]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xec>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d015      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0xbe>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059c8:	d011      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	e008      	b.n	80059ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e000      	b.n	80059f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40010400 	.word	0x40010400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40001800 	.word	0x40001800
 8005a1c:	00010007 	.word	0x00010007

08005a20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e08f      	b.n	8005b54 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fb fe89 	bl	8001760 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6899      	ldr	r1, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b3e      	ldr	r3, [pc, #248]	@ (8005b5c <HAL_TIM_Encoder_Init+0x13c>)
 8005a62:	400b      	ands	r3, r1
 8005a64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 f9c3 	bl	8005dfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4b31      	ldr	r3, [pc, #196]	@ (8005b60 <HAL_TIM_Encoder_Init+0x140>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b64 <HAL_TIM_Encoder_Init+0x144>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4b2a      	ldr	r3, [pc, #168]	@ (8005b68 <HAL_TIM_Encoder_Init+0x148>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	4313      	orrs	r3, r2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	011a      	lsls	r2, r3, #4
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	031b      	lsls	r3, r3, #12
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4313      	orrs	r3, r2
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	fffebff8 	.word	0xfffebff8
 8005b60:	fffffcfc 	.word	0xfffffcfc
 8005b64:	fffff3f3 	.word	0xfffff3f3
 8005b68:	ffff0f0f 	.word	0xffff0f0f

08005b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0202 	mvn.w	r2, #2
 8005b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f905 	bl	8005dbe <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8f7 	bl	8005daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f908 	bl	8005dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0204 	mvn.w	r2, #4
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8db 	bl	8005dbe <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8cd 	bl	8005daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f8de 	bl	8005dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0208 	mvn.w	r2, #8
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2204      	movs	r2, #4
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f8b1 	bl	8005dbe <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8a3 	bl	8005daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f8b4 	bl	8005dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0210 	mvn.w	r2, #16
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f887 	bl	8005dbe <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f879 	bl	8005daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f88a 	bl	8005dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0201 	mvn.w	r2, #1
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fb fa28 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfa:	2b80      	cmp	r3, #128	@ 0x80
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d08:	2b80      	cmp	r3, #128	@ 0x80
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9a8 	bl	800606c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d2a:	d10e      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b80      	cmp	r3, #128	@ 0x80
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f99b 	bl	8006080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d54:	2b40      	cmp	r3, #64	@ 0x40
 8005d56:	d10e      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f838 	bl	8005de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d10e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d107      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f06f 0220 	mvn.w	r2, #32
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f95b 	bl	8006058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a40      	ldr	r2, [pc, #256]	@ (8005f10 <TIM_Base_SetConfig+0x114>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1a:	d00f      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f14 <TIM_Base_SetConfig+0x118>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3c      	ldr	r2, [pc, #240]	@ (8005f18 <TIM_Base_SetConfig+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d007      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8005f1c <TIM_Base_SetConfig+0x120>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a3a      	ldr	r2, [pc, #232]	@ (8005f20 <TIM_Base_SetConfig+0x124>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2f      	ldr	r2, [pc, #188]	@ (8005f10 <TIM_Base_SetConfig+0x114>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d02b      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5c:	d027      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <TIM_Base_SetConfig+0x118>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d023      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2b      	ldr	r2, [pc, #172]	@ (8005f18 <TIM_Base_SetConfig+0x11c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01f      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2a      	ldr	r2, [pc, #168]	@ (8005f1c <TIM_Base_SetConfig+0x120>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01b      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a29      	ldr	r2, [pc, #164]	@ (8005f20 <TIM_Base_SetConfig+0x124>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d017      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a28      	ldr	r2, [pc, #160]	@ (8005f24 <TIM_Base_SetConfig+0x128>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a27      	ldr	r2, [pc, #156]	@ (8005f28 <TIM_Base_SetConfig+0x12c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a26      	ldr	r2, [pc, #152]	@ (8005f2c <TIM_Base_SetConfig+0x130>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00b      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a25      	ldr	r2, [pc, #148]	@ (8005f30 <TIM_Base_SetConfig+0x134>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a24      	ldr	r2, [pc, #144]	@ (8005f34 <TIM_Base_SetConfig+0x138>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a23      	ldr	r2, [pc, #140]	@ (8005f38 <TIM_Base_SetConfig+0x13c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <TIM_Base_SetConfig+0x114>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_Base_SetConfig+0xf8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a0c      	ldr	r2, [pc, #48]	@ (8005f20 <TIM_Base_SetConfig+0x124>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d103      	bne.n	8005efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	615a      	str	r2, [r3, #20]
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40010400 	.word	0x40010400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800
 8005f30:	40001800 	.word	0x40001800
 8005f34:	40001c00 	.word	0x40001c00
 8005f38:	40002000 	.word	0x40002000

08005f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e06d      	b.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a30      	ldr	r2, [pc, #192]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2f      	ldr	r2, [pc, #188]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d108      	bne.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a20      	ldr	r2, [pc, #128]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d022      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc6:	d01d      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a15      	ldr	r2, [pc, #84]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a15      	ldr	r2, [pc, #84]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10c      	bne.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800600a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40014000 	.word	0x40014000
 8006054:	40001800 	.word	0x40001800

08006058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e040      	b.n	8006128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb fc2a 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2224      	movs	r2, #36	@ 0x24
 80060c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f82c 	bl	8006130 <UART_SetConfig>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e022      	b.n	8006128 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa84 	bl	80065f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800610e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fb0b 	bl	800673c <UART_CheckIdleState>
 8006126:	4603      	mov	r3, r0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4ba6      	ldr	r3, [pc, #664]	@ (80063f4 <UART_SetConfig+0x2c4>)
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6979      	ldr	r1, [r7, #20]
 8006164:	430b      	orrs	r3, r1
 8006166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	430a      	orrs	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a94      	ldr	r2, [pc, #592]	@ (80063f8 <UART_SetConfig+0x2c8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d120      	bne.n	80061ee <UART_SetConfig+0xbe>
 80061ac:	4b93      	ldr	r3, [pc, #588]	@ (80063fc <UART_SetConfig+0x2cc>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d816      	bhi.n	80061e8 <UART_SetConfig+0xb8>
 80061ba:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <UART_SetConfig+0x90>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061d7 	.word	0x080061d7
 80061cc:	080061e3 	.word	0x080061e3
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e150      	b.n	8006478 <UART_SetConfig+0x348>
 80061d6:	2302      	movs	r3, #2
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e14d      	b.n	8006478 <UART_SetConfig+0x348>
 80061dc:	2304      	movs	r3, #4
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e14a      	b.n	8006478 <UART_SetConfig+0x348>
 80061e2:	2308      	movs	r3, #8
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e147      	b.n	8006478 <UART_SetConfig+0x348>
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e144      	b.n	8006478 <UART_SetConfig+0x348>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a83      	ldr	r2, [pc, #524]	@ (8006400 <UART_SetConfig+0x2d0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d132      	bne.n	800625e <UART_SetConfig+0x12e>
 80061f8:	4b80      	ldr	r3, [pc, #512]	@ (80063fc <UART_SetConfig+0x2cc>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d828      	bhi.n	8006258 <UART_SetConfig+0x128>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <UART_SetConfig+0xdc>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006241 	.word	0x08006241
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	0800624d 	.word	0x0800624d
 8006220:	08006259 	.word	0x08006259
 8006224:	08006259 	.word	0x08006259
 8006228:	08006259 	.word	0x08006259
 800622c:	08006247 	.word	0x08006247
 8006230:	08006259 	.word	0x08006259
 8006234:	08006259 	.word	0x08006259
 8006238:	08006259 	.word	0x08006259
 800623c:	08006253 	.word	0x08006253
 8006240:	2300      	movs	r3, #0
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e118      	b.n	8006478 <UART_SetConfig+0x348>
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e115      	b.n	8006478 <UART_SetConfig+0x348>
 800624c:	2304      	movs	r3, #4
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e112      	b.n	8006478 <UART_SetConfig+0x348>
 8006252:	2308      	movs	r3, #8
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e10f      	b.n	8006478 <UART_SetConfig+0x348>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e10c      	b.n	8006478 <UART_SetConfig+0x348>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a68      	ldr	r2, [pc, #416]	@ (8006404 <UART_SetConfig+0x2d4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d120      	bne.n	80062aa <UART_SetConfig+0x17a>
 8006268:	4b64      	ldr	r3, [pc, #400]	@ (80063fc <UART_SetConfig+0x2cc>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006272:	2b30      	cmp	r3, #48	@ 0x30
 8006274:	d013      	beq.n	800629e <UART_SetConfig+0x16e>
 8006276:	2b30      	cmp	r3, #48	@ 0x30
 8006278:	d814      	bhi.n	80062a4 <UART_SetConfig+0x174>
 800627a:	2b20      	cmp	r3, #32
 800627c:	d009      	beq.n	8006292 <UART_SetConfig+0x162>
 800627e:	2b20      	cmp	r3, #32
 8006280:	d810      	bhi.n	80062a4 <UART_SetConfig+0x174>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <UART_SetConfig+0x15c>
 8006286:	2b10      	cmp	r3, #16
 8006288:	d006      	beq.n	8006298 <UART_SetConfig+0x168>
 800628a:	e00b      	b.n	80062a4 <UART_SetConfig+0x174>
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e0f2      	b.n	8006478 <UART_SetConfig+0x348>
 8006292:	2302      	movs	r3, #2
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0ef      	b.n	8006478 <UART_SetConfig+0x348>
 8006298:	2304      	movs	r3, #4
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e0ec      	b.n	8006478 <UART_SetConfig+0x348>
 800629e:	2308      	movs	r3, #8
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e0e9      	b.n	8006478 <UART_SetConfig+0x348>
 80062a4:	2310      	movs	r3, #16
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e0e6      	b.n	8006478 <UART_SetConfig+0x348>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a56      	ldr	r2, [pc, #344]	@ (8006408 <UART_SetConfig+0x2d8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d120      	bne.n	80062f6 <UART_SetConfig+0x1c6>
 80062b4:	4b51      	ldr	r3, [pc, #324]	@ (80063fc <UART_SetConfig+0x2cc>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062be:	2bc0      	cmp	r3, #192	@ 0xc0
 80062c0:	d013      	beq.n	80062ea <UART_SetConfig+0x1ba>
 80062c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80062c4:	d814      	bhi.n	80062f0 <UART_SetConfig+0x1c0>
 80062c6:	2b80      	cmp	r3, #128	@ 0x80
 80062c8:	d009      	beq.n	80062de <UART_SetConfig+0x1ae>
 80062ca:	2b80      	cmp	r3, #128	@ 0x80
 80062cc:	d810      	bhi.n	80062f0 <UART_SetConfig+0x1c0>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <UART_SetConfig+0x1a8>
 80062d2:	2b40      	cmp	r3, #64	@ 0x40
 80062d4:	d006      	beq.n	80062e4 <UART_SetConfig+0x1b4>
 80062d6:	e00b      	b.n	80062f0 <UART_SetConfig+0x1c0>
 80062d8:	2300      	movs	r3, #0
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e0cc      	b.n	8006478 <UART_SetConfig+0x348>
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e0c9      	b.n	8006478 <UART_SetConfig+0x348>
 80062e4:	2304      	movs	r3, #4
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e0c6      	b.n	8006478 <UART_SetConfig+0x348>
 80062ea:	2308      	movs	r3, #8
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e0c3      	b.n	8006478 <UART_SetConfig+0x348>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e0c0      	b.n	8006478 <UART_SetConfig+0x348>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a44      	ldr	r2, [pc, #272]	@ (800640c <UART_SetConfig+0x2dc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d125      	bne.n	800634c <UART_SetConfig+0x21c>
 8006300:	4b3e      	ldr	r3, [pc, #248]	@ (80063fc <UART_SetConfig+0x2cc>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800630e:	d017      	beq.n	8006340 <UART_SetConfig+0x210>
 8006310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006314:	d817      	bhi.n	8006346 <UART_SetConfig+0x216>
 8006316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800631a:	d00b      	beq.n	8006334 <UART_SetConfig+0x204>
 800631c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006320:	d811      	bhi.n	8006346 <UART_SetConfig+0x216>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <UART_SetConfig+0x1fe>
 8006326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632a:	d006      	beq.n	800633a <UART_SetConfig+0x20a>
 800632c:	e00b      	b.n	8006346 <UART_SetConfig+0x216>
 800632e:	2300      	movs	r3, #0
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e0a1      	b.n	8006478 <UART_SetConfig+0x348>
 8006334:	2302      	movs	r3, #2
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e09e      	b.n	8006478 <UART_SetConfig+0x348>
 800633a:	2304      	movs	r3, #4
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e09b      	b.n	8006478 <UART_SetConfig+0x348>
 8006340:	2308      	movs	r3, #8
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e098      	b.n	8006478 <UART_SetConfig+0x348>
 8006346:	2310      	movs	r3, #16
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e095      	b.n	8006478 <UART_SetConfig+0x348>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a2f      	ldr	r2, [pc, #188]	@ (8006410 <UART_SetConfig+0x2e0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d125      	bne.n	80063a2 <UART_SetConfig+0x272>
 8006356:	4b29      	ldr	r3, [pc, #164]	@ (80063fc <UART_SetConfig+0x2cc>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006360:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006364:	d017      	beq.n	8006396 <UART_SetConfig+0x266>
 8006366:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800636a:	d817      	bhi.n	800639c <UART_SetConfig+0x26c>
 800636c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006370:	d00b      	beq.n	800638a <UART_SetConfig+0x25a>
 8006372:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006376:	d811      	bhi.n	800639c <UART_SetConfig+0x26c>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <UART_SetConfig+0x254>
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006380:	d006      	beq.n	8006390 <UART_SetConfig+0x260>
 8006382:	e00b      	b.n	800639c <UART_SetConfig+0x26c>
 8006384:	2301      	movs	r3, #1
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e076      	b.n	8006478 <UART_SetConfig+0x348>
 800638a:	2302      	movs	r3, #2
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e073      	b.n	8006478 <UART_SetConfig+0x348>
 8006390:	2304      	movs	r3, #4
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e070      	b.n	8006478 <UART_SetConfig+0x348>
 8006396:	2308      	movs	r3, #8
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e06d      	b.n	8006478 <UART_SetConfig+0x348>
 800639c:	2310      	movs	r3, #16
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e06a      	b.n	8006478 <UART_SetConfig+0x348>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <UART_SetConfig+0x2e4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d138      	bne.n	800641e <UART_SetConfig+0x2ee>
 80063ac:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <UART_SetConfig+0x2cc>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80063b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ba:	d017      	beq.n	80063ec <UART_SetConfig+0x2bc>
 80063bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063c0:	d82a      	bhi.n	8006418 <UART_SetConfig+0x2e8>
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c6:	d00b      	beq.n	80063e0 <UART_SetConfig+0x2b0>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063cc:	d824      	bhi.n	8006418 <UART_SetConfig+0x2e8>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <UART_SetConfig+0x2aa>
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d6:	d006      	beq.n	80063e6 <UART_SetConfig+0x2b6>
 80063d8:	e01e      	b.n	8006418 <UART_SetConfig+0x2e8>
 80063da:	2300      	movs	r3, #0
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e04b      	b.n	8006478 <UART_SetConfig+0x348>
 80063e0:	2302      	movs	r3, #2
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e048      	b.n	8006478 <UART_SetConfig+0x348>
 80063e6:	2304      	movs	r3, #4
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e045      	b.n	8006478 <UART_SetConfig+0x348>
 80063ec:	2308      	movs	r3, #8
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e042      	b.n	8006478 <UART_SetConfig+0x348>
 80063f2:	bf00      	nop
 80063f4:	efff69f3 	.word	0xefff69f3
 80063f8:	40011000 	.word	0x40011000
 80063fc:	40023800 	.word	0x40023800
 8006400:	40004400 	.word	0x40004400
 8006404:	40004800 	.word	0x40004800
 8006408:	40004c00 	.word	0x40004c00
 800640c:	40005000 	.word	0x40005000
 8006410:	40011400 	.word	0x40011400
 8006414:	40007800 	.word	0x40007800
 8006418:	2310      	movs	r3, #16
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e02c      	b.n	8006478 <UART_SetConfig+0x348>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a72      	ldr	r2, [pc, #456]	@ (80065ec <UART_SetConfig+0x4bc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d125      	bne.n	8006474 <UART_SetConfig+0x344>
 8006428:	4b71      	ldr	r3, [pc, #452]	@ (80065f0 <UART_SetConfig+0x4c0>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006432:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006436:	d017      	beq.n	8006468 <UART_SetConfig+0x338>
 8006438:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800643c:	d817      	bhi.n	800646e <UART_SetConfig+0x33e>
 800643e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006442:	d00b      	beq.n	800645c <UART_SetConfig+0x32c>
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006448:	d811      	bhi.n	800646e <UART_SetConfig+0x33e>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <UART_SetConfig+0x326>
 800644e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006452:	d006      	beq.n	8006462 <UART_SetConfig+0x332>
 8006454:	e00b      	b.n	800646e <UART_SetConfig+0x33e>
 8006456:	2300      	movs	r3, #0
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e00d      	b.n	8006478 <UART_SetConfig+0x348>
 800645c:	2302      	movs	r3, #2
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e00a      	b.n	8006478 <UART_SetConfig+0x348>
 8006462:	2304      	movs	r3, #4
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e007      	b.n	8006478 <UART_SetConfig+0x348>
 8006468:	2308      	movs	r3, #8
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x348>
 800646e:	2310      	movs	r3, #16
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e001      	b.n	8006478 <UART_SetConfig+0x348>
 8006474:	2310      	movs	r3, #16
 8006476:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006480:	d15b      	bne.n	800653a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006482:	7ffb      	ldrb	r3, [r7, #31]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d828      	bhi.n	80064da <UART_SetConfig+0x3aa>
 8006488:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <UART_SetConfig+0x360>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064db 	.word	0x080064db
 80064a0:	080064cb 	.word	0x080064cb
 80064a4:	080064db 	.word	0x080064db
 80064a8:	080064db 	.word	0x080064db
 80064ac:	080064db 	.word	0x080064db
 80064b0:	080064d3 	.word	0x080064d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7fe f912 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 80064b8:	61b8      	str	r0, [r7, #24]
        break;
 80064ba:	e013      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064bc:	f7fe f922 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 80064c0:	61b8      	str	r0, [r7, #24]
        break;
 80064c2:	e00f      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c4:	4b4b      	ldr	r3, [pc, #300]	@ (80065f4 <UART_SetConfig+0x4c4>)
 80064c6:	61bb      	str	r3, [r7, #24]
        break;
 80064c8:	e00c      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ca:	f7fd fff5 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80064ce:	61b8      	str	r0, [r7, #24]
        break;
 80064d0:	e008      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064d6:	61bb      	str	r3, [r7, #24]
        break;
 80064d8:	e004      	b.n	80064e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	77bb      	strb	r3, [r7, #30]
        break;
 80064e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d074      	beq.n	80065d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	005a      	lsls	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b0f      	cmp	r3, #15
 8006504:	d916      	bls.n	8006534 <UART_SetConfig+0x404>
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650c:	d212      	bcs.n	8006534 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f023 030f 	bic.w	r3, r3, #15
 8006516:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	b29a      	uxth	r2, r3
 8006524:	89fb      	ldrh	r3, [r7, #14]
 8006526:	4313      	orrs	r3, r2
 8006528:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	89fa      	ldrh	r2, [r7, #14]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e04f      	b.n	80065d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77bb      	strb	r3, [r7, #30]
 8006538:	e04c      	b.n	80065d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800653a:	7ffb      	ldrb	r3, [r7, #31]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d828      	bhi.n	8006592 <UART_SetConfig+0x462>
 8006540:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0x418>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006575 	.word	0x08006575
 8006550:	0800657d 	.word	0x0800657d
 8006554:	08006593 	.word	0x08006593
 8006558:	08006583 	.word	0x08006583
 800655c:	08006593 	.word	0x08006593
 8006560:	08006593 	.word	0x08006593
 8006564:	08006593 	.word	0x08006593
 8006568:	0800658b 	.word	0x0800658b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fe f8b6 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8006570:	61b8      	str	r0, [r7, #24]
        break;
 8006572:	e013      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006574:	f7fe f8c6 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 8006578:	61b8      	str	r0, [r7, #24]
        break;
 800657a:	e00f      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800657c:	4b1d      	ldr	r3, [pc, #116]	@ (80065f4 <UART_SetConfig+0x4c4>)
 800657e:	61bb      	str	r3, [r7, #24]
        break;
 8006580:	e00c      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006582:	f7fd ff99 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8006586:	61b8      	str	r0, [r7, #24]
        break;
 8006588:	e008      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800658e:	61bb      	str	r3, [r7, #24]
        break;
 8006590:	e004      	b.n	800659c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77bb      	strb	r3, [r7, #30]
        break;
 800659a:	bf00      	nop
    }

    if (pclk != 0U)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085a      	lsrs	r2, r3, #1
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	441a      	add	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b0f      	cmp	r3, #15
 80065ba:	d909      	bls.n	80065d0 <UART_SetConfig+0x4a0>
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c2:	d205      	bcs.n	80065d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e001      	b.n	80065d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40007c00 	.word	0x40007c00
 80065f0:	40023800 	.word	0x40023800
 80065f4:	00f42400 	.word	0x00f42400

080065f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01a      	beq.n	800670e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066f6:	d10a      	bne.n	800670e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800674c:	f7fb ff58 	bl	8002600 <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d10e      	bne.n	800677e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f831 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e027      	b.n	80067ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b04      	cmp	r3, #4
 800678a:	d10e      	bne.n	80067aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800678c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f81b 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e011      	b.n	80067ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b09c      	sub	sp, #112	@ 0x70
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	e0a7      	b.n	8006938 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	f000 80a3 	beq.w	8006938 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f2:	f7fb ff05 	bl	8002600 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <UART_WaitOnFlagUntilTimeout+0x32>
 8006802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006804:	2b00      	cmp	r3, #0
 8006806:	d13f      	bne.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006818:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800681c:	667b      	str	r3, [r7, #100]	@ 0x64
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006826:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006828:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800682c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	663b      	str	r3, [r7, #96]	@ 0x60
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800685a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800685c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e068      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d050      	beq.n	8006938 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a4:	d148      	bne.n	8006938 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80068c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e6      	bne.n	80068b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006902:	623a      	str	r2, [r7, #32]
 8006904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	69f9      	ldr	r1, [r7, #28]
 8006908:	6a3a      	ldr	r2, [r7, #32]
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e5      	bne.n	80068e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e010      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4013      	ands	r3, r2
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	429a      	cmp	r2, r3
 8006946:	bf0c      	ite	eq
 8006948:	2301      	moveq	r3, #1
 800694a:	2300      	movne	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	429a      	cmp	r2, r3
 8006954:	f43f af48 	beq.w	80067e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3770      	adds	r7, #112	@ 0x70
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	4603      	mov	r3, r0
 800696a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006974:	2b84      	cmp	r3, #132	@ 0x84
 8006976:	d005      	beq.n	8006984 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006978:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	3303      	adds	r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006984:	68fb      	ldr	r3, [r7, #12]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006998:	f3ef 8305 	mrs	r3, IPSR
 800699c:	607b      	str	r3, [r7, #4]
  return(result);
 800699e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80069ba:	f001 fb55 	bl	8008068 <vTaskStartScheduler>
  
  return osOK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80069c8:	f7ff ffe3 	bl	8006992 <inHandlerMode>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80069d2:	f001 fc53 	bl	800827c <xTaskGetTickCountFromISR>
 80069d6:	4603      	mov	r3, r0
 80069d8:	e002      	b.n	80069e0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80069da:	f001 fc3f 	bl	800825c <xTaskGetTickCount>
 80069de:	4603      	mov	r3, r0
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685c      	ldr	r4, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069fa:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ffad 	bl	8006962 <makeFreeRtosPriority>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	9200      	str	r2, [sp, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	4632      	mov	r2, r6
 8006a16:	4629      	mov	r1, r5
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f001 f931 	bl	8007c80 <xTaskCreate>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <osDelay+0x16>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	e000      	b.n	8006a4a <osDelay+0x18>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 fad4 	bl	8007ff8 <vTaskDelay>
  
  return osOK;
 8006a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8006a62:	2001      	movs	r0, #1
 8006a64:	f000 fafe 	bl	8007064 <xQueueCreateMutex>
 8006a68:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <osMutexWait+0x18>
    return osErrorParameter;
 8006a88:	2380      	movs	r3, #128	@ 0x80
 8006a8a:	e03a      	b.n	8006b02 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d103      	bne.n	8006aa0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e009      	b.n	8006ab4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d006      	beq.n	8006ab4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <osMutexWait+0x40>
      ticks = 1;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ab4:	f7ff ff6d 	bl	8006992 <inHandlerMode>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d017      	beq.n	8006aee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006abe:	f107 0308 	add.w	r3, r7, #8
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 ff2a 	bl	8007920 <xQueueReceiveFromISR>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d001      	beq.n	8006ad6 <osMutexWait+0x62>
      return osErrorOS;
 8006ad2:	23ff      	movs	r3, #255	@ 0xff
 8006ad4:	e015      	b.n	8006b02 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d011      	beq.n	8006b00 <osMutexWait+0x8c>
 8006adc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <osMutexWait+0x98>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e008      	b.n	8006b00 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fdfd 	bl	80076f0 <xQueueSemaphoreTake>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d001      	beq.n	8006b00 <osMutexWait+0x8c>
    return osErrorOS;
 8006afc:	23ff      	movs	r3, #255	@ 0xff
 8006afe:	e000      	b.n	8006b02 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	e000ed04 	.word	0xe000ed04

08006b10 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006b20:	f7ff ff37 	bl	8006992 <inHandlerMode>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d016      	beq.n	8006b58 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fc5c 	bl	80073ee <xQueueGiveFromISR>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d001      	beq.n	8006b40 <osMutexRelease+0x30>
      return osErrorOS;
 8006b3c:	23ff      	movs	r3, #255	@ 0xff
 8006b3e:	e017      	b.n	8006b70 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d013      	beq.n	8006b6e <osMutexRelease+0x5e>
 8006b46:	4b0c      	ldr	r3, [pc, #48]	@ (8006b78 <osMutexRelease+0x68>)
 8006b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	e00a      	b.n	8006b6e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa98 	bl	8007094 <xQueueGenericSend>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d001      	beq.n	8006b6e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006b6a:	23ff      	movs	r3, #255	@ 0xff
 8006b6c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4619      	mov	r1, r3
 8006b92:	f000 f9ef 	bl	8006f74 <xQueueGenericCreate>
 8006b96:	4603      	mov	r3, r0
#endif
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <osMessagePut+0x1e>
    ticks = 1;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006bbe:	f7ff fee8 	bl	8006992 <inHandlerMode>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d018      	beq.n	8006bfa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006bc8:	f107 0210 	add.w	r2, r7, #16
 8006bcc:	f107 0108 	add.w	r1, r7, #8
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fb68 	bl	80072a8 <xQueueGenericSendFromISR>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d001      	beq.n	8006be2 <osMessagePut+0x42>
      return osErrorOS;
 8006bde:	23ff      	movs	r3, #255	@ 0xff
 8006be0:	e018      	b.n	8006c14 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d014      	beq.n	8006c12 <osMessagePut+0x72>
 8006be8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <osMessagePut+0x7c>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	e00b      	b.n	8006c12 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006bfa:	f107 0108 	add.w	r1, r7, #8
 8006bfe:	2300      	movs	r3, #0
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fa46 	bl	8007094 <xQueueGenericSend>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d001      	beq.n	8006c12 <osMessagePut+0x72>
      return osErrorOS;
 8006c0e:	23ff      	movs	r3, #255	@ 0xff
 8006c10:	e000      	b.n	8006c14 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b08b      	sub	sp, #44	@ 0x2c
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006c3a:	2380      	movs	r3, #128	@ 0x80
 8006c3c:	617b      	str	r3, [r7, #20]
    return event;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	461c      	mov	r4, r3
 8006c42:	f107 0314 	add.w	r3, r7, #20
 8006c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c4e:	e054      	b.n	8006cfa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5e:	d103      	bne.n	8006c68 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006c60:	f04f 33ff 	mov.w	r3, #4294967295
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c66:	e009      	b.n	8006c7c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d006      	beq.n	8006c7c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <osMessageGet+0x5c>
      ticks = 1;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006c7c:	f7ff fe89 	bl	8006992 <inHandlerMode>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d01c      	beq.n	8006cc0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006c86:	f107 0220 	add.w	r2, r7, #32
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	68b8      	ldr	r0, [r7, #8]
 8006c94:	f000 fe44 	bl	8007920 <xQueueReceiveFromISR>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d102      	bne.n	8006ca4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e001      	b.n	8006ca8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01d      	beq.n	8006cea <osMessageGet+0xca>
 8006cae:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <osMessageGet+0xe4>)
 8006cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	e014      	b.n	8006cea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc8:	4619      	mov	r1, r3
 8006cca:	68b8      	ldr	r0, [r7, #8]
 8006ccc:	f000 fc28 	bl	8007520 <xQueueReceive>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d102      	bne.n	8006cdc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e006      	b.n	8006cea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <osMessageGet+0xc6>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e000      	b.n	8006ce8 <osMessageGet+0xc8>
 8006ce6:	2340      	movs	r3, #64	@ 0x40
 8006ce8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	461c      	mov	r4, r3
 8006cee:	f107 0314 	add.w	r3, r7, #20
 8006cf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	372c      	adds	r7, #44	@ 0x2c
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd90      	pop	{r4, r7, pc}
 8006d02:	bf00      	nop
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <osDelayUntil+0x18>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	e000      	b.n	8006d22 <osDelayUntil+0x1a>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f8e1 	bl	8007eec <vTaskDelayUntil>
  
  return osOK;
 8006d2a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f103 0208 	add.w	r2, r3, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f103 0208 	add.w	r2, r3, #8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f103 0208 	add.w	r2, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d103      	bne.n	8006df6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e00c      	b.n	8006e10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e002      	b.n	8006e04 <vListInsert+0x2e>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d2f6      	bcs.n	8006dfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6892      	ldr	r2, [r2, #8]
 8006e5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6852      	ldr	r2, [r2, #4]
 8006e68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d103      	bne.n	8006e7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1e5a      	subs	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10d      	bne.n	8006ecc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	b672      	cpsid	i
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	b662      	cpsie	i
 8006ec4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006ecc:	f002 f826 	bl	8008f1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	68f9      	ldr	r1, [r7, #12]
 8006eda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efc:	3b01      	subs	r3, #1
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f02:	fb01 f303 	mul.w	r3, r1, r3
 8006f06:	441a      	add	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	22ff      	movs	r2, #255	@ 0xff
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	22ff      	movs	r2, #255	@ 0xff
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d114      	bne.n	8006f4c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01a      	beq.n	8006f60 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3310      	adds	r3, #16
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 faf8 	bl	8008524 <xTaskRemoveFromEventList>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d012      	beq.n	8006f60 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <xQueueGenericReset+0xd4>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	e009      	b.n	8006f60 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3310      	adds	r3, #16
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff feef 	bl	8006d34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3324      	adds	r3, #36	@ 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff feea 	bl	8006d34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f60:	f002 f812 	bl	8008f88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f64:	2301      	movs	r3, #1
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	@ 0x28
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10d      	bne.n	8006fa4 <xQueueGenericCreate+0x30>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	b672      	cpsid	i
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	b662      	cpsie	i
 8006f9c:	613b      	str	r3, [r7, #16]
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	e004      	b.n	8006fba <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	fb02 f303 	mul.w	r3, r2, r3
 8006fb8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	3348      	adds	r3, #72	@ 0x48
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 f8da 	bl	8009178 <pvPortMalloc>
 8006fc4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00d      	beq.n	8006fe8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3348      	adds	r3, #72	@ 0x48
 8006fd4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f805 	bl	8006ff2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
	}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e002      	b.n	8007014 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007020:	2101      	movs	r1, #1
 8007022:	69b8      	ldr	r0, [r7, #24]
 8007024:	f7ff ff3a 	bl	8006e9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00e      	beq.n	800705c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007050:	2300      	movs	r3, #0
 8007052:	2200      	movs	r2, #0
 8007054:	2100      	movs	r1, #0
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f81c 	bl	8007094 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	461a      	mov	r2, r3
 800707a:	6939      	ldr	r1, [r7, #16]
 800707c:	6978      	ldr	r0, [r7, #20]
 800707e:	f7ff ff79 	bl	8006f74 <xQueueGenericCreate>
 8007082:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff ffd3 	bl	8007030 <prvInitialiseMutex>

		return xNewQueue;
 800708a:	68fb      	ldr	r3, [r7, #12]
	}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08e      	sub	sp, #56	@ 0x38
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070a2:	2300      	movs	r3, #0
 80070a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10d      	bne.n	80070cc <xQueueGenericSend+0x38>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b4:	b672      	cpsid	i
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	b662      	cpsie	i
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <xQueueGenericSend+0x46>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xQueueGenericSend+0x4a>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericSend+0x4c>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10d      	bne.n	8007100 <xQueueGenericSend+0x6c>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d103      	bne.n	800710e <xQueueGenericSend+0x7a>
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <xQueueGenericSend+0x7e>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <xQueueGenericSend+0x80>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10d      	bne.n	8007134 <xQueueGenericSend+0xa0>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711c:	b672      	cpsid	i
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	b662      	cpsie	i
 800712c:	623b      	str	r3, [r7, #32]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007134:	f001 fb9c 	bl	8008870 <xTaskGetSchedulerState>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <xQueueGenericSend+0xb0>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <xQueueGenericSend+0xb4>
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <xQueueGenericSend+0xb6>
 8007148:	2300      	movs	r3, #0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <xQueueGenericSend+0xd6>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	b672      	cpsid	i
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	b662      	cpsie	i
 8007162:	61fb      	str	r3, [r7, #28]
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	e7fd      	b.n	8007166 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800716a:	f001 fed7 	bl	8008f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007176:	429a      	cmp	r2, r3
 8007178:	d302      	bcc.n	8007180 <xQueueGenericSend+0xec>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b02      	cmp	r3, #2
 800717e:	d129      	bne.n	80071d4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007186:	f000 fc6b 	bl	8007a60 <prvCopyDataToQueue>
 800718a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	3324      	adds	r3, #36	@ 0x24
 8007198:	4618      	mov	r0, r3
 800719a:	f001 f9c3 	bl	8008524 <xTaskRemoveFromEventList>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d013      	beq.n	80071cc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071a4:	4b3f      	ldr	r3, [pc, #252]	@ (80072a4 <xQueueGenericSend+0x210>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	e00a      	b.n	80071cc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071bc:	4b39      	ldr	r3, [pc, #228]	@ (80072a4 <xQueueGenericSend+0x210>)
 80071be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071cc:	f001 fedc 	bl	8008f88 <vPortExitCritical>
				return pdPASS;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e063      	b.n	800729c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071da:	f001 fed5 	bl	8008f88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	e05c      	b.n	800729c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d106      	bne.n	80071f6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071e8:	f107 0314 	add.w	r3, r7, #20
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f9ff 	bl	80085f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f2:	2301      	movs	r3, #1
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071f6:	f001 fec7 	bl	8008f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071fa:	f000 ff81 	bl	8008100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071fe:	f001 fe8d 	bl	8008f1c <vPortEnterCritical>
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007208:	b25b      	sxtb	r3, r3
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d103      	bne.n	8007218 <xQueueGenericSend+0x184>
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800721e:	b25b      	sxtb	r3, r3
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d103      	bne.n	800722e <xQueueGenericSend+0x19a>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800722e:	f001 feab 	bl	8008f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007232:	1d3a      	adds	r2, r7, #4
 8007234:	f107 0314 	add.w	r3, r7, #20
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f001 f9ee 	bl	800861c <xTaskCheckForTimeOut>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d124      	bne.n	8007290 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007246:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007248:	f000 fd02 	bl	8007c50 <prvIsQueueFull>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d018      	beq.n	8007284 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	3310      	adds	r3, #16
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f001 f93a 	bl	80084d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007262:	f000 fc8d 	bl	8007b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007266:	f000 ff59 	bl	800811c <xTaskResumeAll>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	f47f af7c 	bne.w	800716a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007272:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <xQueueGenericSend+0x210>)
 8007274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	e772      	b.n	800716a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007286:	f000 fc7b 	bl	8007b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800728a:	f000 ff47 	bl	800811c <xTaskResumeAll>
 800728e:	e76c      	b.n	800716a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007292:	f000 fc75 	bl	8007b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007296:	f000 ff41 	bl	800811c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800729a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800729c:	4618      	mov	r0, r3
 800729e:	3738      	adds	r7, #56	@ 0x38
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	@ 0x38
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10d      	bne.n	80072dc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	b672      	cpsid	i
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	b662      	cpsie	i
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <xQueueGenericSendFromISR+0x42>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <xQueueGenericSendFromISR+0x46>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <xQueueGenericSendFromISR+0x48>
 80072ee:	2300      	movs	r3, #0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f8:	b672      	cpsid	i
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	b662      	cpsie	i
 8007308:	623b      	str	r3, [r7, #32]
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	e7fd      	b.n	800730c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d103      	bne.n	800731e <xQueueGenericSendFromISR+0x76>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <xQueueGenericSendFromISR+0x7a>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <xQueueGenericSendFromISR+0x7c>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10d      	bne.n	8007344 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	61fb      	str	r3, [r7, #28]
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007344:	f001 fed2 	bl	80090ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007348:	f3ef 8211 	mrs	r2, BASEPRI
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	61ba      	str	r2, [r7, #24]
 8007362:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007364:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007370:	429a      	cmp	r2, r3
 8007372:	d302      	bcc.n	800737a <xQueueGenericSendFromISR+0xd2>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d12c      	bne.n	80073d4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800738a:	f000 fb69 	bl	8007a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800738e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d112      	bne.n	80073be <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d016      	beq.n	80073ce <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	3324      	adds	r3, #36	@ 0x24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f8bd 	bl	8008524 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	e007      	b.n	80073ce <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073c2:	3301      	adds	r3, #1
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	b25a      	sxtb	r2, r3
 80073c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80073ce:	2301      	movs	r3, #1
 80073d0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80073d2:	e001      	b.n	80073d8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3738      	adds	r7, #56	@ 0x38
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b08e      	sub	sp, #56	@ 0x38
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10d      	bne.n	800741e <xQueueGiveFromISR+0x30>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	b672      	cpsid	i
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	b662      	cpsie	i
 8007416:	623b      	str	r3, [r7, #32]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00d      	beq.n	8007442 <xQueueGiveFromISR+0x54>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	b672      	cpsid	i
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	b662      	cpsie	i
 800743a:	61fb      	str	r3, [r7, #28]
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	e7fd      	b.n	800743e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <xQueueGiveFromISR+0x64>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xQueueGiveFromISR+0x68>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <xQueueGiveFromISR+0x6a>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	b672      	cpsid	i
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	b662      	cpsie	i
 8007470:	61bb      	str	r3, [r7, #24]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007478:	f001 fe38 	bl	80090ec <vPortValidateInterruptPriority>
	__asm volatile
 800747c:	f3ef 8211 	mrs	r2, BASEPRI
 8007480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007484:	b672      	cpsid	i
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	b662      	cpsie	i
 8007494:	617a      	str	r2, [r7, #20]
 8007496:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007498:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800749a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d22b      	bcs.n	8007504 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d112      	bne.n	80074ee <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d016      	beq.n	80074fe <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	3324      	adds	r3, #36	@ 0x24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 f825 	bl	8008524 <xTaskRemoveFromEventList>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00e      	beq.n	80074fe <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	e007      	b.n	80074fe <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074f2:	3301      	adds	r3, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	b25a      	sxtb	r2, r3
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80074fe:	2301      	movs	r3, #1
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
 8007502:	e001      	b.n	8007508 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007504:	2300      	movs	r3, #0
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f383 8811 	msr	BASEPRI, r3
}
 8007512:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007516:	4618      	mov	r0, r3
 8007518:	3738      	adds	r7, #56	@ 0x38
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08c      	sub	sp, #48	@ 0x30
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10d      	bne.n	8007556 <xQueueReceive+0x36>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753e:	b672      	cpsid	i
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	b662      	cpsie	i
 800754e:	623b      	str	r3, [r7, #32]
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	e7fd      	b.n	8007552 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <xQueueReceive+0x44>
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <xQueueReceive+0x48>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <xQueueReceive+0x4a>
 8007568:	2300      	movs	r3, #0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10d      	bne.n	800758a <xQueueReceive+0x6a>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	b672      	cpsid	i
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	b662      	cpsie	i
 8007582:	61fb      	str	r3, [r7, #28]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800758a:	f001 f971 	bl	8008870 <xTaskGetSchedulerState>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <xQueueReceive+0x7a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <xQueueReceive+0x7e>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <xQueueReceive+0x80>
 800759e:	2300      	movs	r3, #0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10d      	bne.n	80075c0 <xQueueReceive+0xa0>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	b672      	cpsid	i
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	b662      	cpsie	i
 80075b8:	61bb      	str	r3, [r7, #24]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075c0:	f001 fcac 	bl	8008f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01f      	beq.n	8007610 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d4:	f000 faae 	bl	8007b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	1e5a      	subs	r2, r3, #1
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00f      	beq.n	8007608 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ea:	3310      	adds	r3, #16
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 ff99 	bl	8008524 <xTaskRemoveFromEventList>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075f8:	4b3c      	ldr	r3, [pc, #240]	@ (80076ec <xQueueReceive+0x1cc>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007608:	f001 fcbe 	bl	8008f88 <vPortExitCritical>
				return pdPASS;
 800760c:	2301      	movs	r3, #1
 800760e:	e069      	b.n	80076e4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007616:	f001 fcb7 	bl	8008f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800761a:	2300      	movs	r3, #0
 800761c:	e062      	b.n	80076e4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007624:	f107 0310 	add.w	r3, r7, #16
 8007628:	4618      	mov	r0, r3
 800762a:	f000 ffe1 	bl	80085f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007632:	f001 fca9 	bl	8008f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007636:	f000 fd63 	bl	8008100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800763a:	f001 fc6f 	bl	8008f1c <vPortEnterCritical>
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007644:	b25b      	sxtb	r3, r3
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d103      	bne.n	8007654 <xQueueReceive+0x134>
 800764c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800765a:	b25b      	sxtb	r3, r3
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d103      	bne.n	800766a <xQueueReceive+0x14a>
 8007662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800766a:	f001 fc8d 	bl	8008f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800766e:	1d3a      	adds	r2, r7, #4
 8007670:	f107 0310 	add.w	r3, r7, #16
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f000 ffd0 	bl	800861c <xTaskCheckForTimeOut>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d123      	bne.n	80076ca <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007684:	f000 face 	bl	8007c24 <prvIsQueueEmpty>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d017      	beq.n	80076be <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	3324      	adds	r3, #36	@ 0x24
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 ff1c 	bl	80084d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800769c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800769e:	f000 fa6f 	bl	8007b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076a2:	f000 fd3b 	bl	800811c <xTaskResumeAll>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d189      	bne.n	80075c0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80076ac:	4b0f      	ldr	r3, [pc, #60]	@ (80076ec <xQueueReceive+0x1cc>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	e780      	b.n	80075c0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076c0:	f000 fa5e 	bl	8007b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076c4:	f000 fd2a 	bl	800811c <xTaskResumeAll>
 80076c8:	e77a      	b.n	80075c0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076cc:	f000 fa58 	bl	8007b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076d0:	f000 fd24 	bl	800811c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d6:	f000 faa5 	bl	8007c24 <prvIsQueueEmpty>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f43f af6f 	beq.w	80075c0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3730      	adds	r7, #48	@ 0x30
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08e      	sub	sp, #56	@ 0x38
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007702:	2300      	movs	r3, #0
 8007704:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	b672      	cpsid	i
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	b662      	cpsie	i
 8007720:	623b      	str	r3, [r7, #32]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	b672      	cpsid	i
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	b662      	cpsie	i
 8007744:	61fb      	str	r3, [r7, #28]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800774c:	f001 f890 	bl	8008870 <xTaskGetSchedulerState>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <xQueueSemaphoreTake+0x6c>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <xQueueSemaphoreTake+0x70>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <xQueueSemaphoreTake+0x72>
 8007760:	2300      	movs	r3, #0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10d      	bne.n	8007782 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	b672      	cpsid	i
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	b662      	cpsie	i
 800777a:	61bb      	str	r3, [r7, #24]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007782:	f001 fbcb 	bl	8008f1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800778c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778e:	2b00      	cmp	r3, #0
 8007790:	d024      	beq.n	80077dc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077a2:	f001 fa2f 	bl	8008c04 <pvTaskIncrementMutexHeldCount>
 80077a6:	4602      	mov	r2, r0
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00f      	beq.n	80077d4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b6:	3310      	adds	r3, #16
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 feb3 	bl	8008524 <xTaskRemoveFromEventList>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077c4:	4b55      	ldr	r3, [pc, #340]	@ (800791c <xQueueSemaphoreTake+0x22c>)
 80077c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077d4:	f001 fbd8 	bl	8008f88 <vPortExitCritical>
				return pdPASS;
 80077d8:	2301      	movs	r3, #1
 80077da:	e09a      	b.n	8007912 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d114      	bne.n	800780c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00d      	beq.n	8007804 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	b672      	cpsid	i
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	b662      	cpsie	i
 80077fc:	617b      	str	r3, [r7, #20]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007804:	f001 fbc0 	bl	8008f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007808:	2300      	movs	r3, #0
 800780a:	e082      	b.n	8007912 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800780c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007812:	f107 030c 	add.w	r3, r7, #12
 8007816:	4618      	mov	r0, r3
 8007818:	f000 feea 	bl	80085f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800781c:	2301      	movs	r3, #1
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007820:	f001 fbb2 	bl	8008f88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007824:	f000 fc6c 	bl	8008100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007828:	f001 fb78 	bl	8008f1c <vPortEnterCritical>
 800782c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007832:	b25b      	sxtb	r3, r3
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d103      	bne.n	8007842 <xQueueSemaphoreTake+0x152>
 800783a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007848:	b25b      	sxtb	r3, r3
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d103      	bne.n	8007858 <xQueueSemaphoreTake+0x168>
 8007850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007858:	f001 fb96 	bl	8008f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800785c:	463a      	mov	r2, r7
 800785e:	f107 030c 	add.w	r3, r7, #12
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fed9 	bl	800861c <xTaskCheckForTimeOut>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d132      	bne.n	80078d6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007872:	f000 f9d7 	bl	8007c24 <prvIsQueueEmpty>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d026      	beq.n	80078ca <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007884:	f001 fb4a 	bl	8008f1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4618      	mov	r0, r3
 800788e:	f001 f80d 	bl	80088ac <xTaskPriorityInherit>
 8007892:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007894:	f001 fb78 	bl	8008f88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	3324      	adds	r3, #36	@ 0x24
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fe17 	bl	80084d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078a8:	f000 f96a 	bl	8007b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078ac:	f000 fc36 	bl	800811c <xTaskResumeAll>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f47f af65 	bne.w	8007782 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80078b8:	4b18      	ldr	r3, [pc, #96]	@ (800791c <xQueueSemaphoreTake+0x22c>)
 80078ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	e75b      	b.n	8007782 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078cc:	f000 f958 	bl	8007b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078d0:	f000 fc24 	bl	800811c <xTaskResumeAll>
 80078d4:	e755      	b.n	8007782 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078d8:	f000 f952 	bl	8007b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078dc:	f000 fc1e 	bl	800811c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078e2:	f000 f99f 	bl	8007c24 <prvIsQueueEmpty>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f43f af4a 	beq.w	8007782 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00d      	beq.n	8007910 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80078f4:	f001 fb12 	bl	8008f1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078fa:	f000 f899 	bl	8007a30 <prvGetDisinheritPriorityAfterTimeout>
 80078fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007906:	4618      	mov	r0, r3
 8007908:	f001 f8dc 	bl	8008ac4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800790c:	f001 fb3c 	bl	8008f88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007910:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007912:	4618      	mov	r0, r3
 8007914:	3738      	adds	r7, #56	@ 0x38
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08e      	sub	sp, #56	@ 0x38
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	623b      	str	r3, [r7, #32]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <xQueueReceiveFromISR+0x40>
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <xQueueReceiveFromISR+0x44>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <xQueueReceiveFromISR+0x46>
 8007964:	2300      	movs	r3, #0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10d      	bne.n	8007986 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796e:	b672      	cpsid	i
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	b662      	cpsie	i
 800797e:	61fb      	str	r3, [r7, #28]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007986:	f001 fbb1 	bl	80090ec <vPortValidateInterruptPriority>
	__asm volatile
 800798a:	f3ef 8211 	mrs	r2, BASEPRI
 800798e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007992:	b672      	cpsid	i
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	b662      	cpsie	i
 80079a2:	61ba      	str	r2, [r7, #24]
 80079a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d02f      	beq.n	8007a16 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079c4:	f000 f8b6 	bl	8007b34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	1e5a      	subs	r2, r3, #1
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d112      	bne.n	8007a00 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d016      	beq.n	8007a10 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	3310      	adds	r3, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fd9c 	bl	8008524 <xTaskRemoveFromEventList>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00e      	beq.n	8007a10 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e007      	b.n	8007a10 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a04:	3301      	adds	r3, #1
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	b25a      	sxtb	r2, r3
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007a10:	2301      	movs	r3, #1
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a14:	e001      	b.n	8007a1a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f383 8811 	msr	BASEPRI, r3
}
 8007a24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3738      	adds	r7, #56	@ 0x38
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1c3 0307 	rsb	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	e001      	b.n	8007a52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a52:	68fb      	ldr	r3, [r7, #12]
	}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10d      	bne.n	8007a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d14d      	bne.n	8007b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 ff8e 	bl	80089ac <xTaskPriorityDisinherit>
 8007a90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	609a      	str	r2, [r3, #8]
 8007a98:	e043      	b.n	8007b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d119      	bne.n	8007ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6858      	ldr	r0, [r3, #4]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	f002 fea2 	bl	800a7f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d32b      	bcc.n	8007b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	e026      	b.n	8007b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68d8      	ldr	r0, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007adc:	461a      	mov	r2, r3
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	f002 fe88 	bl	800a7f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aec:	425b      	negs	r3, r3
 8007aee:	441a      	add	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d207      	bcs.n	8007b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b08:	425b      	negs	r3, r3
 8007b0a:	441a      	add	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d105      	bne.n	8007b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007b2a:	697b      	ldr	r3, [r7, #20]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d018      	beq.n	8007b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	441a      	add	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d303      	bcc.n	8007b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68d9      	ldr	r1, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b70:	461a      	mov	r2, r3
 8007b72:	6838      	ldr	r0, [r7, #0]
 8007b74:	f002 fe3e 	bl	800a7f4 <memcpy>
	}
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b88:	f001 f9c8 	bl	8008f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b94:	e011      	b.n	8007bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d012      	beq.n	8007bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3324      	adds	r3, #36	@ 0x24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fcbe 	bl	8008524 <xTaskRemoveFromEventList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bae:	f000 fd9d 	bl	80086ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dce9      	bgt.n	8007b96 <prvUnlockQueue+0x16>
 8007bc2:	e000      	b.n	8007bc6 <prvUnlockQueue+0x46>
					break;
 8007bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	22ff      	movs	r2, #255	@ 0xff
 8007bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007bce:	f001 f9db 	bl	8008f88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bd2:	f001 f9a3 	bl	8008f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bde:	e011      	b.n	8007c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d012      	beq.n	8007c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3310      	adds	r3, #16
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fc99 	bl	8008524 <xTaskRemoveFromEventList>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bf8:	f000 fd78 	bl	80086ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dce9      	bgt.n	8007be0 <prvUnlockQueue+0x60>
 8007c0c:	e000      	b.n	8007c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	22ff      	movs	r2, #255	@ 0xff
 8007c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007c18:	f001 f9b6 	bl	8008f88 <vPortExitCritical>
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c2c:	f001 f976 	bl	8008f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e001      	b.n	8007c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c42:	f001 f9a1 	bl	8008f88 <vPortExitCritical>

	return xReturn;
 8007c46:	68fb      	ldr	r3, [r7, #12]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c58:	f001 f960 	bl	8008f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d102      	bne.n	8007c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e001      	b.n	8007c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c72:	f001 f989 	bl	8008f88 <vPortExitCritical>

	return xReturn;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08c      	sub	sp, #48	@ 0x30
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 fa6f 	bl	8009178 <pvPortMalloc>
 8007c9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ca2:	2054      	movs	r0, #84	@ 0x54
 8007ca4:	f001 fa68 	bl	8009178 <pvPortMalloc>
 8007ca8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cb6:	e005      	b.n	8007cc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cb8:	6978      	ldr	r0, [r7, #20]
 8007cba:	f001 fb2b 	bl	8009314 <vPortFree>
 8007cbe:	e001      	b.n	8007cc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cca:	88fa      	ldrh	r2, [r7, #6]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	9302      	str	r3, [sp, #8]
 8007cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f80e 	bl	8007d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ce6:	69f8      	ldr	r0, [r7, #28]
 8007ce8:	f000 f896 	bl	8007e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cec:	2301      	movs	r3, #1
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e002      	b.n	8007cf8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b088      	sub	sp, #32
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007d1a:	440b      	add	r3, r1
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f023 0307 	bic.w	r3, r3, #7
 8007d28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00d      	beq.n	8007d50 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	b672      	cpsid	i
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	b662      	cpsie	i
 8007d48:	617b      	str	r3, [r7, #20]
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	e7fd      	b.n	8007d4c <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01f      	beq.n	8007d96 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	e012      	b.n	8007d82 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	7819      	ldrb	r1, [r3, #0]
 8007d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	3334      	adds	r3, #52	@ 0x34
 8007d6c:	460a      	mov	r2, r1
 8007d6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d9e9      	bls.n	8007d5c <prvInitialiseNewTask+0x5a>
 8007d88:	e000      	b.n	8007d8c <prvInitialiseNewTask+0x8a>
			{
				break;
 8007d8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d94:	e003      	b.n	8007d9e <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	2b06      	cmp	r3, #6
 8007da2:	d901      	bls.n	8007da8 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007da4:	2306      	movs	r3, #6
 8007da6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	2200      	movs	r2, #0
 8007db8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe ffd8 	bl	8006d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe ffd3 	bl	8006d74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd6:	f1c3 0207 	rsb	r2, r3, #7
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007de2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2200      	movs	r2, #0
 8007de8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	69b8      	ldr	r0, [r7, #24]
 8007df8:	f000 ff7e 	bl	8008cf8 <pxPortInitialiseStack>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e0e:	bf00      	nop
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e20:	f001 f87c 	bl	8008f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e24:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed0 <prvAddNewTaskToReadyList+0xb8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	4a29      	ldr	r2, [pc, #164]	@ (8007ed0 <prvAddNewTaskToReadyList+0xb8>)
 8007e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ed4 <prvAddNewTaskToReadyList+0xbc>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e36:	4a27      	ldr	r2, [pc, #156]	@ (8007ed4 <prvAddNewTaskToReadyList+0xbc>)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e3c:	4b24      	ldr	r3, [pc, #144]	@ (8007ed0 <prvAddNewTaskToReadyList+0xb8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d110      	bne.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e44:	f000 fc76 	bl	8008734 <prvInitialiseTaskLists>
 8007e48:	e00d      	b.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e4a:	4b23      	ldr	r3, [pc, #140]	@ (8007ed8 <prvAddNewTaskToReadyList+0xc0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e52:	4b20      	ldr	r3, [pc, #128]	@ (8007ed4 <prvAddNewTaskToReadyList+0xbc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d802      	bhi.n	8007e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e60:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed4 <prvAddNewTaskToReadyList+0xbc>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e66:	4b1d      	ldr	r3, [pc, #116]	@ (8007edc <prvAddNewTaskToReadyList+0xc4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007edc <prvAddNewTaskToReadyList+0xc4>)
 8007e6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	2201      	movs	r2, #1
 8007e76:	409a      	lsls	r2, r3
 8007e78:	4b19      	ldr	r3, [pc, #100]	@ (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ee0 <prvAddNewTaskToReadyList+0xc8>)
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ee4 <prvAddNewTaskToReadyList+0xcc>)
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fe ff78 	bl	8006d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e9e:	f001 f873 	bl	8008f88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <prvAddNewTaskToReadyList+0xc0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00e      	beq.n	8007ec8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <prvAddNewTaskToReadyList+0xbc>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d207      	bcs.n	8007ec8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <prvAddNewTaskToReadyList+0xd0>)
 8007eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	2000085c 	.word	0x2000085c
 8007ed4:	2000075c 	.word	0x2000075c
 8007ed8:	20000868 	.word	0x20000868
 8007edc:	20000878 	.word	0x20000878
 8007ee0:	20000864 	.word	0x20000864
 8007ee4:	20000760 	.word	0x20000760
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10d      	bne.n	8007f1c <vTaskDelayUntil+0x30>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	617b      	str	r3, [r7, #20]
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10d      	bne.n	8007f3e <vTaskDelayUntil+0x52>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f26:	b672      	cpsid	i
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	b662      	cpsie	i
 8007f36:	613b      	str	r3, [r7, #16]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8007f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007fec <vTaskDelayUntil+0x100>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <vTaskDelayUntil+0x76>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	b672      	cpsid	i
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	b662      	cpsie	i
 8007f5a:	60fb      	str	r3, [r7, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8007f62:	f000 f8cd 	bl	8008100 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f66:	4b22      	ldr	r3, [pc, #136]	@ (8007ff0 <vTaskDelayUntil+0x104>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	4413      	add	r3, r2
 8007f74:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d20b      	bcs.n	8007f98 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d211      	bcs.n	8007fae <vTaskDelayUntil+0xc2>
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d90d      	bls.n	8007fae <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f96:	e00a      	b.n	8007fae <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d303      	bcc.n	8007faa <vTaskDelayUntil+0xbe>
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d901      	bls.n	8007fae <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d006      	beq.n	8007fc8 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fe32 	bl	8008c2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007fc8:	f000 f8a8 	bl	800811c <xTaskResumeAll>
 8007fcc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d107      	bne.n	8007fe4 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8007fd4:	4b07      	ldr	r3, [pc, #28]	@ (8007ff4 <vTaskDelayUntil+0x108>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fe4:	bf00      	nop
 8007fe6:	3728      	adds	r7, #40	@ 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000884 	.word	0x20000884
 8007ff0:	20000860 	.word	0x20000860
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01a      	beq.n	8008040 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800800a:	4b15      	ldr	r3, [pc, #84]	@ (8008060 <vTaskDelay+0x68>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <vTaskDelay+0x36>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	b672      	cpsid	i
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	b662      	cpsie	i
 8008026:	60bb      	str	r3, [r7, #8]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800802e:	f000 f867 	bl	8008100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fdf9 	bl	8008c2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800803a:	f000 f86f 	bl	800811c <xTaskResumeAll>
 800803e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d107      	bne.n	8008056 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008046:	4b07      	ldr	r3, [pc, #28]	@ (8008064 <vTaskDelay+0x6c>)
 8008048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000884 	.word	0x20000884
 8008064:	e000ed04 	.word	0xe000ed04

08008068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800806e:	4b1e      	ldr	r3, [pc, #120]	@ (80080e8 <vTaskStartScheduler+0x80>)
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	2300      	movs	r3, #0
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	2280      	movs	r2, #128	@ 0x80
 800807a:	491c      	ldr	r1, [pc, #112]	@ (80080ec <vTaskStartScheduler+0x84>)
 800807c:	481c      	ldr	r0, [pc, #112]	@ (80080f0 <vTaskStartScheduler+0x88>)
 800807e:	f7ff fdff 	bl	8007c80 <xTaskCreate>
 8008082:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d118      	bne.n	80080bc <vTaskStartScheduler+0x54>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	b672      	cpsid	i
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	b662      	cpsie	i
 800809e:	60bb      	str	r3, [r7, #8]
}
 80080a0:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080a2:	4b14      	ldr	r3, [pc, #80]	@ (80080f4 <vTaskStartScheduler+0x8c>)
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080aa:	4b13      	ldr	r3, [pc, #76]	@ (80080f8 <vTaskStartScheduler+0x90>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080b0:	4b12      	ldr	r3, [pc, #72]	@ (80080fc <vTaskStartScheduler+0x94>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080b6:	f000 feb3 	bl	8008e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080ba:	e011      	b.n	80080e0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d10d      	bne.n	80080e0 <vTaskStartScheduler+0x78>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c8:	b672      	cpsid	i
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	b662      	cpsie	i
 80080d8:	607b      	str	r3, [r7, #4]
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <vTaskStartScheduler+0x74>
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20000880 	.word	0x20000880
 80080ec:	0800a908 	.word	0x0800a908
 80080f0:	08008705 	.word	0x08008705
 80080f4:	2000087c 	.word	0x2000087c
 80080f8:	20000868 	.word	0x20000868
 80080fc:	20000860 	.word	0x20000860

08008100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008104:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <vTaskSuspendAll+0x18>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	4a03      	ldr	r2, [pc, #12]	@ (8008118 <vTaskSuspendAll+0x18>)
 800810c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20000884 	.word	0x20000884

0800811c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800812a:	4b43      	ldr	r3, [pc, #268]	@ (8008238 <xTaskResumeAll+0x11c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <xTaskResumeAll+0x32>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	603b      	str	r3, [r7, #0]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800814e:	f000 fee5 	bl	8008f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008152:	4b39      	ldr	r3, [pc, #228]	@ (8008238 <xTaskResumeAll+0x11c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3b01      	subs	r3, #1
 8008158:	4a37      	ldr	r2, [pc, #220]	@ (8008238 <xTaskResumeAll+0x11c>)
 800815a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815c:	4b36      	ldr	r3, [pc, #216]	@ (8008238 <xTaskResumeAll+0x11c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d161      	bne.n	8008228 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008164:	4b35      	ldr	r3, [pc, #212]	@ (800823c <xTaskResumeAll+0x120>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d05d      	beq.n	8008228 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800816c:	e02e      	b.n	80081cc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816e:	4b34      	ldr	r3, [pc, #208]	@ (8008240 <xTaskResumeAll+0x124>)
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3318      	adds	r3, #24
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fe64 	bl	8006e48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3304      	adds	r3, #4
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fe5f 	bl	8006e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	2201      	movs	r2, #1
 8008190:	409a      	lsls	r2, r3
 8008192:	4b2c      	ldr	r3, [pc, #176]	@ (8008244 <xTaskResumeAll+0x128>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4313      	orrs	r3, r2
 8008198:	4a2a      	ldr	r2, [pc, #168]	@ (8008244 <xTaskResumeAll+0x128>)
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4a27      	ldr	r2, [pc, #156]	@ (8008248 <xTaskResumeAll+0x12c>)
 80081aa:	441a      	add	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f7fe fdeb 	bl	8006d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081bc:	4b23      	ldr	r3, [pc, #140]	@ (800824c <xTaskResumeAll+0x130>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80081c6:	4b22      	ldr	r3, [pc, #136]	@ (8008250 <xTaskResumeAll+0x134>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008240 <xTaskResumeAll+0x124>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1cc      	bne.n	800816e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081da:	f000 fb29 	bl	8008830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80081de:	4b1d      	ldr	r3, [pc, #116]	@ (8008254 <xTaskResumeAll+0x138>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d010      	beq.n	800820c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081ea:	f000 f859 	bl	80082a0 <xTaskIncrementTick>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80081f4:	4b16      	ldr	r3, [pc, #88]	@ (8008250 <xTaskResumeAll+0x134>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f1      	bne.n	80081ea <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008206:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <xTaskResumeAll+0x138>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800820c:	4b10      	ldr	r3, [pc, #64]	@ (8008250 <xTaskResumeAll+0x134>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d009      	beq.n	8008228 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008214:	2301      	movs	r3, #1
 8008216:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008218:	4b0f      	ldr	r3, [pc, #60]	@ (8008258 <xTaskResumeAll+0x13c>)
 800821a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008228:	f000 feae 	bl	8008f88 <vPortExitCritical>

	return xAlreadyYielded;
 800822c:	68bb      	ldr	r3, [r7, #8]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000884 	.word	0x20000884
 800823c:	2000085c 	.word	0x2000085c
 8008240:	2000081c 	.word	0x2000081c
 8008244:	20000864 	.word	0x20000864
 8008248:	20000760 	.word	0x20000760
 800824c:	2000075c 	.word	0x2000075c
 8008250:	20000870 	.word	0x20000870
 8008254:	2000086c 	.word	0x2000086c
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008262:	4b05      	ldr	r3, [pc, #20]	@ (8008278 <xTaskGetTickCount+0x1c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008268:	687b      	ldr	r3, [r7, #4]
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000860 	.word	0x20000860

0800827c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008282:	f000 ff33 	bl	80090ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800828a:	4b04      	ldr	r3, [pc, #16]	@ (800829c <xTaskGetTickCountFromISR+0x20>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008290:	683b      	ldr	r3, [r7, #0]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000860 	.word	0x20000860

080082a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082aa:	4b50      	ldr	r3, [pc, #320]	@ (80083ec <xTaskIncrementTick+0x14c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f040 808b 	bne.w	80083ca <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082b4:	4b4e      	ldr	r3, [pc, #312]	@ (80083f0 <xTaskIncrementTick+0x150>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082bc:	4a4c      	ldr	r2, [pc, #304]	@ (80083f0 <xTaskIncrementTick+0x150>)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d123      	bne.n	8008310 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80082c8:	4b4a      	ldr	r3, [pc, #296]	@ (80083f4 <xTaskIncrementTick+0x154>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00d      	beq.n	80082ee <xTaskIncrementTick+0x4e>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d6:	b672      	cpsid	i
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	b662      	cpsie	i
 80082e6:	603b      	str	r3, [r7, #0]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <xTaskIncrementTick+0x4a>
 80082ee:	4b41      	ldr	r3, [pc, #260]	@ (80083f4 <xTaskIncrementTick+0x154>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	4b40      	ldr	r3, [pc, #256]	@ (80083f8 <xTaskIncrementTick+0x158>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a3e      	ldr	r2, [pc, #248]	@ (80083f4 <xTaskIncrementTick+0x154>)
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	4a3e      	ldr	r2, [pc, #248]	@ (80083f8 <xTaskIncrementTick+0x158>)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	4b3e      	ldr	r3, [pc, #248]	@ (80083fc <xTaskIncrementTick+0x15c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	4a3c      	ldr	r2, [pc, #240]	@ (80083fc <xTaskIncrementTick+0x15c>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	f000 fa90 	bl	8008830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008310:	4b3b      	ldr	r3, [pc, #236]	@ (8008400 <xTaskIncrementTick+0x160>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	429a      	cmp	r2, r3
 8008318:	d348      	bcc.n	80083ac <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831a:	4b36      	ldr	r3, [pc, #216]	@ (80083f4 <xTaskIncrementTick+0x154>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008324:	4b36      	ldr	r3, [pc, #216]	@ (8008400 <xTaskIncrementTick+0x160>)
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	601a      	str	r2, [r3, #0]
					break;
 800832c:	e03e      	b.n	80083ac <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832e:	4b31      	ldr	r3, [pc, #196]	@ (80083f4 <xTaskIncrementTick+0x154>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d203      	bcs.n	800834e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008346:	4a2e      	ldr	r2, [pc, #184]	@ (8008400 <xTaskIncrementTick+0x160>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800834c:	e02e      	b.n	80083ac <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	3304      	adds	r3, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fd78 	bl	8006e48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3318      	adds	r3, #24
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fd6f 	bl	8006e48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836e:	2201      	movs	r2, #1
 8008370:	409a      	lsls	r2, r3
 8008372:	4b24      	ldr	r3, [pc, #144]	@ (8008404 <xTaskIncrementTick+0x164>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4313      	orrs	r3, r2
 8008378:	4a22      	ldr	r2, [pc, #136]	@ (8008404 <xTaskIncrementTick+0x164>)
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4a1f      	ldr	r2, [pc, #124]	@ (8008408 <xTaskIncrementTick+0x168>)
 800838a:	441a      	add	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3304      	adds	r3, #4
 8008390:	4619      	mov	r1, r3
 8008392:	4610      	mov	r0, r2
 8008394:	f7fe fcfb 	bl	8006d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839c:	4b1b      	ldr	r3, [pc, #108]	@ (800840c <xTaskIncrementTick+0x16c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d3b9      	bcc.n	800831a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083aa:	e7b6      	b.n	800831a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083ac:	4b17      	ldr	r3, [pc, #92]	@ (800840c <xTaskIncrementTick+0x16c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b2:	4915      	ldr	r1, [pc, #84]	@ (8008408 <xTaskIncrementTick+0x168>)
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d907      	bls.n	80083d4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80083c4:	2301      	movs	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
 80083c8:	e004      	b.n	80083d4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80083ca:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <xTaskIncrementTick+0x170>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008410 <xTaskIncrementTick+0x170>)
 80083d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80083d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008414 <xTaskIncrementTick+0x174>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083e0:	697b      	ldr	r3, [r7, #20]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000884 	.word	0x20000884
 80083f0:	20000860 	.word	0x20000860
 80083f4:	20000814 	.word	0x20000814
 80083f8:	20000818 	.word	0x20000818
 80083fc:	20000874 	.word	0x20000874
 8008400:	2000087c 	.word	0x2000087c
 8008404:	20000864 	.word	0x20000864
 8008408:	20000760 	.word	0x20000760
 800840c:	2000075c 	.word	0x2000075c
 8008410:	2000086c 	.word	0x2000086c
 8008414:	20000870 	.word	0x20000870

08008418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800841e:	4b28      	ldr	r3, [pc, #160]	@ (80084c0 <vTaskSwitchContext+0xa8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008426:	4b27      	ldr	r3, [pc, #156]	@ (80084c4 <vTaskSwitchContext+0xac>)
 8008428:	2201      	movs	r2, #1
 800842a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800842c:	e042      	b.n	80084b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800842e:	4b25      	ldr	r3, [pc, #148]	@ (80084c4 <vTaskSwitchContext+0xac>)
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008434:	4b24      	ldr	r3, [pc, #144]	@ (80084c8 <vTaskSwitchContext+0xb0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	fab3 f383 	clz	r3, r3
 8008440:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	f1c3 031f 	rsb	r3, r3, #31
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	4920      	ldr	r1, [pc, #128]	@ (80084cc <vTaskSwitchContext+0xb4>)
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10d      	bne.n	800847a <vTaskSwitchContext+0x62>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	b672      	cpsid	i
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	b662      	cpsie	i
 8008472:	607b      	str	r3, [r7, #4]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <vTaskSwitchContext+0x5e>
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4a11      	ldr	r2, [pc, #68]	@ (80084cc <vTaskSwitchContext+0xb4>)
 8008486:	4413      	add	r3, r2
 8008488:	613b      	str	r3, [r7, #16]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	3308      	adds	r3, #8
 800849c:	429a      	cmp	r2, r3
 800849e:	d104      	bne.n	80084aa <vTaskSwitchContext+0x92>
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	4a07      	ldr	r2, [pc, #28]	@ (80084d0 <vTaskSwitchContext+0xb8>)
 80084b2:	6013      	str	r3, [r2, #0]
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	20000884 	.word	0x20000884
 80084c4:	20000870 	.word	0x20000870
 80084c8:	20000864 	.word	0x20000864
 80084cc:	20000760 	.word	0x20000760
 80084d0:	2000075c 	.word	0x2000075c

080084d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e8:	b672      	cpsid	i
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	b662      	cpsie	i
 80084f8:	60fb      	str	r3, [r7, #12]
}
 80084fa:	bf00      	nop
 80084fc:	bf00      	nop
 80084fe:	e7fd      	b.n	80084fc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008500:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <vTaskPlaceOnEventList+0x4c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3318      	adds	r3, #24
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fe fc64 	bl	8006dd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800850e:	2101      	movs	r1, #1
 8008510:	6838      	ldr	r0, [r7, #0]
 8008512:	f000 fb8b 	bl	8008c2c <prvAddCurrentTaskToDelayedList>
}
 8008516:	bf00      	nop
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000075c 	.word	0x2000075c

08008524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10d      	bne.n	8008556 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	b672      	cpsid	i
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	b662      	cpsie	i
 800854e:	60fb      	str	r3, [r7, #12]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	3318      	adds	r3, #24
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fc74 	bl	8006e48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008560:	4b1d      	ldr	r3, [pc, #116]	@ (80085d8 <xTaskRemoveFromEventList+0xb4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11c      	bne.n	80085a2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	3304      	adds	r3, #4
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe fc6b 	bl	8006e48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008576:	2201      	movs	r2, #1
 8008578:	409a      	lsls	r2, r3
 800857a:	4b18      	ldr	r3, [pc, #96]	@ (80085dc <xTaskRemoveFromEventList+0xb8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4313      	orrs	r3, r2
 8008580:	4a16      	ldr	r2, [pc, #88]	@ (80085dc <xTaskRemoveFromEventList+0xb8>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a13      	ldr	r2, [pc, #76]	@ (80085e0 <xTaskRemoveFromEventList+0xbc>)
 8008592:	441a      	add	r2, r3
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	3304      	adds	r3, #4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fbf7 	bl	8006d8e <vListInsertEnd>
 80085a0:	e005      	b.n	80085ae <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3318      	adds	r3, #24
 80085a6:	4619      	mov	r1, r3
 80085a8:	480e      	ldr	r0, [pc, #56]	@ (80085e4 <xTaskRemoveFromEventList+0xc0>)
 80085aa:	f7fe fbf0 	bl	8006d8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <xTaskRemoveFromEventList+0xc4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d905      	bls.n	80085c8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085c0:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <xTaskRemoveFromEventList+0xc8>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	e001      	b.n	80085cc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085cc:	697b      	ldr	r3, [r7, #20]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20000884 	.word	0x20000884
 80085dc:	20000864 	.word	0x20000864
 80085e0:	20000760 	.word	0x20000760
 80085e4:	2000081c 	.word	0x2000081c
 80085e8:	2000075c 	.word	0x2000075c
 80085ec:	20000870 	.word	0x20000870

080085f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085f8:	4b06      	ldr	r3, [pc, #24]	@ (8008614 <vTaskInternalSetTimeOutState+0x24>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008600:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <vTaskInternalSetTimeOutState+0x28>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	605a      	str	r2, [r3, #4]
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	20000874 	.word	0x20000874
 8008618:	20000860 	.word	0x20000860

0800861c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10d      	bne.n	8008648 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008630:	b672      	cpsid	i
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	b662      	cpsie	i
 8008640:	613b      	str	r3, [r7, #16]
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	e7fd      	b.n	8008644 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10d      	bne.n	800866a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	b672      	cpsid	i
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	b662      	cpsie	i
 8008662:	60fb      	str	r3, [r7, #12]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800866a:	f000 fc57 	bl	8008f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800866e:	4b1d      	ldr	r3, [pc, #116]	@ (80086e4 <xTaskCheckForTimeOut+0xc8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d102      	bne.n	800868e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e023      	b.n	80086d6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b15      	ldr	r3, [pc, #84]	@ (80086e8 <xTaskCheckForTimeOut+0xcc>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d007      	beq.n	80086aa <xTaskCheckForTimeOut+0x8e>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d302      	bcc.n	80086aa <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e015      	b.n	80086d6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d20b      	bcs.n	80086cc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff95 	bl	80085f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e004      	b.n	80086d6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086d6:	f000 fc57 	bl	8008f88 <vPortExitCritical>

	return xReturn;
 80086da:	69fb      	ldr	r3, [r7, #28]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000860 	.word	0x20000860
 80086e8:	20000874 	.word	0x20000874

080086ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086f0:	4b03      	ldr	r3, [pc, #12]	@ (8008700 <vTaskMissedYield+0x14>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	20000870 	.word	0x20000870

08008704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800870c:	f000 f852 	bl	80087b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008710:	4b06      	ldr	r3, [pc, #24]	@ (800872c <prvIdleTask+0x28>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d9f9      	bls.n	800870c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008718:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <prvIdleTask+0x2c>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008728:	e7f0      	b.n	800870c <prvIdleTask+0x8>
 800872a:	bf00      	nop
 800872c:	20000760 	.word	0x20000760
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800873a:	2300      	movs	r3, #0
 800873c:	607b      	str	r3, [r7, #4]
 800873e:	e00c      	b.n	800875a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a12      	ldr	r2, [pc, #72]	@ (8008794 <prvInitialiseTaskLists+0x60>)
 800874c:	4413      	add	r3, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe faf0 	bl	8006d34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b06      	cmp	r3, #6
 800875e:	d9ef      	bls.n	8008740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008760:	480d      	ldr	r0, [pc, #52]	@ (8008798 <prvInitialiseTaskLists+0x64>)
 8008762:	f7fe fae7 	bl	8006d34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008766:	480d      	ldr	r0, [pc, #52]	@ (800879c <prvInitialiseTaskLists+0x68>)
 8008768:	f7fe fae4 	bl	8006d34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800876c:	480c      	ldr	r0, [pc, #48]	@ (80087a0 <prvInitialiseTaskLists+0x6c>)
 800876e:	f7fe fae1 	bl	8006d34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008772:	480c      	ldr	r0, [pc, #48]	@ (80087a4 <prvInitialiseTaskLists+0x70>)
 8008774:	f7fe fade 	bl	8006d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008778:	480b      	ldr	r0, [pc, #44]	@ (80087a8 <prvInitialiseTaskLists+0x74>)
 800877a:	f7fe fadb 	bl	8006d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800877e:	4b0b      	ldr	r3, [pc, #44]	@ (80087ac <prvInitialiseTaskLists+0x78>)
 8008780:	4a05      	ldr	r2, [pc, #20]	@ (8008798 <prvInitialiseTaskLists+0x64>)
 8008782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008784:	4b0a      	ldr	r3, [pc, #40]	@ (80087b0 <prvInitialiseTaskLists+0x7c>)
 8008786:	4a05      	ldr	r2, [pc, #20]	@ (800879c <prvInitialiseTaskLists+0x68>)
 8008788:	601a      	str	r2, [r3, #0]
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000760 	.word	0x20000760
 8008798:	200007ec 	.word	0x200007ec
 800879c:	20000800 	.word	0x20000800
 80087a0:	2000081c 	.word	0x2000081c
 80087a4:	20000830 	.word	0x20000830
 80087a8:	20000848 	.word	0x20000848
 80087ac:	20000814 	.word	0x20000814
 80087b0:	20000818 	.word	0x20000818

080087b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087ba:	e019      	b.n	80087f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087bc:	f000 fbae 	bl	8008f1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c0:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <prvCheckTasksWaitingTermination+0x50>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fb3b 	bl	8006e48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008808 <prvCheckTasksWaitingTermination+0x54>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008808 <prvCheckTasksWaitingTermination+0x54>)
 80087da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087dc:	4b0b      	ldr	r3, [pc, #44]	@ (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	4a0a      	ldr	r2, [pc, #40]	@ (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087e6:	f000 fbcf 	bl	8008f88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f810 	bl	8008810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087f0:	4b06      	ldr	r3, [pc, #24]	@ (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e1      	bne.n	80087bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000830 	.word	0x20000830
 8008808:	2000085c 	.word	0x2000085c
 800880c:	20000844 	.word	0x20000844

08008810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fd79 	bl	8009314 <vPortFree>
			vPortFree( pxTCB );
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fd76 	bl	8009314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008836:	4b0c      	ldr	r3, [pc, #48]	@ (8008868 <prvResetNextTaskUnblockTime+0x38>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008840:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <prvResetNextTaskUnblockTime+0x3c>)
 8008842:	f04f 32ff 	mov.w	r2, #4294967295
 8008846:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008848:	e008      	b.n	800885c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884a:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <prvResetNextTaskUnblockTime+0x38>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a04      	ldr	r2, [pc, #16]	@ (800886c <prvResetNextTaskUnblockTime+0x3c>)
 800885a:	6013      	str	r3, [r2, #0]
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	20000814 	.word	0x20000814
 800886c:	2000087c 	.word	0x2000087c

08008870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008876:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <xTaskGetSchedulerState+0x34>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800887e:	2301      	movs	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	e008      	b.n	8008896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008884:	4b08      	ldr	r3, [pc, #32]	@ (80088a8 <xTaskGetSchedulerState+0x38>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800888c:	2302      	movs	r3, #2
 800888e:	607b      	str	r3, [r7, #4]
 8008890:	e001      	b.n	8008896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008892:	2300      	movs	r3, #0
 8008894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008896:	687b      	ldr	r3, [r7, #4]
	}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	20000868 	.word	0x20000868
 80088a8:	20000884 	.word	0x20000884

080088ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d069      	beq.n	8008996 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c6:	4b36      	ldr	r3, [pc, #216]	@ (80089a0 <xTaskPriorityInherit+0xf4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d259      	bcs.n	8008984 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	db06      	blt.n	80088e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d8:	4b31      	ldr	r3, [pc, #196]	@ (80089a0 <xTaskPriorityInherit+0xf4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	f1c3 0207 	rsb	r2, r3, #7
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6959      	ldr	r1, [r3, #20]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4a2b      	ldr	r2, [pc, #172]	@ (80089a4 <xTaskPriorityInherit+0xf8>)
 80088f8:	4413      	add	r3, r2
 80088fa:	4299      	cmp	r1, r3
 80088fc:	d13a      	bne.n	8008974 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe faa0 	bl	8006e48 <uxListRemove>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d115      	bne.n	800893a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008912:	4924      	ldr	r1, [pc, #144]	@ (80089a4 <xTaskPriorityInherit+0xf8>)
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <xTaskPriorityInherit+0x8e>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	2201      	movs	r2, #1
 800892a:	fa02 f303 	lsl.w	r3, r2, r3
 800892e:	43da      	mvns	r2, r3
 8008930:	4b1d      	ldr	r3, [pc, #116]	@ (80089a8 <xTaskPriorityInherit+0xfc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4013      	ands	r3, r2
 8008936:	4a1c      	ldr	r2, [pc, #112]	@ (80089a8 <xTaskPriorityInherit+0xfc>)
 8008938:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800893a:	4b19      	ldr	r3, [pc, #100]	@ (80089a0 <xTaskPriorityInherit+0xf4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008948:	2201      	movs	r2, #1
 800894a:	409a      	lsls	r2, r3
 800894c:	4b16      	ldr	r3, [pc, #88]	@ (80089a8 <xTaskPriorityInherit+0xfc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4313      	orrs	r3, r2
 8008952:	4a15      	ldr	r2, [pc, #84]	@ (80089a8 <xTaskPriorityInherit+0xfc>)
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895a:	4613      	mov	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4a10      	ldr	r2, [pc, #64]	@ (80089a4 <xTaskPriorityInherit+0xf8>)
 8008964:	441a      	add	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f7fe fa0e 	bl	8006d8e <vListInsertEnd>
 8008972:	e004      	b.n	800897e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008974:	4b0a      	ldr	r3, [pc, #40]	@ (80089a0 <xTaskPriorityInherit+0xf4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800897e:	2301      	movs	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e008      	b.n	8008996 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <xTaskPriorityInherit+0xf4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	429a      	cmp	r2, r3
 8008990:	d201      	bcs.n	8008996 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008996:	68fb      	ldr	r3, [r7, #12]
	}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	2000075c 	.word	0x2000075c
 80089a4:	20000760 	.word	0x20000760
 80089a8:	20000864 	.word	0x20000864

080089ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d074      	beq.n	8008aac <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089c2:	4b3d      	ldr	r3, [pc, #244]	@ (8008ab8 <xTaskPriorityDisinherit+0x10c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d00d      	beq.n	80089e8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	b672      	cpsid	i
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	b662      	cpsie	i
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	b672      	cpsid	i
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	b662      	cpsie	i
 8008a04:	60bb      	str	r3, [r7, #8]
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a10:	1e5a      	subs	r2, r3, #1
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d044      	beq.n	8008aac <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d140      	bne.n	8008aac <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fa0a 	bl	8006e48 <uxListRemove>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d115      	bne.n	8008a66 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3e:	491f      	ldr	r1, [pc, #124]	@ (8008abc <xTaskPriorityDisinherit+0x110>)
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10a      	bne.n	8008a66 <xTaskPriorityDisinherit+0xba>
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	2201      	movs	r2, #1
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	43da      	mvns	r2, r3
 8008a5c:	4b18      	ldr	r3, [pc, #96]	@ (8008ac0 <xTaskPriorityDisinherit+0x114>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4013      	ands	r3, r2
 8008a62:	4a17      	ldr	r2, [pc, #92]	@ (8008ac0 <xTaskPriorityDisinherit+0x114>)
 8008a64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a72:	f1c3 0207 	rsb	r2, r3, #7
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	2201      	movs	r2, #1
 8008a80:	409a      	lsls	r2, r3
 8008a82:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac0 <xTaskPriorityDisinherit+0x114>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	4a0d      	ldr	r2, [pc, #52]	@ (8008ac0 <xTaskPriorityDisinherit+0x114>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4a08      	ldr	r2, [pc, #32]	@ (8008abc <xTaskPriorityDisinherit+0x110>)
 8008a9a:	441a      	add	r2, r3
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe f973 	bl	8006d8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008aac:	697b      	ldr	r3, [r7, #20]
	}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	2000075c 	.word	0x2000075c
 8008abc:	20000760 	.word	0x20000760
 8008ac0:	20000864 	.word	0x20000864

08008ac4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8089 	beq.w	8008bf0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10d      	bne.n	8008b02 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	b672      	cpsid	i
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	b662      	cpsie	i
 8008afa:	60fb      	str	r3, [r7, #12]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d902      	bls.n	8008b12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	61fb      	str	r3, [r7, #28]
 8008b10:	e002      	b.n	8008b18 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d066      	beq.n	8008bf0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d161      	bne.n	8008bf0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b2c:	4b32      	ldr	r3, [pc, #200]	@ (8008bf8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d10d      	bne.n	8008b52 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3a:	b672      	cpsid	i
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	b662      	cpsie	i
 8008b4a:	60bb      	str	r3, [r7, #8]
}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	e7fd      	b.n	8008b4e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db04      	blt.n	8008b70 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f1c3 0207 	rsb	r2, r3, #7
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	6959      	ldr	r1, [r3, #20]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b80:	4413      	add	r3, r2
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d134      	bne.n	8008bf0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe f95c 	bl	8006e48 <uxListRemove>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d115      	bne.n	8008bc2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9a:	4918      	ldr	r1, [pc, #96]	@ (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	4b11      	ldr	r3, [pc, #68]	@ (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	4a10      	ldr	r2, [pc, #64]	@ (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008bc0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	409a      	lsls	r2, r3
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4a06      	ldr	r2, [pc, #24]	@ (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008be2:	441a      	add	r2, r3
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fe f8cf 	bl	8006d8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bf0:	bf00      	nop
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	2000075c 	.word	0x2000075c
 8008bfc:	20000760 	.word	0x20000760
 8008c00:	20000864 	.word	0x20000864

08008c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c08:	4b07      	ldr	r3, [pc, #28]	@ (8008c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c16:	3201      	adds	r2, #1
 8008c18:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008c1a:	4b03      	ldr	r3, [pc, #12]	@ (8008c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
	}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	2000075c 	.word	0x2000075c

08008c2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c36:	4b29      	ldr	r3, [pc, #164]	@ (8008cdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f900 	bl	8006e48 <uxListRemove>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c4e:	4b24      	ldr	r3, [pc, #144]	@ (8008ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c54:	2201      	movs	r2, #1
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	43da      	mvns	r2, r3
 8008c5c:	4b21      	ldr	r3, [pc, #132]	@ (8008ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4013      	ands	r3, r2
 8008c62:	4a20      	ldr	r2, [pc, #128]	@ (8008ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d10a      	bne.n	8008c84 <prvAddCurrentTaskToDelayedList+0x58>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d007      	beq.n	8008c84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	481a      	ldr	r0, [pc, #104]	@ (8008ce8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c7e:	f7fe f886 	bl	8006d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c82:	e026      	b.n	8008cd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c8c:	4b14      	ldr	r3, [pc, #80]	@ (8008ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d209      	bcs.n	8008cb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c9c:	4b13      	ldr	r3, [pc, #76]	@ (8008cec <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7fe f894 	bl	8006dd6 <vListInsert>
}
 8008cae:	e010      	b.n	8008cd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7fe f88a 	bl	8006dd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d202      	bcs.n	8008cd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ccc:	4a09      	ldr	r2, [pc, #36]	@ (8008cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6013      	str	r3, [r2, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000860 	.word	0x20000860
 8008ce0:	2000075c 	.word	0x2000075c
 8008ce4:	20000864 	.word	0x20000864
 8008ce8:	20000848 	.word	0x20000848
 8008cec:	20000818 	.word	0x20000818
 8008cf0:	20000814 	.word	0x20000814
 8008cf4:	2000087c 	.word	0x2000087c

08008cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3b04      	subs	r3, #4
 8008d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b04      	subs	r3, #4
 8008d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3b04      	subs	r3, #4
 8008d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d28:	4a0c      	ldr	r2, [pc, #48]	@ (8008d5c <pxPortInitialiseStack+0x64>)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3b14      	subs	r3, #20
 8008d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f06f 0202 	mvn.w	r2, #2
 8008d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3b20      	subs	r3, #32
 8008d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	08008d61 	.word	0x08008d61

08008d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d6a:	4b15      	ldr	r3, [pc, #84]	@ (8008dc0 <prvTaskExitError+0x60>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d00d      	beq.n	8008d90 <prvTaskExitError+0x30>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	b672      	cpsid	i
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	b662      	cpsie	i
 8008d88:	60fb      	str	r3, [r7, #12]
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <prvTaskExitError+0x2c>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d94:	b672      	cpsid	i
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	b662      	cpsie	i
 8008da4:	60bb      	str	r3, [r7, #8]
}
 8008da6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008da8:	bf00      	nop
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0fc      	beq.n	8008daa <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000003c 	.word	0x2000003c
	...

08008dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dd0:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <pxCurrentTCBConst2>)
 8008dd2:	6819      	ldr	r1, [r3, #0]
 8008dd4:	6808      	ldr	r0, [r1, #0]
 8008dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	f380 8809 	msr	PSP, r0
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	4770      	bx	lr
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst2>:
 8008df0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008df8:	4808      	ldr	r0, [pc, #32]	@ (8008e1c <prvPortStartFirstTask+0x24>)
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f380 8808 	msr	MSP, r0
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8814 	msr	CONTROL, r0
 8008e0a:	b662      	cpsie	i
 8008e0c:	b661      	cpsie	f
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	df00      	svc	0
 8008e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e1a:	bf00      	nop
 8008e1c:	e000ed08 	.word	0xe000ed08

08008e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e26:	4b37      	ldr	r3, [pc, #220]	@ (8008f04 <xPortStartScheduler+0xe4>)
 8008e28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	22ff      	movs	r2, #255	@ 0xff
 8008e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f08 <xPortStartScheduler+0xe8>)
 8008e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008e50:	2207      	movs	r2, #7
 8008e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e54:	e009      	b.n	8008e6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e56:	4b2d      	ldr	r3, [pc, #180]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e72:	2b80      	cmp	r3, #128	@ 0x80
 8008e74:	d0ef      	beq.n	8008e56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e76:	4b25      	ldr	r3, [pc, #148]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1c3 0307 	rsb	r3, r3, #7
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d00d      	beq.n	8008e9e <xPortStartScheduler+0x7e>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e86:	b672      	cpsid	i
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	b662      	cpsie	i
 8008e96:	60bb      	str	r3, [r7, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	4a19      	ldr	r2, [pc, #100]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ea8:	4b18      	ldr	r3, [pc, #96]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008eb0:	4a16      	ldr	r2, [pc, #88]	@ (8008f0c <xPortStartScheduler+0xec>)
 8008eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ebc:	4b14      	ldr	r3, [pc, #80]	@ (8008f10 <xPortStartScheduler+0xf0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a13      	ldr	r2, [pc, #76]	@ (8008f10 <xPortStartScheduler+0xf0>)
 8008ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ec8:	4b11      	ldr	r3, [pc, #68]	@ (8008f10 <xPortStartScheduler+0xf0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a10      	ldr	r2, [pc, #64]	@ (8008f10 <xPortStartScheduler+0xf0>)
 8008ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ed4:	f000 f8dc 	bl	8009090 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f14 <xPortStartScheduler+0xf4>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ede:	f000 f8fb 	bl	80090d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <xPortStartScheduler+0xf8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f18 <xPortStartScheduler+0xf8>)
 8008ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eee:	f7ff ff83 	bl	8008df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ef2:	f7ff fa91 	bl	8008418 <vTaskSwitchContext>
	prvTaskExitError();
 8008ef6:	f7ff ff33 	bl	8008d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	e000e400 	.word	0xe000e400
 8008f08:	20000888 	.word	0x20000888
 8008f0c:	2000088c 	.word	0x2000088c
 8008f10:	e000ed20 	.word	0xe000ed20
 8008f14:	2000003c 	.word	0x2000003c
 8008f18:	e000ef34 	.word	0xe000ef34

08008f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	607b      	str	r3, [r7, #4]
}
 8008f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f3a:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <vPortEnterCritical+0x64>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	4a0f      	ldr	r2, [pc, #60]	@ (8008f80 <vPortEnterCritical+0x64>)
 8008f42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f44:	4b0e      	ldr	r3, [pc, #56]	@ (8008f80 <vPortEnterCritical+0x64>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d112      	bne.n	8008f72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f84 <vPortEnterCritical+0x68>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00d      	beq.n	8008f72 <vPortEnterCritical+0x56>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	603b      	str	r3, [r7, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <vPortEnterCritical+0x52>
	}
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	2000003c 	.word	0x2000003c
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f8e:	4b13      	ldr	r3, [pc, #76]	@ (8008fdc <vPortExitCritical+0x54>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <vPortExitCritical+0x2a>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	b672      	cpsid	i
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	b662      	cpsie	i
 8008faa:	607b      	str	r3, [r7, #4]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <vPortExitCritical+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4a08      	ldr	r2, [pc, #32]	@ (8008fdc <vPortExitCritical+0x54>)
 8008fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fbc:	4b07      	ldr	r3, [pc, #28]	@ (8008fdc <vPortExitCritical+0x54>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d105      	bne.n	8008fd0 <vPortExitCritical+0x48>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	f383 8811 	msr	BASEPRI, r3
}
 8008fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	2000003c 	.word	0x2000003c

08008fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fe0:	f3ef 8009 	mrs	r0, PSP
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4b15      	ldr	r3, [pc, #84]	@ (8009040 <pxCurrentTCBConst>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f01e 0f10 	tst.w	lr, #16
 8008ff0:	bf08      	it	eq
 8008ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009004:	b672      	cpsid	i
 8009006:	f380 8811 	msr	BASEPRI, r0
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	b662      	cpsie	i
 8009014:	f7ff fa00 	bl	8008418 <vTaskSwitchContext>
 8009018:	f04f 0000 	mov.w	r0, #0
 800901c:	f380 8811 	msr	BASEPRI, r0
 8009020:	bc09      	pop	{r0, r3}
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	6808      	ldr	r0, [r1, #0]
 8009026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902a:	f01e 0f10 	tst.w	lr, #16
 800902e:	bf08      	it	eq
 8009030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009034:	f380 8809 	msr	PSP, r0
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop

08009040 <pxCurrentTCBConst>:
 8009040:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	b672      	cpsid	i
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	b662      	cpsie	i
 8009062:	607b      	str	r3, [r7, #4]
}
 8009064:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009066:	f7ff f91b 	bl	80082a0 <xTaskIncrementTick>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009070:	4b06      	ldr	r3, [pc, #24]	@ (800908c <SysTick_Handler+0x44>)
 8009072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f383 8811 	msr	BASEPRI, r3
}
 8009082:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009094:	4b0b      	ldr	r3, [pc, #44]	@ (80090c4 <vPortSetupTimerInterrupt+0x34>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800909a:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <vPortSetupTimerInterrupt+0x38>)
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <vPortSetupTimerInterrupt+0x3c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a0a      	ldr	r2, [pc, #40]	@ (80090d0 <vPortSetupTimerInterrupt+0x40>)
 80090a6:	fba2 2303 	umull	r2, r3, r2, r3
 80090aa:	099b      	lsrs	r3, r3, #6
 80090ac:	4a09      	ldr	r2, [pc, #36]	@ (80090d4 <vPortSetupTimerInterrupt+0x44>)
 80090ae:	3b01      	subs	r3, #1
 80090b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090b2:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <vPortSetupTimerInterrupt+0x34>)
 80090b4:	2207      	movs	r2, #7
 80090b6:	601a      	str	r2, [r3, #0]
}
 80090b8:	bf00      	nop
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	e000e010 	.word	0xe000e010
 80090c8:	e000e018 	.word	0xe000e018
 80090cc:	20000030 	.word	0x20000030
 80090d0:	10624dd3 	.word	0x10624dd3
 80090d4:	e000e014 	.word	0xe000e014

080090d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090e8 <vPortEnableVFP+0x10>
 80090dc:	6801      	ldr	r1, [r0, #0]
 80090de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090e2:	6001      	str	r1, [r0, #0]
 80090e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090e6:	bf00      	nop
 80090e8:	e000ed88 	.word	0xe000ed88

080090ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090f2:	f3ef 8305 	mrs	r3, IPSR
 80090f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d917      	bls.n	800912e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009168 <vPortValidateInterruptPriority+0x7c>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009108:	4b18      	ldr	r3, [pc, #96]	@ (800916c <vPortValidateInterruptPriority+0x80>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	7afa      	ldrb	r2, [r7, #11]
 800910e:	429a      	cmp	r2, r3
 8009110:	d20d      	bcs.n	800912e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009116:	b672      	cpsid	i
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	b662      	cpsie	i
 8009126:	607b      	str	r3, [r7, #4]
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	e7fd      	b.n	800912a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800912e:	4b10      	ldr	r3, [pc, #64]	@ (8009170 <vPortValidateInterruptPriority+0x84>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009136:	4b0f      	ldr	r3, [pc, #60]	@ (8009174 <vPortValidateInterruptPriority+0x88>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d90d      	bls.n	800915a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009142:	b672      	cpsid	i
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	b662      	cpsie	i
 8009152:	603b      	str	r3, [r7, #0]
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop
 8009158:	e7fd      	b.n	8009156 <vPortValidateInterruptPriority+0x6a>
	}
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	e000e3f0 	.word	0xe000e3f0
 800916c:	20000888 	.word	0x20000888
 8009170:	e000ed0c 	.word	0xe000ed0c
 8009174:	2000088c 	.word	0x2000088c

08009178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	@ 0x28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009184:	f7fe ffbc 	bl	8008100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009188:	4b5d      	ldr	r3, [pc, #372]	@ (8009300 <pvPortMalloc+0x188>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009190:	f000 f920 	bl	80093d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009194:	4b5b      	ldr	r3, [pc, #364]	@ (8009304 <pvPortMalloc+0x18c>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4013      	ands	r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 8094 	bne.w	80092ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d020      	beq.n	80091ea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80091a8:	2208      	movs	r2, #8
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d017      	beq.n	80091ea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	3308      	adds	r3, #8
 80091c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00d      	beq.n	80091ea <pvPortMalloc+0x72>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	b672      	cpsid	i
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	b662      	cpsie	i
 80091e2:	617b      	str	r3, [r7, #20]
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop
 80091e8:	e7fd      	b.n	80091e6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d06c      	beq.n	80092ca <pvPortMalloc+0x152>
 80091f0:	4b45      	ldr	r3, [pc, #276]	@ (8009308 <pvPortMalloc+0x190>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d867      	bhi.n	80092ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091fa:	4b44      	ldr	r3, [pc, #272]	@ (800930c <pvPortMalloc+0x194>)
 80091fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091fe:	4b43      	ldr	r3, [pc, #268]	@ (800930c <pvPortMalloc+0x194>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009204:	e004      	b.n	8009210 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d903      	bls.n	8009222 <pvPortMalloc+0xaa>
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f1      	bne.n	8009206 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009222:	4b37      	ldr	r3, [pc, #220]	@ (8009300 <pvPortMalloc+0x188>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009228:	429a      	cmp	r2, r3
 800922a:	d04e      	beq.n	80092ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2208      	movs	r2, #8
 8009232:	4413      	add	r3, r2
 8009234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	2308      	movs	r3, #8
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	429a      	cmp	r2, r3
 800924c:	d922      	bls.n	8009294 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00d      	beq.n	800927c <pvPortMalloc+0x104>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	b672      	cpsid	i
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	b662      	cpsie	i
 8009274:	613b      	str	r3, [r7, #16]
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	1ad2      	subs	r2, r2, r3
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800928e:	69b8      	ldr	r0, [r7, #24]
 8009290:	f000 f902 	bl	8009498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009294:	4b1c      	ldr	r3, [pc, #112]	@ (8009308 <pvPortMalloc+0x190>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	4a1a      	ldr	r2, [pc, #104]	@ (8009308 <pvPortMalloc+0x190>)
 80092a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092a2:	4b19      	ldr	r3, [pc, #100]	@ (8009308 <pvPortMalloc+0x190>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009310 <pvPortMalloc+0x198>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d203      	bcs.n	80092b6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092ae:	4b16      	ldr	r3, [pc, #88]	@ (8009308 <pvPortMalloc+0x190>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a17      	ldr	r2, [pc, #92]	@ (8009310 <pvPortMalloc+0x198>)
 80092b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	4b12      	ldr	r3, [pc, #72]	@ (8009304 <pvPortMalloc+0x18c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	431a      	orrs	r2, r3
 80092c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092ca:	f7fe ff27 	bl	800811c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00d      	beq.n	80092f4 <pvPortMalloc+0x17c>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	60fb      	str	r3, [r7, #12]
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <pvPortMalloc+0x178>
	return pvReturn;
 80092f4:	69fb      	ldr	r3, [r7, #28]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3728      	adds	r7, #40	@ 0x28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20004498 	.word	0x20004498
 8009304:	200044a4 	.word	0x200044a4
 8009308:	2000449c 	.word	0x2000449c
 800930c:	20004490 	.word	0x20004490
 8009310:	200044a0 	.word	0x200044a0

08009314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d04e      	beq.n	80093c4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009326:	2308      	movs	r3, #8
 8009328:	425b      	negs	r3, r3
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4413      	add	r3, r2
 800932e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	4b24      	ldr	r3, [pc, #144]	@ (80093cc <vPortFree+0xb8>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <vPortFree+0x4a>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	b672      	cpsid	i
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	b662      	cpsie	i
 8009356:	60fb      	str	r3, [r7, #12]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <vPortFree+0x6e>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	b672      	cpsid	i
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	b662      	cpsie	i
 800937a:	60bb      	str	r3, [r7, #8]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	4b11      	ldr	r3, [pc, #68]	@ (80093cc <vPortFree+0xb8>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4013      	ands	r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d019      	beq.n	80093c4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d115      	bne.n	80093c4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	4b0b      	ldr	r3, [pc, #44]	@ (80093cc <vPortFree+0xb8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	43db      	mvns	r3, r3
 80093a2:	401a      	ands	r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093a8:	f7fe feaa 	bl	8008100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	4b07      	ldr	r3, [pc, #28]	@ (80093d0 <vPortFree+0xbc>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4413      	add	r3, r2
 80093b6:	4a06      	ldr	r2, [pc, #24]	@ (80093d0 <vPortFree+0xbc>)
 80093b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093ba:	6938      	ldr	r0, [r7, #16]
 80093bc:	f000 f86c 	bl	8009498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093c0:	f7fe feac 	bl	800811c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093c4:	bf00      	nop
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	200044a4 	.word	0x200044a4
 80093d0:	2000449c 	.word	0x2000449c

080093d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80093de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093e0:	4b27      	ldr	r3, [pc, #156]	@ (8009480 <prvHeapInit+0xac>)
 80093e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00c      	beq.n	8009408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3307      	adds	r3, #7
 80093f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 0307 	bic.w	r3, r3, #7
 80093fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	4a1f      	ldr	r2, [pc, #124]	@ (8009480 <prvHeapInit+0xac>)
 8009404:	4413      	add	r3, r2
 8009406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800940c:	4a1d      	ldr	r2, [pc, #116]	@ (8009484 <prvHeapInit+0xb0>)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009412:	4b1c      	ldr	r3, [pc, #112]	@ (8009484 <prvHeapInit+0xb0>)
 8009414:	2200      	movs	r2, #0
 8009416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4413      	add	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009420:	2208      	movs	r2, #8
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0307 	bic.w	r3, r3, #7
 800942e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4a15      	ldr	r2, [pc, #84]	@ (8009488 <prvHeapInit+0xb4>)
 8009434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009436:	4b14      	ldr	r3, [pc, #80]	@ (8009488 <prvHeapInit+0xb4>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2200      	movs	r2, #0
 800943c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800943e:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <prvHeapInit+0xb4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <prvHeapInit+0xb4>)
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	4a0a      	ldr	r2, [pc, #40]	@ (800948c <prvHeapInit+0xb8>)
 8009462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4a09      	ldr	r2, [pc, #36]	@ (8009490 <prvHeapInit+0xbc>)
 800946a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800946c:	4b09      	ldr	r3, [pc, #36]	@ (8009494 <prvHeapInit+0xc0>)
 800946e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009472:	601a      	str	r2, [r3, #0]
}
 8009474:	bf00      	nop
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000890 	.word	0x20000890
 8009484:	20004490 	.word	0x20004490
 8009488:	20004498 	.word	0x20004498
 800948c:	200044a0 	.word	0x200044a0
 8009490:	2000449c 	.word	0x2000449c
 8009494:	200044a4 	.word	0x200044a4

08009498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094a0:	4b28      	ldr	r3, [pc, #160]	@ (8009544 <prvInsertBlockIntoFreeList+0xac>)
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e002      	b.n	80094ac <prvInsertBlockIntoFreeList+0x14>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d8f7      	bhi.n	80094a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	4413      	add	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d108      	bne.n	80094da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	441a      	add	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	441a      	add	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d118      	bne.n	8009520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b15      	ldr	r3, [pc, #84]	@ (8009548 <prvInsertBlockIntoFreeList+0xb0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d00d      	beq.n	8009516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	441a      	add	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	e008      	b.n	8009528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009516:	4b0c      	ldr	r3, [pc, #48]	@ (8009548 <prvInsertBlockIntoFreeList+0xb0>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	e003      	b.n	8009528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	429a      	cmp	r2, r3
 800952e:	d002      	beq.n	8009536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20004490 	.word	0x20004490
 8009548:	20004498 	.word	0x20004498

0800954c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af02      	add	r7, sp, #8
 8009552:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	791b      	ldrb	r3, [r3, #4]
 8009562:	4619      	mov	r1, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	1d5a      	adds	r2, r3, #5
 8009568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	2303      	movs	r3, #3
 8009570:	f7f9 feca 	bl	8003308 <HAL_I2C_Master_Transmit>
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8009590:	220f      	movs	r2, #15
 8009592:	2141      	movs	r1, #65	@ 0x41
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f80c 	bl	80095b2 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	f043 0304 	orr.w	r3, r3, #4
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	4619      	mov	r1, r3
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f81f 	bl	80095e8 <MAX581x_Reference>
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
 80095be:	4613      	mov	r3, r2
 80095c0:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	78ba      	ldrb	r2, [r7, #2]
 80095d2:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ffb6 	bl	800954c <MAX581x_WriteCommand>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff ff9d 	bl	800954c <MAX581x_WriteCommand>
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	70fb      	strb	r3, [r7, #3]
 8009626:	4613      	mov	r3, r2
 8009628:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8009630:	883b      	ldrh	r3, [r7, #0]
 8009632:	091b      	lsrs	r3, r3, #4
 8009634:	b29b      	uxth	r3, r3
 8009636:	b2da      	uxtb	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800963c:	883b      	ldrh	r3, [r7, #0]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	b2da      	uxtb	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ff7f 	bl	800954c <MAX581x_WriteCommand>
}
 800964e:	bf00      	nop
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
 8009662:	4613      	mov	r3, r2
 8009664:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8009672:	883b      	ldrh	r3, [r7, #0]
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	b29b      	uxth	r3, r3
 8009678:	b2da      	uxtb	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800967e:	883b      	ldrh	r3, [r7, #0]
 8009680:	b2db      	uxtb	r3, r3
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	b2da      	uxtb	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff ff5e 	bl	800954c <MAX581x_WriteCommand>
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8009698:	b084      	sub	sp, #16
 800969a:	b4b0      	push	{r4, r5, r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	f107 001c 	add.w	r0, r7, #28
 80096a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	461d      	mov	r5, r3
 80096ae:	f107 041c 	add.w	r4, r7, #28
 80096b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80096ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	pid->error = 0;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	625a      	str	r2, [r3, #36]	@ 0x24

	pid->lastMeasure = 0;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f04f 0200 	mov.w	r2, #0
 80096de:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->integral = 0;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f04f 0200 	mov.w	r2, #0
 80096e6:	62da      	str	r2, [r3, #44]	@ 0x2c

	pid->enable = enable;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bcb0      	pop	{r4, r5, r7}
 80096fa:	b004      	add	sp, #16
 80096fc:	4770      	bx	lr

080096fe <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 80096fe:	b480      	push	{r7}
 8009700:	b087      	sub	sp, #28
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	ed87 0a02 	vstr	s0, [r7, #8]
 800970a:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009714:	2b01      	cmp	r3, #1
 8009716:	d006      	beq.n	8009726 <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	629a      	str	r2, [r3, #40]	@ 0x28
		pid->output = reference;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 8009724:	e085      	b.n	8009832 <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	ed93 7a07 	vldr	s14, [r3, #28]
 8009732:	edd7 7a01 	vldr	s15, [r7, #4]
 8009736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	edd3 6a08 	vldr	s13, [r3, #32]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	if (pid->integral > pid->params.integralMax)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	edd3 7a05 	vldr	s15, [r3, #20]
 800976c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009774:	dd04      	ble.n	8009780 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	695a      	ldr	r2, [r3, #20]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800977e:	e014      	b.n	80097aa <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	edd3 7a05 	vldr	s15, [r3, #20]
 800978c:	eef1 7a67 	vneg.f32	s15, s15
 8009790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009798:	d507      	bpl.n	80097aa <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	edd3 7a05 	vldr	s15, [r3, #20]
 80097a0:	eef1 7a67 	vneg.f32	s15, s15
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80097b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80097b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097b8:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	ed93 7a08 	vldr	s14, [r3, #32]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	edd3 7a00 	vldr	s15, [r3]
 80097c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80097d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80097dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80097e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (pid->output > pid->params.outputMax)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80097fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009802:	dd04      	ble.n	800980e <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	625a      	str	r2, [r3, #36]	@ 0x24
 800980c:	e00e      	b.n	800982c <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	edd3 7a04 	vldr	s15, [r3, #16]
 800981a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	d503      	bpl.n	800982c <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	pid->lastMeasure = measure;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8009848:	887b      	ldrh	r3, [r7, #2]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7f9 fcb0 	bl	80031b2 <HAL_GPIO_TogglePin>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <Board_GetID>:

uint16_t Board_GetID()
{
 800985c:	b598      	push	{r3, r4, r7, lr}
 800985e:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8009860:	2102      	movs	r1, #2
 8009862:	481d      	ldr	r0, [pc, #116]	@ (80098d8 <Board_GetID+0x7c>)
 8009864:	f7f9 fc74 	bl	8003150 <HAL_GPIO_ReadPin>
 8009868:	4603      	mov	r3, r0
 800986a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 800986c:	2101      	movs	r1, #1
 800986e:	481a      	ldr	r0, [pc, #104]	@ (80098d8 <Board_GetID+0x7c>)
 8009870:	f7f9 fc6e 	bl	8003150 <HAL_GPIO_ReadPin>
 8009874:	4603      	mov	r3, r0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8009876:	b21b      	sxth	r3, r3
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	b21b      	sxth	r3, r3
 800987c:	4323      	orrs	r3, r4
 800987e:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8009880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009884:	4815      	ldr	r0, [pc, #84]	@ (80098dc <Board_GetID+0x80>)
 8009886:	f7f9 fc63 	bl	8003150 <HAL_GPIO_ReadPin>
 800988a:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 800988c:	b21b      	sxth	r3, r3
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	b21b      	sxth	r3, r3
 8009892:	4323      	orrs	r3, r4
 8009894:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8009896:	2104      	movs	r1, #4
 8009898:	4811      	ldr	r0, [pc, #68]	@ (80098e0 <Board_GetID+0x84>)
 800989a:	f7f9 fc59 	bl	8003150 <HAL_GPIO_ReadPin>
 800989e:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	b21b      	sxth	r3, r3
 80098a6:	4323      	orrs	r3, r4
 80098a8:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 80098aa:	2110      	movs	r1, #16
 80098ac:	480d      	ldr	r0, [pc, #52]	@ (80098e4 <Board_GetID+0x88>)
 80098ae:	f7f9 fc4f 	bl	8003150 <HAL_GPIO_ReadPin>
 80098b2:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 80098b4:	b21b      	sxth	r3, r3
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	4323      	orrs	r3, r4
 80098bc:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 80098be:	2110      	movs	r1, #16
 80098c0:	4809      	ldr	r0, [pc, #36]	@ (80098e8 <Board_GetID+0x8c>)
 80098c2:	f7f9 fc45 	bl	8003150 <HAL_GPIO_ReadPin>
 80098c6:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 80098c8:	b21b      	sxth	r3, r3
 80098ca:	015b      	lsls	r3, r3, #5
 80098cc:	b21b      	sxth	r3, r3
 80098ce:	4323      	orrs	r3, r4
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	b29b      	uxth	r3, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	bd98      	pop	{r3, r4, r7, pc}
 80098d8:	40022400 	.word	0x40022400
 80098dc:	40022000 	.word	0x40022000
 80098e0:	40020400 	.word	0x40020400
 80098e4:	40020800 	.word	0x40020800
 80098e8:	40021c00 	.word	0x40021c00
 80098ec:	00000000 	.word	0x00000000

080098f0 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7c1b      	ldrb	r3, [r3, #16]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d002      	beq.n	800990a <Encoder_Update+0x1a>
		return 0;
 8009904:	f04f 0300 	mov.w	r3, #0
 8009908:	e03a      	b.n	8009980 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 8009912:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800991e:	eef0 7ae7 	vabs.f32	s15, s15
 8009922:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800992a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992e:	d502      	bpl.n	8009936 <Encoder_Update+0x46>
 8009930:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80099a0 <Encoder_Update+0xb0>
 8009934:	e005      	b.n	8009942 <Encoder_Update+0x52>
 8009936:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009942:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 800994e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009952:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009956:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800995a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8009998 <Encoder_Update+0xa8>
 800995e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8009962:	edd7 7a00 	vldr	s15, [r7]
 8009966:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80099a4 <Encoder_Update+0xb4>
 800996a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800996e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009972:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009976:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800997a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 800997e:	68fb      	ldr	r3, [r7, #12]
}
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eeb0 0a67 	vmov.f32	s0, s15
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	54442d18 	.word	0x54442d18
 800999c:	400921fb 	.word	0x400921fb
 80099a0:	00000000 	.word	0x00000000
 80099a4:	46000000 	.word	0x46000000

080099a8 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
 80099b4:	4613      	mov	r3, r2
 80099b6:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	78ba      	ldrb	r2, [r7, #2]
 80099bc:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	motorDevice->outputID = motorID;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motorDevice->refSpeed = 0;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	671a      	str	r2, [r3, #112]	@ 0x70
	motorDevice->measSpeed = 0;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	675a      	str	r2, [r3, #116]	@ 0x74
	Motor_Enable(motorDevice, enable);
 80099d8:	78bb      	ldrb	r3, [r7, #2]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f853 	bl	8009a88 <Motor_Enable>
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed  * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 80099fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80099fe:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8009a84 <Motor_CLDrive+0x98>
 8009a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	edd3 7a06 	vldr	s15, [r3, #24]
 8009a18:	eeb0 0a67 	vmov.f32	s0, s15
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7ff ff67 	bl	80098f0 <Encoder_Update>
 8009a22:	eef0 7a40 	vmov.f32	s15, s0
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8009a3a:	eef0 0a47 	vmov.f32	s1, s14
 8009a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a42:	4610      	mov	r0, r2
 8009a44:	f7ff fe5b 	bl	80096fe <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8009a4e:	eef0 7ae7 	vabs.f32	s15, s15
 8009a52:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8009a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5e:	d503      	bpl.n	8009a68 <Motor_CLDrive+0x7c>
		motorDevice->pid.output = 0.0;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8009a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f84b 	bl	8009b10 <Motor_SetVoltage>
}
 8009a7a:	bf00      	nop
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	3cdd82fd 	.word	0x3cdd82fd

08009a88 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009aac:	2200      	movs	r2, #0
 8009aae:	4619      	mov	r1, r3
 8009ab0:	f7f9 fb66 	bl	8003180 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 8009ab4:	e008      	b.n	8009ac8 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	f7f9 fb5c 	bl	8003180 <HAL_GPIO_WritePin>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d109      	bne.n	8009af6 <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009aec:	2200      	movs	r2, #0
 8009aee:	4619      	mov	r1, r3
 8009af0:	f7f9 fb46 	bl	8003180 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 8009af4:	e008      	b.n	8009b08 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b00:	2201      	movs	r2, #1
 8009b02:	4619      	mov	r1, r3
 8009b04:	f7f9 fb3c 	bl	8003180 <HAL_GPIO_WritePin>
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8009b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2a:	db1d      	blt.n	8009b68 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b36:	2201      	movs	r2, #1
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f7f9 fb21 	bl	8003180 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8009b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b46:	ee17 3a90 	vmov	r3, s15
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8009b5e:	461a      	mov	r2, r3
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f7ff fd78 	bl	8009656 <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 8009b66:	e01e      	b.n	8009ba6 <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b72:	2200      	movs	r2, #0
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7f9 fb03 	bl	8003180 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8009b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b7e:	eef0 7ae7 	vabs.f32	s15, s15
 8009b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b86:	ee17 3a90 	vmov	r3, s15
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68b8      	ldr	r0, [r7, #8]
 8009ba2:	f7ff fd58 	bl	8009656 <MAX581x_CodeLoad>
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6898      	ldr	r0, [r3, #8]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	8a5b      	ldrh	r3, [r3, #18]
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7f9 fadb 	bl	8003180 <HAL_GPIO_WritePin>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6858      	ldr	r0, [r3, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	8a1b      	ldrh	r3, [r3, #16]
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7f9 fac9 	bl	8003180 <HAL_GPIO_WritePin>
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	887a      	ldrh	r2, [r7, #2]
 8009c14:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8bba      	ldrh	r2, [r7, #28]
 8009c20:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009c22:	2101      	movs	r1, #1
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff ffd4 	bl	8009bd2 <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff ffbe 	bl	8009bae <nRF24_CE_State>
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b086      	sub	sp, #24
 8009c3e:	af02      	add	r7, sp, #8
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	f107 020f 	add.w	r2, r7, #15
 8009c4e:	1cf9      	adds	r1, r7, #3
 8009c50:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	2301      	movs	r3, #1
 8009c58:	f7fb fa6d 	bl	8005136 <HAL_SPI_TransmitReceive>
  return rxData;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009c72:	2100      	movs	r1, #0
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ffac 	bl	8009bd2 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8009c7a:	78fb      	ldrb	r3, [r7, #3]
 8009c7c:	f003 031f 	and.w	r3, r3, #31
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ffd8 	bl	8009c3a <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8009c8a:	21ff      	movs	r1, #255	@ 0xff
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff ffd4 	bl	8009c3a <nRF24_LL_RW>
 8009c92:	4603      	mov	r3, r0
 8009c94:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009c96:	2101      	movs	r1, #1
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff ff9a 	bl	8009bd2 <nRF24_CSN_State>

  return value;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009cb8:	2100      	movs	r1, #0
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff ff89 	bl	8009bd2 <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	2b1f      	cmp	r3, #31
 8009cc4:	d812      	bhi.n	8009cec <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8009cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cca:	f003 031f 	and.w	r3, r3, #31
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	f043 0320 	orr.w	r3, r3, #32
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff ffad 	bl	8009c3a <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 8009ce0:	78bb      	ldrb	r3, [r7, #2]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff ffa8 	bl	8009c3a <nRF24_LL_RW>
 8009cea:	e015      	b.n	8009d18 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff ffa2 	bl	8009c3a <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8009cf6:	78fb      	ldrb	r3, [r7, #3]
 8009cf8:	2be1      	cmp	r3, #225	@ 0xe1
 8009cfa:	d00d      	beq.n	8009d18 <nRF24_WriteReg+0x70>
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	2be2      	cmp	r3, #226	@ 0xe2
 8009d00:	d00a      	beq.n	8009d18 <nRF24_WriteReg+0x70>
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	2be3      	cmp	r3, #227	@ 0xe3
 8009d06:	d007      	beq.n	8009d18 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	2bff      	cmp	r3, #255	@ 0xff
 8009d0c:	d004      	beq.n	8009d18 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 8009d0e:	78bb      	ldrb	r3, [r7, #2]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ff91 	bl	8009c3a <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009d18:	2101      	movs	r1, #1
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff ff59 	bl	8009bd2 <nRF24_CSN_State>
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	461a      	mov	r2, r3
 8009d34:	460b      	mov	r3, r1
 8009d36:	72fb      	strb	r3, [r7, #11]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff ff47 	bl	8009bd2 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8009d44:	7afb      	ldrb	r3, [r7, #11]
 8009d46:	4619      	mov	r1, r3
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff ff76 	bl	8009c3a <nRF24_LL_RW>
  while (count--)
 8009d4e:	e008      	b.n	8009d62 <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8009d50:	687c      	ldr	r4, [r7, #4]
 8009d52:	1c63      	adds	r3, r4, #1
 8009d54:	607b      	str	r3, [r7, #4]
 8009d56:	21ff      	movs	r1, #255	@ 0xff
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff ff6e 	bl	8009c3a <nRF24_LL_RW>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	7023      	strb	r3, [r4, #0]
  while (count--)
 8009d62:	7abb      	ldrb	r3, [r7, #10]
 8009d64:	1e5a      	subs	r2, r3, #1
 8009d66:	72ba      	strb	r2, [r7, #10]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f1      	bne.n	8009d50 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff ff2f 	bl	8009bd2 <nRF24_CSN_State>
}
 8009d74:	bf00      	nop
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd90      	pop	{r4, r7, pc}

08009d7c <nRF24_WriteMBReg>:

void nRF24_WriteMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	461a      	mov	r2, r3
 8009d88:	460b      	mov	r3, r1
 8009d8a:	72fb      	strb	r3, [r7, #11]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009d90:	2100      	movs	r1, #0
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f7ff ff1d 	bl	8009bd2 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8009d98:	7afb      	ldrb	r3, [r7, #11]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f7ff ff4c 	bl	8009c3a <nRF24_LL_RW>
  while (count--)
 8009da2:	e007      	b.n	8009db4 <nRF24_WriteMBReg+0x38>
  {
    nRF24_LL_RW(device, *pBuf++);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	607a      	str	r2, [r7, #4]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f7ff ff43 	bl	8009c3a <nRF24_LL_RW>
  while (count--)
 8009db4:	7abb      	ldrb	r3, [r7, #10]
 8009db6:	1e5a      	subs	r2, r3, #1
 8009db8:	72ba      	strb	r2, [r7, #10]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1f2      	bne.n	8009da4 <nRF24_WriteMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff ff06 	bl	8009bd2 <nRF24_CSN_State>
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <nRF24_Init>:

void nRF24_Init(nRF24_Handler_t *device) {
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8009dd6:	2208      	movs	r2, #8
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff ff64 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8009de0:	223f      	movs	r2, #63	@ 0x3f
 8009de2:	2101      	movs	r1, #1
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff5f 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8009dea:	2203      	movs	r2, #3
 8009dec:	2102      	movs	r1, #2
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ff5a 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 8009df4:	2203      	movs	r2, #3
 8009df6:	2103      	movs	r1, #3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ff55 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8009dfe:	2203      	movs	r2, #3
 8009e00:	2104      	movs	r1, #4
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff ff50 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 8009e08:	2202      	movs	r2, #2
 8009e0a:	2105      	movs	r1, #5
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff ff4b 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8009e12:	220e      	movs	r2, #14
 8009e14:	2106      	movs	r1, #6
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff ff46 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2107      	movs	r1, #7
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff ff41 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 8009e26:	2200      	movs	r2, #0
 8009e28:	2111      	movs	r1, #17
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff ff3c 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 8009e30:	2200      	movs	r2, #0
 8009e32:	2112      	movs	r1, #18
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff ff37 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2113      	movs	r1, #19
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7ff ff32 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8009e44:	2200      	movs	r2, #0
 8009e46:	2114      	movs	r1, #20
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff ff2d 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2115      	movs	r1, #21
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7ff ff28 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2116      	movs	r1, #22
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff23 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 8009e62:	2200      	movs	r2, #0
 8009e64:	211c      	movs	r1, #28
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff ff1e 	bl	8009ca8 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	211d      	movs	r1, #29
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff ff19 	bl	8009ca8 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa62 	bl	800a340 <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa52 	bl	800a326 <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa69 	bl	800a35a <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009e88:	2101      	movs	r1, #1
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fea1 	bl	8009bd2 <nRF24_CSN_State>
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fedd 	bl	8009c66 <nRF24_ReadReg>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d104      	bne.n	8009ec0 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	f043 0302 	orr.w	r3, r3, #2
 8009ebc:	73fb      	strb	r3, [r7, #15]
 8009ebe:	e003      	b.n	8009ec8 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	f023 0302 	bic.w	r3, r3, #2
 8009ec6:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff feea 	bl	8009ca8 <nRF24_WriteReg>
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff febb 	bl	8009c66 <nRF24_ReadReg>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8009efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	b25a      	sxtb	r2, r3
 8009f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	461a      	mov	r2, r3
 8009f14:	2100      	movs	r1, #0
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff fec6 	bl	8009ca8 <nRF24_WriteReg>
}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	461a      	mov	r2, r3
 8009f34:	2105      	movs	r1, #5
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff feb6 	bl	8009ca8 <nRF24_WriteReg>
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	2b06      	cmp	r3, #6
 8009f56:	f200 813e 	bhi.w	800a1d6 <nRF24_SetAddr+0x292>
 8009f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <nRF24_SetAddr+0x1c>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f7d 	.word	0x08009f7d
 8009f64:	08009fd3 	.word	0x08009fd3
 8009f68:	0800a029 	.word	0x0800a029
 8009f6c:	0800a07f 	.word	0x0800a07f
 8009f70:	0800a0d5 	.word	0x0800a0d5
 8009f74:	0800a12b 	.word	0x0800a12b
 8009f78:	0800a181 	.word	0x0800a181
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8009f7c:	2103      	movs	r1, #3
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fe71 	bl	8009c66 <nRF24_ReadReg>
 8009f84:	4603      	mov	r3, r0
 8009f86:	3301      	adds	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	4413      	add	r3, r2
 8009f90:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009f92:	2100      	movs	r1, #0
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fe1c 	bl	8009bd2 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	4a90      	ldr	r2, [pc, #576]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 8009f9e:	5cd3      	ldrb	r3, [r2, r3]
 8009fa0:	f043 0320 	orr.w	r3, r3, #32
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff fe46 	bl	8009c3a <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	1e5a      	subs	r2, r3, #1
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fe3e 	bl	8009c3a <nRF24_LL_RW>
      } while (addr_width--);
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	1e5a      	subs	r2, r3, #1
 8009fc2:	75fa      	strb	r2, [r7, #23]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1f2      	bne.n	8009fae <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8009fc8:	2101      	movs	r1, #1
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff fe01 	bl	8009bd2 <nRF24_CSN_State>
      break;
 8009fd0:	e102      	b.n	800a1d8 <nRF24_SetAddr+0x294>

    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8009fd2:	2103      	movs	r1, #3
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7ff fe46 	bl	8009c66 <nRF24_ReadReg>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	3301      	adds	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009fe8:	2100      	movs	r1, #0
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff fdf1 	bl	8009bd2 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009ff0:	7afb      	ldrb	r3, [r7, #11]
 8009ff2:	4a7b      	ldr	r2, [pc, #492]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 8009ff4:	5cd3      	ldrb	r3, [r2, r3]
 8009ff6:	f043 0320 	orr.w	r3, r3, #32
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff fe1b 	bl	8009c3a <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	4619      	mov	r1, r3
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff fe13 	bl	8009c3a <nRF24_LL_RW>
      } while (addr_width--);
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	1e5a      	subs	r2, r3, #1
 800a018:	75fa      	strb	r2, [r7, #23]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f2      	bne.n	800a004 <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 800a01e:	2101      	movs	r1, #1
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff fdd6 	bl	8009bd2 <nRF24_CSN_State>
      break;
 800a026:	e0d7      	b.n	800a1d8 <nRF24_SetAddr+0x294>

    case nRF24_PIPE2:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a028:	2103      	movs	r1, #3
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff fe1b 	bl	8009c66 <nRF24_ReadReg>
 800a030:	4603      	mov	r3, r0
 800a032:	3301      	adds	r3, #1
 800a034:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	4413      	add	r3, r2
 800a03c:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a03e:	2100      	movs	r1, #0
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fdc6 	bl	8009bd2 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	4a65      	ldr	r2, [pc, #404]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 800a04a:	5cd3      	ldrb	r3, [r2, r3]
 800a04c:	f043 0320 	orr.w	r3, r3, #32
 800a050:	b2db      	uxtb	r3, r3
 800a052:	4619      	mov	r1, r3
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff fdf0 	bl	8009c3a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	1e5a      	subs	r2, r3, #1
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	4619      	mov	r1, r3
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff fde8 	bl	8009c3a <nRF24_LL_RW>
	  } while (addr_width--);
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	1e5a      	subs	r2, r3, #1
 800a06e:	75fa      	strb	r2, [r7, #23]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f2      	bne.n	800a05a <nRF24_SetAddr+0x116>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a074:	2101      	movs	r1, #1
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fdab 	bl	8009bd2 <nRF24_CSN_State>
	  break;
 800a07c:	e0ac      	b.n	800a1d8 <nRF24_SetAddr+0x294>

    case nRF24_PIPE3:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a07e:	2103      	movs	r1, #3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff fdf0 	bl	8009c66 <nRF24_ReadReg>
 800a086:	4603      	mov	r3, r0
 800a088:	3301      	adds	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a094:	2100      	movs	r1, #0
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fd9b 	bl	8009bd2 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a09c:	7afb      	ldrb	r3, [r7, #11]
 800a09e:	4a50      	ldr	r2, [pc, #320]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 800a0a0:	5cd3      	ldrb	r3, [r2, r3]
 800a0a2:	f043 0320 	orr.w	r3, r3, #32
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7ff fdc5 	bl	8009c3a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	1e5a      	subs	r2, r3, #1
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7ff fdbd 	bl	8009c3a <nRF24_LL_RW>
	  } while (addr_width--);
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	1e5a      	subs	r2, r3, #1
 800a0c4:	75fa      	strb	r2, [r7, #23]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f2      	bne.n	800a0b0 <nRF24_SetAddr+0x16c>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7ff fd80 	bl	8009bd2 <nRF24_CSN_State>
	  break;
 800a0d2:	e081      	b.n	800a1d8 <nRF24_SetAddr+0x294>


    case nRF24_PIPE4:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a0d4:	2103      	movs	r1, #3
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7ff fdc5 	bl	8009c66 <nRF24_ReadReg>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	3301      	adds	r3, #1
 800a0e0:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff fd70 	bl	8009bd2 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	4a3a      	ldr	r2, [pc, #232]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 800a0f6:	5cd3      	ldrb	r3, [r2, r3]
 800a0f8:	f043 0320 	orr.w	r3, r3, #32
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff fd9a 	bl	8009c3a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fd92 	bl	8009c3a <nRF24_LL_RW>
	  } while (addr_width--);
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	1e5a      	subs	r2, r3, #1
 800a11a:	75fa      	strb	r2, [r7, #23]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1f2      	bne.n	800a106 <nRF24_SetAddr+0x1c2>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a120:	2101      	movs	r1, #1
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fd55 	bl	8009bd2 <nRF24_CSN_State>
	  break;
 800a128:	e056      	b.n	800a1d8 <nRF24_SetAddr+0x294>


    case nRF24_PIPE5:

    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a12a:	2103      	movs	r1, #3
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff fd9a 	bl	8009c66 <nRF24_ReadReg>
 800a132:	4603      	mov	r3, r0
 800a134:	3301      	adds	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a140:	2100      	movs	r1, #0
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fd45 	bl	8009bd2 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	4a25      	ldr	r2, [pc, #148]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 800a14c:	5cd3      	ldrb	r3, [r2, r3]
 800a14e:	f043 0320 	orr.w	r3, r3, #32
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff fd6f 	bl	8009c3a <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1e5a      	subs	r2, r3, #1
 800a160:	607a      	str	r2, [r7, #4]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	4619      	mov	r1, r3
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff fd67 	bl	8009c3a <nRF24_LL_RW>
	  } while (addr_width--);
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	1e5a      	subs	r2, r3, #1
 800a170:	75fa      	strb	r2, [r7, #23]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f2      	bne.n	800a15c <nRF24_SetAddr+0x218>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a176:	2101      	movs	r1, #1
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fd2a 	bl	8009bd2 <nRF24_CSN_State>
	  break;
 800a17e:	e02b      	b.n	800a1d8 <nRF24_SetAddr+0x294>


    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a180:	2103      	movs	r1, #3
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff fd6f 	bl	8009c66 <nRF24_ReadReg>
 800a188:	4603      	mov	r3, r0
 800a18a:	3301      	adds	r3, #1
 800a18c:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a196:	2100      	movs	r1, #0
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7ff fd1a 	bl	8009bd2 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a1e0 <nRF24_SetAddr+0x29c>)
 800a1a2:	5cd3      	ldrb	r3, [r2, r3]
 800a1a4:	f043 0320 	orr.w	r3, r3, #32
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fd44 	bl	8009c3a <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f7ff fd3c 	bl	8009c3a <nRF24_LL_RW>
      } while (addr_width--);
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	1e5a      	subs	r2, r3, #1
 800a1c6:	75fa      	strb	r2, [r7, #23]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1f2      	bne.n	800a1b2 <nRF24_SetAddr+0x26e>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fcff 	bl	8009bd2 <nRF24_CSN_State>
      break;
 800a1d4:	e000      	b.n	800a1d8 <nRF24_SetAddr+0x294>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 800a1d6:	bf00      	nop
  }
}
 800a1d8:	bf00      	nop
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	0800a944 	.word	0x0800a944

0800a1e4 <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	4608      	mov	r0, r1
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	70fb      	strb	r3, [r7, #3]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	70bb      	strb	r3, [r7, #2]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800a1fe:	2102      	movs	r1, #2
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff fd30 	bl	8009c66 <nRF24_ReadReg>
 800a206:	4603      	mov	r3, r0
 800a208:	b25a      	sxtb	r2, r3
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	2101      	movs	r1, #1
 800a20e:	fa01 f303 	lsl.w	r3, r1, r3
 800a212:	b25b      	sxtb	r3, r3
 800a214:	4313      	orrs	r3, r2
 800a216:	b25b      	sxtb	r3, r3
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a21e:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	461a      	mov	r2, r3
 800a224:	2102      	movs	r1, #2
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff fd3e 	bl	8009ca8 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	4a1a      	ldr	r2, [pc, #104]	@ (800a298 <nRF24_SetRXPipe+0xb4>)
 800a230:	5cd1      	ldrb	r1, [r2, r3]
 800a232:	787b      	ldrb	r3, [r7, #1]
 800a234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	461a      	mov	r2, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7ff fd33 	bl	8009ca8 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800a242:	2101      	movs	r1, #1
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff fd0e 	bl	8009c66 <nRF24_ReadReg>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 800a24e:	78bb      	ldrb	r3, [r7, #2]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d10a      	bne.n	800a26a <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	2201      	movs	r2, #1
 800a258:	fa02 f303 	lsl.w	r3, r2, r3
 800a25c:	b25a      	sxtb	r2, r3
 800a25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a262:	4313      	orrs	r3, r2
 800a264:	b25b      	sxtb	r3, r3
 800a266:	73fb      	strb	r3, [r7, #15]
 800a268:	e00b      	b.n	800a282 <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	2201      	movs	r2, #1
 800a26e:	fa02 f303 	lsl.w	r3, r2, r3
 800a272:	b25b      	sxtb	r3, r3
 800a274:	43db      	mvns	r3, r3
 800a276:	b25a      	sxtb	r2, r3
 800a278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27c:	4013      	ands	r3, r2
 800a27e:	b25b      	sxtb	r3, r3
 800a280:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	461a      	mov	r2, r3
 800a286:	2101      	movs	r1, #1
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff fd0d 	bl	8009ca8 <nRF24_WriteReg>
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	0800a93c 	.word	0x0800a93c

0800a29c <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d905      	bls.n	800a2ba <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fcf8 	bl	8009ca8 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 800a2b8:	e017      	b.n	800a2ea <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff fcd2 	bl	8009c66 <nRF24_ReadReg>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	b25b      	sxtb	r3, r3
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	b25a      	sxtb	r2, r3
 800a2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fcdf 	bl	8009ca8 <nRF24_WriteReg>
}
 800a2ea:	bf00      	nop
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b082      	sub	sp, #8
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a2fa:	2107      	movs	r1, #7
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fcb2 	bl	8009c66 <nRF24_ReadReg>
 800a302:	4603      	mov	r3, r0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <nRF24_GetConfig>:

uint8_t nRF24_GetConfig(nRF24_Handler_t *device) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800a314:	2100      	movs	r1, #0
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fca5 	bl	8009c66 <nRF24_ReadReg>
 800a31c:	4603      	mov	r3, r0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800a32e:	22ff      	movs	r2, #255	@ 0xff
 800a330:	21e1      	movs	r1, #225	@ 0xe1
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fcb8 	bl	8009ca8 <nRF24_WriteReg>
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800a348:	22ff      	movs	r2, #255	@ 0xff
 800a34a:	21e2      	movs	r1, #226	@ 0xe2
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff fcab 	bl	8009ca8 <nRF24_WriteReg>
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a362:	2107      	movs	r1, #7
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fc7e 	bl	8009c66 <nRF24_ReadReg>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a374:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	461a      	mov	r2, r3
 800a37a:	2107      	movs	r1, #7
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fc93 	bl	8009ca8 <nRF24_WriteReg>
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <nRF24_ClearIRQFlagsTx>:

void nRF24_ClearIRQFlagsTx(nRF24_Handler_t *device) {
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a392:	2107      	movs	r1, #7
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff fc66 	bl	8009c66 <nRF24_ReadReg>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_TX;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800a3a4:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2107      	movs	r1, #7
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fc7b 	bl	8009ca8 <nRF24_WriteReg>
}
 800a3b2:	bf00      	nop
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <nRF24_ClearIRQFlagsRx>:

void nRF24_ClearIRQFlagsRx(nRF24_Handler_t *device) {
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DRbits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a3c2:	2107      	movs	r1, #7
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff fc4e 	bl	8009c66 <nRF24_ReadReg>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_RX;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3d4:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	2107      	movs	r1, #7
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fc63 	bl	8009ca8 <nRF24_WriteReg>
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <nRF24_WritePayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	71fb      	strb	r3, [r7, #7]
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	21a0      	movs	r1, #160	@ 0xa0
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7ff fcbc 	bl	8009d7c <nRF24_WriteMBReg>
}
 800a404:	bf00      	nop
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <nRF24_ReadPayload>:

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800a418:	2107      	movs	r1, #7
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff fc23 	bl	8009c66 <nRF24_ReadReg>
 800a420:	4603      	mov	r3, r0
 800a422:	105b      	asrs	r3, r3, #1
 800a424:	b2db      	uxtb	r3, r3
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d817      	bhi.n	800a462 <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	4a0f      	ldr	r2, [pc, #60]	@ (800a474 <nRF24_ReadPayload+0x68>)
 800a436:	5cd3      	ldrb	r3, [r2, r3]
 800a438:	4619      	mov	r1, r3
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fc13 	bl	8009c66 <nRF24_ReadReg>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d006      	beq.n	800a45e <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	2161      	movs	r1, #97	@ 0x61
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff fc65 	bl	8009d28 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	e003      	b.n	800a46a <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 800a468:	23ff      	movs	r3, #255	@ 0xff
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	0800a93c 	.word	0x0800a93c

0800a478 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	0a1b      	lsrs	r3, r3, #8
 800a488:	b29b      	uxth	r3, r3
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 800a490:	887b      	ldrh	r3, [r7, #2]
 800a492:	b2da      	uxtb	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	791b      	ldrb	r3, [r3, #4]
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	b299      	uxth	r1, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f103 0209 	add.w	r2, r3, #9
 800a4ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	f7f8 ff27 	bl	8003308 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
 800a4c0:	b299      	uxth	r1, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	1d5a      	adds	r2, r3, #5
 800a4c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f7f9 f80f 	bl	80034f0 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	795b      	ldrb	r3, [r3, #5]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af02      	add	r7, sp, #8
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	807b      	strh	r3, [r7, #2]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800a4ee:	887b      	ldrh	r3, [r7, #2]
 800a4f0:	0a1b      	lsrs	r3, r3, #8
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 800a4fa:	887b      	ldrh	r3, [r7, #2]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	791b      	ldrb	r3, [r3, #4]
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	787a      	ldrb	r2, [r7, #1]
 800a50e:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	b299      	uxth	r1, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f103 0209 	add.w	r2, r3, #9
 800a51e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	2303      	movs	r3, #3
 800a526:	f7f8 feef 	bl	8003308 <HAL_I2C_Master_Transmit>
}
 800a52a:	bf00      	nop
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	4613      	mov	r3, r2
 800a53e:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	79fa      	ldrb	r2, [r7, #7]
 800a54a:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 800a54c:	2100      	movs	r1, #0
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7ff ff92 	bl	800a478 <VL6180X_Read8>
 800a554:	4603      	mov	r3, r0
 800a556:	2bb4      	cmp	r3, #180	@ 0xb4
 800a558:	d001      	beq.n	800a55e <VL6180X_Init+0x2c>
    return false;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e011      	b.n	800a582 <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 800a55e:	2116      	movs	r1, #22
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff ff89 	bl	800a478 <VL6180X_Read8>
 800a566:	4603      	mov	r3, r0
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d007      	beq.n	800a580 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 f80a 	bl	800a58a <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800a576:	2200      	movs	r2, #0
 800a578:	2116      	movs	r1, #22
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f7ff ffaf 	bl	800a4de <VL6180X_Write8>
  }

  return true;
 800a580:	2301      	movs	r3, #1
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 800a592:	2201      	movs	r2, #1
 800a594:	f240 2107 	movw	r1, #519	@ 0x207
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f7ff ffa0 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff9a 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2196      	movs	r1, #150	@ 0x96
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff ff95 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 800a5b4:	22fd      	movs	r2, #253	@ 0xfd
 800a5b6:	2197      	movs	r1, #151	@ 0x97
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff ff90 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 800a5be:	2200      	movs	r2, #0
 800a5c0:	21e3      	movs	r1, #227	@ 0xe3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff ff8b 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	21e4      	movs	r1, #228	@ 0xe4
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff ff86 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	21e5      	movs	r1, #229	@ 0xe5
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff ff81 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 800a5dc:	2201      	movs	r2, #1
 800a5de:	21e6      	movs	r1, #230	@ 0xe6
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff ff7c 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	21e7      	movs	r1, #231	@ 0xe7
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff ff77 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	21f5      	movs	r1, #245	@ 0xf5
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff ff72 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 800a5fa:	2205      	movs	r2, #5
 800a5fc:	21d9      	movs	r1, #217	@ 0xd9
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff ff6d 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 800a604:	22ce      	movs	r2, #206	@ 0xce
 800a606:	21db      	movs	r1, #219	@ 0xdb
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff68 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 800a60e:	2203      	movs	r2, #3
 800a610:	21dc      	movs	r1, #220	@ 0xdc
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff ff63 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 800a618:	22f8      	movs	r2, #248	@ 0xf8
 800a61a:	21dd      	movs	r1, #221	@ 0xdd
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff ff5e 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 800a622:	2200      	movs	r2, #0
 800a624:	219f      	movs	r1, #159	@ 0x9f
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff ff59 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 800a62c:	223c      	movs	r2, #60	@ 0x3c
 800a62e:	21a3      	movs	r1, #163	@ 0xa3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff ff54 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 800a636:	2200      	movs	r2, #0
 800a638:	21b7      	movs	r1, #183	@ 0xb7
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7ff ff4f 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 800a640:	223c      	movs	r2, #60	@ 0x3c
 800a642:	21bb      	movs	r1, #187	@ 0xbb
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff4a 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 800a64a:	2209      	movs	r2, #9
 800a64c:	21b2      	movs	r1, #178	@ 0xb2
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff ff45 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800a654:	2209      	movs	r2, #9
 800a656:	21ca      	movs	r1, #202	@ 0xca
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ff40 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 800a65e:	2201      	movs	r2, #1
 800a660:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ff3a 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 800a66a:	2217      	movs	r2, #23
 800a66c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff34 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800a676:	2200      	movs	r2, #0
 800a678:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff ff2e 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800a682:	2205      	movs	r2, #5
 800a684:	21ff      	movs	r1, #255	@ 0xff
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff ff29 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 800a68c:	2205      	movs	r2, #5
 800a68e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff ff23 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 800a698:	2205      	movs	r2, #5
 800a69a:	f240 1199 	movw	r1, #409	@ 0x199
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff ff1d 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800a6a4:	221b      	movs	r2, #27
 800a6a6:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff ff17 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 800a6b0:	223e      	movs	r2, #62	@ 0x3e
 800a6b2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff ff11 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 800a6bc:	221f      	movs	r2, #31
 800a6be:	f240 11a7 	movw	r1, #423	@ 0x1a7
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff ff0b 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2130      	movs	r1, #48	@ 0x30
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff ff06 	bl	800a4de <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 800a6d2:	2210      	movs	r2, #16
 800a6d4:	2111      	movs	r1, #17
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff ff01 	bl	800a4de <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 800a6dc:	2230      	movs	r2, #48	@ 0x30
 800a6de:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff fefb 	bl	800a4de <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 800a6e8:	2246      	movs	r2, #70	@ 0x46
 800a6ea:	213f      	movs	r1, #63	@ 0x3f
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fef6 	bl	800a4de <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 800a6f2:	22ff      	movs	r2, #255	@ 0xff
 800a6f4:	2131      	movs	r1, #49	@ 0x31
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fef1 	bl	800a4de <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 800a6fc:	2263      	movs	r2, #99	@ 0x63
 800a6fe:	2141      	movs	r1, #65	@ 0x41
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff feec 	bl	800a4de <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 800a706:	2201      	movs	r2, #1
 800a708:	212e      	movs	r1, #46	@ 0x2e
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fee7 	bl	800a4de <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 800a710:	2209      	movs	r2, #9
 800a712:	211b      	movs	r1, #27
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff fee2 	bl	800a4de <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 800a71a:	2231      	movs	r2, #49	@ 0x31
 800a71c:	213e      	movs	r1, #62	@ 0x3e
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fedd 	bl	800a4de <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 800a724:	2224      	movs	r2, #36	@ 0x24
 800a726:	2114      	movs	r1, #20
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff fed8 	bl	800a4de <VL6180X_Write8>
                        // Ready threshold event'
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 800a73e:	bf00      	nop
 800a740:	214d      	movs	r1, #77	@ 0x4d
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff fe98 	bl	800a478 <VL6180X_Read8>
 800a748:	4603      	mov	r3, r0
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0f6      	beq.n	800a740 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800a752:	2201      	movs	r2, #1
 800a754:	2118      	movs	r1, #24
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff fec1 	bl	800a4de <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 800a75c:	bf00      	nop
 800a75e:	214f      	movs	r1, #79	@ 0x4f
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fe89 	bl	800a478 <VL6180X_Read8>
 800a766:	4603      	mov	r3, r0
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0f6      	beq.n	800a75e <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 800a770:	2162      	movs	r1, #98	@ 0x62
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fe80 	bl	800a478 <VL6180X_Read8>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 800a77c:	2207      	movs	r2, #7
 800a77e:	2115      	movs	r1, #21
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff feac 	bl	800a4de <VL6180X_Write8>

  return range;
 800a786:	7bfb      	ldrb	r3, [r7, #15]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <memset>:
 800a790:	4402      	add	r2, r0
 800a792:	4603      	mov	r3, r0
 800a794:	4293      	cmp	r3, r2
 800a796:	d100      	bne.n	800a79a <memset+0xa>
 800a798:	4770      	bx	lr
 800a79a:	f803 1b01 	strb.w	r1, [r3], #1
 800a79e:	e7f9      	b.n	800a794 <memset+0x4>

0800a7a0 <__errno>:
 800a7a0:	4b01      	ldr	r3, [pc, #4]	@ (800a7a8 <__errno+0x8>)
 800a7a2:	6818      	ldr	r0, [r3, #0]
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000040 	.word	0x20000040

0800a7ac <__libc_init_array>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a7e4 <__libc_init_array+0x38>)
 800a7b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a7e8 <__libc_init_array+0x3c>)
 800a7b2:	1b64      	subs	r4, r4, r5
 800a7b4:	10a4      	asrs	r4, r4, #2
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	42a6      	cmp	r6, r4
 800a7ba:	d109      	bne.n	800a7d0 <__libc_init_array+0x24>
 800a7bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a7ec <__libc_init_array+0x40>)
 800a7be:	4c0c      	ldr	r4, [pc, #48]	@ (800a7f0 <__libc_init_array+0x44>)
 800a7c0:	f000 f84a 	bl	800a858 <_init>
 800a7c4:	1b64      	subs	r4, r4, r5
 800a7c6:	10a4      	asrs	r4, r4, #2
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	42a6      	cmp	r6, r4
 800a7cc:	d105      	bne.n	800a7da <__libc_init_array+0x2e>
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d4:	4798      	blx	r3
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	e7ee      	b.n	800a7b8 <__libc_init_array+0xc>
 800a7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7de:	4798      	blx	r3
 800a7e0:	3601      	adds	r6, #1
 800a7e2:	e7f2      	b.n	800a7ca <__libc_init_array+0x1e>
 800a7e4:	0800a954 	.word	0x0800a954
 800a7e8:	0800a954 	.word	0x0800a954
 800a7ec:	0800a954 	.word	0x0800a954
 800a7f0:	0800a958 	.word	0x0800a958

0800a7f4 <memcpy>:
 800a7f4:	440a      	add	r2, r1
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7fc:	d100      	bne.n	800a800 <memcpy+0xc>
 800a7fe:	4770      	bx	lr
 800a800:	b510      	push	{r4, lr}
 800a802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80a:	4291      	cmp	r1, r2
 800a80c:	d1f9      	bne.n	800a802 <memcpy+0xe>
 800a80e:	bd10      	pop	{r4, pc}

0800a810 <sqrt>:
 800a810:	b508      	push	{r3, lr}
 800a812:	ed2d 8b04 	vpush	{d8-d9}
 800a816:	eeb0 8b40 	vmov.f64	d8, d0
 800a81a:	f000 f819 	bl	800a850 <__ieee754_sqrt>
 800a81e:	eeb4 8b48 	vcmp.f64	d8, d8
 800a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a826:	d60c      	bvs.n	800a842 <sqrt+0x32>
 800a828:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800a848 <sqrt+0x38>
 800a82c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a834:	d505      	bpl.n	800a842 <sqrt+0x32>
 800a836:	f7ff ffb3 	bl	800a7a0 <__errno>
 800a83a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a83e:	2321      	movs	r3, #33	@ 0x21
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	ecbd 8b04 	vpop	{d8-d9}
 800a846:	bd08      	pop	{r3, pc}
	...

0800a850 <__ieee754_sqrt>:
 800a850:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a854:	4770      	bx	lr
	...

0800a858 <_init>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	bf00      	nop
 800a85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85e:	bc08      	pop	{r3}
 800a860:	469e      	mov	lr, r3
 800a862:	4770      	bx	lr

0800a864 <_fini>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	bf00      	nop
 800a868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86a:	bc08      	pop	{r3}
 800a86c:	469e      	mov	lr, r3
 800a86e:	4770      	bx	lr
