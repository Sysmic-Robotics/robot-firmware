
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a630  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a830  0800a830  0000b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a90c  0800a90c  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a90c  0800a90c  0000b90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a914  0800a914  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a914  0800a914  0000b914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a918  0800a918  0000b918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a91c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004570  20000070  0800a98c  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045e0  0800a98c  0000c5e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024026  00000000  00000000  0000c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ff8  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c7  00000000  00000000  00036cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de7c  00000000  00000000  000382b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000268e8  00000000  00000000  00066133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010992e  00000000  00000000  0008ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000761c  00000000  00000000  0019638c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0019d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a818 	.word	0x0800a818

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800a818 	.word	0x0800a818

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <BallDetectorFunction>:
#include "system_globals.h"
#include "vl6180x.h"
#include "radio_task.h"
#include <string.h>

void BallDetectorFunction(void const * argument) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8000574:	2229      	movs	r2, #41	@ 0x29
 8000576:	492c      	ldr	r1, [pc, #176]	@ (8000628 <BallDetectorFunction+0xbc>)
 8000578:	482c      	ldr	r0, [pc, #176]	@ (800062c <BallDetectorFunction+0xc0>)
 800057a:	f009 ffba 	bl	800a4f2 <VL6180X_Init>
    ball_range = VL6180X_ReadRange(&range_sensor);
 800057e:	482b      	ldr	r0, [pc, #172]	@ (800062c <BallDetectorFunction+0xc0>)
 8000580:	f00a f8b9 	bl	800a6f6 <VL6180X_ReadRange>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <BallDetectorFunction+0xc4>)
 800058a:	801a      	strh	r2, [r3, #0]
    memset(ball_meas_set, ball_range, 10);
 800058c:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <BallDetectorFunction+0xc4>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	220a      	movs	r2, #10
 8000592:	4619      	mov	r1, r3
 8000594:	4827      	ldr	r0, [pc, #156]	@ (8000634 <BallDetectorFunction+0xc8>)
 8000596:	f00a f8db 	bl	800a750 <memset>
    for (;;) {
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 800059a:	4824      	ldr	r0, [pc, #144]	@ (800062c <BallDetectorFunction+0xc0>)
 800059c:	f00a f8ab 	bl	800a6f6 <VL6180X_ReadRange>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <BallDetectorFunction+0xc8>)
 80005a6:	701a      	strb	r2, [r3, #0]
        ball_accum = ball_meas_set[0];
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <BallDetectorFunction+0xc8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <BallDetectorFunction+0xcc>)
 80005b0:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 9; i > 0; i--) {
 80005b2:	2309      	movs	r3, #9
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e013      	b.n	80005e0 <BallDetectorFunction+0x74>
            ball_accum += ball_meas_set[i];
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <BallDetectorFunction+0xc8>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <BallDetectorFunction+0xcc>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <BallDetectorFunction+0xcc>)
 80005ca:	801a      	strh	r2, [r3, #0]
            ball_meas_set[i] = ball_meas_set[i - 1];
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4918      	ldr	r1, [pc, #96]	@ (8000634 <BallDetectorFunction+0xc8>)
 80005d4:	5c89      	ldrb	r1, [r1, r2]
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <BallDetectorFunction+0xc8>)
 80005d8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 9; i > 0; i--) {
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	3b01      	subs	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1e8      	bne.n	80005b8 <BallDetectorFunction+0x4c>
        }
        ball_range = ball_accum / 10;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <BallDetectorFunction+0xcc>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <BallDetectorFunction+0xd0>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <BallDetectorFunction+0xc4>)
 80005f6:	801a      	strh	r2, [r3, #0]
        if (ball_range < VL6180X_THRESHOLD) {
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <BallDetectorFunction+0xc4>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b40      	cmp	r3, #64	@ 0x40
 80005fe:	d80b      	bhi.n	8000618 <BallDetectorFunction+0xac>
            ball_posession = 0x01;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <BallDetectorFunction+0xd4>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
            
            updateBuffer(txBuffer);
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <BallDetectorFunction+0xd8>)
 8000608:	f000 fe7c 	bl	8001304 <updateBuffer>
            Radio_SendPacket(&nrf_device, txBuffer, 32);
 800060c:	2220      	movs	r2, #32
 800060e:	490d      	ldr	r1, [pc, #52]	@ (8000644 <BallDetectorFunction+0xd8>)
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <BallDetectorFunction+0xdc>)
 8000612:	f000 feed 	bl	80013f0 <Radio_SendPacket>
 8000616:	e002      	b.n	800061e <BallDetectorFunction+0xb2>
        } else {
            ball_posession = 0x00;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <BallDetectorFunction+0xd4>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
        }
        osDelay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f006 f9e9 	bl	80069f6 <osDelay>
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 8000624:	e7b9      	b.n	800059a <BallDetectorFunction+0x2e>
 8000626:	bf00      	nop
 8000628:	20000488 	.word	0x20000488
 800062c:	200003ac 	.word	0x200003ac
 8000630:	200003be 	.word	0x200003be
 8000634:	200003c4 	.word	0x200003c4
 8000638:	200003c0 	.word	0x200003c0
 800063c:	cccccccd 	.word	0xcccccccd
 8000640:	200003bc 	.word	0x200003bc
 8000644:	200000dc 	.word	0x200000dc
 8000648:	20000100 	.word	0x20000100

0800064c <DriveFunction>:
#ifndef KICKER_START
#define KICKER_START 2
#endif

void DriveFunction(void const * argument)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b098      	sub	sp, #96	@ 0x60
 8000650:	af06      	add	r7, sp, #24
 8000652:	6078      	str	r0, [r7, #4]
    // Init PID sampler
    uint32_t timeToWait = osKernelSysTick();
 8000654:	f006 f998 	bl	8006988 <osKernelSysTick>
 8000658:	4603      	mov	r3, r0
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
    // Init robot_id
    robot_id = Board_GetID();
 800065c:	f009 f8de 	bl	800981c <Board_GetID>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	4bbd      	ldr	r3, [pc, #756]	@ (800095c <DriveFunction+0x310>)
 8000666:	801a      	strh	r2, [r3, #0]

    // Init wheels motors DAC: 2.0[V] ref
    MAX581x_Handler_t driveDAC;
    MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 8000668:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800066c:	2202      	movs	r2, #2
 800066e:	49bc      	ldr	r1, [pc, #752]	@ (8000960 <DriveFunction+0x314>)
 8000670:	4618      	mov	r0, r3
 8000672:	f008 ff63 	bl	800953c <MAX581x_Init>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 8000676:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f008 ffab 	bl	80095da <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 8000684:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000688:	2200      	movs	r2, #0
 800068a:	2101      	movs	r1, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f008 ffa4 	bl	80095da <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 8000692:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f008 ff9d 	bl	80095da <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 80006a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006a4:	2200      	movs	r2, #0
 80006a6:	2103      	movs	r1, #3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 ff96 	bl	80095da <MAX581x_Code>

    // Init dribbler motor DAC: 2.0[V] ref
    MAX581x_Handler_t dribblerDAC;
    MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 80006ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b2:	2202      	movs	r2, #2
 80006b4:	49ab      	ldr	r1, [pc, #684]	@ (8000964 <DriveFunction+0x318>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 ff40 	bl	800953c <MAX581x_Init>
    MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 80006bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 ff88 	bl	80095da <MAX581x_Code>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d0:	48a5      	ldr	r0, [pc, #660]	@ (8000968 <DriveFunction+0x31c>)
 80006d2:	f002 fd37 	bl	8003144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	48a3      	ldr	r0, [pc, #652]	@ (8000968 <DriveFunction+0x31c>)
 80006dc:	f002 fd32 	bl	8003144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2140      	movs	r1, #64	@ 0x40
 80006e4:	48a0      	ldr	r0, [pc, #640]	@ (8000968 <DriveFunction+0x31c>)
 80006e6:	f002 fd2d 	bl	8003144 <HAL_GPIO_WritePin>

    // Config motors GPIO and TIM
    // Motor 1
    motor[0].enablePin.GPIOx = GPIOA;
 80006ea:	4ba0      	ldr	r3, [pc, #640]	@ (800096c <DriveFunction+0x320>)
 80006ec:	4aa0      	ldr	r2, [pc, #640]	@ (8000970 <DriveFunction+0x324>)
 80006ee:	655a      	str	r2, [r3, #84]	@ 0x54
    motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 80006f0:	4b9e      	ldr	r3, [pc, #632]	@ (800096c <DriveFunction+0x320>)
 80006f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    motor[0].dirPin.GPIOx = GPIOA;
 80006fa:	4b9c      	ldr	r3, [pc, #624]	@ (800096c <DriveFunction+0x320>)
 80006fc:	4a9c      	ldr	r2, [pc, #624]	@ (8000970 <DriveFunction+0x324>)
 80006fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 8000700:	4b9a      	ldr	r3, [pc, #616]	@ (800096c <DriveFunction+0x320>)
 8000702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000706:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    motor[0].brakePin.GPIOx = GPIOA;
 800070a:	4b98      	ldr	r3, [pc, #608]	@ (800096c <DriveFunction+0x320>)
 800070c:	4a98      	ldr	r2, [pc, #608]	@ (8000970 <DriveFunction+0x324>)
 800070e:	665a      	str	r2, [r3, #100]	@ 0x64
    motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 8000710:	4b96      	ldr	r3, [pc, #600]	@ (800096c <DriveFunction+0x320>)
 8000712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    motor[0].encoder.count = &TIM3->CNT;
 800071a:	4b94      	ldr	r3, [pc, #592]	@ (800096c <DriveFunction+0x320>)
 800071c:	4a95      	ldr	r2, [pc, #596]	@ (8000974 <DriveFunction+0x328>)
 800071e:	641a      	str	r2, [r3, #64]	@ 0x40
    motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 8000720:	4b95      	ldr	r3, [pc, #596]	@ (8000978 <DriveFunction+0x32c>)
 8000722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000724:	ee07 3a90 	vmov	s15, r3
 8000728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800072c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000734:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800097c <DriveFunction+0x330>
 8000738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073c:	4b8b      	ldr	r3, [pc, #556]	@ (800096c <DriveFunction+0x320>)
 800073e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 8000742:	4b8a      	ldr	r3, [pc, #552]	@ (800096c <DriveFunction+0x320>)
 8000744:	2201      	movs	r2, #1
 8000746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800074a:	4b88      	ldr	r3, [pc, #544]	@ (800096c <DriveFunction+0x320>)
 800074c:	4a8c      	ldr	r2, [pc, #560]	@ (8000980 <DriveFunction+0x334>)
 800074e:	64da      	str	r2, [r3, #76]	@ 0x4c
    TIM3->CR1 = TIM_CR1_CEN;
 8000750:	4b89      	ldr	r3, [pc, #548]	@ (8000978 <DriveFunction+0x32c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]

    // Motor 2
    motor[1].enablePin.GPIOx = GPIOC;
 8000756:	4b85      	ldr	r3, [pc, #532]	@ (800096c <DriveFunction+0x320>)
 8000758:	4a8a      	ldr	r2, [pc, #552]	@ (8000984 <DriveFunction+0x338>)
 800075a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 800075e:	4b83      	ldr	r3, [pc, #524]	@ (800096c <DriveFunction+0x320>)
 8000760:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000764:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    motor[1].dirPin.GPIOx = GPIOC;
 8000768:	4b80      	ldr	r3, [pc, #512]	@ (800096c <DriveFunction+0x320>)
 800076a:	4a86      	ldr	r2, [pc, #536]	@ (8000984 <DriveFunction+0x338>)
 800076c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8000770:	4b7e      	ldr	r3, [pc, #504]	@ (800096c <DriveFunction+0x320>)
 8000772:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000776:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    motor[1].brakePin.GPIOx = GPIOD;
 800077a:	4b7c      	ldr	r3, [pc, #496]	@ (800096c <DriveFunction+0x320>)
 800077c:	4a82      	ldr	r2, [pc, #520]	@ (8000988 <DriveFunction+0x33c>)
 800077e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 8000782:	4b7a      	ldr	r3, [pc, #488]	@ (800096c <DriveFunction+0x320>)
 8000784:	2201      	movs	r2, #1
 8000786:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    motor[1].encoder.count = &TIM8->CNT;
 800078a:	4b78      	ldr	r3, [pc, #480]	@ (800096c <DriveFunction+0x320>)
 800078c:	4a7f      	ldr	r2, [pc, #508]	@ (800098c <DriveFunction+0x340>)
 800078e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 8000792:	4b7f      	ldr	r3, [pc, #508]	@ (8000990 <DriveFunction+0x344>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	ee07 3a90 	vmov	s15, r3
 800079a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800079e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80007a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a6:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800097c <DriveFunction+0x330>
 80007aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ae:	4b6f      	ldr	r3, [pc, #444]	@ (800096c <DriveFunction+0x320>)
 80007b0:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
    motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	@ (800096c <DriveFunction+0x320>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
    motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	@ (800096c <DriveFunction+0x320>)
 80007be:	4a70      	ldr	r2, [pc, #448]	@ (8000980 <DriveFunction+0x334>)
 80007c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    TIM8->CR1 = TIM_CR1_CEN;
 80007c4:	4b72      	ldr	r3, [pc, #456]	@ (8000990 <DriveFunction+0x344>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]

    // Motor 3
    motor[2].enablePin.GPIOx = GPIOK;
 80007ca:	4b68      	ldr	r3, [pc, #416]	@ (800096c <DriveFunction+0x320>)
 80007cc:	4a71      	ldr	r2, [pc, #452]	@ (8000994 <DriveFunction+0x348>)
 80007ce:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 80007d2:	4b66      	ldr	r3, [pc, #408]	@ (800096c <DriveFunction+0x320>)
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
    motor[2].dirPin.GPIOx = GPIOG;
 80007da:	4b64      	ldr	r3, [pc, #400]	@ (800096c <DriveFunction+0x320>)
 80007dc:	4a6e      	ldr	r2, [pc, #440]	@ (8000998 <DriveFunction+0x34c>)
 80007de:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 80007e2:	4b62      	ldr	r3, [pc, #392]	@ (800096c <DriveFunction+0x320>)
 80007e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007e8:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
    motor[2].brakePin.GPIOx = GPIOK;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	@ (800096c <DriveFunction+0x320>)
 80007ee:	4a69      	ldr	r2, [pc, #420]	@ (8000994 <DriveFunction+0x348>)
 80007f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	@ (800096c <DriveFunction+0x320>)
 80007f6:	2240      	movs	r2, #64	@ 0x40
 80007f8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
    motor[2].encoder.count = &TIM2->CNT;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	@ (800096c <DriveFunction+0x320>)
 80007fe:	4a67      	ldr	r2, [pc, #412]	@ (800099c <DriveFunction+0x350>)
 8000800:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 8000804:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000812:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800081a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800097c <DriveFunction+0x330>
 800081e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000822:	4b52      	ldr	r3, [pc, #328]	@ (800096c <DriveFunction+0x320>)
 8000824:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 8000828:	4b50      	ldr	r3, [pc, #320]	@ (800096c <DriveFunction+0x320>)
 800082a:	2201      	movs	r2, #1
 800082c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8000830:	4b4e      	ldr	r3, [pc, #312]	@ (800096c <DriveFunction+0x320>)
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <DriveFunction+0x334>)
 8000834:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    TIM2->CR1 = TIM_CR1_CEN;
 8000838:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]

    // Motor 4
    motor[3].enablePin.GPIOx = GPIOF;
 8000840:	4b4a      	ldr	r3, [pc, #296]	@ (800096c <DriveFunction+0x320>)
 8000842:	4a57      	ldr	r2, [pc, #348]	@ (80009a0 <DriveFunction+0x354>)
 8000844:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
    motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 8000848:	4b48      	ldr	r3, [pc, #288]	@ (800096c <DriveFunction+0x320>)
 800084a:	2220      	movs	r2, #32
 800084c:	f8a3 21cc 	strh.w	r2, [r3, #460]	@ 0x1cc
    motor[3].dirPin.GPIOx = GPIOF;
 8000850:	4b46      	ldr	r3, [pc, #280]	@ (800096c <DriveFunction+0x320>)
 8000852:	4a53      	ldr	r2, [pc, #332]	@ (80009a0 <DriveFunction+0x354>)
 8000854:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
    motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 8000858:	4b44      	ldr	r3, [pc, #272]	@ (800096c <DriveFunction+0x320>)
 800085a:	2208      	movs	r2, #8
 800085c:	f8a3 21d4 	strh.w	r2, [r3, #468]	@ 0x1d4
    motor[3].brakePin.GPIOx = GPIOF;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <DriveFunction+0x320>)
 8000862:	4a4f      	ldr	r2, [pc, #316]	@ (80009a0 <DriveFunction+0x354>)
 8000864:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
    motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 8000868:	4b40      	ldr	r3, [pc, #256]	@ (800096c <DriveFunction+0x320>)
 800086a:	2210      	movs	r2, #16
 800086c:	f8a3 21dc 	strh.w	r2, [r3, #476]	@ 0x1dc
    motor[3].encoder.count = &TIM5->CNT;
 8000870:	4b3e      	ldr	r3, [pc, #248]	@ (800096c <DriveFunction+0x320>)
 8000872:	4a4c      	ldr	r2, [pc, #304]	@ (80009a4 <DriveFunction+0x358>)
 8000874:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8000878:	4b4b      	ldr	r3, [pc, #300]	@ (80009a8 <DriveFunction+0x35c>)
 800087a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000884:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800088c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800097c <DriveFunction+0x330>
 8000890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000894:	4b35      	ldr	r3, [pc, #212]	@ (800096c <DriveFunction+0x320>)
 8000896:	edc3 7a6e 	vstr	s15, [r3, #440]	@ 0x1b8
    motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 800089a:	4b34      	ldr	r3, [pc, #208]	@ (800096c <DriveFunction+0x320>)
 800089c:	2201      	movs	r2, #1
 800089e:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4
    motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80008a2:	4b32      	ldr	r3, [pc, #200]	@ (800096c <DriveFunction+0x320>)
 80008a4:	4a36      	ldr	r2, [pc, #216]	@ (8000980 <DriveFunction+0x334>)
 80008a6:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    TIM5->CR1 = TIM_CR1_CEN;
 80008aa:	4b3f      	ldr	r3, [pc, #252]	@ (80009a8 <DriveFunction+0x35c>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]

    // Config PID
    PID_Params_t pidParams;
    pidParams.Kp = 12.0f;//12.0f;
 80008b0:	4b3e      	ldr	r3, [pc, #248]	@ (80009ac <DriveFunction+0x360>)
 80008b2:	60fb      	str	r3, [r7, #12]
    pidParams.Ki = 9.0f;//4.5f;
 80008b4:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <DriveFunction+0x364>)
 80008b6:	613b      	str	r3, [r7, #16]
    pidParams.Kd = 0.0f;
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
    pidParams.outputMax = (float)(4095.0f);
 80008be:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <DriveFunction+0x368>)
 80008c0:	61bb      	str	r3, [r7, #24]
    pidParams.outputMin = (float)(-4095.0f);
 80008c2:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <DriveFunction+0x36c>)
 80008c4:	61fb      	str	r3, [r7, #28]
    pidParams.integralMax = pidParams.outputMax / 5.0f;
 80008c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80008ca:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008d2:	edc7 7a08 	vstr	s15, [r7, #32]
    pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 80008d6:	4b39      	ldr	r3, [pc, #228]	@ (80009bc <DriveFunction+0x370>)
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24

    // Enable motors and disable brake
    for (uint8_t i = 0; i < 4; i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80008e0:	e034      	b.n	800094c <DriveFunction+0x300>
    {
        Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 80008e2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80008e6:	4613      	mov	r3, r2
 80008e8:	015b      	lsls	r3, r3, #5
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4a1f      	ldr	r2, [pc, #124]	@ (800096c <DriveFunction+0x320>)
 80008f0:	4413      	add	r3, r2
 80008f2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80008f6:	2201      	movs	r2, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f009 f835 	bl	8009968 <Motor_Init>
        Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 80008fe:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000902:	4613      	mov	r3, r2
 8000904:	015b      	lsls	r3, r3, #5
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <DriveFunction+0x320>)
 800090c:	4413      	add	r3, r2
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f009 f8bd 	bl	8009a90 <Motor_SetBrake>
        PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 8000916:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800091a:	4613      	mov	r3, r2
 800091c:	015b      	lsls	r3, r3, #5
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <DriveFunction+0x320>)
 8000924:	189d      	adds	r5, r3, r2
 8000926:	2301      	movs	r3, #1
 8000928:	9304      	str	r3, [sp, #16]
 800092a:	466c      	mov	r4, sp
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800093c:	4628      	mov	r0, r5
 800093e:	f008 fe8b 	bl	8009658 <PID_Init>
    for (uint8_t i = 0; i < 4; i++)
 8000942:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000946:	3301      	adds	r3, #1
 8000948:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800094c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000950:	2b03      	cmp	r3, #3
 8000952:	d9c6      	bls.n	80008e2 <DriveFunction+0x296>
    }

    // Infinite loop
    for(;;)
    {
        for (uint8_t i = 0; i < 4; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800095a:	e059      	b.n	8000a10 <DriveFunction+0x3c4>
 800095c:	200000d8 	.word	0x200000d8
 8000960:	200003e0 	.word	0x200003e0
 8000964:	20000434 	.word	0x20000434
 8000968:	40022400 	.word	0x40022400
 800096c:	200001a0 	.word	0x200001a0
 8000970:	40020000 	.word	0x40020000
 8000974:	40000424 	.word	0x40000424
 8000978:	40000400 	.word	0x40000400
 800097c:	45000000 	.word	0x45000000
 8000980:	3f714639 	.word	0x3f714639
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40010424 	.word	0x40010424
 8000990:	40010400 	.word	0x40010400
 8000994:	40022800 	.word	0x40022800
 8000998:	40021800 	.word	0x40021800
 800099c:	40000024 	.word	0x40000024
 80009a0:	40021400 	.word	0x40021400
 80009a4:	40000c24 	.word	0x40000c24
 80009a8:	40000c00 	.word	0x40000c00
 80009ac:	41400000 	.word	0x41400000
 80009b0:	41100000 	.word	0x41100000
 80009b4:	457ff000 	.word	0x457ff000
 80009b8:	c57ff000 	.word	0xc57ff000
 80009bc:	3a83126f 	.word	0x3a83126f
        {
            // Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine
            Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 80009c0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80009c4:	4613      	mov	r3, r2
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4a28      	ldr	r2, [pc, #160]	@ (8000a70 <DriveFunction+0x424>)
 80009ce:	441a      	add	r2, r3
 80009d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009d4:	4927      	ldr	r1, [pc, #156]	@ (8000a74 <DriveFunction+0x428>)
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	edd3 7a00 	vldr	s15, [r3]
 80009de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009e2:	eeb0 0a67 	vmov.f32	s0, s15
 80009e6:	4619      	mov	r1, r3
 80009e8:	4610      	mov	r0, r2
 80009ea:	f008 ffdf 	bl	80099ac <Motor_CLDrive>
            // TODO: make dribbler files, variable speeds
            MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <DriveFunction+0x42c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <DriveFunction+0x430>)
 80009f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80009fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f008 fdea 	bl	80095da <MAX581x_Code>
        for (uint8_t i = 0; i < 4; i++)
 8000a06:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000a10:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d9d3      	bls.n	80009c0 <DriveFunction+0x374>
        }

        if(kick_sel && kick_flag == KICKER_CHARGED) {
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <DriveFunction+0x434>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d019      	beq.n	8000a54 <DriveFunction+0x408>
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <DriveFunction+0x438>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d115      	bne.n	8000a54 <DriveFunction+0x408>
            osMutexWait(kickFlagHandle, osWaitForever);
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <DriveFunction+0x43c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	4618      	mov	r0, r3
 8000a32:	f006 f801 	bl	8006a38 <osMutexWait>
            kick_flag = KICKER_START;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <DriveFunction+0x438>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	701a      	strb	r2, [r3, #0]
            osMutexRelease(kickFlagHandle);
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <DriveFunction+0x43c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 f847 	bl	8006ad4 <osMutexRelease>
            osMessagePut(kickQueueHandle, 0, 0);
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <DriveFunction+0x440>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f006 f888 	bl	8006b64 <osMessagePut>
        }

        osMessagePut(nrf24CheckHandle, 0, 0);
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <DriveFunction+0x444>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 f881 	bl	8006b64 <osMessagePut>
        osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 8000a62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a66:	2101      	movs	r1, #1
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 f92f 	bl	8006ccc <osDelayUntil>
        for (uint8_t i = 0; i < 4; i++)
 8000a6e:	e771      	b.n	8000954 <DriveFunction+0x308>
 8000a70:	200001a0 	.word	0x200001a0
 8000a74:	20000160 	.word	0x20000160
 8000a78:	2000039c 	.word	0x2000039c
 8000a7c:	0800a8d0 	.word	0x0800a8d0
 8000a80:	2000039d 	.word	0x2000039d
 8000a84:	2000039e 	.word	0x2000039e
 8000a88:	200003a8 	.word	0x200003a8
 8000a8c:	200003a4 	.word	0x200003a4
 8000a90:	20000158 	.word	0x20000158

08000a94 <setSpeed>:
    }
}

void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b090      	sub	sp, #64	@ 0x40
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]

	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8000aa0:	4bac      	ldr	r3, [pc, #688]	@ (8000d54 <setSpeed+0x2c0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8000aa6:	4bab      	ldr	r3, [pc, #684]	@ (8000d54 <setSpeed+0x2c0>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F))/100.0f  : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F))/100.0f ;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da16      	bge.n	8000ae6 <setSpeed+0x52>
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3304      	adds	r3, #4
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad8:	eeb1 7a67 	vneg.f32	s14, s15
 8000adc:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8000d58 <setSpeed+0x2c4>
 8000ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae4:	e013      	b.n	8000b0e <setSpeed+0x7a>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000afc:	4313      	orrs	r3, r2
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b06:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000d58 <setSpeed+0x2c4>
 8000b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0e:	4b91      	ldr	r3, [pc, #580]	@ (8000d54 <setSpeed+0x2c0>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F))/100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F))/100.0f ;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3302      	adds	r3, #2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da16      	bge.n	8000b4e <setSpeed+0xba>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3304      	adds	r3, #4
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b36:	4313      	orrs	r3, r2
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b40:	eeb1 7a67 	vneg.f32	s14, s15
 8000b44:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8000d58 <setSpeed+0x2c4>
 8000b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b4c:	e013      	b.n	8000b76 <setSpeed+0xe2>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3304      	adds	r3, #4
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b64:	4313      	orrs	r3, r2
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8000d58 <setSpeed+0x2c4>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	4b77      	ldr	r3, [pc, #476]	@ (8000d54 <setSpeed+0x2c0>)
 8000b78:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F))/100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F))/100.0f ;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3303      	adds	r3, #3
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da16      	bge.n	8000bb6 <setSpeed+0x122>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	01db      	lsls	r3, r3, #7
 8000b90:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3303      	adds	r3, #3
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba8:	eeb1 7a67 	vneg.f32	s14, s15
 8000bac:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8000d58 <setSpeed+0x2c4>
 8000bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb4:	e013      	b.n	8000bde <setSpeed+0x14a>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	01db      	lsls	r3, r3, #7
 8000bbe:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3303      	adds	r3, #3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd6:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8000d58 <setSpeed+0x2c4>
 8000bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bde:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <setSpeed+0x2c0>)
 8000be0:	edc3 7a02 	vstr	s15, [r3, #8]


	/* Limit linear velocity magnitude */
	float vel_mag = sqrt(v_vel[0]*v_vel[0] + v_vel[1]*v_vel[1]);
 8000be4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <setSpeed+0x2c0>)
 8000be6:	ed93 7a00 	vldr	s14, [r3]
 8000bea:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <setSpeed+0x2c0>)
 8000bec:	edd3 7a00 	vldr	s15, [r3]
 8000bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bf4:	4b57      	ldr	r3, [pc, #348]	@ (8000d54 <setSpeed+0x2c0>)
 8000bf6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000bfa:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <setSpeed+0x2c0>)
 8000bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c10:	f009 fdde 	bl	800a7d0 <sqrt>
 8000c14:	eeb0 7b40 	vmov.f64	d7, d0
 8000c18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c1c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	if (vel_mag > ROBOT_MAX_LINEAR_VEL)
 8000c20:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000c24:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8000c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c30:	dd1b      	ble.n	8000c6a <setSpeed+0x1d6>
	{
	    float scale = ROBOT_MAX_LINEAR_VEL / vel_mag;
 8000c32:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 8000c36:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	    v_vel[0] *= scale;
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <setSpeed+0x2c0>)
 8000c44:	ed93 7a00 	vldr	s14, [r3]
 8000c48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	4b40      	ldr	r3, [pc, #256]	@ (8000d54 <setSpeed+0x2c0>)
 8000c52:	edc3 7a00 	vstr	s15, [r3]
	    v_vel[1] *= scale;
 8000c56:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <setSpeed+0x2c0>)
 8000c58:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <setSpeed+0x2c0>)
 8000c66:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d54 <setSpeed+0x2c0>)
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c78:	edc7 7a08 	vstr	s15, [r7, #32]
 8000c7c:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <setSpeed+0x2c0>)
 8000c7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c8a:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 8000c8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c92:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c96:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca2:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8000ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cae:	eeb0 0b47 	vmov.f64	d0, d7
 8000cb2:	f009 fd8d 	bl	800a7d0 <sqrt>
 8000cb6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cbe:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 8000cc2:	edd7 6a08 	vldr	s13, [r7, #32]
 8000cc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cce:	edc7 7a05 	vstr	s15, [r7, #20]
 8000cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8000cd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cde:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 8000ce2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf2:	dd24      	ble.n	8000d3e <setSpeed+0x2aa>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 8000cf4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000cf8:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 8000cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d06:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 8000d0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d16:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 8000d1a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <setSpeed+0x2c0>)
 8000d28:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 8000d2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <setSpeed+0x2c0>)
 8000d3a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	

	for (uint8_t i = 0; i < 4; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000d44:	e04f      	b.n	8000de6 <setSpeed+0x352>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
		for (uint8_t j = 0; j < 3; j++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d52:	e024      	b.n	8000d9e <setSpeed+0x30a>
 8000d54:	20000390 	.word	0x20000390
 8000d58:	42c80000 	.word	0x42c80000
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8000d5c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000d60:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8000d64:	4824      	ldr	r0, [pc, #144]	@ (8000df8 <setSpeed+0x364>)
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4403      	add	r3, r0
 8000d72:	ed93 7a00 	vldr	s14, [r3]
 8000d76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d7a:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <setSpeed+0x368>)
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d90:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		for (uint8_t j = 0; j < 3; j++)
 8000d94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d98:	3301      	adds	r3, #1
 8000d9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d9da      	bls.n	8000d5c <setSpeed+0x2c8>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 8000da6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	bfcc      	ite	gt
 8000db4:	2301      	movgt	r3, #1
 8000db6:	2300      	movle	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 8000dce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dda:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8000ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000de0:	3301      	adds	r3, #1
 8000de2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000de6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d9ab      	bls.n	8000d46 <setSpeed+0x2b2>
	}
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3740      	adds	r7, #64	@ 0x40
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000170 	.word	0x20000170
 8000dfc:	20000390 	.word	0x20000390

08000e00 <KickFunction>:
#include "kick_task.h"
#include "cmsis_os.h"
#include "stm32f7xx_hal.h"

void KickFunction(void const * argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        // --- Cargar el capacitor del kicker ---
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4824      	ldr	r0, [pc, #144]	@ (8000ea0 <KickFunction+0xa0>)
 8000e0e:	f002 f999 	bl	8003144 <HAL_GPIO_WritePin>
        osDelay(4000);
 8000e12:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000e16:	f005 fdee 	bl	80069f6 <osDelay>
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4820      	ldr	r0, [pc, #128]	@ (8000ea0 <KickFunction+0xa0>)
 8000e20:	f002 f990 	bl	8003144 <HAL_GPIO_WritePin>

        // --- Marcar kicker como cargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <KickFunction+0xa4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 fe03 	bl	8006a38 <osMutexWait>
        kick_flag = KICKER_CHARGED;
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <KickFunction+0xa8>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <KickFunction+0xa4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f005 fe49 	bl	8006ad4 <osMutexRelease>

        // --- Esperar evento de disparo ---
        osEvent kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <KickFunction+0xac>)
 8000e44:	6819      	ldr	r1, [r3, #0]
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f005 fec8 	bl	8006be4 <osMessageGet>

        // --- Activar el kicker (disparo) ---
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e5a:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <KickFunction+0xb0>)
 8000e5c:	f002 f972 	bl	8003144 <HAL_GPIO_WritePin>
        osDelay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f005 fdc8 	bl	80069f6 <osDelay>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e6c:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <KickFunction+0xb0>)
 8000e6e:	f002 f969 	bl	8003144 <HAL_GPIO_WritePin>

        // --- Marcar kicker como descargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <KickFunction+0xa4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fddc 	bl	8006a38 <osMutexWait>
        kick_flag = KICKER_DISCHARGED;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <KickFunction+0xa8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <KickFunction+0xa4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f005 fe22 	bl	8006ad4 <osMutexRelease>

        // --- Contador de disparos ---
        kick_count++;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <KickFunction+0xb4>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <KickFunction+0xb4>)
 8000e9a:	801a      	strh	r2, [r3, #0]
    {
 8000e9c:	bf00      	nop
 8000e9e:	e7b3      	b.n	8000e08 <KickFunction+0x8>
 8000ea0:	40022400 	.word	0x40022400
 8000ea4:	200003a8 	.word	0x200003a8
 8000ea8:	2000039e 	.word	0x2000039e
 8000eac:	200003a4 	.word	0x200003a4
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	200003a0 	.word	0x200003a0

08000eb8 <getDribbler_speed>:
    }
}

uint8_t getDribbler_speed(uint8_t *buffer)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] && 0x1C)>>2;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	105b      	asrs	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <main>:
void DriveFunction(void const * argument);
void RadioFunction(void const * argument);
void KickFunction(void const * argument);

int main(void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b09a      	sub	sp, #104	@ 0x68
 8000efc:	af00      	add	r7, sp, #0
    HAL_Init();
 8000efe:	f001 fb40 	bl	8002582 <HAL_Init>
    SystemClock_Config();
 8000f02:	f000 fe49 	bl	8001b98 <SystemClock_Config>
    MX_GPIO_Init();
 8000f06:	f001 f945 	bl	8002194 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000f0a:	f000 ff73 	bl	8001df4 <MX_SPI1_Init>
    MX_I2C1_Init();
 8000f0e:	f000 feb1 	bl	8001c74 <MX_I2C1_Init>
    MX_I2C2_Init();
 8000f12:	f000 feef 	bl	8001cf4 <MX_I2C2_Init>
    MX_TIM2_Init();
 8000f16:	f000 ffe3 	bl	8001ee0 <MX_TIM2_Init>
    MX_TIM3_Init();
 8000f1a:	f001 f835 	bl	8001f88 <MX_TIM3_Init>
    MX_TIM5_Init();
 8000f1e:	f001 f889 	bl	8002034 <MX_TIM5_Init>
    MX_TIM8_Init();
 8000f22:	f001 f8dd 	bl	80020e0 <MX_TIM8_Init>
    MX_I2C3_Init();
 8000f26:	f000 ff25 	bl	8001d74 <MX_I2C3_Init>
    MX_UART5_Init();
 8000f2a:	f000 ffa5 	bl	8001e78 <MX_UART5_Init>

    // AGREGAR: Inicialización explícita de motores
    Motor_Init(&motor[0], 0, MOTOR_STATUS_DISABLE);  // ← DISABLE al inicio
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	4863      	ldr	r0, [pc, #396]	@ (80010c0 <main+0x1c8>)
 8000f34:	f008 fd18 	bl	8009968 <Motor_Init>
    Motor_Init(&motor[1], 1, MOTOR_STATUS_DISABLE);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4861      	ldr	r0, [pc, #388]	@ (80010c4 <main+0x1cc>)
 8000f3e:	f008 fd13 	bl	8009968 <Motor_Init>
    Motor_Init(&motor[2], 2, MOTOR_STATUS_DISABLE);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2102      	movs	r1, #2
 8000f46:	4860      	ldr	r0, [pc, #384]	@ (80010c8 <main+0x1d0>)
 8000f48:	f008 fd0e 	bl	8009968 <Motor_Init>
    Motor_Init(&motor[3], 3, MOTOR_STATUS_DISABLE);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2103      	movs	r1, #3
 8000f50:	485e      	ldr	r0, [pc, #376]	@ (80010cc <main+0x1d4>)
 8000f52:	f008 fd09 	bl	8009968 <Motor_Init>

    kinematic[0][0] = -1/sin(WHEEL_ANGlE_1); kinematic[0][1] = 1/cos(WHEEL_ANGlE_1); kinematic[0][2] = ROBOT_RADIO;
 8000f56:	4b5e      	ldr	r3, [pc, #376]	@ (80010d0 <main+0x1d8>)
 8000f58:	4a5e      	ldr	r2, [pc, #376]	@ (80010d4 <main+0x1dc>)
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80010d0 <main+0x1d8>)
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	4b5a      	ldr	r3, [pc, #360]	@ (80010d0 <main+0x1d8>)
 8000f66:	4a5c      	ldr	r2, [pc, #368]	@ (80010d8 <main+0x1e0>)
 8000f68:	609a      	str	r2, [r3, #8]
    kinematic[1][0] = -1/sin(WHEEL_ANGlE_2); kinematic[1][1] = 1/cos(WHEEL_ANGlE_2); kinematic[1][2] = ROBOT_RADIO;
 8000f6a:	4b59      	ldr	r3, [pc, #356]	@ (80010d0 <main+0x1d8>)
 8000f6c:	4a5b      	ldr	r2, [pc, #364]	@ (80010dc <main+0x1e4>)
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	4b57      	ldr	r3, [pc, #348]	@ (80010d0 <main+0x1d8>)
 8000f72:	4a5b      	ldr	r2, [pc, #364]	@ (80010e0 <main+0x1e8>)
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	4b56      	ldr	r3, [pc, #344]	@ (80010d0 <main+0x1d8>)
 8000f78:	4a57      	ldr	r2, [pc, #348]	@ (80010d8 <main+0x1e0>)
 8000f7a:	615a      	str	r2, [r3, #20]
    kinematic[2][0] = -1/sin(WHEEL_ANGlE_3); kinematic[2][1] = 1/cos(WHEEL_ANGlE_3); kinematic[2][2] = ROBOT_RADIO;
 8000f7c:	4b54      	ldr	r3, [pc, #336]	@ (80010d0 <main+0x1d8>)
 8000f7e:	4a59      	ldr	r2, [pc, #356]	@ (80010e4 <main+0x1ec>)
 8000f80:	619a      	str	r2, [r3, #24]
 8000f82:	4b53      	ldr	r3, [pc, #332]	@ (80010d0 <main+0x1d8>)
 8000f84:	4a56      	ldr	r2, [pc, #344]	@ (80010e0 <main+0x1e8>)
 8000f86:	61da      	str	r2, [r3, #28]
 8000f88:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <main+0x1d8>)
 8000f8a:	4a53      	ldr	r2, [pc, #332]	@ (80010d8 <main+0x1e0>)
 8000f8c:	621a      	str	r2, [r3, #32]
    kinematic[3][0] = -1/sin(WHEEL_ANGlE_4); kinematic[3][1] = 1/cos(WHEEL_ANGlE_4); kinematic[3][2] = ROBOT_RADIO;
 8000f8e:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <main+0x1d8>)
 8000f90:	4a55      	ldr	r2, [pc, #340]	@ (80010e8 <main+0x1f0>)
 8000f92:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f94:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <main+0x1d8>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80010d0 <main+0x1d8>)
 8000f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80010d8 <main+0x1e0>)
 8000fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Parpadeo de LEDs para indicar inicio
    for (uint8_t i = 0; i < 5; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000fa8:	e016      	b.n	8000fd8 <main+0xe0>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 8000faa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fae:	484f      	ldr	r0, [pc, #316]	@ (80010ec <main+0x1f4>)
 8000fb0:	f008 fc24 	bl	80097fc <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 8000fb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb8:	484c      	ldr	r0, [pc, #304]	@ (80010ec <main+0x1f4>)
 8000fba:	f008 fc1f 	bl	80097fc <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 8000fbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc2:	484a      	ldr	r0, [pc, #296]	@ (80010ec <main+0x1f4>)
 8000fc4:	f008 fc1a 	bl	80097fc <Board_LedToggle>
        HAL_Delay(100);
 8000fc8:	2064      	movs	r0, #100	@ 0x64
 8000fca:	f001 fb07 	bl	80025dc <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 8000fce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d9e4      	bls.n	8000faa <main+0xb2>
    }

    // Mutex para el sistema de kick
    osMutexDef(kickFlag);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	663b      	str	r3, [r7, #96]	@ 0x60
    kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 8000fe4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fd18 	bl	8006a1e <osMutexCreate>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80010f0 <main+0x1f8>)
 8000ff2:	6013      	str	r3, [r2, #0]

    // Colas de mensajes
    osMessageQDef(kickQueue, 1, uint16_t);
 8000ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80010f4 <main+0x1fc>)
 8000ff6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffe:	e883 0003 	stmia.w	r3, {r0, r1}
    kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 8001002:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fd99 	bl	8006b40 <osMessageCreate>
 800100e:	4603      	mov	r3, r0
 8001010:	4a39      	ldr	r2, [pc, #228]	@ (80010f8 <main+0x200>)
 8001012:	6013      	str	r3, [r2, #0]
    osMessageQDef(nrf24Check, 16, uint16_t);
 8001014:	4a39      	ldr	r2, [pc, #228]	@ (80010fc <main+0x204>)
 8001016:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800101a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101e:	e883 0003 	stmia.w	r3, {r0, r1}
    nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 8001022:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fd89 	bl	8006b40 <osMessageCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a33      	ldr	r2, [pc, #204]	@ (8001100 <main+0x208>)
 8001032:	6013      	str	r3, [r2, #0]

    // Tareas principales del sistema
    osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8001034:	4b33      	ldr	r3, [pc, #204]	@ (8001104 <main+0x20c>)
 8001036:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800103a:	461d      	mov	r5, r3
 800103c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	6023      	str	r3, [r4, #0]
    driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8001044:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f005 fcac 	bl	80069a8 <osThreadCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <main+0x210>)
 8001054:	6013      	str	r3, [r2, #0]
    osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <main+0x214>)
 8001058:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800105c:	461d      	mov	r5, r3
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	6023      	str	r3, [r4, #0]
    radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fc9b 	bl	80069a8 <osThreadCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a26      	ldr	r2, [pc, #152]	@ (8001110 <main+0x218>)
 8001076:	6013      	str	r3, [r2, #0]
    osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <main+0x21c>)
 800107a:	f107 0414 	add.w	r4, r7, #20
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	6023      	str	r3, [r4, #0]
    kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fc8a 	bl	80069a8 <osThreadCreate>
 8001094:	4603      	mov	r3, r0
 8001096:	4a20      	ldr	r2, [pc, #128]	@ (8001118 <main+0x220>)
 8001098:	6013      	str	r3, [r2, #0]
    osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <main+0x224>)
 800109c:	463c      	mov	r4, r7
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	6023      	str	r3, [r4, #0]
    ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 80010a8:	463b      	mov	r3, r7
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fc7b 	bl	80069a8 <osThreadCreate>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <main+0x228>)
 80010b6:	6013      	str	r3, [r2, #0]

    osKernelStart(); // Inicia el scheduler RTOS
 80010b8:	f005 fc5f 	bl	800697a <osKernelStart>

    // Bucle infinito de seguridad (no debería llegar aquí)
    while (1) {}
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <main+0x1c4>
 80010c0:	200001a0 	.word	0x200001a0
 80010c4:	2000021c 	.word	0x2000021c
 80010c8:	20000298 	.word	0x20000298
 80010cc:	20000314 	.word	0x20000314
 80010d0:	20000170 	.word	0x20000170
 80010d4:	bf93cd3a 	.word	0xbf93cd3a
 80010d8:	3da83e42 	.word	0x3da83e42
 80010dc:	bfa71796 	.word	0xbfa71796
 80010e0:	bfc721f5 	.word	0xbfc721f5
 80010e4:	3fa71796 	.word	0x3fa71796
 80010e8:	3f93cd3a 	.word	0x3f93cd3a
 80010ec:	40022000 	.word	0x40022000
 80010f0:	200003a8 	.word	0x200003a8
 80010f4:	0800a830 	.word	0x0800a830
 80010f8:	200003a4 	.word	0x200003a4
 80010fc:	0800a838 	.word	0x0800a838
 8001100:	20000158 	.word	0x20000158
 8001104:	0800a84c 	.word	0x0800a84c
 8001108:	200003d4 	.word	0x200003d4
 800110c:	0800a86c 	.word	0x0800a86c
 8001110:	200003d8 	.word	0x200003d8
 8001114:	0800a88c 	.word	0x0800a88c
 8001118:	200003dc 	.word	0x200003dc
 800111c:	0800a8b4 	.word	0x0800a8b4
 8001120:	200003d0 	.word	0x200003d0

08001124 <HAL_TIM_PeriodElapsedCallback>:
}

// Callback de periodo de timer (para HAL)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8001136:	f001 fa31 	bl	800259c <HAL_IncTick>
    }
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40010000 	.word	0x40010000

08001148 <Error_Handler>:

// Handler de error simple
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    // Implementar manejo de error si es necesario
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <RadioFunction>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

int fokk = 0;
void RadioFunction(void const * argument) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	6178      	str	r0, [r7, #20]
    // --- Inicialización del módulo nRF24 ---
    nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 8001160:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	4b55      	ldr	r3, [pc, #340]	@ (80012bc <RadioFunction+0x164>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116e:	4a53      	ldr	r2, [pc, #332]	@ (80012bc <RadioFunction+0x164>)
 8001170:	4953      	ldr	r1, [pc, #332]	@ (80012c0 <RadioFunction+0x168>)
 8001172:	4854      	ldr	r0, [pc, #336]	@ (80012c4 <RadioFunction+0x16c>)
 8001174:	f008 fd1f 	bl	8009bb6 <nRF24_HW_Init>
    nRF24_Init(&nrf_device);
 8001178:	4852      	ldr	r0, [pc, #328]	@ (80012c4 <RadioFunction+0x16c>)
 800117a:	f008 fe08 	bl	8009d8e <nRF24_Init>
    nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 800117e:	4a52      	ldr	r2, [pc, #328]	@ (80012c8 <RadioFunction+0x170>)
 8001180:	2100      	movs	r1, #0
 8001182:	4850      	ldr	r0, [pc, #320]	@ (80012c4 <RadioFunction+0x16c>)
 8001184:	f008 febe 	bl	8009f04 <nRF24_SetAddr>
    nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 8001188:	216b      	movs	r1, #107	@ 0x6b
 800118a:	484e      	ldr	r0, [pc, #312]	@ (80012c4 <RadioFunction+0x16c>)
 800118c:	f008 feaa 	bl	8009ee4 <nRF24_SetRFChannel>
    nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 8001190:	231e      	movs	r3, #30
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	484b      	ldr	r0, [pc, #300]	@ (80012c4 <RadioFunction+0x16c>)
 8001198:	f009 f804 	bl	800a1a4 <nRF24_SetRXPipe>
    nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 800119c:	2102      	movs	r1, #2
 800119e:	4849      	ldr	r0, [pc, #292]	@ (80012c4 <RadioFunction+0x16c>)
 80011a0:	f008 fe5a 	bl	8009e58 <nRF24_SetPowerMode>
    nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 80011a4:	2101      	movs	r1, #1
 80011a6:	4847      	ldr	r0, [pc, #284]	@ (80012c4 <RadioFunction+0x16c>)
 80011a8:	f008 fe78 	bl	8009e9c <nRF24_SetOperationalMode>
    nRF24_RX_ON(&nrf_device);
 80011ac:	2101      	movs	r1, #1
 80011ae:	4845      	ldr	r0, [pc, #276]	@ (80012c4 <RadioFunction+0x16c>)
 80011b0:	f008 fcdd 	bl	8009b6e <nRF24_CE_State>
    memset(nrf_device.rx_data, 0, 32);
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	4844      	ldr	r0, [pc, #272]	@ (80012cc <RadioFunction+0x174>)
 80011ba:	f009 fac9 	bl	800a750 <memset>
    nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 80011be:	2106      	movs	r1, #6
 80011c0:	4840      	ldr	r0, [pc, #256]	@ (80012c4 <RadioFunction+0x16c>)
 80011c2:	f009 f84b 	bl	800a25c <nRF24_DisableAA>
    tx_node_addr[4] = Board_GetID();
 80011c6:	f008 fb29 	bl	800981c <Board_GetID>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b40      	ldr	r3, [pc, #256]	@ (80012d0 <RadioFunction+0x178>)
 80011d0:	711a      	strb	r2, [r3, #4]
    nRF24_SetAddr(&nrf_device, nRF24_PIPETX, tx_node_addr);
 80011d2:	4a3f      	ldr	r2, [pc, #252]	@ (80012d0 <RadioFunction+0x178>)
 80011d4:	2106      	movs	r1, #6
 80011d6:	483b      	ldr	r0, [pc, #236]	@ (80012c4 <RadioFunction+0x16c>)
 80011d8:	f008 fe94 	bl	8009f04 <nRF24_SetAddr>
    nrf_config = nRF24_GetConfig(&nrf_device);
 80011dc:	4839      	ldr	r0, [pc, #228]	@ (80012c4 <RadioFunction+0x16c>)
 80011de:	f009 f875 	bl	800a2cc <nRF24_GetConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b3b      	ldr	r3, [pc, #236]	@ (80012d4 <RadioFunction+0x17c>)
 80011e8:	701a      	strb	r2, [r3, #0]

    // --- Bucle principal de la tarea ---
    for (;;) {
        // Espera evento de la cola (sin timeout)
        osMessageGet(nrf24CheckHandle, osWaitForever);
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <RadioFunction+0x180>)
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	463b      	mov	r3, r7
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	4618      	mov	r0, r3
 80011f6:	f005 fcf5 	bl	8006be4 <osMessageGet>

        // Actualiza estado del nRF24
        nrf_status = nRF24_GetStatus(&nrf_device);
 80011fa:	4832      	ldr	r0, [pc, #200]	@ (80012c4 <RadioFunction+0x16c>)
 80011fc:	f009 f859 	bl	800a2b2 <nRF24_GetStatus>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b35      	ldr	r3, [pc, #212]	@ (80012dc <RadioFunction+0x184>)
 8001206:	701a      	strb	r2, [r3, #0]
        nrf_config = nRF24_GetConfig(&nrf_device);
 8001208:	482e      	ldr	r0, [pc, #184]	@ (80012c4 <RadioFunction+0x16c>)
 800120a:	f009 f85f 	bl	800a2cc <nRF24_GetConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <RadioFunction+0x17c>)
 8001214:	701a      	strb	r2, [r3, #0]
        //updateBuffer(txBuffer);
        //txBuffer[28] = fokk++;
        //HAL_UART_Transmit(&huart5, txBuffer,32,HAL_MAX_DELAY);
        //osDelay(10);
        // Si hay datos recibidos
        if (nrf_status & nRF24_FLAG_RX_DR) {
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <RadioFunction+0x184>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0e3      	beq.n	80011ea <RadioFunction+0x92>
            // --- Procesamiento de datos recibidos ---



            nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 8001222:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <RadioFunction+0x188>)
 8001224:	4929      	ldr	r1, [pc, #164]	@ (80012cc <RadioFunction+0x174>)
 8001226:	4827      	ldr	r0, [pc, #156]	@ (80012c4 <RadioFunction+0x16c>)
 8001228:	f009 f8d0 	bl	800a3cc <nRF24_ReadPayload>
            nRF24_FlushRX(&nrf_device);
 800122c:	4825      	ldr	r0, [pc, #148]	@ (80012c4 <RadioFunction+0x16c>)
 800122e:	f009 f867 	bl	800a300 <nRF24_FlushRX>
            nRF24_ClearIRQFlagsRx(&nrf_device);
 8001232:	4824      	ldr	r0, [pc, #144]	@ (80012c4 <RadioFunction+0x16c>)
 8001234:	f009 f8a1 	bl	800a37a <nRF24_ClearIRQFlagsRx>

            setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 8001238:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <RadioFunction+0x18c>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <RadioFunction+0x174>)
 8001248:	4413      	add	r3, r2
 800124a:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <RadioFunction+0x190>)
 800124c:	4927      	ldr	r1, [pc, #156]	@ (80012ec <RadioFunction+0x194>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc20 	bl	8000a94 <setSpeed>
            dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 8001254:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <RadioFunction+0x18c>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <RadioFunction+0x174>)
 8001264:	4413      	add	r3, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fe26 	bl	8000eb8 <getDribbler_speed>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <RadioFunction+0x198>)
 8001272:	701a      	strb	r2, [r3, #0]
            kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <RadioFunction+0x18c>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <RadioFunction+0x174>)
 8001284:	4413      	add	r3, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fe23 	bl	8000ed2 <getKickerStatus>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <RadioFunction+0x19c>)
 8001292:	701a      	strb	r2, [r3, #0]

            //

            if (ball_posession == 0x00) {
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <RadioFunction+0x1a0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1a6      	bne.n	80011ea <RadioFunction+0x92>
                if(ball_posession_last == 0x01) {
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <RadioFunction+0x1a4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d1a2      	bne.n	80011ea <RadioFunction+0x92>
                    // Si no se pierde la pelota, se manda mensaje
                    ball_posession_last = 0x00;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <RadioFunction+0x1a4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
                    updateBuffer(txBuffer);
 80012aa:	4815      	ldr	r0, [pc, #84]	@ (8001300 <RadioFunction+0x1a8>)
 80012ac:	f000 f82a 	bl	8001304 <updateBuffer>
                    Radio_SendPacket(&nrf_device, txBuffer, 32);
 80012b0:	2220      	movs	r2, #32
 80012b2:	4913      	ldr	r1, [pc, #76]	@ (8001300 <RadioFunction+0x1a8>)
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <RadioFunction+0x16c>)
 80012b6:	f000 f89b 	bl	80013f0 <Radio_SendPacket>
        osMessageGet(nrf24CheckHandle, osWaitForever);
 80012ba:	e796      	b.n	80011ea <RadioFunction+0x92>
 80012bc:	40021800 	.word	0x40021800
 80012c0:	200004dc 	.word	0x200004dc
 80012c4:	20000100 	.word	0x20000100
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000136 	.word	0x20000136
 80012d0:	20000000 	.word	0x20000000
 80012d4:	200000fe 	.word	0x200000fe
 80012d8:	20000158 	.word	0x20000158
 80012dc:	200000fd 	.word	0x200000fd
 80012e0:	200000fc 	.word	0x200000fc
 80012e4:	200000d8 	.word	0x200000d8
 80012e8:	2000015c 	.word	0x2000015c
 80012ec:	20000160 	.word	0x20000160
 80012f0:	2000039c 	.word	0x2000039c
 80012f4:	2000039d 	.word	0x2000039d
 80012f8:	200003bc 	.word	0x200003bc
 80012fc:	200003bd 	.word	0x200003bd
 8001300:	200000dc 	.word	0x200000dc

08001304 <updateBuffer>:
        }
    }
}


void updateBuffer(uint8_t *buffer) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

    // Fill buffer with zeros if necessary
    memset(&buffer[0], 0, 32);
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f009 fa1d 	bl	800a750 <memset>

    // Set first byte: bits 0-2 = robot_id (3 bits), bit 3 = ball_possession (1 bit), bits 4-7 = 0
    uint8_t id_bits = (robot_id << 3); // 3 bits for robot_id
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <updateBuffer+0x40>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	73fb      	strb	r3, [r7, #15]
    uint8_t ball_bit = (ball_posession == 0x01 ? 1 : 0); // 1 bit for ball_posession at bit 3
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <updateBuffer+0x44>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	73bb      	strb	r3, [r7, #14]
    buffer[0] = id_bits | ball_bit;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	4313      	orrs	r3, r2
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	701a      	strb	r2, [r3, #0]
    //memcpy(&buffer[1+4*0], &m0, sizeof(float));
    //memcpy(&buffer[1+4*1], &m1, sizeof(float));
    //memcpy(&buffer[1+4*2], &m2, sizeof(float));
    //memcpy(&buffer[1+4*3], &m3, sizeof(float));

}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000d8 	.word	0x200000d8
 8001348:	200003bc 	.word	0x200003bc

0800134c <nRF24_TxPacket>:


void nRF24_TxPacket(nRF24_Handler_t *device, uint8_t* Buf, uint32_t Len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800135e:	4822      	ldr	r0, [pc, #136]	@ (80013e8 <nRF24_TxPacket+0x9c>)
 8001360:	f001 fef0 	bl	8003144 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < Len; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00c      	b.n	8001384 <nRF24_TxPacket+0x38>
        device->tx_data[i] = *Buf++;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	7819      	ldrb	r1, [r3, #0]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	3316      	adds	r3, #22
 800137a:	460a      	mov	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < Len; i++) {
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3ee      	bcc.n	800136a <nRF24_TxPacket+0x1e>
    }

    nRF24_WritePayload(device, device->tx_data, Len);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3316      	adds	r3, #22
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f009 f807 	bl	800a3aa <nRF24_WritePayload>
    nRF24_CE_State(device, GPIO_PIN_SET);
 800139c:	2101      	movs	r1, #1
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f008 fbe5 	bl	8009b6e <nRF24_CE_State>

    while (!(nrf_status & (nRF24_FLAG_TX_DS))) {
 80013a4:	e006      	b.n	80013b4 <nRF24_TxPacket+0x68>
        nrf_status = nRF24_GetStatus(device);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f008 ff83 	bl	800a2b2 <nRF24_GetStatus>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <nRF24_TxPacket+0xa0>)
 80013b2:	701a      	strb	r2, [r3, #0]
    while (!(nrf_status & (nRF24_FLAG_TX_DS))) {
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <nRF24_TxPacket+0xa0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f2      	beq.n	80013a6 <nRF24_TxPacket+0x5a>
    }

    nRF24_ClearIRQFlagsTx(device);
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f008 ffc2 	bl	800a34a <nRF24_ClearIRQFlagsTx>
    nRF24_FlushTX(device);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f008 ff8d 	bl	800a2e6 <nRF24_FlushTX>

    nRF24_CE_State(device, GPIO_PIN_RESET);
 80013cc:	2100      	movs	r1, #0
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f008 fbcd 	bl	8009b6e <nRF24_CE_State>

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013da:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <nRF24_TxPacket+0x9c>)
 80013dc:	f001 feb2 	bl	8003144 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40022000 	.word	0x40022000
 80013ec:	200000fd 	.word	0x200000fd

080013f0 <Radio_SendPacket>:

// Cambia a modo TX, envía un paquete y regresa a modo RX
void Radio_SendPacket(nRF24_Handler_t *device, uint8_t *txBuffer, uint32_t len) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
    extern uint8_t nrf_config;
    nRF24_RX_OFF(device);
 80013fc:	2100      	movs	r1, #0
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f008 fbb5 	bl	8009b6e <nRF24_CE_State>
    nRF24_SetOperationalMode(device, nRF24_MODE_TX);
 8001404:	2100      	movs	r1, #0
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f008 fd48 	bl	8009e9c <nRF24_SetOperationalMode>
    while (nrf_config & nRF24_CONFIG_PRIM_RX) {
 800140c:	e006      	b.n	800141c <Radio_SendPacket+0x2c>
        nrf_config = nRF24_GetConfig(device);
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f008 ff5c 	bl	800a2cc <nRF24_GetConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <Radio_SendPacket+0x7c>)
 800141a:	701a      	strb	r2, [r3, #0]
    while (nrf_config & nRF24_CONFIG_PRIM_RX) {
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <Radio_SendPacket+0x7c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f2      	bne.n	800140e <Radio_SendPacket+0x1e>
    }
    nRF24_TxPacket(device, txBuffer, len);
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff8d 	bl	800134c <nRF24_TxPacket>

    nRF24_SetOperationalMode(device, nRF24_MODE_RX);
 8001432:	2101      	movs	r1, #1
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f008 fd31 	bl	8009e9c <nRF24_SetOperationalMode>
    while (!(nrf_config & nRF24_CONFIG_PRIM_RX)) {
 800143a:	e006      	b.n	800144a <Radio_SendPacket+0x5a>
        nrf_config = nRF24_GetConfig(device);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f008 ff45 	bl	800a2cc <nRF24_GetConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <Radio_SendPacket+0x7c>)
 8001448:	701a      	strb	r2, [r3, #0]
    while (!(nrf_config & nRF24_CONFIG_PRIM_RX)) {
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <Radio_SendPacket+0x7c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f2      	beq.n	800143c <Radio_SendPacket+0x4c>
    }
    nRF24_RX_ON(device);
 8001456:	2101      	movs	r1, #1
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f008 fb88 	bl	8009b6e <nRF24_CE_State>
    nRF24_ClearIRQFlags(device);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f008 ff5b 	bl	800a31a <nRF24_ClearIRQFlags>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000fe 	.word	0x200000fe

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f001 f971 	bl	8002794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0b2      	sub	sp, #200	@ 0xc8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014dc:	2290      	movs	r2, #144	@ 0x90
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f009 f935 	bl	800a750 <memset>
  if(hi2c->Instance==I2C1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a65      	ldr	r2, [pc, #404]	@ (8001680 <HAL_I2C_MspInit+0x1c0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d13d      	bne.n	800156c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001500:	4618      	mov	r0, r3
 8001502:	f003 f927 	bl	8004754 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800150c:	f7ff fe1c 	bl	8001148 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b5c      	ldr	r3, [pc, #368]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a5b      	ldr	r2, [pc, #364]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b59      	ldr	r3, [pc, #356]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	623b      	str	r3, [r7, #32]
 8001526:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001528:	23c0      	movs	r3, #192	@ 0xc0
 800152a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001540:	2304      	movs	r3, #4
 8001542:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800154a:	4619      	mov	r1, r3
 800154c:	484e      	ldr	r0, [pc, #312]	@ (8001688 <HAL_I2C_MspInit+0x1c8>)
 800154e:	f001 fc35 	bl	8002dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001552:	4b4c      	ldr	r3, [pc, #304]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a4b      	ldr	r2, [pc, #300]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	4b49      	ldr	r3, [pc, #292]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800156a:	e085      	b.n	8001678 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a46      	ldr	r2, [pc, #280]	@ (800168c <HAL_I2C_MspInit+0x1cc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d13d      	bne.n	80015f2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f8e4 	bl	8004754 <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001592:	f7ff fdd9 	bl	8001148 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a3a      	ldr	r2, [pc, #232]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 800159c:	f043 0320 	orr.w	r3, r3, #32
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b38      	ldr	r3, [pc, #224]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ae:	2303      	movs	r3, #3
 80015b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c6:	2304      	movs	r3, #4
 80015c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015cc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015d0:	4619      	mov	r1, r3
 80015d2:	482f      	ldr	r0, [pc, #188]	@ (8001690 <HAL_I2C_MspInit+0x1d0>)
 80015d4:	f001 fbf2 	bl	8002dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a29      	ldr	r2, [pc, #164]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 80015de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e4:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
}
 80015f0:	e042      	b.n	8001678 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <HAL_I2C_MspInit+0x1d4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d13d      	bne.n	8001678 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f8a1 	bl	8004754 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001618:	f7ff fd96 	bl	8001148 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001620:	4a18      	ldr	r2, [pc, #96]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001626:	6313      	str	r3, [r2, #48]	@ 0x30
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001634:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800164e:	2304      	movs	r3, #4
 8001650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001654:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001658:	4619      	mov	r1, r3
 800165a:	480f      	ldr	r0, [pc, #60]	@ (8001698 <HAL_I2C_MspInit+0x1d8>)
 800165c:	f001 fbae 	bl	8002dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 8001666:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800166a:	6413      	str	r3, [r2, #64]	@ 0x40
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_I2C_MspInit+0x1c4>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	bf00      	nop
 800167a:	37c8      	adds	r7, #200	@ 0xc8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40005400 	.word	0x40005400
 8001684:	40023800 	.word	0x40023800
 8001688:	40020400 	.word	0x40020400
 800168c:	40005800 	.word	0x40005800
 8001690:	40021400 	.word	0x40021400
 8001694:	40005c00 	.word	0x40005c00
 8001698:	40021c00 	.word	0x40021c00

0800169c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a17      	ldr	r2, [pc, #92]	@ (8001718 <HAL_SPI_MspInit+0x7c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d127      	bne.n	800170e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_SPI_MspInit+0x80>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23e0      	movs	r3, #224	@ 0xe0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fe:	2305      	movs	r3, #5
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_SPI_MspInit+0x84>)
 800170a:	f001 fb57 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40013000 	.word	0x40013000
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	@ 0x40
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001744:	d128      	bne.n	8001798 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	4b5b      	ldr	r3, [pc, #364]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a5a      	ldr	r2, [pc, #360]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b58      	ldr	r3, [pc, #352]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b55      	ldr	r3, [pc, #340]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a54      	ldr	r2, [pc, #336]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001776:	2303      	movs	r3, #3
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001786:	2301      	movs	r3, #1
 8001788:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	4849      	ldr	r0, [pc, #292]	@ (80018b8 <HAL_TIM_Encoder_MspInit+0x194>)
 8001792:	f001 fb13 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001796:	e089      	b.n	80018ac <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a47      	ldr	r2, [pc, #284]	@ (80018bc <HAL_TIM_Encoder_MspInit+0x198>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d128      	bne.n	80017f4 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a2:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a43      	ldr	r2, [pc, #268]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b3e      	ldr	r3, [pc, #248]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a3d      	ldr	r2, [pc, #244]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	@ 0xc0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4834      	ldr	r0, [pc, #208]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x19c>)
 80017ee:	f001 fae5 	bl	8002dbc <HAL_GPIO_Init>
}
 80017f2:	e05b      	b.n	80018ac <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d129      	bne.n	8001852 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a2c      	ldr	r2, [pc, #176]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800182e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001840:	2302      	movs	r3, #2
 8001842:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001844:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001848:	4619      	mov	r1, r3
 800184a:	481f      	ldr	r0, [pc, #124]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0x1a4>)
 800184c:	f001 fab6 	bl	8002dbc <HAL_GPIO_Init>
}
 8001850:	e02c      	b.n	80018ac <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d127      	bne.n	80018ac <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	6453      	str	r3, [r2, #68]	@ 0x44
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800188c:	2360      	movs	r3, #96	@ 0x60
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800189c:	2303      	movs	r3, #3
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	480a      	ldr	r0, [pc, #40]	@ (80018d0 <HAL_TIM_Encoder_MspInit+0x1ac>)
 80018a8:	f001 fa88 	bl	8002dbc <HAL_GPIO_Init>
}
 80018ac:	bf00      	nop
 80018ae:	3740      	adds	r7, #64	@ 0x40
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40000c00 	.word	0x40000c00
 80018c8:	40021c00 	.word	0x40021c00
 80018cc:	40010400 	.word	0x40010400
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0ae      	sub	sp, #184	@ 0xb8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2290      	movs	r2, #144	@ 0x90
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f008 ff2b 	bl	800a750 <memset>
  if(huart->Instance==UART5)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_UART_MspInit+0x164>)
 8001900:	4293      	cmp	r3, r2
 8001902:	f040 8095 	bne.w	8001a30 <HAL_UART_MspInit+0x15c>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800190a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800190c:	2300      	movs	r3, #0
 800190e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4618      	mov	r0, r3
 8001916:	f002 ff1d 	bl	8004754 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001920:	f7ff fc12 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001924:	4b45      	ldr	r3, [pc, #276]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	4a44      	ldr	r2, [pc, #272]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 800192a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800192e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001930:	4b42      	ldr	r3, [pc, #264]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a3e      	ldr	r2, [pc, #248]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	4a38      	ldr	r2, [pc, #224]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <HAL_UART_MspInit+0x168>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800196c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001986:	2308      	movs	r3, #8
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001990:	4619      	mov	r1, r3
 8001992:	482b      	ldr	r0, [pc, #172]	@ (8001a40 <HAL_UART_MspInit+0x16c>)
 8001994:	f001 fa12 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001998:	2304      	movs	r3, #4
 800199a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019b0:	2308      	movs	r3, #8
 80019b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4821      	ldr	r0, [pc, #132]	@ (8001a44 <HAL_UART_MspInit+0x170>)
 80019be:	f001 f9fd 	bl	8002dbc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80019c2:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019c4:	4a21      	ldr	r2, [pc, #132]	@ (8001a4c <HAL_UART_MspInit+0x178>)
 80019c6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019ce:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e2:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 80019f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019fc:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001a04:	4810      	ldr	r0, [pc, #64]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 8001a06:	f000 feef 	bl	80027e8 <HAL_DMA_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001a10:	f7ff fb9a 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 8001a18:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <HAL_UART_MspInit+0x174>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Configurar NVIC para DMA (opcional pero recomendado) */
       HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	202f      	movs	r0, #47	@ 0x2f
 8001a26:	f000 feb5 	bl	8002794 <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a2a:	202f      	movs	r0, #47	@ 0x2f
 8001a2c:	f000 fece 	bl	80027cc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	37b8      	adds	r7, #184	@ 0xb8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005000 	.word	0x40005000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	200006f8 	.word	0x200006f8
 8001a4c:	400260b8 	.word	0x400260b8

08001a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a60:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <HAL_InitTick+0xd0>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	4a2e      	ldr	r2, [pc, #184]	@ (8001b20 <HAL_InitTick+0xd0>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <HAL_InitTick+0xd0>)
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fe34 	bl	80046f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a88:	f002 fe1e 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a94:	4a23      	ldr	r2, [pc, #140]	@ (8001b24 <HAL_InitTick+0xd4>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001aa0:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001aa2:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <HAL_InitTick+0xdc>)
 8001aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001aa8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001aae:	4a1e      	ldr	r2, [pc, #120]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ac6:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001ac8:	f003 feb2 	bl	8005830 <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d11b      	bne.n	8001b12 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ada:	4813      	ldr	r0, [pc, #76]	@ (8001b28 <HAL_InitTick+0xd8>)
 8001adc:	f003 ff0a 	bl	80058f4 <HAL_TIM_Base_Start_IT>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d111      	bne.n	8001b12 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aee:	2019      	movs	r0, #25
 8001af0:	f000 fe6c 	bl	80027cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	d808      	bhi.n	8001b0c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001afa:	2200      	movs	r2, #0
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	2019      	movs	r0, #25
 8001b00:	f000 fe48 	bl	8002794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_InitTick+0xe0>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e002      	b.n	8001b12 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	2000008c 	.word	0x2000008c
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	20000014 	.word	0x20000014

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	bf00      	nop
 8001b48:	e7fd      	b.n	8001b46 <HardFault_Handler+0x4>

08001b4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4e:	bf00      	nop
 8001b50:	e7fd      	b.n	8001b4e <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	bf00      	nop
 8001b58:	e7fd      	b.n	8001b56 <BusFault_Handler+0x4>

08001b5a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5e:	bf00      	nop
 8001b60:	e7fd      	b.n	8001b5e <UsageFault_Handler+0x4>

08001b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b76:	f003 ffdb 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000008c 	.word	0x2000008c

08001b84 <DMA1_Stream7_IRQHandler>:
        // La transmisión ha terminado
    }
}

void DMA1_Stream7_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA1_Stream7_IRQHandler+0x10>)
 8001b8a:	f000 fedb 	bl	8002944 <HAL_DMA_IRQHandler>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200006f8 	.word	0x200006f8

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b094      	sub	sp, #80	@ 0x50
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	2234      	movs	r2, #52	@ 0x34
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f008 fdd2 	bl	800a750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <SystemClock_Config+0xd4>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <SystemClock_Config+0xd4>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc8:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <SystemClock_Config+0xd4>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <SystemClock_Config+0xd8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	@ (8001c70 <SystemClock_Config+0xd8>)
 8001bda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b23      	ldr	r3, [pc, #140]	@ (8001c70 <SystemClock_Config+0xd8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c04:	23d8      	movs	r3, #216	@ 0xd8
 8001c06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 f895 	bl	8003d48 <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c24:	f7ff fa90 	bl	8001148 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c28:	f002 f83e 	bl	8003ca8 <HAL_PWREx_EnableOverDrive>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c32:	f7ff fa89 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c36:	230f      	movs	r3, #15
 8001c38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2107      	movs	r1, #7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fb25 	bl	80042a4 <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001c60:	f7ff fa72 	bl	8001148 <Error_Handler>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3750      	adds	r7, #80	@ 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000

08001c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <MX_I2C1_Init+0x78>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c80:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <MX_I2C1_Init+0x7c>)
 8001c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cae:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001cb0:	f001 fa7c 	bl	80031ac <HAL_I2C_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cba:	f7ff fa45 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4809      	ldr	r0, [pc, #36]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001cc2:	f001 ff59 	bl	8003b78 <HAL_I2CEx_ConfigAnalogFilter>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ccc:	f7ff fa3c 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_I2C1_Init+0x74>)
 8001cd4:	f001 ff9b 	bl	8003c0e <HAL_I2CEx_ConfigDigitalFilter>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f7ff fa33 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200003e0 	.word	0x200003e0
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	6000030d 	.word	0x6000030d

08001cf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <MX_I2C2_Init+0x78>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d00:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <MX_I2C2_Init+0x7c>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d04:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d2e:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d30:	f001 fa3c 	bl	80031ac <HAL_I2C_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d3a:	f7ff fa05 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4809      	ldr	r0, [pc, #36]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d42:	f001 ff19 	bl	8003b78 <HAL_I2CEx_ConfigAnalogFilter>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d4c:	f7ff f9fc 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <MX_I2C2_Init+0x74>)
 8001d54:	f001 ff5b 	bl	8003c0e <HAL_I2CEx_ConfigDigitalFilter>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f7ff f9f3 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000434 	.word	0x20000434
 8001d6c:	40005800 	.word	0x40005800
 8001d70:	6000030d 	.word	0x6000030d

08001d74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <MX_I2C3_Init+0x78>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d80:	4a1b      	ldr	r2, [pc, #108]	@ (8001df0 <MX_I2C3_Init+0x7c>)
 8001d82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001dae:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001db0:	f001 f9fc 	bl	80031ac <HAL_I2C_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001dba:	f7ff f9c5 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001dc2:	f001 fed9 	bl	8003b78 <HAL_I2CEx_ConfigAnalogFilter>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001dcc:	f7ff f9bc 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_I2C3_Init+0x74>)
 8001dd4:	f001 ff1b 	bl	8003c0e <HAL_I2CEx_ConfigDigitalFilter>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001dde:	f7ff f9b3 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000488 	.word	0x20000488
 8001dec:	40005c00 	.word	0x40005c00
 8001df0:	6000030d 	.word	0x6000030d

08001df4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <MX_SPI1_Init+0x80>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e2a:	2218      	movs	r2, #24
 8001e2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e42:	2207      	movs	r2, #7
 8001e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e4e:	2208      	movs	r2, #8
 8001e50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e54:	f003 f8a6 	bl	8004fa4 <HAL_SPI_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e5e:	f7ff f973 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 8001e62:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <MX_SPI1_Init+0x7c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e6a:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200004dc 	.word	0x200004dc
 8001e74:	40013000 	.word	0x40013000

08001e78 <MX_UART5_Init>:
  * @param None
  * @retval None
  */

void MX_UART5_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001e7e:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <MX_UART5_Init+0x64>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001eb6:	2280      	movs	r2, #128	@ 0x80
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001ebc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ec0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <MX_UART5_Init+0x60>)
 8001ec4:	f004 f8c8 	bl	8006058 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8001ece:	f7ff f93b 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000670 	.word	0x20000670
 8001edc:	40005000 	.word	0x40005000

08001ee0 <MX_TIM2_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);

}

void MX_TIM2_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 fc2e 	bl	800a750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001efe:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f26:	2303      	movs	r3, #3
 8001f28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f52:	f003 fd47 	bl	80059e4 <HAL_TIM_Encoder_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f5c:	f7ff f8f4 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f68:	463b      	mov	r3, r7
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_TIM2_Init+0xa4>)
 8001f6e:	f003 ffc7 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f78:	f7ff f8e6 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	3730      	adds	r7, #48	@ 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000540 	.word	0x20000540

08001f88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 fbda 	bl	800a750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001fa8:	4a21      	ldr	r2, [pc, #132]	@ (8002030 <MX_TIM3_Init+0xa8>)
 8001faa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480d      	ldr	r0, [pc, #52]	@ (800202c <MX_TIM3_Init+0xa4>)
 8001ff8:	f003 fcf4 	bl	80059e4 <HAL_TIM_Encoder_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002002:	f7ff f8a1 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <MX_TIM3_Init+0xa4>)
 8002014:	f003 ff74 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800201e:	f7ff f893 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	3730      	adds	r7, #48	@ 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000058c 	.word	0x2000058c
 8002030:	40000400 	.word	0x40000400

08002034 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	@ 0x30
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2224      	movs	r2, #36	@ 0x24
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f008 fb84 	bl	800a750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 8002054:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <MX_TIM5_Init+0xa8>)
 8002056:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002064:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 8002066:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800206a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002078:	2303      	movs	r3, #3
 800207a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002080:	2301      	movs	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002090:	2301      	movs	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 80020a4:	f003 fc9e 	bl	80059e4 <HAL_TIM_Encoder_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80020ae:	f7ff f84b 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	@ (80020d8 <MX_TIM5_Init+0xa4>)
 80020c0:	f003 ff1e 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80020ca:	f7ff f83d 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	@ 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200005d8 	.word	0x200005d8
 80020dc:	40000c00 	.word	0x40000c00

080020e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	@ 0x30
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	2224      	movs	r2, #36	@ 0x24
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f008 fb2e 	bl	800a750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	463b      	mov	r3, r7
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020fe:	4b23      	ldr	r3, [pc, #140]	@ (800218c <MX_TIM8_Init+0xac>)
 8002100:	4a23      	ldr	r2, [pc, #140]	@ (8002190 <MX_TIM8_Init+0xb0>)
 8002102:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <MX_TIM8_Init+0xac>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <MX_TIM8_Init+0xac>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002110:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <MX_TIM8_Init+0xac>)
 8002112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002116:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <MX_TIM8_Init+0xac>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <MX_TIM8_Init+0xac>)
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <MX_TIM8_Init+0xac>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800212a:	2303      	movs	r3, #3
 800212c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002132:	2301      	movs	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002142:	2301      	movs	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4619      	mov	r1, r3
 8002154:	480d      	ldr	r0, [pc, #52]	@ (800218c <MX_TIM8_Init+0xac>)
 8002156:	f003 fc45 	bl	80059e4 <HAL_TIM_Encoder_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002160:	f7fe fff2 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002170:	463b      	mov	r3, r7
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	@ (800218c <MX_TIM8_Init+0xac>)
 8002176:	f003 fec3 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002180:	f7fe ffe2 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	@ 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000624 	.word	0x20000624
 8002190:	40010400 	.word	0x40010400

08002194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b090      	sub	sp, #64	@ 0x40
 8002198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021aa:	4bb3      	ldr	r3, [pc, #716]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4ab2      	ldr	r2, [pc, #712]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021b0:	f043 0320 	orr.w	r3, r3, #32
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021c2:	4bad      	ldr	r3, [pc, #692]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4aac      	ldr	r2, [pc, #688]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4baa      	ldr	r3, [pc, #680]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	4ba7      	ldr	r3, [pc, #668]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4aa6      	ldr	r2, [pc, #664]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4ba4      	ldr	r3, [pc, #656]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4aa0      	ldr	r2, [pc, #640]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	4b9b      	ldr	r3, [pc, #620]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a9a      	ldr	r2, [pc, #616]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b98      	ldr	r3, [pc, #608]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b95      	ldr	r3, [pc, #596]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a94      	ldr	r2, [pc, #592]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b92      	ldr	r3, [pc, #584]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800223a:	4b8f      	ldr	r3, [pc, #572]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a8e      	ldr	r2, [pc, #568]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002240:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b8c      	ldr	r3, [pc, #560]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002252:	4b89      	ldr	r3, [pc, #548]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a88      	ldr	r2, [pc, #544]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b86      	ldr	r3, [pc, #536]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800226a:	4b83      	ldr	r3, [pc, #524]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a82      	ldr	r2, [pc, #520]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b80      	ldr	r3, [pc, #512]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002282:	4b7d      	ldr	r3, [pc, #500]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a7c      	ldr	r2, [pc, #496]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b7a      	ldr	r3, [pc, #488]	@ (8002478 <MX_GPIO_Init+0x2e4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80022a0:	4876      	ldr	r0, [pc, #472]	@ (800247c <MX_GPIO_Init+0x2e8>)
 80022a2:	f000 ff4f 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f640 0138 	movw	r1, #2104	@ 0x838
 80022ac:	4874      	ldr	r0, [pc, #464]	@ (8002480 <MX_GPIO_Init+0x2ec>)
 80022ae:	f000 ff49 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80022b8:	4872      	ldr	r0, [pc, #456]	@ (8002484 <MX_GPIO_Init+0x2f0>)
 80022ba:	f000 ff43 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022c4:	4870      	ldr	r0, [pc, #448]	@ (8002488 <MX_GPIO_Init+0x2f4>)
 80022c6:	f000 ff3d 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80022d0:	486e      	ldr	r0, [pc, #440]	@ (800248c <MX_GPIO_Init+0x2f8>)
 80022d2:	f000 ff37 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80022dc:	486c      	ldr	r0, [pc, #432]	@ (8002490 <MX_GPIO_Init+0x2fc>)
 80022de:	f000 ff31 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2101      	movs	r1, #1
 80022e6:	486b      	ldr	r0, [pc, #428]	@ (8002494 <MX_GPIO_Init+0x300>)
 80022e8:	f000 ff2c 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80022f2:	4869      	ldr	r0, [pc, #420]	@ (8002498 <MX_GPIO_Init+0x304>)
 80022f4:	f000 ff26 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	21c0      	movs	r1, #192	@ 0xc0
 80022fc:	4867      	ldr	r0, [pc, #412]	@ (800249c <MX_GPIO_Init+0x308>)
 80022fe:	f000 ff21 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002302:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002314:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002318:	4619      	mov	r1, r3
 800231a:	4858      	ldr	r0, [pc, #352]	@ (800247c <MX_GPIO_Init+0x2e8>)
 800231c:	f000 fd4e 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8002320:	f640 0338 	movw	r3, #2104	@ 0x838
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	4851      	ldr	r0, [pc, #324]	@ (8002480 <MX_GPIO_Init+0x2ec>)
 800233a:	f000 fd3f 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800233e:	2310      	movs	r3, #16
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002342:	2300      	movs	r3, #0
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800234a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234e:	4619      	mov	r1, r3
 8002350:	4853      	ldr	r0, [pc, #332]	@ (80024a0 <MX_GPIO_Init+0x30c>)
 8002352:	f000 fd33 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002356:	2310      	movs	r3, #16
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235a:	2300      	movs	r3, #0
 800235c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002366:	4619      	mov	r1, r3
 8002368:	4849      	ldr	r0, [pc, #292]	@ (8002490 <MX_GPIO_Init+0x2fc>)
 800236a:	f000 fd27 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800236e:	2304      	movs	r3, #4
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800237e:	4619      	mov	r1, r3
 8002380:	4841      	ldr	r0, [pc, #260]	@ (8002488 <MX_GPIO_Init+0x2f4>)
 8002382:	f000 fd1b 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002394:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	4838      	ldr	r0, [pc, #224]	@ (800247c <MX_GPIO_Init+0x2e8>)
 800239c:	f000 fd0e 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023a0:	2303      	movs	r3, #3
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	4834      	ldr	r0, [pc, #208]	@ (8002484 <MX_GPIO_Init+0x2f0>)
 80023b4:	f000 fd02 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80023b8:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023be:	2301      	movs	r3, #1
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ce:	4619      	mov	r1, r3
 80023d0:	482c      	ldr	r0, [pc, #176]	@ (8002484 <MX_GPIO_Init+0x2f0>)
 80023d2:	f000 fcf3 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ec:	4619      	mov	r1, r3
 80023ee:	4826      	ldr	r0, [pc, #152]	@ (8002488 <MX_GPIO_Init+0x2f4>)
 80023f0:	f000 fce4 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023f4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240a:	4619      	mov	r1, r3
 800240c:	481f      	ldr	r0, [pc, #124]	@ (800248c <MX_GPIO_Init+0x2f8>)
 800240e:	f000 fcd5 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002412:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002418:	2301      	movs	r3, #1
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	4819      	ldr	r0, [pc, #100]	@ (8002490 <MX_GPIO_Init+0x2fc>)
 800242c:	f000 fcc6 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002430:	2301      	movs	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002434:	2301      	movs	r3, #1
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002440:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002444:	4619      	mov	r1, r3
 8002446:	4813      	ldr	r0, [pc, #76]	@ (8002494 <MX_GPIO_Init+0x300>)
 8002448:	f000 fcb8 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800244c:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002462:	4619      	mov	r1, r3
 8002464:	480c      	ldr	r0, [pc, #48]	@ (8002498 <MX_GPIO_Init+0x304>)
 8002466:	f000 fca9 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800246a:	23c0      	movs	r3, #192	@ 0xc0
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	e016      	b.n	80024a4 <MX_GPIO_Init+0x310>
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40022000 	.word	0x40022000
 8002480:	40021400 	.word	0x40021400
 8002484:	40022400 	.word	0x40022400
 8002488:	40020400 	.word	0x40020400
 800248c:	40020000 	.word	0x40020000
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021800 	.word	0x40021800
 800249c:	40022800 	.word	0x40022800
 80024a0:	40021c00 	.word	0x40021c00
 80024a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <MX_GPIO_Init+0x32c>)
 80024b2:	f000 fc83 	bl	8002dbc <HAL_GPIO_Init>

}
 80024b6:	bf00      	nop
 80024b8:	3740      	adds	r7, #64	@ 0x40
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022800 	.word	0x40022800

080024c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <SystemInit+0x5c>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <SystemInit+0x5c>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <SystemInit+0x60>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a11      	ldr	r2, [pc, #68]	@ (8002524 <SystemInit+0x60>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <SystemInit+0x60>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <SystemInit+0x60>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	490d      	ldr	r1, [pc, #52]	@ (8002524 <SystemInit+0x60>)
 80024f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <SystemInit+0x64>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <SystemInit+0x60>)
 80024f8:	4a0c      	ldr	r2, [pc, #48]	@ (800252c <SystemInit+0x68>)
 80024fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <SystemInit+0x60>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <SystemInit+0x60>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002506:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <SystemInit+0x60>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SystemInit+0x5c>)
 8002510:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002514:	609a      	str	r2, [r3, #8]
#endif
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00
 8002524:	40023800 	.word	0x40023800
 8002528:	fef6ffff 	.word	0xfef6ffff
 800252c:	24003010 	.word	0x24003010

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002534:	480d      	ldr	r0, [pc, #52]	@ (800256c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002536:	490e      	ldr	r1, [pc, #56]	@ (8002570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002538:	4a0e      	ldr	r2, [pc, #56]	@ (8002574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	@ (8002578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800254c:	4c0b      	ldr	r4, [pc, #44]	@ (800257c <LoopFillZerobss+0x26>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255a:	f7ff ffb3 	bl	80024c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f008 f905 	bl	800a76c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7fe fcc9 	bl	8000ef8 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002574:	0800a91c 	.word	0x0800a91c
  ldr r2, =_sbss
 8002578:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800257c:	200045e0 	.word	0x200045e0

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>

08002582 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002586:	2003      	movs	r0, #3
 8002588:	f000 f8f9 	bl	800277e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fa5f 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002592:	f7fe ff6d 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_IncTick+0x20>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_IncTick+0x24>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_IncTick+0x24>)
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000018 	.word	0x20000018
 80025c0:	20000758 	.word	0x20000758

080025c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return uwTick;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_GetTick+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000758 	.word	0x20000758

080025dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff ffee 	bl	80025c4 <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d005      	beq.n	8002602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_Delay+0x44>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002602:	bf00      	nop
 8002604:	f7ff ffde 	bl	80025c4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	429a      	cmp	r2, r3
 8002612:	d8f7      	bhi.n	8002604 <HAL_Delay+0x28>
  {
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000018 	.word	0x20000018

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <__NVIC_SetPriorityGrouping+0x40>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <__NVIC_SetPriorityGrouping+0x40>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00
 8002668:	05fa0000 	.word	0x05fa0000

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	@ (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	@ (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	@ (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ff4c 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a6:	f7ff ff61 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	6978      	ldr	r0, [r7, #20]
 80027b2:	f7ff ffb1 	bl	8002718 <NVIC_EncodePriority>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff80 	bl	80026c4 <__NVIC_SetPriority>
}
 80027c4:	bf00      	nop
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff54 	bl	8002688 <__NVIC_EnableIRQ>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff fee6 	bl	80025c4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e099      	b.n	8002938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002824:	e00f      	b.n	8002846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002826:	f7ff fecd 	bl	80025c4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b05      	cmp	r3, #5
 8002832:	d908      	bls.n	8002846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2203      	movs	r2, #3
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e078      	b.n	8002938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e8      	bne.n	8002826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <HAL_DMA_Init+0x158>)
 8002860:	4013      	ands	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	2b04      	cmp	r3, #4
 800289e:	d107      	bne.n	80028b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	4313      	orrs	r3, r2
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d117      	bne.n	800290a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f9e9 	bl	8002cc4 <DMA_CheckFifoParam>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002906:	2301      	movs	r3, #1
 8002908:	e016      	b.n	8002938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9a0 	bl	8002c58 <DMA_CalcBaseAndBitshift>
 8002918:	4603      	mov	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	223f      	movs	r2, #63	@ 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	e010803f 	.word	0xe010803f

08002944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002950:	4b8e      	ldr	r3, [pc, #568]	@ (8002b8c <HAL_DMA_IRQHandler+0x248>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a8e      	ldr	r2, [pc, #568]	@ (8002b90 <HAL_DMA_IRQHandler+0x24c>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a9b      	lsrs	r3, r3, #10
 800295c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	2208      	movs	r2, #8
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01a      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	2208      	movs	r2, #8
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	2201      	movs	r2, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	2204      	movs	r2, #4
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2204      	movs	r2, #4
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	2210      	movs	r2, #16
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d043      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d03c      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3e:	2210      	movs	r2, #16
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d018      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
 8002a72:	e01f      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e016      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0208 	bic.w	r2, r2, #8
 8002aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	2220      	movs	r2, #32
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 808f 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8087 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	2220      	movs	r2, #32
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d136      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x1da>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	223f      	movs	r2, #63	@ 0x3f
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07e      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
        }
        return;
 8002b5a:	e079      	b.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01d      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d031      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e02c      	b.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
 8002b8a:	bf00      	nop
 8002b8c:	20000010 	.word	0x20000010
 8002b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e01e      	b.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0210 	bic.w	r2, r2, #16
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d032      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2205      	movs	r2, #5
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d307      	bcc.n	8002c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f2      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x2cc>
 8002c2a:	e000      	b.n	8002c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c50:	bf00      	nop
    }
  }
}
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3b10      	subs	r3, #16
 8002c68:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <DMA_CalcBaseAndBitshift+0x60>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c72:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <DMA_CalcBaseAndBitshift+0x64>)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d908      	bls.n	8002c98 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	1d1a      	adds	r2, r3, #4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c96:	e006      	b.n	8002ca6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	aaaaaaab 	.word	0xaaaaaaab
 8002cbc:	0800a8f4 	.word	0x0800a8f4
 8002cc0:	fffffc00 	.word	0xfffffc00

08002cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11f      	bne.n	8002d1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d856      	bhi.n	8002d92 <DMA_CheckFifoParam+0xce>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <DMA_CheckFifoParam+0x28>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d0f 	.word	0x08002d0f
 8002cf4:	08002cfd 	.word	0x08002cfd
 8002cf8:	08002d93 	.word	0x08002d93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d046      	beq.n	8002d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e043      	b.n	8002d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d16:	d140      	bne.n	8002d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e03d      	b.n	8002d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d26:	d121      	bne.n	8002d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d837      	bhi.n	8002d9e <DMA_CheckFifoParam+0xda>
 8002d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <DMA_CheckFifoParam+0x70>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d45 	.word	0x08002d45
 8002d38:	08002d4b 	.word	0x08002d4b
 8002d3c:	08002d45 	.word	0x08002d45
 8002d40:	08002d5d 	.word	0x08002d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e030      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d025      	beq.n	8002da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5a:	e022      	b.n	8002da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d64:	d11f      	bne.n	8002da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d6a:	e01c      	b.n	8002da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d903      	bls.n	8002d7a <DMA_CheckFifoParam+0xb6>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d003      	beq.n	8002d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d78:	e018      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7e:	e015      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d90:	e00b      	b.n	8002daa <DMA_CheckFifoParam+0xe6>
      break;
 8002d92:	bf00      	nop
 8002d94:	e00a      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e008      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e006      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e004      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e002      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;   
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
    }
  } 
  
  return status; 
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e175      	b.n	80030c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 8164 	bne.w	80030c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x56>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d017      	beq.n	8002eb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d123      	bne.n	8002f04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80be 	beq.w	80030c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	4b66      	ldr	r3, [pc, #408]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f5e:	4a61      	ldr	r2, [pc, #388]	@ (80030e4 <HAL_GPIO_Init+0x328>)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	3302      	adds	r3, #2
 8002f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	220f      	movs	r2, #15
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a58      	ldr	r2, [pc, #352]	@ (80030e8 <HAL_GPIO_Init+0x32c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d037      	beq.n	8002ffa <HAL_GPIO_Init+0x23e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	@ (80030ec <HAL_GPIO_Init+0x330>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_GPIO_Init+0x23a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a56      	ldr	r2, [pc, #344]	@ (80030f0 <HAL_GPIO_Init+0x334>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02b      	beq.n	8002ff2 <HAL_GPIO_Init+0x236>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_GPIO_Init+0x338>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d025      	beq.n	8002fee <HAL_GPIO_Init+0x232>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <HAL_GPIO_Init+0x33c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <HAL_GPIO_Init+0x22e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <HAL_GPIO_Init+0x340>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x22a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	@ (8003100 <HAL_GPIO_Init+0x344>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x226>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	@ (8003104 <HAL_GPIO_Init+0x348>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x222>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a50      	ldr	r2, [pc, #320]	@ (8003108 <HAL_GPIO_Init+0x34c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x21e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800310c <HAL_GPIO_Init+0x350>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x21a>
 8002fd2:	2309      	movs	r3, #9
 8002fd4:	e012      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fd6:	230a      	movs	r3, #10
 8002fd8:	e010      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	e00e      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fde:	2307      	movs	r3, #7
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x328>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <HAL_GPIO_Init+0x354>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a34      	ldr	r2, [pc, #208]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b32      	ldr	r3, [pc, #200]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a29      	ldr	r2, [pc, #164]	@ (8003110 <HAL_GPIO_Init+0x354>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b28      	ldr	r3, [pc, #160]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <HAL_GPIO_Init+0x354>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a14      	ldr	r2, [pc, #80]	@ (8003110 <HAL_GPIO_Init+0x354>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae86 	bls.w	8002ddc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40021400 	.word	0x40021400
 8003100:	40021800 	.word	0x40021800
 8003104:	40021c00 	.word	0x40021c00
 8003108:	40022000 	.word	0x40022000
 800310c:	40022400 	.word	0x40022400
 8003110:	40013c00 	.word	0x40013c00

08003114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e001      	b.n	8003136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
 8003150:	4613      	mov	r3, r2
 8003152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003160:	e003      	b.n	800316a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	041a      	lsls	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	619a      	str	r2, [r3, #24]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003188:	887a      	ldrh	r2, [r7, #2]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	041a      	lsls	r2, r3, #16
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	43d9      	mvns	r1, r3
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	400b      	ands	r3, r1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	619a      	str	r2, [r3, #24]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe f974 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	@ 0x24
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800320c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e006      	b.n	8003234 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003232:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d104      	bne.n	8003246 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003244:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_I2C_Init+0x11c>)
 8003252:	430b      	orrs	r3, r1
 8003254:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003264:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	02008000 	.word	0x02008000

080032cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	460b      	mov	r3, r1
 80032da:	817b      	strh	r3, [r7, #10]
 80032dc:	4613      	mov	r3, r2
 80032de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	f040 80da 	bne.w	80034a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_I2C_Master_Transmit+0x30>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e0d3      	b.n	80034a4 <HAL_I2C_Master_Transmit+0x1d8>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003304:	f7ff f95e 	bl	80025c4 <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2319      	movs	r3, #25
 8003310:	2201      	movs	r2, #1
 8003312:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f9e6 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0be      	b.n	80034a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2221      	movs	r2, #33	@ 0x21
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2210      	movs	r2, #16
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	2bff      	cmp	r3, #255	@ 0xff
 8003356:	d90e      	bls.n	8003376 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	22ff      	movs	r2, #255	@ 0xff
 800335c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003362:	b2da      	uxtb	r2, r3
 8003364:	8979      	ldrh	r1, [r7, #10]
 8003366:	4b51      	ldr	r3, [pc, #324]	@ (80034ac <HAL_I2C_Master_Transmit+0x1e0>)
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fbd0 	bl	8003b14 <I2C_TransferConfig>
 8003374:	e06c      	b.n	8003450 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	b2da      	uxtb	r2, r3
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	4b48      	ldr	r3, [pc, #288]	@ (80034ac <HAL_I2C_Master_Transmit+0x1e0>)
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fbbf 	bl	8003b14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003396:	e05b      	b.n	8003450 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	6a39      	ldr	r1, [r7, #32]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f9e3 	bl	8003768 <I2C_WaitOnTXISFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e07b      	b.n	80034a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d034      	beq.n	8003450 <HAL_I2C_Master_Transmit+0x184>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d130      	bne.n	8003450 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f975 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04d      	b.n	80034a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2bff      	cmp	r3, #255	@ 0xff
 8003410:	d90e      	bls.n	8003430 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	@ 0xff
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	b2da      	uxtb	r2, r3
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fb73 	bl	8003b14 <I2C_TransferConfig>
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	b2da      	uxtb	r2, r3
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fb62 	bl	8003b14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d19e      	bne.n	8003398 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f9c2 	bl	80037e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01a      	b.n	80034a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2220      	movs	r2, #32
 8003474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003482:	400b      	ands	r3, r1
 8003484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	80002000 	.word	0x80002000
 80034b0:	fe00e800 	.word	0xfe00e800

080034b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	461a      	mov	r2, r3
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
 80034c4:	4613      	mov	r3, r2
 80034c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	f040 80db 	bne.w	800368c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_I2C_Master_Receive+0x30>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e0d4      	b.n	800368e <HAL_I2C_Master_Receive+0x1da>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ec:	f7ff f86a 	bl	80025c4 <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2319      	movs	r3, #25
 80034f8:	2201      	movs	r2, #1
 80034fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8f2 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0bf      	b.n	800368e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2222      	movs	r2, #34	@ 0x22
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2210      	movs	r2, #16
 800351a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	893a      	ldrh	r2, [r7, #8]
 800352e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2bff      	cmp	r3, #255	@ 0xff
 800353e:	d90e      	bls.n	800355e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	22ff      	movs	r2, #255	@ 0xff
 8003544:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354a:	b2da      	uxtb	r2, r3
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	4b52      	ldr	r3, [pc, #328]	@ (8003698 <HAL_I2C_Master_Receive+0x1e4>)
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fadc 	bl	8003b14 <I2C_TransferConfig>
 800355c:	e06d      	b.n	800363a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	b2da      	uxtb	r2, r3
 800356e:	8979      	ldrh	r1, [r7, #10]
 8003570:	4b49      	ldr	r3, [pc, #292]	@ (8003698 <HAL_I2C_Master_Receive+0x1e4>)
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 facb 	bl	8003b14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800357e:	e05c      	b.n	800363a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	6a39      	ldr	r1, [r7, #32]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f96b 	bl	8003860 <I2C_WaitOnRXNEFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e07c      	b.n	800368e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d034      	beq.n	800363a <HAL_I2C_Master_Receive+0x186>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d130      	bne.n	800363a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2200      	movs	r2, #0
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f880 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e04d      	b.n	800368e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2bff      	cmp	r3, #255	@ 0xff
 80035fa:	d90e      	bls.n	800361a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	22ff      	movs	r2, #255	@ 0xff
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003606:	b2da      	uxtb	r2, r3
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	2300      	movs	r3, #0
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa7e 	bl	8003b14 <I2C_TransferConfig>
 8003618:	e00f      	b.n	800363a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	b2da      	uxtb	r2, r3
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	2300      	movs	r3, #0
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fa6d 	bl	8003b14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d19d      	bne.n	8003580 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	6a39      	ldr	r1, [r7, #32]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f8cd 	bl	80037e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e01a      	b.n	800368e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2220      	movs	r2, #32
 800365e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_I2C_Master_Receive+0x1e8>)
 800366c:	400b      	ands	r3, r1
 800366e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	80002400 	.word	0x80002400
 800369c:	fe00e800 	.word	0xfe00e800

080036a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d103      	bne.n	80036be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	619a      	str	r2, [r3, #24]
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	e022      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d01e      	beq.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe ff5f 	bl	80025c4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e00f      	b.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	429a      	cmp	r2, r3
 800375c:	d0cd      	beq.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003774:	e02c      	b.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f8ea 	bl	8003954 <I2C_IsErrorOccurred>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e02a      	b.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d01e      	beq.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe ff17 	bl	80025c4 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d113      	bne.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d1cb      	bne.n	8003776 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f4:	e028      	b.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f8aa 	bl	8003954 <I2C_IsErrorOccurred>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e026      	b.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fedb 	bl	80025c4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d113      	bne.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e007      	b.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d1cf      	bne.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800386c:	e064      	b.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f86e 	bl	8003954 <I2C_IsErrorOccurred>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e062      	b.n	8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d138      	bne.n	8003902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d105      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e04e      	b.n	8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d107      	bne.n	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2210      	movs	r2, #16
 80038be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2204      	movs	r2, #4
 80038c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80038c6:	e002      	b.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e022      	b.n	8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe fe5f 	bl	80025c4 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10f      	bne.n	8003938 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d193      	bne.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d068      	beq.n	8003a52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003988:	e049      	b.n	8003a1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d045      	beq.n	8003a1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fe17 	bl	80025c4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_IsErrorOccurred+0x54>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13a      	bne.n	8003a1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ca:	d121      	bne.n	8003a10 <I2C_IsErrorOccurred+0xbc>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039d2:	d01d      	beq.n	8003a10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d01a      	beq.n	8003a10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039ea:	f7fe fdeb 	bl	80025c4 <HAL_GetTick>
 80039ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f0:	e00e      	b.n	8003a10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039f2:	f7fe fde7 	bl	80025c4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b19      	cmp	r3, #25
 80039fe:	d907      	bls.n	8003a10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f043 0320 	orr.w	r3, r3, #32
 8003a06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a0e:	e006      	b.n	8003a1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d1e9      	bne.n	80039f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d003      	beq.n	8003a34 <I2C_IsErrorOccurred+0xe0>
 8003a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0aa      	beq.n	800398a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2220      	movs	r2, #32
 8003a42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f043 0302 	orr.w	r3, r3, #2
 8003aae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01c      	beq.n	8003b02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff fde9 	bl	80036a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <I2C_IsErrorOccurred+0x1bc>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3728      	adds	r7, #40	@ 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	4613      	mov	r3, r2
 8003b24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b2c:	7a7b      	ldrb	r3, [r7, #9]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	0d5b      	lsrs	r3, r3, #21
 8003b4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <I2C_TransferConfig+0x60>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	43db      	mvns	r3, r3
 8003b58:	ea02 0103 	and.w	r1, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	03ff63ff 	.word	0x03ff63ff

08003b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d138      	bne.n	8003c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e032      	b.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	@ 0x24
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d139      	bne.n	8003c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e033      	b.n	8003c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2224      	movs	r2, #36	@ 0x24
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4b23      	ldr	r3, [pc, #140]	@ (8003d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cca:	4b1e      	ldr	r3, [pc, #120]	@ (8003d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1d      	ldr	r2, [pc, #116]	@ (8003d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cd6:	f7fe fc75 	bl	80025c4 <HAL_GetTick>
 8003cda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cdc:	e009      	b.n	8003cf2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cde:	f7fe fc71 	bl	80025c4 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cec:	d901      	bls.n	8003cf2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e022      	b.n	8003d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cf2:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfe:	d1ee      	bne.n	8003cde <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d00:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0f      	ldr	r2, [pc, #60]	@ (8003d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0c:	f7fe fc5a 	bl	80025c4 <HAL_GetTick>
 8003d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d12:	e009      	b.n	8003d28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d14:	f7fe fc56 	bl	80025c4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d22:	d901      	bls.n	8003d28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e007      	b.n	8003d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d34:	d1ee      	bne.n	8003d14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40007000 	.word	0x40007000

08003d48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e29b      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8087 	beq.w	8003e7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d6c:	4b96      	ldr	r3, [pc, #600]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d00c      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d78:	4b93      	ldr	r3, [pc, #588]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d112      	bne.n	8003daa <HAL_RCC_OscConfig+0x62>
 8003d84:	4b90      	ldr	r3, [pc, #576]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d90:	d10b      	bne.n	8003daa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d92:	4b8d      	ldr	r3, [pc, #564]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06c      	beq.n	8003e78 <HAL_RCC_OscConfig+0x130>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d168      	bne.n	8003e78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e275      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x7a>
 8003db4:	4b84      	ldr	r3, [pc, #528]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a83      	ldr	r2, [pc, #524]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e02e      	b.n	8003e20 <HAL_RCC_OscConfig+0xd8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x9c>
 8003dca:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7b      	ldr	r2, [pc, #492]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e01d      	b.n	8003e20 <HAL_RCC_OscConfig+0xd8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0xc0>
 8003dee:	4b76      	ldr	r3, [pc, #472]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a75      	ldr	r2, [pc, #468]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b73      	ldr	r3, [pc, #460]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a72      	ldr	r2, [pc, #456]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xd8>
 8003e08:	4b6f      	ldr	r3, [pc, #444]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe fbcc 	bl	80025c4 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe fbc8 	bl	80025c4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	@ 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e229      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b61      	ldr	r3, [pc, #388]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0xe8>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fe fbb8 	bl	80025c4 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fe fbb4 	bl	80025c4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e215      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	4b57      	ldr	r3, [pc, #348]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x110>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d069      	beq.n	8003f5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e86:	4b50      	ldr	r3, [pc, #320]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x190>
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b47      	ldr	r3, [pc, #284]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1e9      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	493d      	ldr	r1, [pc, #244]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e040      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a38      	ldr	r2, [pc, #224]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fe fb6a 	bl	80025c4 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fe fb66 	bl	80025c4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e1c7      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	4b30      	ldr	r3, [pc, #192]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4929      	ldr	r1, [pc, #164]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
 8003f26:	e018      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f28:	4b27      	ldr	r3, [pc, #156]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fb46 	bl	80025c4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fb42 	bl	80025c4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e1a3      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d038      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d019      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fe fb23 	bl	80025c4 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fe fb1f 	bl	80025c4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e180      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f94:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x23a>
 8003fa0:	e01a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa6:	4a08      	ldr	r2, [pc, #32]	@ (8003fc8 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fb09 	bl	80025c4 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb6:	f7fe fb05 	bl	80025c4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d903      	bls.n	8003fcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e166      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
 8003fc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	4b92      	ldr	r3, [pc, #584]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ee      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80a4 	beq.w	800412e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b8c      	ldr	r3, [pc, #560]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	4b89      	ldr	r3, [pc, #548]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a88      	ldr	r2, [pc, #544]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffe:	4b86      	ldr	r3, [pc, #536]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400e:	4b83      	ldr	r3, [pc, #524]	@ (800421c <HAL_RCC_OscConfig+0x4d4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d118      	bne.n	800404c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800401a:	4b80      	ldr	r3, [pc, #512]	@ (800421c <HAL_RCC_OscConfig+0x4d4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7f      	ldr	r2, [pc, #508]	@ (800421c <HAL_RCC_OscConfig+0x4d4>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fe facd 	bl	80025c4 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fe fac9 	bl	80025c4 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b64      	cmp	r3, #100	@ 0x64
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e12a      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004040:	4b76      	ldr	r3, [pc, #472]	@ (800421c <HAL_RCC_OscConfig+0x4d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x31a>
 8004054:	4b70      	ldr	r3, [pc, #448]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4a6f      	ldr	r2, [pc, #444]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004060:	e02d      	b.n	80040be <HAL_RCC_OscConfig+0x376>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x33c>
 800406a:	4b6b      	ldr	r3, [pc, #428]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	4a6a      	ldr	r2, [pc, #424]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	@ 0x70
 8004076:	4b68      	ldr	r3, [pc, #416]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a67      	ldr	r2, [pc, #412]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800407c:	f023 0304 	bic.w	r3, r3, #4
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
 8004082:	e01c      	b.n	80040be <HAL_RCC_OscConfig+0x376>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b05      	cmp	r3, #5
 800408a:	d10c      	bne.n	80040a6 <HAL_RCC_OscConfig+0x35e>
 800408c:	4b62      	ldr	r3, [pc, #392]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004090:	4a61      	ldr	r2, [pc, #388]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	6713      	str	r3, [r2, #112]	@ 0x70
 8004098:	4b5f      	ldr	r3, [pc, #380]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409c:	4a5e      	ldr	r2, [pc, #376]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a4:	e00b      	b.n	80040be <HAL_RCC_OscConfig+0x376>
 80040a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b2:	4b59      	ldr	r3, [pc, #356]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a58      	ldr	r2, [pc, #352]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d015      	beq.n	80040f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fe fa7d 	bl	80025c4 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fe fa79 	bl	80025c4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0d8      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ee      	beq.n	80040ce <HAL_RCC_OscConfig+0x386>
 80040f0:	e014      	b.n	800411c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe fa67 	bl	80025c4 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fe fa63 	bl	80025c4 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0c2      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004110:	4b41      	ldr	r3, [pc, #260]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ee      	bne.n	80040fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b3d      	ldr	r3, [pc, #244]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	4a3c      	ldr	r2, [pc, #240]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80ae 	beq.w	8004294 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004138:	4b37      	ldr	r3, [pc, #220]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d06d      	beq.n	8004220 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d14b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b32      	ldr	r3, [pc, #200]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a31      	ldr	r2, [pc, #196]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe fa34 	bl	80025c4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fe fa30 	bl	80025c4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e091      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b29      	ldr	r3, [pc, #164]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	071b      	lsls	r3, r3, #28
 80041aa:	491b      	ldr	r1, [pc, #108]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b0:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80041b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe fa02 	bl	80025c4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe f9fe 	bl	80025c4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e05f      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x47c>
 80041e2:	e057      	b.n	8004294 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 80041ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fe f9e8 	bl	80025c4 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fe f9e4 	bl	80025c4 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e045      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <HAL_RCC_OscConfig+0x4d0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4b0>
 8004216:	e03d      	b.n	8004294 <HAL_RCC_OscConfig+0x54c>
 8004218:	40023800 	.word	0x40023800
 800421c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004220:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <HAL_RCC_OscConfig+0x558>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d030      	beq.n	8004290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d129      	bne.n	8004290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d122      	bne.n	8004290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004256:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004258:	4293      	cmp	r3, r2
 800425a:	d119      	bne.n	8004290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	3b01      	subs	r3, #1
 800426a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d10f      	bne.n	8004290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d107      	bne.n	8004290 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800

080042a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0d0      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d910      	bls.n	80042ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b67      	ldr	r3, [pc, #412]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 020f 	bic.w	r2, r3, #15
 80042d2:	4965      	ldr	r1, [pc, #404]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d040      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d115      	bne.n	8004386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	4b41      	ldr	r3, [pc, #260]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e073      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	4b3d      	ldr	r3, [pc, #244]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06b      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4936      	ldr	r1, [pc, #216]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fe f914 	bl	80025c4 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fe f910 	bl	80025c4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e053      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b2d      	ldr	r3, [pc, #180]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c8:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d210      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 020f 	bic.w	r2, r3, #15
 80043de:	4922      	ldr	r1, [pc, #136]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	@ (8004470 <HAL_RCC_ClockConfig+0x1cc>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x1d0>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_RCC_ClockConfig+0x1d4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fafa 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	0800a8dc 	.word	0x0800a8dc
 8004474:	20000010 	.word	0x20000010
 8004478:	20000014 	.word	0x20000014

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b094      	sub	sp, #80	@ 0x50
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	647b      	str	r3, [r7, #68]	@ 0x44
 8004488:	2300      	movs	r3, #0
 800448a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448c:	2300      	movs	r3, #0
 800448e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b79      	ldr	r3, [pc, #484]	@ (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80e1 	bhi.w	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e0db      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b73      	ldr	r3, [pc, #460]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 80044b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b4:	e0db      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b73      	ldr	r3, [pc, #460]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x208>)
 80044b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ba:	e0d8      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b6f      	ldr	r3, [pc, #444]	@ (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044c6:	4b6d      	ldr	r3, [pc, #436]	@ (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d063      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044e6:	2300      	movs	r3, #0
 80044e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044ee:	4622      	mov	r2, r4
 80044f0:	462b      	mov	r3, r5
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4621      	mov	r1, r4
 8004508:	1a51      	subs	r1, r2, r1
 800450a:	6139      	str	r1, [r7, #16]
 800450c:	4629      	mov	r1, r5
 800450e:	eb63 0301 	sbc.w	r3, r3, r1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004520:	4659      	mov	r1, fp
 8004522:	018b      	lsls	r3, r1, #6
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800452a:	4651      	mov	r1, sl
 800452c:	018a      	lsls	r2, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	ebb2 0801 	subs.w	r8, r2, r1
 8004534:	4659      	mov	r1, fp
 8004536:	eb63 0901 	sbc.w	r9, r3, r1
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800454a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454e:	4690      	mov	r8, r2
 8004550:	4699      	mov	r9, r3
 8004552:	4623      	mov	r3, r4
 8004554:	eb18 0303 	adds.w	r3, r8, r3
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	462b      	mov	r3, r5
 800455c:	eb49 0303 	adc.w	r3, r9, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800456e:	4629      	mov	r1, r5
 8004570:	024b      	lsls	r3, r1, #9
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004578:	4621      	mov	r1, r4
 800457a:	024a      	lsls	r2, r1, #9
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004582:	2200      	movs	r2, #0
 8004584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004588:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800458c:	f7fb fe58 	bl	8000240 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004598:	e058      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b38      	ldr	r3, [pc, #224]	@ (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	4611      	mov	r1, r2
 80045a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	f04f 0000 	mov.w	r0, #0
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c6:	0150      	lsls	r0, r2, #5
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4641      	mov	r1, r8
 80045ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045ec:	ebb2 040a 	subs.w	r4, r2, sl
 80045f0:	eb63 050b 	sbc.w	r5, r3, fp
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4643      	mov	r3, r8
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	464b      	mov	r3, r9
 8004610:	eb45 0303 	adc.w	r3, r5, r3
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004622:	4629      	mov	r1, r5
 8004624:	028b      	lsls	r3, r1, #10
 8004626:	4621      	mov	r1, r4
 8004628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800462c:	4621      	mov	r1, r4
 800462e:	028a      	lsls	r2, r1, #10
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004636:	2200      	movs	r2, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	61fa      	str	r2, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	f7fb fdfe 	bl	8000240 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4613      	mov	r3, r2
 800464a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800464c:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800465c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800465e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004666:	e002      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800466c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004670:	4618      	mov	r0, r3
 8004672:	3750      	adds	r7, #80	@ 0x50
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	00f42400 	.word	0x00f42400
 8004684:	007a1200 	.word	0x007a1200

08004688 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	@ (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000010 	.word	0x20000010

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800a8ec 	.word	0x0800a8ec

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046cc:	f7ff ffdc 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0b5b      	lsrs	r3, r3, #13
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	@ (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	0800a8ec 	.word	0x0800a8ec

080046f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	220f      	movs	r2, #15
 80046fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004700:	4b12      	ldr	r3, [pc, #72]	@ (800474c <HAL_RCC_GetClockConfig+0x5c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0203 	and.w	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800470c:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <HAL_RCC_GetClockConfig+0x5c>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004718:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <HAL_RCC_GetClockConfig+0x5c>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004724:	4b09      	ldr	r3, [pc, #36]	@ (800474c <HAL_RCC_GetClockConfig+0x5c>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <HAL_RCC_GetClockConfig+0x60>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	601a      	str	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	40023c00 	.word	0x40023c00

08004754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d012      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800477c:	4b69      	ldr	r3, [pc, #420]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a68      	ldr	r2, [pc, #416]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004782:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004786:	6093      	str	r3, [r2, #8]
 8004788:	4b66      	ldr	r3, [pc, #408]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004790:	4964      	ldr	r1, [pc, #400]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	4959      	ldr	r1, [pc, #356]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047cc:	d101      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	494a      	ldr	r1, [pc, #296]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004808:	d101      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 808b 	beq.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004838:	4b3a      	ldr	r3, [pc, #232]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	4a39      	ldr	r2, [pc, #228]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6413      	str	r3, [r2, #64]	@ 0x40
 8004844:	4b37      	ldr	r3, [pc, #220]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004850:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a34      	ldr	r2, [pc, #208]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fd feb2 	bl	80025c4 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fd feae 	bl	80025c4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	@ 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e38f      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004876:	4b2c      	ldr	r3, [pc, #176]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004882:	4b28      	ldr	r3, [pc, #160]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d035      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d02e      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a0:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048c2:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048c8:	4b16      	ldr	r3, [pc, #88]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d114      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd fe76 	bl	80025c4 <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048da:	e00a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fd fe72 	bl	80025c4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e351      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0ee      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800490a:	d111      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800490c:	4b05      	ldr	r3, [pc, #20]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004918:	4b04      	ldr	r3, [pc, #16]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800491a:	400b      	ands	r3, r1
 800491c:	4901      	ldr	r1, [pc, #4]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
 8004922:	e00b      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004924:	40023800 	.word	0x40023800
 8004928:	40007000 	.word	0x40007000
 800492c:	0ffffcff 	.word	0x0ffffcff
 8004930:	4bac      	ldr	r3, [pc, #688]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4aab      	ldr	r2, [pc, #684]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	4ba9      	ldr	r3, [pc, #676]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004948:	49a6      	ldr	r1, [pc, #664]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800495a:	4ba2      	ldr	r3, [pc, #648]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004960:	4aa0      	ldr	r2, [pc, #640]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800496a:	4b9e      	ldr	r3, [pc, #632]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004974:	499b      	ldr	r1, [pc, #620]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004988:	4b96      	ldr	r3, [pc, #600]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004996:	4993      	ldr	r1, [pc, #588]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049aa:	4b8e      	ldr	r3, [pc, #568]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049b8:	498a      	ldr	r1, [pc, #552]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049cc:	4b85      	ldr	r3, [pc, #532]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049da:	4982      	ldr	r1, [pc, #520]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ee:	4b7d      	ldr	r3, [pc, #500]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	4979      	ldr	r1, [pc, #484]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a10:	4b74      	ldr	r3, [pc, #464]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	4971      	ldr	r1, [pc, #452]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a32:	4b6c      	ldr	r3, [pc, #432]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a38:	f023 020c 	bic.w	r2, r3, #12
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a40:	4968      	ldr	r1, [pc, #416]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a54:	4b63      	ldr	r3, [pc, #396]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	4960      	ldr	r1, [pc, #384]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a76:	4b5b      	ldr	r3, [pc, #364]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a84:	4957      	ldr	r1, [pc, #348]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a98:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa6:	494f      	ldr	r1, [pc, #316]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004aba:	4b4a      	ldr	r3, [pc, #296]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac8:	4946      	ldr	r1, [pc, #280]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004adc:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	493e      	ldr	r1, [pc, #248]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0c:	4935      	ldr	r1, [pc, #212]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b20:	4b30      	ldr	r3, [pc, #192]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b2e:	492d      	ldr	r1, [pc, #180]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b42:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b48:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b50:	4924      	ldr	r1, [pc, #144]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b60:	d101      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b82:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b90:	4914      	ldr	r1, [pc, #80]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb4:	490b      	ldr	r1, [pc, #44]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd8:	4902      	ldr	r1, [pc, #8]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bfa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	4986      	ldr	r1, [pc, #536]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c18:	4b81      	ldr	r3, [pc, #516]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c1e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c28:	497d      	ldr	r1, [pc, #500]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d006      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80d6 	beq.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c44:	4b76      	ldr	r3, [pc, #472]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a75      	ldr	r2, [pc, #468]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fd fcb8 	bl	80025c4 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c58:	f7fd fcb4 	bl	80025c4 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	@ 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e195      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d021      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c98:	4b61      	ldr	r3, [pc, #388]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c9e:	0e1b      	lsrs	r3, r3, #24
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	019a      	lsls	r2, r3, #6
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	4958      	ldr	r1, [pc, #352]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02e      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cf0:	d129      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d00:	4b47      	ldr	r3, [pc, #284]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d06:	0f1b      	lsrs	r3, r3, #28
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	019a      	lsls	r2, r3, #6
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	071b      	lsls	r3, r3, #28
 8004d26:	493e      	ldr	r1, [pc, #248]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d34:	f023 021f 	bic.w	r2, r3, #31
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	4938      	ldr	r1, [pc, #224]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01d      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d52:	4b33      	ldr	r3, [pc, #204]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d60:	4b2f      	ldr	r3, [pc, #188]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d66:	0f1b      	lsrs	r3, r3, #28
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	019a      	lsls	r2, r3, #6
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	4926      	ldr	r1, [pc, #152]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	019a      	lsls	r2, r3, #6
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	071b      	lsls	r3, r3, #28
 8004db6:	491a      	ldr	r1, [pc, #104]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dbe:	4b18      	ldr	r3, [pc, #96]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dca:	f7fd fbfb 	bl	80025c4 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dd2:	f7fd fbf7 	bl	80025c4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b64      	cmp	r3, #100	@ 0x64
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0d8      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004de4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	f040 80ce 	bne.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004df8:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e04:	f7fd fbde 	bl	80025c4 <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e0c:	f7fd fbda 	bl	80025c4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	@ 0x64
 8004e18:	d904      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0bb      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e24:	4b5e      	ldr	r3, [pc, #376]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e30:	d0ec      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d02e      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12a      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e5a:	4b51      	ldr	r3, [pc, #324]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e68:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	0f1b      	lsrs	r3, r3, #28
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	019a      	lsls	r2, r3, #6
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	4944      	ldr	r1, [pc, #272]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e96:	4b42      	ldr	r3, [pc, #264]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	493d      	ldr	r1, [pc, #244]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d022      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ec4:	d11d      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ec6:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	0e1b      	lsrs	r3, r3, #24
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ed4:	4b32      	ldr	r3, [pc, #200]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	0f1b      	lsrs	r3, r3, #28
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	019a      	lsls	r2, r3, #6
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	4929      	ldr	r1, [pc, #164]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d028      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f1c:	4b20      	ldr	r3, [pc, #128]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4917      	ldr	r1, [pc, #92]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f4a:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	4911      	ldr	r1, [pc, #68]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f60:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0e      	ldr	r2, [pc, #56]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fb2a 	bl	80025c4 <HAL_GetTick>
 8004f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f74:	f7fd fb26 	bl	80025c4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	@ 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e007      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f92:	d1ef      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800

08004fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e09d      	b.n	80050f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc6:	d009      	beq.n	8004fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	61da      	str	r2, [r3, #28]
 8004fce:	e005      	b.n	8004fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fb50 	bl	800169c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800501c:	d902      	bls.n	8005024 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e002      	b.n	800502a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005028:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005032:	d007      	beq.n	8005044 <HAL_SPI_Init+0xa0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800503c:	d002      	beq.n	8005044 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	ea42 0103 	orr.w	r1, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 0204 	and.w	r2, r3, #4
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050c0:	ea42 0103 	orr.w	r1, r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b08a      	sub	sp, #40	@ 0x28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005108:	2301      	movs	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x26>
 800511c:	2302      	movs	r3, #2
 800511e:	e1fb      	b.n	8005518 <HAL_SPI_TransmitReceive+0x41e>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005128:	f7fd fa4c 	bl	80025c4 <HAL_GetTick>
 800512c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005134:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005144:	7efb      	ldrb	r3, [r7, #27]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d00e      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x6e>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005150:	d106      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x66>
 800515a:	7efb      	ldrb	r3, [r7, #27]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d003      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005160:	2302      	movs	r3, #2
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005166:	e1cd      	b.n	8005504 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_SPI_TransmitReceive+0x80>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SPI_TransmitReceive+0x80>
 8005174:	887b      	ldrh	r3, [r7, #2]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005180:	e1c0      	b.n	8005504 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b04      	cmp	r3, #4
 800518c:	d003      	beq.n	8005196 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2205      	movs	r2, #5
 8005192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	887a      	ldrh	r2, [r7, #2]
 80051a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	887a      	ldrh	r2, [r7, #2]
 80051ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	887a      	ldrh	r2, [r7, #2]
 80051c2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051d8:	d802      	bhi.n	80051e0 <HAL_SPI_TransmitReceive+0xe6>
 80051da:	8a3b      	ldrh	r3, [r7, #16]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d908      	bls.n	80051f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	e007      	b.n	8005202 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d007      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800521e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005228:	d97c      	bls.n	8005324 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_SPI_TransmitReceive+0x13e>
 8005232:	8a7b      	ldrh	r3, [r7, #18]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d169      	bne.n	800530c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	881a      	ldrh	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	1c9a      	adds	r2, r3, #2
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525c:	e056      	b.n	800530c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b02      	cmp	r3, #2
 800526a:	d11b      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x1aa>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x1aa>
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	2b01      	cmp	r3, #1
 800527a:	d113      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	881a      	ldrh	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528c:	1c9a      	adds	r2, r3, #2
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d11c      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x1f2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	b292      	uxth	r2, r2
 80052ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052e8:	2301      	movs	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052ec:	f7fd f96a 	bl	80025c4 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d807      	bhi.n	800530c <HAL_SPI_TransmitReceive+0x212>
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d003      	beq.n	800530c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800530a:	e0fb      	b.n	8005504 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1a3      	bne.n	800525e <HAL_SPI_TransmitReceive+0x164>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d19d      	bne.n	800525e <HAL_SPI_TransmitReceive+0x164>
 8005322:	e0df      	b.n	80054e4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_SPI_TransmitReceive+0x23a>
 800532c:	8a7b      	ldrh	r3, [r7, #18]
 800532e:	2b01      	cmp	r3, #1
 8005330:	f040 80cb 	bne.w	80054ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b01      	cmp	r3, #1
 800533c:	d912      	bls.n	8005364 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534e:	1c9a      	adds	r2, r3, #2
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b02      	subs	r3, #2
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005362:	e0b2      	b.n	80054ca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538a:	e09e      	b.n	80054ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d134      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x30a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02f      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x30a>
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d12c      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d912      	bls.n	80053da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	881a      	ldrh	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	1c9a      	adds	r2, r3, #2
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b02      	subs	r3, #2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053d8:	e012      	b.n	8005400 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d148      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x3aa>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d042      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d923      	bls.n	8005472 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	b292      	uxth	r2, r2
 8005436:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	1c9a      	adds	r2, r3, #2
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b02      	subs	r3, #2
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d81f      	bhi.n	80054a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	e016      	b.n	80054a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f103 020c 	add.w	r2, r3, #12
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054a0:	2301      	movs	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054a4:	f7fd f88e 	bl	80025c4 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d803      	bhi.n	80054bc <HAL_SPI_TransmitReceive+0x3c2>
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d102      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x3c8>
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80054c8:	e01c      	b.n	8005504 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f af5b 	bne.w	800538c <HAL_SPI_TransmitReceive+0x292>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f47f af54 	bne.w	800538c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f937 	bl	800575c <SPI_EndRxTxTransaction>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d006      	beq.n	8005502 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	661a      	str	r2, [r3, #96]	@ 0x60
 8005500:	e000      	b.n	8005504 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005514:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005530:	f7fd f848 	bl	80025c4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	4413      	add	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005540:	f7fd f840 	bl	80025c4 <HAL_GetTick>
 8005544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005546:	4b39      	ldr	r3, [pc, #228]	@ (800562c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005556:	e054      	b.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d050      	beq.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005560:	f7fd f830 	bl	80025c4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	d902      	bls.n	8005576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d13d      	bne.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800558e:	d111      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005598:	d004      	beq.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a2:	d107      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055bc:	d10f      	bne.n	80055de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e017      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3b01      	subs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d19b      	bne.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010

08005630 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005642:	f7fc ffbf 	bl	80025c4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	4413      	add	r3, r2
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005652:	f7fc ffb7 	bl	80025c4 <HAL_GetTick>
 8005656:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005660:	4b3d      	ldr	r3, [pc, #244]	@ (8005758 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	0d1b      	lsrs	r3, r3, #20
 8005670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005678:	e060      	b.n	800573c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005680:	d107      	bne.n	8005692 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005690:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d050      	beq.n	800573c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800569a:	f7fc ff93 	bl	80025c4 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d902      	bls.n	80056b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d13d      	bne.n	800572c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c8:	d111      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d2:	d004      	beq.n	80056de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d107      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f6:	d10f      	bne.n	8005718 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005716:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e010      	b.n	800574e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3b01      	subs	r3, #1
 800573a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d196      	bne.n	800567a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3728      	adds	r7, #40	@ 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000010 	.word	0x20000010

0800575c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff ff5b 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e046      	b.n	800581e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005790:	4b25      	ldr	r3, [pc, #148]	@ (8005828 <SPI_EndRxTxTransaction+0xcc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a25      	ldr	r2, [pc, #148]	@ (800582c <SPI_EndRxTxTransaction+0xd0>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	0d5b      	lsrs	r3, r3, #21
 800579c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ae:	d112      	bne.n	80057d6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2180      	movs	r1, #128	@ 0x80
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff feb0 	bl	8005520 <SPI_WaitFlagStateUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e023      	b.n	800581e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3b01      	subs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ec:	2b80      	cmp	r3, #128	@ 0x80
 80057ee:	d0f2      	beq.n	80057d6 <SPI_EndRxTxTransaction+0x7a>
 80057f0:	e000      	b.n	80057f4 <SPI_EndRxTxTransaction+0x98>
        break;
 80057f2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff15 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e000      	b.n	800581e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000010 	.word	0x20000010
 800582c:	165e9f81 	.word	0x165e9f81

08005830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e049      	b.n	80058d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f841 	bl	80058de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f000 faa6 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e054      	b.n	80059b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a26      	ldr	r2, [pc, #152]	@ (80059c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d022      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005936:	d01d      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a22      	ldr	r2, [pc, #136]	@ (80059c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d018      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a21      	ldr	r2, [pc, #132]	@ (80059cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1f      	ldr	r2, [pc, #124]	@ (80059d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00e      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1e      	ldr	r2, [pc, #120]	@ (80059d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d115      	bne.n	80059a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	4b19      	ldr	r3, [pc, #100]	@ (80059e0 <HAL_TIM_Base_Start_IT+0xec>)
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b06      	cmp	r3, #6
 8005984:	d015      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598c:	d011      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599e:	e008      	b.n	80059b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40010400 	.word	0x40010400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40001800 	.word	0x40001800
 80059e0:	00010007 	.word	0x00010007

080059e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e08f      	b.n	8005b18 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7fb fe89 	bl	8001724 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b3e      	ldr	r3, [pc, #248]	@ (8005b20 <HAL_TIM_Encoder_Init+0x13c>)
 8005a26:	400b      	ands	r3, r1
 8005a28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f000 f9c3 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4b31      	ldr	r3, [pc, #196]	@ (8005b24 <HAL_TIM_Encoder_Init+0x140>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4b2b      	ldr	r3, [pc, #172]	@ (8005b28 <HAL_TIM_Encoder_Init+0x144>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <HAL_TIM_Encoder_Init+0x148>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	4313      	orrs	r3, r2
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	011a      	lsls	r2, r3, #4
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	031b      	lsls	r3, r3, #12
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	fffebff8 	.word	0xfffebff8
 8005b24:	fffffcfc 	.word	0xfffffcfc
 8005b28:	fffff3f3 	.word	0xfffff3f3
 8005b2c:	ffff0f0f 	.word	0xffff0f0f

08005b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0202 	mvn.w	r2, #2
 8005b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f905 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8f7 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f908 	bl	8005d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d122      	bne.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d11b      	bne.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0204 	mvn.w	r2, #4
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8db 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8cd 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f8de 	bl	8005d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d122      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d11b      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0208 	mvn.w	r2, #8
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8b1 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f8a3 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f8b4 	bl	8005d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d122      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d11b      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0210 	mvn.w	r2, #16
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f887 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f879 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f88a 	bl	8005d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10e      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0201 	mvn.w	r2, #1
 8005cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb fa38 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ccc:	2b80      	cmp	r3, #128	@ 0x80
 8005cce:	d107      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f9a8 	bl	8006030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cee:	d10e      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfa:	2b80      	cmp	r3, #128	@ 0x80
 8005cfc:	d107      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f99b 	bl	8006044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d10e      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f838 	bl	8005daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d10e      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0220 	mvn.w	r2, #32
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f95b 	bl	800601c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
	...

08005dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a40      	ldr	r2, [pc, #256]	@ (8005ed4 <TIM_Base_SetConfig+0x114>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dde:	d00f      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ed8 <TIM_Base_SetConfig+0x118>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00b      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3c      	ldr	r2, [pc, #240]	@ (8005edc <TIM_Base_SetConfig+0x11c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d007      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ee0 <TIM_Base_SetConfig+0x120>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8005ee4 <TIM_Base_SetConfig+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d108      	bne.n	8005e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed4 <TIM_Base_SetConfig+0x114>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02b      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e20:	d027      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed8 <TIM_Base_SetConfig+0x118>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d023      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005edc <TIM_Base_SetConfig+0x11c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01f      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee0 <TIM_Base_SetConfig+0x120>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01b      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	@ (8005ee4 <TIM_Base_SetConfig+0x124>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d017      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a28      	ldr	r2, [pc, #160]	@ (8005ee8 <TIM_Base_SetConfig+0x128>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a27      	ldr	r2, [pc, #156]	@ (8005eec <TIM_Base_SetConfig+0x12c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00f      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a26      	ldr	r2, [pc, #152]	@ (8005ef0 <TIM_Base_SetConfig+0x130>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	@ (8005ef4 <TIM_Base_SetConfig+0x134>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a24      	ldr	r2, [pc, #144]	@ (8005ef8 <TIM_Base_SetConfig+0x138>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	@ (8005efc <TIM_Base_SetConfig+0x13c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d108      	bne.n	8005e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed4 <TIM_Base_SetConfig+0x114>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_Base_SetConfig+0xf8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee4 <TIM_Base_SetConfig+0x124>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d103      	bne.n	8005ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	615a      	str	r2, [r3, #20]
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	40001800 	.word	0x40001800
 8005ef8:	40001c00 	.word	0x40001c00
 8005efc:	40002000 	.word	0x40002000

08005f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e06d      	b.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a30      	ldr	r2, [pc, #192]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2f      	ldr	r2, [pc, #188]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a20      	ldr	r2, [pc, #128]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a16      	ldr	r2, [pc, #88]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40010000 	.word	0x40010000
 8006004:	40010400 	.word	0x40010400
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40001800 	.word	0x40001800

0800601c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e040      	b.n	80060ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fc2a 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	@ 0x24
 8006084:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f82c 	bl	80060f4 <UART_SetConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e022      	b.n	80060ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa84 	bl	80065bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb0b 	bl	8006700 <UART_CheckIdleState>
 80060ea:	4603      	mov	r3, r0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4ba6      	ldr	r3, [pc, #664]	@ (80063b8 <UART_SetConfig+0x2c4>)
 8006120:	4013      	ands	r3, r2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	6979      	ldr	r1, [r7, #20]
 8006128:	430b      	orrs	r3, r1
 800612a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a94      	ldr	r2, [pc, #592]	@ (80063bc <UART_SetConfig+0x2c8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d120      	bne.n	80061b2 <UART_SetConfig+0xbe>
 8006170:	4b93      	ldr	r3, [pc, #588]	@ (80063c0 <UART_SetConfig+0x2cc>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	2b03      	cmp	r3, #3
 800617c:	d816      	bhi.n	80061ac <UART_SetConfig+0xb8>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x90>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	08006195 	.word	0x08006195
 8006188:	080061a1 	.word	0x080061a1
 800618c:	0800619b 	.word	0x0800619b
 8006190:	080061a7 	.word	0x080061a7
 8006194:	2301      	movs	r3, #1
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e150      	b.n	800643c <UART_SetConfig+0x348>
 800619a:	2302      	movs	r3, #2
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e14d      	b.n	800643c <UART_SetConfig+0x348>
 80061a0:	2304      	movs	r3, #4
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e14a      	b.n	800643c <UART_SetConfig+0x348>
 80061a6:	2308      	movs	r3, #8
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e147      	b.n	800643c <UART_SetConfig+0x348>
 80061ac:	2310      	movs	r3, #16
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e144      	b.n	800643c <UART_SetConfig+0x348>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a83      	ldr	r2, [pc, #524]	@ (80063c4 <UART_SetConfig+0x2d0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d132      	bne.n	8006222 <UART_SetConfig+0x12e>
 80061bc:	4b80      	ldr	r3, [pc, #512]	@ (80063c0 <UART_SetConfig+0x2cc>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b0c      	cmp	r3, #12
 80061c8:	d828      	bhi.n	800621c <UART_SetConfig+0x128>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <UART_SetConfig+0xdc>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	08006205 	.word	0x08006205
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	0800621d 	.word	0x0800621d
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	08006211 	.word	0x08006211
 80061e4:	0800621d 	.word	0x0800621d
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	0800621d 	.word	0x0800621d
 80061f0:	0800620b 	.word	0x0800620b
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	0800621d 	.word	0x0800621d
 8006200:	08006217 	.word	0x08006217
 8006204:	2300      	movs	r3, #0
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e118      	b.n	800643c <UART_SetConfig+0x348>
 800620a:	2302      	movs	r3, #2
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e115      	b.n	800643c <UART_SetConfig+0x348>
 8006210:	2304      	movs	r3, #4
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e112      	b.n	800643c <UART_SetConfig+0x348>
 8006216:	2308      	movs	r3, #8
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e10f      	b.n	800643c <UART_SetConfig+0x348>
 800621c:	2310      	movs	r3, #16
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e10c      	b.n	800643c <UART_SetConfig+0x348>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a68      	ldr	r2, [pc, #416]	@ (80063c8 <UART_SetConfig+0x2d4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d120      	bne.n	800626e <UART_SetConfig+0x17a>
 800622c:	4b64      	ldr	r3, [pc, #400]	@ (80063c0 <UART_SetConfig+0x2cc>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006232:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006236:	2b30      	cmp	r3, #48	@ 0x30
 8006238:	d013      	beq.n	8006262 <UART_SetConfig+0x16e>
 800623a:	2b30      	cmp	r3, #48	@ 0x30
 800623c:	d814      	bhi.n	8006268 <UART_SetConfig+0x174>
 800623e:	2b20      	cmp	r3, #32
 8006240:	d009      	beq.n	8006256 <UART_SetConfig+0x162>
 8006242:	2b20      	cmp	r3, #32
 8006244:	d810      	bhi.n	8006268 <UART_SetConfig+0x174>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <UART_SetConfig+0x15c>
 800624a:	2b10      	cmp	r3, #16
 800624c:	d006      	beq.n	800625c <UART_SetConfig+0x168>
 800624e:	e00b      	b.n	8006268 <UART_SetConfig+0x174>
 8006250:	2300      	movs	r3, #0
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e0f2      	b.n	800643c <UART_SetConfig+0x348>
 8006256:	2302      	movs	r3, #2
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e0ef      	b.n	800643c <UART_SetConfig+0x348>
 800625c:	2304      	movs	r3, #4
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e0ec      	b.n	800643c <UART_SetConfig+0x348>
 8006262:	2308      	movs	r3, #8
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e0e9      	b.n	800643c <UART_SetConfig+0x348>
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e0e6      	b.n	800643c <UART_SetConfig+0x348>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a56      	ldr	r2, [pc, #344]	@ (80063cc <UART_SetConfig+0x2d8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d120      	bne.n	80062ba <UART_SetConfig+0x1c6>
 8006278:	4b51      	ldr	r3, [pc, #324]	@ (80063c0 <UART_SetConfig+0x2cc>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006282:	2bc0      	cmp	r3, #192	@ 0xc0
 8006284:	d013      	beq.n	80062ae <UART_SetConfig+0x1ba>
 8006286:	2bc0      	cmp	r3, #192	@ 0xc0
 8006288:	d814      	bhi.n	80062b4 <UART_SetConfig+0x1c0>
 800628a:	2b80      	cmp	r3, #128	@ 0x80
 800628c:	d009      	beq.n	80062a2 <UART_SetConfig+0x1ae>
 800628e:	2b80      	cmp	r3, #128	@ 0x80
 8006290:	d810      	bhi.n	80062b4 <UART_SetConfig+0x1c0>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <UART_SetConfig+0x1a8>
 8006296:	2b40      	cmp	r3, #64	@ 0x40
 8006298:	d006      	beq.n	80062a8 <UART_SetConfig+0x1b4>
 800629a:	e00b      	b.n	80062b4 <UART_SetConfig+0x1c0>
 800629c:	2300      	movs	r3, #0
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e0cc      	b.n	800643c <UART_SetConfig+0x348>
 80062a2:	2302      	movs	r3, #2
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e0c9      	b.n	800643c <UART_SetConfig+0x348>
 80062a8:	2304      	movs	r3, #4
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e0c6      	b.n	800643c <UART_SetConfig+0x348>
 80062ae:	2308      	movs	r3, #8
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e0c3      	b.n	800643c <UART_SetConfig+0x348>
 80062b4:	2310      	movs	r3, #16
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e0c0      	b.n	800643c <UART_SetConfig+0x348>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a44      	ldr	r2, [pc, #272]	@ (80063d0 <UART_SetConfig+0x2dc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d125      	bne.n	8006310 <UART_SetConfig+0x21c>
 80062c4:	4b3e      	ldr	r3, [pc, #248]	@ (80063c0 <UART_SetConfig+0x2cc>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d2:	d017      	beq.n	8006304 <UART_SetConfig+0x210>
 80062d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d8:	d817      	bhi.n	800630a <UART_SetConfig+0x216>
 80062da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062de:	d00b      	beq.n	80062f8 <UART_SetConfig+0x204>
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e4:	d811      	bhi.n	800630a <UART_SetConfig+0x216>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <UART_SetConfig+0x1fe>
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	d006      	beq.n	80062fe <UART_SetConfig+0x20a>
 80062f0:	e00b      	b.n	800630a <UART_SetConfig+0x216>
 80062f2:	2300      	movs	r3, #0
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e0a1      	b.n	800643c <UART_SetConfig+0x348>
 80062f8:	2302      	movs	r3, #2
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e09e      	b.n	800643c <UART_SetConfig+0x348>
 80062fe:	2304      	movs	r3, #4
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e09b      	b.n	800643c <UART_SetConfig+0x348>
 8006304:	2308      	movs	r3, #8
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e098      	b.n	800643c <UART_SetConfig+0x348>
 800630a:	2310      	movs	r3, #16
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e095      	b.n	800643c <UART_SetConfig+0x348>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2f      	ldr	r2, [pc, #188]	@ (80063d4 <UART_SetConfig+0x2e0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d125      	bne.n	8006366 <UART_SetConfig+0x272>
 800631a:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <UART_SetConfig+0x2cc>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006320:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006324:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006328:	d017      	beq.n	800635a <UART_SetConfig+0x266>
 800632a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800632e:	d817      	bhi.n	8006360 <UART_SetConfig+0x26c>
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006334:	d00b      	beq.n	800634e <UART_SetConfig+0x25a>
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800633a:	d811      	bhi.n	8006360 <UART_SetConfig+0x26c>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <UART_SetConfig+0x254>
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006344:	d006      	beq.n	8006354 <UART_SetConfig+0x260>
 8006346:	e00b      	b.n	8006360 <UART_SetConfig+0x26c>
 8006348:	2301      	movs	r3, #1
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e076      	b.n	800643c <UART_SetConfig+0x348>
 800634e:	2302      	movs	r3, #2
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e073      	b.n	800643c <UART_SetConfig+0x348>
 8006354:	2304      	movs	r3, #4
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e070      	b.n	800643c <UART_SetConfig+0x348>
 800635a:	2308      	movs	r3, #8
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e06d      	b.n	800643c <UART_SetConfig+0x348>
 8006360:	2310      	movs	r3, #16
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e06a      	b.n	800643c <UART_SetConfig+0x348>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <UART_SetConfig+0x2e4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d138      	bne.n	80063e2 <UART_SetConfig+0x2ee>
 8006370:	4b13      	ldr	r3, [pc, #76]	@ (80063c0 <UART_SetConfig+0x2cc>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006376:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800637a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800637e:	d017      	beq.n	80063b0 <UART_SetConfig+0x2bc>
 8006380:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006384:	d82a      	bhi.n	80063dc <UART_SetConfig+0x2e8>
 8006386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800638a:	d00b      	beq.n	80063a4 <UART_SetConfig+0x2b0>
 800638c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006390:	d824      	bhi.n	80063dc <UART_SetConfig+0x2e8>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <UART_SetConfig+0x2aa>
 8006396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639a:	d006      	beq.n	80063aa <UART_SetConfig+0x2b6>
 800639c:	e01e      	b.n	80063dc <UART_SetConfig+0x2e8>
 800639e:	2300      	movs	r3, #0
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e04b      	b.n	800643c <UART_SetConfig+0x348>
 80063a4:	2302      	movs	r3, #2
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e048      	b.n	800643c <UART_SetConfig+0x348>
 80063aa:	2304      	movs	r3, #4
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e045      	b.n	800643c <UART_SetConfig+0x348>
 80063b0:	2308      	movs	r3, #8
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e042      	b.n	800643c <UART_SetConfig+0x348>
 80063b6:	bf00      	nop
 80063b8:	efff69f3 	.word	0xefff69f3
 80063bc:	40011000 	.word	0x40011000
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40004400 	.word	0x40004400
 80063c8:	40004800 	.word	0x40004800
 80063cc:	40004c00 	.word	0x40004c00
 80063d0:	40005000 	.word	0x40005000
 80063d4:	40011400 	.word	0x40011400
 80063d8:	40007800 	.word	0x40007800
 80063dc:	2310      	movs	r3, #16
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e02c      	b.n	800643c <UART_SetConfig+0x348>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a72      	ldr	r2, [pc, #456]	@ (80065b0 <UART_SetConfig+0x4bc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d125      	bne.n	8006438 <UART_SetConfig+0x344>
 80063ec:	4b71      	ldr	r3, [pc, #452]	@ (80065b4 <UART_SetConfig+0x4c0>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80063f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063fa:	d017      	beq.n	800642c <UART_SetConfig+0x338>
 80063fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006400:	d817      	bhi.n	8006432 <UART_SetConfig+0x33e>
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006406:	d00b      	beq.n	8006420 <UART_SetConfig+0x32c>
 8006408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640c:	d811      	bhi.n	8006432 <UART_SetConfig+0x33e>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <UART_SetConfig+0x326>
 8006412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006416:	d006      	beq.n	8006426 <UART_SetConfig+0x332>
 8006418:	e00b      	b.n	8006432 <UART_SetConfig+0x33e>
 800641a:	2300      	movs	r3, #0
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e00d      	b.n	800643c <UART_SetConfig+0x348>
 8006420:	2302      	movs	r3, #2
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e00a      	b.n	800643c <UART_SetConfig+0x348>
 8006426:	2304      	movs	r3, #4
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e007      	b.n	800643c <UART_SetConfig+0x348>
 800642c:	2308      	movs	r3, #8
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e004      	b.n	800643c <UART_SetConfig+0x348>
 8006432:	2310      	movs	r3, #16
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e001      	b.n	800643c <UART_SetConfig+0x348>
 8006438:	2310      	movs	r3, #16
 800643a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006444:	d15b      	bne.n	80064fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d828      	bhi.n	800649e <UART_SetConfig+0x3aa>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x360>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006479 	.word	0x08006479
 8006458:	08006481 	.word	0x08006481
 800645c:	08006489 	.word	0x08006489
 8006460:	0800649f 	.word	0x0800649f
 8006464:	0800648f 	.word	0x0800648f
 8006468:	0800649f 	.word	0x0800649f
 800646c:	0800649f 	.word	0x0800649f
 8006470:	0800649f 	.word	0x0800649f
 8006474:	08006497 	.word	0x08006497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006478:	f7fe f912 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 800647c:	61b8      	str	r0, [r7, #24]
        break;
 800647e:	e013      	b.n	80064a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006480:	f7fe f922 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8006484:	61b8      	str	r0, [r7, #24]
        break;
 8006486:	e00f      	b.n	80064a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006488:	4b4b      	ldr	r3, [pc, #300]	@ (80065b8 <UART_SetConfig+0x4c4>)
 800648a:	61bb      	str	r3, [r7, #24]
        break;
 800648c:	e00c      	b.n	80064a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648e:	f7fd fff5 	bl	800447c <HAL_RCC_GetSysClockFreq>
 8006492:	61b8      	str	r0, [r7, #24]
        break;
 8006494:	e008      	b.n	80064a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800649a:	61bb      	str	r3, [r7, #24]
        break;
 800649c:	e004      	b.n	80064a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	77bb      	strb	r3, [r7, #30]
        break;
 80064a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d074      	beq.n	8006598 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	005a      	lsls	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	441a      	add	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	d916      	bls.n	80064f8 <UART_SetConfig+0x404>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d0:	d212      	bcs.n	80064f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f023 030f 	bic.w	r3, r3, #15
 80064da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	89fa      	ldrh	r2, [r7, #14]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e04f      	b.n	8006598 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	77bb      	strb	r3, [r7, #30]
 80064fc:	e04c      	b.n	8006598 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064fe:	7ffb      	ldrb	r3, [r7, #31]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d828      	bhi.n	8006556 <UART_SetConfig+0x462>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <UART_SetConfig+0x418>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006531 	.word	0x08006531
 8006510:	08006539 	.word	0x08006539
 8006514:	08006541 	.word	0x08006541
 8006518:	08006557 	.word	0x08006557
 800651c:	08006547 	.word	0x08006547
 8006520:	08006557 	.word	0x08006557
 8006524:	08006557 	.word	0x08006557
 8006528:	08006557 	.word	0x08006557
 800652c:	0800654f 	.word	0x0800654f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fe f8b6 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8006534:	61b8      	str	r0, [r7, #24]
        break;
 8006536:	e013      	b.n	8006560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006538:	f7fe f8c6 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 800653c:	61b8      	str	r0, [r7, #24]
        break;
 800653e:	e00f      	b.n	8006560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006540:	4b1d      	ldr	r3, [pc, #116]	@ (80065b8 <UART_SetConfig+0x4c4>)
 8006542:	61bb      	str	r3, [r7, #24]
        break;
 8006544:	e00c      	b.n	8006560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006546:	f7fd ff99 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800654a:	61b8      	str	r0, [r7, #24]
        break;
 800654c:	e008      	b.n	8006560 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	61bb      	str	r3, [r7, #24]
        break;
 8006554:	e004      	b.n	8006560 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	77bb      	strb	r3, [r7, #30]
        break;
 800655e:	bf00      	nop
    }

    if (pclk != 0U)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d018      	beq.n	8006598 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	085a      	lsrs	r2, r3, #1
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	441a      	add	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	fbb2 f3f3 	udiv	r3, r2, r3
 8006578:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b0f      	cmp	r3, #15
 800657e:	d909      	bls.n	8006594 <UART_SetConfig+0x4a0>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006586:	d205      	bcs.n	8006594 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	e001      	b.n	8006598 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40007c00 	.word	0x40007c00
 80065b4:	40023800 	.word	0x40023800
 80065b8:	00f42400 	.word	0x00f42400

080065bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ba:	d10a      	bne.n	80066d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af02      	add	r7, sp, #8
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006710:	f7fb ff58 	bl	80025c4 <HAL_GetTick>
 8006714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b08      	cmp	r3, #8
 8006722:	d10e      	bne.n	8006742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006724:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f831 	bl	800679a <UART_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e027      	b.n	8006792 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b04      	cmp	r3, #4
 800674e:	d10e      	bne.n	800676e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f81b 	bl	800679a <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e011      	b.n	8006792 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b09c      	sub	sp, #112	@ 0x70
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067aa:	e0a7      	b.n	80068fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	f000 80a3 	beq.w	80068fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b6:	f7fb ff05 	bl	80025c4 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <UART_WaitOnFlagUntilTimeout+0x32>
 80067c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d13f      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067dc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80067e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80067f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80067f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e6      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	663b      	str	r3, [r7, #96]	@ 0x60
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800681e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006820:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800682c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e5      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e068      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d050      	beq.n	80068fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006868:	d148      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006872:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006888:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
 8006894:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e6      	bne.n	8006874 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	613b      	str	r3, [r7, #16]
   return(result);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068c6:	623a      	str	r2, [r7, #32]
 80068c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	69f9      	ldr	r1, [r7, #28]
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e010      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4013      	ands	r3, r2
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	461a      	mov	r2, r3
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	429a      	cmp	r2, r3
 8006918:	f43f af48 	beq.w	80067ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3770      	adds	r7, #112	@ 0x70
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	4603      	mov	r3, r0
 800692e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006938:	2b84      	cmp	r3, #132	@ 0x84
 800693a:	d005      	beq.n	8006948 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800693c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	3303      	adds	r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006948:	68fb      	ldr	r3, [r7, #12]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800695c:	f3ef 8305 	mrs	r3, IPSR
 8006960:	607b      	str	r3, [r7, #4]
  return(result);
 8006962:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800697e:	f001 fb55 	bl	800802c <vTaskStartScheduler>
  
  return osOK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	bd80      	pop	{r7, pc}

08006988 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800698c:	f7ff ffe3 	bl	8006956 <inHandlerMode>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006996:	f001 fc53 	bl	8008240 <xTaskGetTickCountFromISR>
 800699a:	4603      	mov	r3, r0
 800699c:	e002      	b.n	80069a4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800699e:	f001 fc3f 	bl	8008220 <xTaskGetTickCount>
 80069a2:	4603      	mov	r3, r0
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685c      	ldr	r4, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069be:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff ffad 	bl	8006926 <makeFreeRtosPriority>
 80069cc:	4602      	mov	r2, r0
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	9200      	str	r2, [sp, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	4632      	mov	r2, r6
 80069da:	4629      	mov	r1, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	f001 f931 	bl	8007c44 <xTaskCreate>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d001      	beq.n	80069ec <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e000      	b.n	80069ee <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <osDelay+0x16>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	e000      	b.n	8006a0e <osDelay+0x18>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fad4 	bl	8007fbc <vTaskDelay>
  
  return osOK;
 8006a14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8006a26:	2001      	movs	r0, #1
 8006a28:	f000 fafe 	bl	8007028 <xQueueCreateMutex>
 8006a2c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <osMutexWait+0x18>
    return osErrorParameter;
 8006a4c:	2380      	movs	r3, #128	@ 0x80
 8006a4e:	e03a      	b.n	8006ac6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d103      	bne.n	8006a64 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e009      	b.n	8006a78 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d006      	beq.n	8006a78 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <osMutexWait+0x40>
      ticks = 1;
 8006a74:	2301      	movs	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006a78:	f7ff ff6d 	bl	8006956 <inHandlerMode>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d017      	beq.n	8006ab2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	461a      	mov	r2, r3
 8006a88:	2100      	movs	r1, #0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 ff2a 	bl	80078e4 <xQueueReceiveFromISR>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d001      	beq.n	8006a9a <osMutexWait+0x62>
      return osErrorOS;
 8006a96:	23ff      	movs	r3, #255	@ 0xff
 8006a98:	e015      	b.n	8006ac6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <osMutexWait+0x8c>
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <osMutexWait+0x98>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e008      	b.n	8006ac4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fdfd 	bl	80076b4 <xQueueSemaphoreTake>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d001      	beq.n	8006ac4 <osMutexWait+0x8c>
    return osErrorOS;
 8006ac0:	23ff      	movs	r3, #255	@ 0xff
 8006ac2:	e000      	b.n	8006ac6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006ae4:	f7ff ff37 	bl	8006956 <inHandlerMode>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fc5c 	bl	80073b2 <xQueueGiveFromISR>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d001      	beq.n	8006b04 <osMutexRelease+0x30>
      return osErrorOS;
 8006b00:	23ff      	movs	r3, #255	@ 0xff
 8006b02:	e017      	b.n	8006b34 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d013      	beq.n	8006b32 <osMutexRelease+0x5e>
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <osMutexRelease+0x68>)
 8006b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	e00a      	b.n	8006b32 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2100      	movs	r1, #0
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa98 	bl	8007058 <xQueueGenericSend>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d001      	beq.n	8006b32 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006b2e:	23ff      	movs	r3, #255	@ 0xff
 8006b30:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006b32:	68fb      	ldr	r3, [r7, #12]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	4619      	mov	r1, r3
 8006b56:	f000 f9ef 	bl	8006f38 <xQueueGenericCreate>
 8006b5a:	4603      	mov	r3, r0
#endif
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <osMessagePut+0x1e>
    ticks = 1;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006b82:	f7ff fee8 	bl	8006956 <inHandlerMode>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d018      	beq.n	8006bbe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006b8c:	f107 0210 	add.w	r2, r7, #16
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	2300      	movs	r3, #0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fb68 	bl	800726c <xQueueGenericSendFromISR>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <osMessagePut+0x42>
      return osErrorOS;
 8006ba2:	23ff      	movs	r3, #255	@ 0xff
 8006ba4:	e018      	b.n	8006bd8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d014      	beq.n	8006bd6 <osMessagePut+0x72>
 8006bac:	4b0c      	ldr	r3, [pc, #48]	@ (8006be0 <osMessagePut+0x7c>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	e00b      	b.n	8006bd6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006bbe:	f107 0108 	add.w	r1, r7, #8
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fa46 	bl	8007058 <xQueueGenericSend>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d001      	beq.n	8006bd6 <osMessagePut+0x72>
      return osErrorOS;
 8006bd2:	23ff      	movs	r3, #255	@ 0xff
 8006bd4:	e000      	b.n	8006bd8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b08b      	sub	sp, #44	@ 0x2c
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006bfe:	2380      	movs	r3, #128	@ 0x80
 8006c00:	617b      	str	r3, [r7, #20]
    return event;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	461c      	mov	r4, r3
 8006c06:	f107 0314 	add.w	r3, r7, #20
 8006c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c12:	e054      	b.n	8006cbe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d103      	bne.n	8006c2c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2a:	e009      	b.n	8006c40 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d006      	beq.n	8006c40 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <osMessageGet+0x5c>
      ticks = 1;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006c40:	f7ff fe89 	bl	8006956 <inHandlerMode>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01c      	beq.n	8006c84 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006c4a:	f107 0220 	add.w	r2, r7, #32
 8006c4e:	f107 0314 	add.w	r3, r7, #20
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	68b8      	ldr	r0, [r7, #8]
 8006c58:	f000 fe44 	bl	80078e4 <xQueueReceiveFromISR>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d102      	bne.n	8006c68 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006c62:	2310      	movs	r3, #16
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	e001      	b.n	8006c6c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01d      	beq.n	8006cae <osMessageGet+0xca>
 8006c72:	4b15      	ldr	r3, [pc, #84]	@ (8006cc8 <osMessageGet+0xe4>)
 8006c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	e014      	b.n	8006cae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006c84:	f107 0314 	add.w	r3, r7, #20
 8006c88:	3304      	adds	r3, #4
 8006c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68b8      	ldr	r0, [r7, #8]
 8006c90:	f000 fc28 	bl	80074e4 <xQueueReceive>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d102      	bne.n	8006ca0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e006      	b.n	8006cae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <osMessageGet+0xc6>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <osMessageGet+0xc8>
 8006caa:	2340      	movs	r3, #64	@ 0x40
 8006cac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	461c      	mov	r4, r3
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	372c      	adds	r7, #44	@ 0x2c
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd90      	pop	{r4, r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <osDelayUntil+0x18>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	e000      	b.n	8006ce6 <osDelayUntil+0x1a>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f8e1 	bl	8007eb0 <vTaskDelayUntil>
  
  return osOK;
 8006cee:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f103 0208 	add.w	r2, r3, #8
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f103 0208 	add.w	r2, r3, #8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f103 0208 	add.w	r2, r3, #8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d103      	bne.n	8006dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e00c      	b.n	8006dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e002      	b.n	8006dc8 <vListInsert+0x2e>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d2f6      	bcs.n	8006dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6892      	ldr	r2, [r2, #8]
 8006e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6852      	ldr	r2, [r2, #4]
 8006e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d103      	bne.n	8006e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	1e5a      	subs	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10d      	bne.n	8006e90 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	b672      	cpsid	i
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	b662      	cpsie	i
 8006e88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	e7fd      	b.n	8006e8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e90:	f002 f824 	bl	8008edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	441a      	add	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	441a      	add	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	22ff      	movs	r2, #255	@ 0xff
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	22ff      	movs	r2, #255	@ 0xff
 8006edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d114      	bne.n	8006f10 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01a      	beq.n	8006f24 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3310      	adds	r3, #16
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 faf8 	bl	80084e8 <xTaskRemoveFromEventList>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d012      	beq.n	8006f24 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006efe:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <xQueueGenericReset+0xd4>)
 8006f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	e009      	b.n	8006f24 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3310      	adds	r3, #16
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff feef 	bl	8006cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3324      	adds	r3, #36	@ 0x24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff feea 	bl	8006cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f24:	f002 f810 	bl	8008f48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f28:	2301      	movs	r3, #1
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	@ 0x28
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10d      	bne.n	8006f68 <xQueueGenericCreate+0x30>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e004      	b.n	8006f7e <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	fb02 f303 	mul.w	r3, r2, r3
 8006f7c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	3348      	adds	r3, #72	@ 0x48
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 f8d8 	bl	8009138 <pvPortMalloc>
 8006f88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00d      	beq.n	8006fac <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3348      	adds	r3, #72	@ 0x48
 8006f98:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f9a:	79fa      	ldrb	r2, [r7, #7]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f805 	bl	8006fb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fac:	69bb      	ldr	r3, [r7, #24]
	}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e002      	b.n	8006fd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	69b8      	ldr	r0, [r7, #24]
 8006fe8:	f7ff ff3a 	bl	8006e60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007014:	2300      	movs	r3, #0
 8007016:	2200      	movs	r2, #0
 8007018:	2100      	movs	r1, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f81c 	bl	8007058 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	461a      	mov	r2, r3
 800703e:	6939      	ldr	r1, [r7, #16]
 8007040:	6978      	ldr	r0, [r7, #20]
 8007042:	f7ff ff79 	bl	8006f38 <xQueueGenericCreate>
 8007046:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff ffd3 	bl	8006ff4 <prvInitialiseMutex>

		return xNewQueue;
 800704e:	68fb      	ldr	r3, [r7, #12]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08e      	sub	sp, #56	@ 0x38
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007066:	2300      	movs	r3, #0
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10d      	bne.n	8007090 <xQueueGenericSend+0x38>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007078:	b672      	cpsid	i
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	b662      	cpsie	i
 8007088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <xQueueGenericSend+0x46>
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <xQueueGenericSend+0x4a>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueGenericSend+0x4c>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10d      	bne.n	80070c4 <xQueueGenericSend+0x6c>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	b672      	cpsid	i
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	b662      	cpsie	i
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d103      	bne.n	80070d2 <xQueueGenericSend+0x7a>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <xQueueGenericSend+0x7e>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <xQueueGenericSend+0x80>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10d      	bne.n	80070f8 <xQueueGenericSend+0xa0>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	b672      	cpsid	i
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	b662      	cpsie	i
 80070f0:	623b      	str	r3, [r7, #32]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070f8:	f001 fb9c 	bl	8008834 <xTaskGetSchedulerState>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <xQueueGenericSend+0xb0>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <xQueueGenericSend+0xb4>
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <xQueueGenericSend+0xb6>
 800710c:	2300      	movs	r3, #0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10d      	bne.n	800712e <xQueueGenericSend+0xd6>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	b672      	cpsid	i
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	b662      	cpsie	i
 8007126:	61fb      	str	r3, [r7, #28]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800712e:	f001 fed5 	bl	8008edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713a:	429a      	cmp	r2, r3
 800713c:	d302      	bcc.n	8007144 <xQueueGenericSend+0xec>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b02      	cmp	r3, #2
 8007142:	d129      	bne.n	8007198 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800714a:	f000 fc6b 	bl	8007a24 <prvCopyDataToQueue>
 800714e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d010      	beq.n	800717a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	3324      	adds	r3, #36	@ 0x24
 800715c:	4618      	mov	r0, r3
 800715e:	f001 f9c3 	bl	80084e8 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007168:	4b3f      	ldr	r3, [pc, #252]	@ (8007268 <xQueueGenericSend+0x210>)
 800716a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	e00a      	b.n	8007190 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800717a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007180:	4b39      	ldr	r3, [pc, #228]	@ (8007268 <xQueueGenericSend+0x210>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007190:	f001 feda 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 8007194:	2301      	movs	r3, #1
 8007196:	e063      	b.n	8007260 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800719e:	f001 fed3 	bl	8008f48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e05c      	b.n	8007260 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 f9ff 	bl	80085b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ba:	f001 fec5 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071be:	f000 ff81 	bl	80080c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071c2:	f001 fe8b 	bl	8008edc <vPortEnterCritical>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071cc:	b25b      	sxtb	r3, r3
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d103      	bne.n	80071dc <xQueueGenericSend+0x184>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071e2:	b25b      	sxtb	r3, r3
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d103      	bne.n	80071f2 <xQueueGenericSend+0x19a>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071f2:	f001 fea9 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071f6:	1d3a      	adds	r2, r7, #4
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f9ee 	bl	80085e0 <xTaskCheckForTimeOut>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d124      	bne.n	8007254 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800720a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800720c:	f000 fd02 	bl	8007c14 <prvIsQueueFull>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d018      	beq.n	8007248 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	3310      	adds	r3, #16
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f93a 	bl	8008498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007226:	f000 fc8d 	bl	8007b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800722a:	f000 ff59 	bl	80080e0 <xTaskResumeAll>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	f47f af7c 	bne.w	800712e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007236:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <xQueueGenericSend+0x210>)
 8007238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	e772      	b.n	800712e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800724a:	f000 fc7b 	bl	8007b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800724e:	f000 ff47 	bl	80080e0 <xTaskResumeAll>
 8007252:	e76c      	b.n	800712e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007256:	f000 fc75 	bl	8007b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800725a:	f000 ff41 	bl	80080e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800725e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007260:	4618      	mov	r0, r3
 8007262:	3738      	adds	r7, #56	@ 0x38
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08e      	sub	sp, #56	@ 0x38
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10d      	bne.n	80072a0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	b672      	cpsid	i
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	b662      	cpsie	i
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <xQueueGenericSendFromISR+0x42>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <xQueueGenericSendFromISR+0x46>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <xQueueGenericSendFromISR+0x48>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10d      	bne.n	80072d4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072bc:	b672      	cpsid	i
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	b662      	cpsie	i
 80072cc:	623b      	str	r3, [r7, #32]
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d103      	bne.n	80072e2 <xQueueGenericSendFromISR+0x76>
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <xQueueGenericSendFromISR+0x7a>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericSendFromISR+0x7c>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	b672      	cpsid	i
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	b662      	cpsie	i
 8007300:	61fb      	str	r3, [r7, #28]
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007308:	f001 fed0 	bl	80090ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800730c:	f3ef 8211 	mrs	r2, BASEPRI
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	b672      	cpsid	i
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	b662      	cpsie	i
 8007324:	61ba      	str	r2, [r7, #24]
 8007326:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007328:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800732a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007334:	429a      	cmp	r2, r3
 8007336:	d302      	bcc.n	800733e <xQueueGenericSendFromISR+0xd2>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d12c      	bne.n	8007398 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800734e:	f000 fb69 	bl	8007a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007352:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735a:	d112      	bne.n	8007382 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	3324      	adds	r3, #36	@ 0x24
 8007368:	4618      	mov	r0, r3
 800736a:	f001 f8bd 	bl	80084e8 <xTaskRemoveFromEventList>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	e007      	b.n	8007392 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007386:	3301      	adds	r3, #1
 8007388:	b2db      	uxtb	r3, r3
 800738a:	b25a      	sxtb	r2, r3
 800738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007392:	2301      	movs	r3, #1
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007396:	e001      	b.n	800739c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007398:	2300      	movs	r3, #0
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
 800739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3738      	adds	r7, #56	@ 0x38
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b08e      	sub	sp, #56	@ 0x38
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <xQueueGiveFromISR+0x30>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	b672      	cpsid	i
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	b662      	cpsie	i
 80073da:	623b      	str	r3, [r7, #32]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00d      	beq.n	8007406 <xQueueGiveFromISR+0x54>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ee:	b672      	cpsid	i
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	b662      	cpsie	i
 80073fe:	61fb      	str	r3, [r7, #28]
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <xQueueGiveFromISR+0x64>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <xQueueGiveFromISR+0x68>
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <xQueueGiveFromISR+0x6a>
 800741a:	2300      	movs	r3, #0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	b672      	cpsid	i
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	b662      	cpsie	i
 8007434:	61bb      	str	r3, [r7, #24]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800743c:	f001 fe36 	bl	80090ac <vPortValidateInterruptPriority>
	__asm volatile
 8007440:	f3ef 8211 	mrs	r2, BASEPRI
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	b672      	cpsid	i
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	b662      	cpsie	i
 8007458:	617a      	str	r2, [r7, #20]
 800745a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800745c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800746c:	429a      	cmp	r2, r3
 800746e:	d22b      	bcs.n	80074c8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007482:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748a:	d112      	bne.n	80074b2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d016      	beq.n	80074c2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	3324      	adds	r3, #36	@ 0x24
 8007498:	4618      	mov	r0, r3
 800749a:	f001 f825 	bl	80084e8 <xTaskRemoveFromEventList>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e007      	b.n	80074c2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074b6:	3301      	adds	r3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	b25a      	sxtb	r2, r3
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80074c2:	2301      	movs	r3, #1
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	e001      	b.n	80074cc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f383 8811 	msr	BASEPRI, r3
}
 80074d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3738      	adds	r7, #56	@ 0x38
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08c      	sub	sp, #48	@ 0x30
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10d      	bne.n	800751a <xQueueReceive+0x36>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	b672      	cpsid	i
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	b662      	cpsie	i
 8007512:	623b      	str	r3, [r7, #32]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <xQueueReceive+0x44>
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <xQueueReceive+0x48>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <xQueueReceive+0x4a>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <xQueueReceive+0x6a>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	b672      	cpsid	i
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	b662      	cpsie	i
 8007546:	61fb      	str	r3, [r7, #28]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800754e:	f001 f971 	bl	8008834 <xTaskGetSchedulerState>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <xQueueReceive+0x7a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <xQueueReceive+0x7e>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <xQueueReceive+0x80>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <xQueueReceive+0xa0>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756c:	b672      	cpsid	i
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	b662      	cpsie	i
 800757c:	61bb      	str	r3, [r7, #24]
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	e7fd      	b.n	8007580 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007584:	f001 fcaa 	bl	8008edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01f      	beq.n	80075d4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007598:	f000 faae 	bl	8007af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	1e5a      	subs	r2, r3, #1
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00f      	beq.n	80075cc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ae:	3310      	adds	r3, #16
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 ff99 	bl	80084e8 <xTaskRemoveFromEventList>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075bc:	4b3c      	ldr	r3, [pc, #240]	@ (80076b0 <xQueueReceive+0x1cc>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075cc:	f001 fcbc 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e069      	b.n	80076a8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075da:	f001 fcb5 	bl	8008f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075de:	2300      	movs	r3, #0
 80075e0:	e062      	b.n	80076a8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075e8:	f107 0310 	add.w	r3, r7, #16
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 ffe1 	bl	80085b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075f2:	2301      	movs	r3, #1
 80075f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075f6:	f001 fca7 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075fa:	f000 fd63 	bl	80080c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075fe:	f001 fc6d 	bl	8008edc <vPortEnterCritical>
 8007602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007608:	b25b      	sxtb	r3, r3
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d103      	bne.n	8007618 <xQueueReceive+0x134>
 8007610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800761e:	b25b      	sxtb	r3, r3
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d103      	bne.n	800762e <xQueueReceive+0x14a>
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800762e:	f001 fc8b 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007632:	1d3a      	adds	r2, r7, #4
 8007634:	f107 0310 	add.w	r3, r7, #16
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f000 ffd0 	bl	80085e0 <xTaskCheckForTimeOut>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d123      	bne.n	800768e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007648:	f000 face 	bl	8007be8 <prvIsQueueEmpty>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d017      	beq.n	8007682 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	3324      	adds	r3, #36	@ 0x24
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f000 ff1c 	bl	8008498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007662:	f000 fa6f 	bl	8007b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007666:	f000 fd3b 	bl	80080e0 <xTaskResumeAll>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d189      	bne.n	8007584 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007670:	4b0f      	ldr	r3, [pc, #60]	@ (80076b0 <xQueueReceive+0x1cc>)
 8007672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	e780      	b.n	8007584 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007684:	f000 fa5e 	bl	8007b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007688:	f000 fd2a 	bl	80080e0 <xTaskResumeAll>
 800768c:	e77a      	b.n	8007584 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800768e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007690:	f000 fa58 	bl	8007b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007694:	f000 fd24 	bl	80080e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800769a:	f000 faa5 	bl	8007be8 <prvIsQueueEmpty>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f43f af6f 	beq.w	8007584 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3730      	adds	r7, #48	@ 0x30
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08e      	sub	sp, #56	@ 0x38
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <xQueueSemaphoreTake+0x38>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	623b      	str	r3, [r7, #32]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f8:	b672      	cpsid	i
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	b662      	cpsie	i
 8007708:	61fb      	str	r3, [r7, #28]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007710:	f001 f890 	bl	8008834 <xTaskGetSchedulerState>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <xQueueSemaphoreTake+0x6c>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <xQueueSemaphoreTake+0x70>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <xQueueSemaphoreTake+0x72>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10d      	bne.n	8007746 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	b672      	cpsid	i
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	b662      	cpsie	i
 800773e:	61bb      	str	r3, [r7, #24]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007746:	f001 fbc9 	bl	8008edc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d024      	beq.n	80077a0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	1e5a      	subs	r2, r3, #1
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007766:	f001 fa2f 	bl	8008bc8 <pvTaskIncrementMutexHeldCount>
 800776a:	4602      	mov	r2, r0
 800776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00f      	beq.n	8007798 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777a:	3310      	adds	r3, #16
 800777c:	4618      	mov	r0, r3
 800777e:	f000 feb3 	bl	80084e8 <xTaskRemoveFromEventList>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007788:	4b55      	ldr	r3, [pc, #340]	@ (80078e0 <xQueueSemaphoreTake+0x22c>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007798:	f001 fbd6 	bl	8008f48 <vPortExitCritical>
				return pdPASS;
 800779c:	2301      	movs	r3, #1
 800779e:	e09a      	b.n	80078d6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d114      	bne.n	80077d0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00d      	beq.n	80077c8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	b672      	cpsid	i
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	b662      	cpsie	i
 80077c0:	617b      	str	r3, [r7, #20]
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077c8:	f001 fbbe 	bl	8008f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e082      	b.n	80078d6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077d6:	f107 030c 	add.w	r3, r7, #12
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 feea 	bl	80085b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077e4:	f001 fbb0 	bl	8008f48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077e8:	f000 fc6c 	bl	80080c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ec:	f001 fb76 	bl	8008edc <vPortEnterCritical>
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d103      	bne.n	8007806 <xQueueSemaphoreTake+0x152>
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800780c:	b25b      	sxtb	r3, r3
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d103      	bne.n	800781c <xQueueSemaphoreTake+0x168>
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800781c:	f001 fb94 	bl	8008f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007820:	463a      	mov	r2, r7
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fed9 	bl	80085e0 <xTaskCheckForTimeOut>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d132      	bne.n	800789a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007836:	f000 f9d7 	bl	8007be8 <prvIsQueueEmpty>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d026      	beq.n	800788e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007848:	f001 fb48 	bl	8008edc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800784c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f80d 	bl	8008870 <xTaskPriorityInherit>
 8007856:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007858:	f001 fb76 	bl	8008f48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785e:	3324      	adds	r3, #36	@ 0x24
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fe17 	bl	8008498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800786a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800786c:	f000 f96a 	bl	8007b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007870:	f000 fc36 	bl	80080e0 <xTaskResumeAll>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	f47f af65 	bne.w	8007746 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800787c:	4b18      	ldr	r3, [pc, #96]	@ (80078e0 <xQueueSemaphoreTake+0x22c>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	e75b      	b.n	8007746 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800788e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007890:	f000 f958 	bl	8007b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007894:	f000 fc24 	bl	80080e0 <xTaskResumeAll>
 8007898:	e755      	b.n	8007746 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800789a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800789c:	f000 f952 	bl	8007b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078a0:	f000 fc1e 	bl	80080e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078a6:	f000 f99f 	bl	8007be8 <prvIsQueueEmpty>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f43f af4a 	beq.w	8007746 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80078b8:	f001 fb10 	bl	8008edc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078be:	f000 f899 	bl	80079f4 <prvGetDisinheritPriorityAfterTimeout>
 80078c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f8dc 	bl	8008a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078d0:	f001 fb3a 	bl	8008f48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3738      	adds	r7, #56	@ 0x38
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	@ 0x38
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10d      	bne.n	8007916 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	b672      	cpsid	i
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	b662      	cpsie	i
 800790e:	623b      	str	r3, [r7, #32]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <xQueueReceiveFromISR+0x40>
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <xQueueReceiveFromISR+0x44>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <xQueueReceiveFromISR+0x46>
 8007928:	2300      	movs	r3, #0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10d      	bne.n	800794a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	b672      	cpsid	i
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	b662      	cpsie	i
 8007942:	61fb      	str	r3, [r7, #28]
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	e7fd      	b.n	8007946 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800794a:	f001 fbaf 	bl	80090ac <vPortValidateInterruptPriority>
	__asm volatile
 800794e:	f3ef 8211 	mrs	r2, BASEPRI
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	b672      	cpsid	i
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	b662      	cpsie	i
 8007966:	61ba      	str	r2, [r7, #24]
 8007968:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800796a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800796c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02f      	beq.n	80079da <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007988:	f000 f8b6 	bl	8007af8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	1e5a      	subs	r2, r3, #1
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007994:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d112      	bne.n	80079c4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	3310      	adds	r3, #16
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fd9c 	bl	80084e8 <xTaskRemoveFromEventList>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00e      	beq.n	80079d4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e007      	b.n	80079d4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80079c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c8:	3301      	adds	r3, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	b25a      	sxtb	r2, r3
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80079d4:	2301      	movs	r3, #1
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d8:	e001      	b.n	80079de <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80079da:	2300      	movs	r3, #0
 80079dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f383 8811 	msr	BASEPRI, r3
}
 80079e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3738      	adds	r7, #56	@ 0x38
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1c3 0307 	rsb	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e001      	b.n	8007a16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a16:	68fb      	ldr	r3, [r7, #12]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14d      	bne.n	8007ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 ff8e 	bl	8008970 <xTaskPriorityDisinherit>
 8007a54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	609a      	str	r2, [r3, #8]
 8007a5c:	e043      	b.n	8007ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d119      	bne.n	8007a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6858      	ldr	r0, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	f002 fea0 	bl	800a7b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7c:	441a      	add	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d32b      	bcc.n	8007ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	e026      	b.n	8007ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68d8      	ldr	r0, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	f002 fe86 	bl	800a7b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab0:	425b      	negs	r3, r3
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d207      	bcs.n	8007ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	425b      	negs	r3, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d105      	bne.n	8007ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d018      	beq.n	8007b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b12:	441a      	add	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d303      	bcc.n	8007b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68d9      	ldr	r1, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b34:	461a      	mov	r2, r3
 8007b36:	6838      	ldr	r0, [r7, #0]
 8007b38:	f002 fe3c 	bl	800a7b4 <memcpy>
	}
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b4c:	f001 f9c6 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b58:	e011      	b.n	8007b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d012      	beq.n	8007b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3324      	adds	r3, #36	@ 0x24
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fcbe 	bl	80084e8 <xTaskRemoveFromEventList>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b72:	f000 fd9d 	bl	80086b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	dce9      	bgt.n	8007b5a <prvUnlockQueue+0x16>
 8007b86:	e000      	b.n	8007b8a <prvUnlockQueue+0x46>
					break;
 8007b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	22ff      	movs	r2, #255	@ 0xff
 8007b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007b92:	f001 f9d9 	bl	8008f48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b96:	f001 f9a1 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ba2:	e011      	b.n	8007bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d012      	beq.n	8007bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3310      	adds	r3, #16
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fc99 	bl	80084e8 <xTaskRemoveFromEventList>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bbc:	f000 fd78 	bl	80086b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dce9      	bgt.n	8007ba4 <prvUnlockQueue+0x60>
 8007bd0:	e000      	b.n	8007bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	22ff      	movs	r2, #255	@ 0xff
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007bdc:	f001 f9b4 	bl	8008f48 <vPortExitCritical>
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bf0:	f001 f974 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e001      	b.n	8007c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c06:	f001 f99f 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c1c:	f001 f95e 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d102      	bne.n	8007c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e001      	b.n	8007c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c36:	f001 f987 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	@ 0x30
 8007c48:	af04      	add	r7, sp, #16
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fa6d 	bl	8009138 <pvPortMalloc>
 8007c5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00e      	beq.n	8007c84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c66:	2054      	movs	r0, #84	@ 0x54
 8007c68:	f001 fa66 	bl	8009138 <pvPortMalloc>
 8007c6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c7a:	e005      	b.n	8007c88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c7c:	6978      	ldr	r0, [r7, #20]
 8007c7e:	f001 fb29 	bl	80092d4 <vPortFree>
 8007c82:	e001      	b.n	8007c88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d013      	beq.n	8007cb6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	2300      	movs	r3, #0
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f80e 	bl	8007cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007caa:	69f8      	ldr	r0, [r7, #28]
 8007cac:	f000 f896 	bl	8007ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e002      	b.n	8007cbc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
	}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b088      	sub	sp, #32
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007cde:	440b      	add	r3, r1
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	f023 0307 	bic.w	r3, r3, #7
 8007cec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00d      	beq.n	8007d14 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	b672      	cpsid	i
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	b662      	cpsie	i
 8007d0c:	617b      	str	r3, [r7, #20]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01f      	beq.n	8007d5a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e012      	b.n	8007d46 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	4413      	add	r3, r2
 8007d26:	7819      	ldrb	r1, [r3, #0]
 8007d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3334      	adds	r3, #52	@ 0x34
 8007d30:	460a      	mov	r2, r1
 8007d32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	2b0f      	cmp	r3, #15
 8007d4a:	d9e9      	bls.n	8007d20 <prvInitialiseNewTask+0x5a>
 8007d4c:	e000      	b.n	8007d50 <prvInitialiseNewTask+0x8a>
			{
				break;
 8007d4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d58:	e003      	b.n	8007d62 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	d901      	bls.n	8007d6c <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d68:	2306      	movs	r3, #6
 8007d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d70:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d76:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	3304      	adds	r3, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe ffd8 	bl	8006d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	3318      	adds	r3, #24
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe ffd3 	bl	8006d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	f1c3 0207 	rsb	r2, r3, #7
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	2200      	movs	r2, #0
 8007dac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	68f9      	ldr	r1, [r7, #12]
 8007dba:	69b8      	ldr	r0, [r7, #24]
 8007dbc:	f000 ff7e 	bl	8008cbc <pxPortInitialiseStack>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dd2:	bf00      	nop
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007de4:	f001 f87a 	bl	8008edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007de8:	4b2a      	ldr	r3, [pc, #168]	@ (8007e94 <prvAddNewTaskToReadyList+0xb8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3301      	adds	r3, #1
 8007dee:	4a29      	ldr	r2, [pc, #164]	@ (8007e94 <prvAddNewTaskToReadyList+0xb8>)
 8007df0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007df2:	4b29      	ldr	r3, [pc, #164]	@ (8007e98 <prvAddNewTaskToReadyList+0xbc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dfa:	4a27      	ldr	r2, [pc, #156]	@ (8007e98 <prvAddNewTaskToReadyList+0xbc>)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e00:	4b24      	ldr	r3, [pc, #144]	@ (8007e94 <prvAddNewTaskToReadyList+0xb8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d110      	bne.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e08:	f000 fc76 	bl	80086f8 <prvInitialiseTaskLists>
 8007e0c:	e00d      	b.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e0e:	4b23      	ldr	r3, [pc, #140]	@ (8007e9c <prvAddNewTaskToReadyList+0xc0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e16:	4b20      	ldr	r3, [pc, #128]	@ (8007e98 <prvAddNewTaskToReadyList+0xbc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d802      	bhi.n	8007e2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e24:	4a1c      	ldr	r2, [pc, #112]	@ (8007e98 <prvAddNewTaskToReadyList+0xbc>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea0 <prvAddNewTaskToReadyList+0xc4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea0 <prvAddNewTaskToReadyList+0xc4>)
 8007e32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e38:	2201      	movs	r2, #1
 8007e3a:	409a      	lsls	r2, r3
 8007e3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	4a18      	ldr	r2, [pc, #96]	@ (8007ea4 <prvAddNewTaskToReadyList+0xc8>)
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <prvAddNewTaskToReadyList+0xcc>)
 8007e54:	441a      	add	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	f7fe ff78 	bl	8006d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e62:	f001 f871 	bl	8008f48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <prvAddNewTaskToReadyList+0xc0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <prvAddNewTaskToReadyList+0xbc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d207      	bcs.n	8007e8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007eac <prvAddNewTaskToReadyList+0xd0>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	2000085c 	.word	0x2000085c
 8007e98:	2000075c 	.word	0x2000075c
 8007e9c:	20000868 	.word	0x20000868
 8007ea0:	20000878 	.word	0x20000878
 8007ea4:	20000864 	.word	0x20000864
 8007ea8:	20000760 	.word	0x20000760
 8007eac:	e000ed04 	.word	0xe000ed04

08007eb0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	@ 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <vTaskDelayUntil+0x30>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	617b      	str	r3, [r7, #20]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10d      	bne.n	8007f02 <vTaskDelayUntil+0x52>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	b672      	cpsid	i
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	b662      	cpsie	i
 8007efa:	613b      	str	r3, [r7, #16]
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	e7fd      	b.n	8007efe <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8007f02:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb0 <vTaskDelayUntil+0x100>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00d      	beq.n	8007f26 <vTaskDelayUntil+0x76>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	b672      	cpsid	i
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	b662      	cpsie	i
 8007f1e:	60fb      	str	r3, [r7, #12]
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	e7fd      	b.n	8007f22 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8007f26:	f000 f8cd 	bl	80080c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f2a:	4b22      	ldr	r3, [pc, #136]	@ (8007fb4 <vTaskDelayUntil+0x104>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	4413      	add	r3, r2
 8007f38:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6a3a      	ldr	r2, [r7, #32]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d20b      	bcs.n	8007f5c <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d211      	bcs.n	8007f72 <vTaskDelayUntil+0xc2>
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d90d      	bls.n	8007f72 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f5a:	e00a      	b.n	8007f72 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d303      	bcc.n	8007f6e <vTaskDelayUntil+0xbe>
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d901      	bls.n	8007f72 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fe32 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f8c:	f000 f8a8 	bl	80080e0 <xTaskResumeAll>
 8007f90:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d107      	bne.n	8007fa8 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8007f98:	4b07      	ldr	r3, [pc, #28]	@ (8007fb8 <vTaskDelayUntil+0x108>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fa8:	bf00      	nop
 8007faa:	3728      	adds	r7, #40	@ 0x28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000884 	.word	0x20000884
 8007fb4:	20000860 	.word	0x20000860
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01a      	beq.n	8008004 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fce:	4b15      	ldr	r3, [pc, #84]	@ (8008024 <vTaskDelay+0x68>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <vTaskDelay+0x36>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	b672      	cpsid	i
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	b662      	cpsie	i
 8007fea:	60bb      	str	r3, [r7, #8]
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007ff2:	f000 f867 	bl	80080c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fdf9 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ffe:	f000 f86f 	bl	80080e0 <xTaskResumeAll>
 8008002:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800800a:	4b07      	ldr	r3, [pc, #28]	@ (8008028 <vTaskDelay+0x6c>)
 800800c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000884 	.word	0x20000884
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008032:	4b1e      	ldr	r3, [pc, #120]	@ (80080ac <vTaskStartScheduler+0x80>)
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2300      	movs	r3, #0
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	2280      	movs	r2, #128	@ 0x80
 800803e:	491c      	ldr	r1, [pc, #112]	@ (80080b0 <vTaskStartScheduler+0x84>)
 8008040:	481c      	ldr	r0, [pc, #112]	@ (80080b4 <vTaskStartScheduler+0x88>)
 8008042:	f7ff fdff 	bl	8007c44 <xTaskCreate>
 8008046:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d118      	bne.n	8008080 <vTaskStartScheduler+0x54>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	b672      	cpsid	i
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	b662      	cpsie	i
 8008062:	60bb      	str	r3, [r7, #8]
}
 8008064:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008066:	4b14      	ldr	r3, [pc, #80]	@ (80080b8 <vTaskStartScheduler+0x8c>)
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800806e:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <vTaskStartScheduler+0x90>)
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008074:	4b12      	ldr	r3, [pc, #72]	@ (80080c0 <vTaskStartScheduler+0x94>)
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800807a:	f000 feb1 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800807e:	e011      	b.n	80080a4 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d10d      	bne.n	80080a4 <vTaskStartScheduler+0x78>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	b672      	cpsid	i
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	b662      	cpsie	i
 800809c:	607b      	str	r3, [r7, #4]
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	e7fd      	b.n	80080a0 <vTaskStartScheduler+0x74>
}
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000880 	.word	0x20000880
 80080b0:	0800a8c8 	.word	0x0800a8c8
 80080b4:	080086c9 	.word	0x080086c9
 80080b8:	2000087c 	.word	0x2000087c
 80080bc:	20000868 	.word	0x20000868
 80080c0:	20000860 	.word	0x20000860

080080c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <vTaskSuspendAll+0x18>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3301      	adds	r3, #1
 80080ce:	4a03      	ldr	r2, [pc, #12]	@ (80080dc <vTaskSuspendAll+0x18>)
 80080d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80080d2:	bf00      	nop
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	20000884 	.word	0x20000884

080080e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080ee:	4b43      	ldr	r3, [pc, #268]	@ (80081fc <xTaskResumeAll+0x11c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10d      	bne.n	8008112 <xTaskResumeAll+0x32>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	603b      	str	r3, [r7, #0]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008112:	f000 fee3 	bl	8008edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008116:	4b39      	ldr	r3, [pc, #228]	@ (80081fc <xTaskResumeAll+0x11c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3b01      	subs	r3, #1
 800811c:	4a37      	ldr	r2, [pc, #220]	@ (80081fc <xTaskResumeAll+0x11c>)
 800811e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008120:	4b36      	ldr	r3, [pc, #216]	@ (80081fc <xTaskResumeAll+0x11c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d161      	bne.n	80081ec <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008128:	4b35      	ldr	r3, [pc, #212]	@ (8008200 <xTaskResumeAll+0x120>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d05d      	beq.n	80081ec <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008130:	e02e      	b.n	8008190 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008132:	4b34      	ldr	r3, [pc, #208]	@ (8008204 <xTaskResumeAll+0x124>)
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3318      	adds	r3, #24
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fe64 	bl	8006e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3304      	adds	r3, #4
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fe5f 	bl	8006e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	2201      	movs	r2, #1
 8008154:	409a      	lsls	r2, r3
 8008156:	4b2c      	ldr	r3, [pc, #176]	@ (8008208 <xTaskResumeAll+0x128>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4313      	orrs	r3, r2
 800815c:	4a2a      	ldr	r2, [pc, #168]	@ (8008208 <xTaskResumeAll+0x128>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4a27      	ldr	r2, [pc, #156]	@ (800820c <xTaskResumeAll+0x12c>)
 800816e:	441a      	add	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7fe fdeb 	bl	8006d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	4b23      	ldr	r3, [pc, #140]	@ (8008210 <xTaskResumeAll+0x130>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800818a:	4b22      	ldr	r3, [pc, #136]	@ (8008214 <xTaskResumeAll+0x134>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008190:	4b1c      	ldr	r3, [pc, #112]	@ (8008204 <xTaskResumeAll+0x124>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1cc      	bne.n	8008132 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800819e:	f000 fb29 	bl	80087f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80081a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008218 <xTaskResumeAll+0x138>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d010      	beq.n	80081d0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081ae:	f000 f859 	bl	8008264 <xTaskIncrementTick>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80081b8:	4b16      	ldr	r3, [pc, #88]	@ (8008214 <xTaskResumeAll+0x134>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f1      	bne.n	80081ae <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80081ca:	4b13      	ldr	r3, [pc, #76]	@ (8008218 <xTaskResumeAll+0x138>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081d0:	4b10      	ldr	r3, [pc, #64]	@ (8008214 <xTaskResumeAll+0x134>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d009      	beq.n	80081ec <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081d8:	2301      	movs	r3, #1
 80081da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081dc:	4b0f      	ldr	r3, [pc, #60]	@ (800821c <xTaskResumeAll+0x13c>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ec:	f000 feac 	bl	8008f48 <vPortExitCritical>

	return xAlreadyYielded;
 80081f0:	68bb      	ldr	r3, [r7, #8]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000884 	.word	0x20000884
 8008200:	2000085c 	.word	0x2000085c
 8008204:	2000081c 	.word	0x2000081c
 8008208:	20000864 	.word	0x20000864
 800820c:	20000760 	.word	0x20000760
 8008210:	2000075c 	.word	0x2000075c
 8008214:	20000870 	.word	0x20000870
 8008218:	2000086c 	.word	0x2000086c
 800821c:	e000ed04 	.word	0xe000ed04

08008220 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008226:	4b05      	ldr	r3, [pc, #20]	@ (800823c <xTaskGetTickCount+0x1c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800822c:	687b      	ldr	r3, [r7, #4]
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20000860 	.word	0x20000860

08008240 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008246:	f000 ff31 	bl	80090ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800824a:	2300      	movs	r3, #0
 800824c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800824e:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <xTaskGetTickCountFromISR+0x20>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008254:	683b      	ldr	r3, [r7, #0]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000860 	.word	0x20000860

08008264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800826e:	4b50      	ldr	r3, [pc, #320]	@ (80083b0 <xTaskIncrementTick+0x14c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 808b 	bne.w	800838e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008278:	4b4e      	ldr	r3, [pc, #312]	@ (80083b4 <xTaskIncrementTick+0x150>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008280:	4a4c      	ldr	r2, [pc, #304]	@ (80083b4 <xTaskIncrementTick+0x150>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d123      	bne.n	80082d4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800828c:	4b4a      	ldr	r3, [pc, #296]	@ (80083b8 <xTaskIncrementTick+0x154>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00d      	beq.n	80082b2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	b672      	cpsid	i
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	b662      	cpsie	i
 80082aa:	603b      	str	r3, [r7, #0]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xTaskIncrementTick+0x4a>
 80082b2:	4b41      	ldr	r3, [pc, #260]	@ (80083b8 <xTaskIncrementTick+0x154>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	4b40      	ldr	r3, [pc, #256]	@ (80083bc <xTaskIncrementTick+0x158>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a3e      	ldr	r2, [pc, #248]	@ (80083b8 <xTaskIncrementTick+0x154>)
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	4a3e      	ldr	r2, [pc, #248]	@ (80083bc <xTaskIncrementTick+0x158>)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	4b3e      	ldr	r3, [pc, #248]	@ (80083c0 <xTaskIncrementTick+0x15c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3301      	adds	r3, #1
 80082cc:	4a3c      	ldr	r2, [pc, #240]	@ (80083c0 <xTaskIncrementTick+0x15c>)
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	f000 fa90 	bl	80087f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082d4:	4b3b      	ldr	r3, [pc, #236]	@ (80083c4 <xTaskIncrementTick+0x160>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d348      	bcc.n	8008370 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082de:	4b36      	ldr	r3, [pc, #216]	@ (80083b8 <xTaskIncrementTick+0x154>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e8:	4b36      	ldr	r3, [pc, #216]	@ (80083c4 <xTaskIncrementTick+0x160>)
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	601a      	str	r2, [r3, #0]
					break;
 80082f0:	e03e      	b.n	8008370 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f2:	4b31      	ldr	r3, [pc, #196]	@ (80083b8 <xTaskIncrementTick+0x154>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d203      	bcs.n	8008312 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800830a:	4a2e      	ldr	r2, [pc, #184]	@ (80083c4 <xTaskIncrementTick+0x160>)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008310:	e02e      	b.n	8008370 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	3304      	adds	r3, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fd78 	bl	8006e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3318      	adds	r3, #24
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fd6f 	bl	8006e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008332:	2201      	movs	r2, #1
 8008334:	409a      	lsls	r2, r3
 8008336:	4b24      	ldr	r3, [pc, #144]	@ (80083c8 <xTaskIncrementTick+0x164>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4313      	orrs	r3, r2
 800833c:	4a22      	ldr	r2, [pc, #136]	@ (80083c8 <xTaskIncrementTick+0x164>)
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4a1f      	ldr	r2, [pc, #124]	@ (80083cc <xTaskIncrementTick+0x168>)
 800834e:	441a      	add	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	3304      	adds	r3, #4
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7fe fcfb 	bl	8006d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008360:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <xTaskIncrementTick+0x16c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	429a      	cmp	r2, r3
 8008368:	d3b9      	bcc.n	80082de <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800836a:	2301      	movs	r3, #1
 800836c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800836e:	e7b6      	b.n	80082de <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008370:	4b17      	ldr	r3, [pc, #92]	@ (80083d0 <xTaskIncrementTick+0x16c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008376:	4915      	ldr	r1, [pc, #84]	@ (80083cc <xTaskIncrementTick+0x168>)
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d907      	bls.n	8008398 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e004      	b.n	8008398 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800838e:	4b11      	ldr	r3, [pc, #68]	@ (80083d4 <xTaskIncrementTick+0x170>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	4a0f      	ldr	r2, [pc, #60]	@ (80083d4 <xTaskIncrementTick+0x170>)
 8008396:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008398:	4b0f      	ldr	r3, [pc, #60]	@ (80083d8 <xTaskIncrementTick+0x174>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083a4:	697b      	ldr	r3, [r7, #20]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000884 	.word	0x20000884
 80083b4:	20000860 	.word	0x20000860
 80083b8:	20000814 	.word	0x20000814
 80083bc:	20000818 	.word	0x20000818
 80083c0:	20000874 	.word	0x20000874
 80083c4:	2000087c 	.word	0x2000087c
 80083c8:	20000864 	.word	0x20000864
 80083cc:	20000760 	.word	0x20000760
 80083d0:	2000075c 	.word	0x2000075c
 80083d4:	2000086c 	.word	0x2000086c
 80083d8:	20000870 	.word	0x20000870

080083dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083e2:	4b28      	ldr	r3, [pc, #160]	@ (8008484 <vTaskSwitchContext+0xa8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083ea:	4b27      	ldr	r3, [pc, #156]	@ (8008488 <vTaskSwitchContext+0xac>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083f0:	e042      	b.n	8008478 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80083f2:	4b25      	ldr	r3, [pc, #148]	@ (8008488 <vTaskSwitchContext+0xac>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f8:	4b24      	ldr	r3, [pc, #144]	@ (800848c <vTaskSwitchContext+0xb0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	fab3 f383 	clz	r3, r3
 8008404:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	f1c3 031f 	rsb	r3, r3, #31
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	4920      	ldr	r1, [pc, #128]	@ (8008490 <vTaskSwitchContext+0xb4>)
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10d      	bne.n	800843e <vTaskSwitchContext+0x62>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	b672      	cpsid	i
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	b662      	cpsie	i
 8008436:	607b      	str	r3, [r7, #4]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vTaskSwitchContext+0x5e>
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4a11      	ldr	r2, [pc, #68]	@ (8008490 <vTaskSwitchContext+0xb4>)
 800844a:	4413      	add	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	605a      	str	r2, [r3, #4]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	3308      	adds	r3, #8
 8008460:	429a      	cmp	r2, r3
 8008462:	d104      	bne.n	800846e <vTaskSwitchContext+0x92>
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a07      	ldr	r2, [pc, #28]	@ (8008494 <vTaskSwitchContext+0xb8>)
 8008476:	6013      	str	r3, [r2, #0]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	20000884 	.word	0x20000884
 8008488:	20000870 	.word	0x20000870
 800848c:	20000864 	.word	0x20000864
 8008490:	20000760 	.word	0x20000760
 8008494:	2000075c 	.word	0x2000075c

08008498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10d      	bne.n	80084c4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	60fb      	str	r3, [r7, #12]
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084c4:	4b07      	ldr	r3, [pc, #28]	@ (80084e4 <vTaskPlaceOnEventList+0x4c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3318      	adds	r3, #24
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7fe fc64 	bl	8006d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084d2:	2101      	movs	r1, #1
 80084d4:	6838      	ldr	r0, [r7, #0]
 80084d6:	f000 fb8b 	bl	8008bf0 <prvAddCurrentTaskToDelayedList>
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	2000075c 	.word	0x2000075c

080084e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10d      	bne.n	800851a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	b672      	cpsid	i
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	b662      	cpsie	i
 8008512:	60fb      	str	r3, [r7, #12]
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	e7fd      	b.n	8008516 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	3318      	adds	r3, #24
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fc74 	bl	8006e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008524:	4b1d      	ldr	r3, [pc, #116]	@ (800859c <xTaskRemoveFromEventList+0xb4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d11c      	bne.n	8008566 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3304      	adds	r3, #4
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe fc6b 	bl	8006e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	2201      	movs	r2, #1
 800853c:	409a      	lsls	r2, r3
 800853e:	4b18      	ldr	r3, [pc, #96]	@ (80085a0 <xTaskRemoveFromEventList+0xb8>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4313      	orrs	r3, r2
 8008544:	4a16      	ldr	r2, [pc, #88]	@ (80085a0 <xTaskRemoveFromEventList+0xb8>)
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4a13      	ldr	r2, [pc, #76]	@ (80085a4 <xTaskRemoveFromEventList+0xbc>)
 8008556:	441a      	add	r2, r3
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7fe fbf7 	bl	8006d52 <vListInsertEnd>
 8008564:	e005      	b.n	8008572 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3318      	adds	r3, #24
 800856a:	4619      	mov	r1, r3
 800856c:	480e      	ldr	r0, [pc, #56]	@ (80085a8 <xTaskRemoveFromEventList+0xc0>)
 800856e:	f7fe fbf0 	bl	8006d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008576:	4b0d      	ldr	r3, [pc, #52]	@ (80085ac <xTaskRemoveFromEventList+0xc4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857c:	429a      	cmp	r2, r3
 800857e:	d905      	bls.n	800858c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008584:	4b0a      	ldr	r3, [pc, #40]	@ (80085b0 <xTaskRemoveFromEventList+0xc8>)
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e001      	b.n	8008590 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008590:	697b      	ldr	r3, [r7, #20]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000884 	.word	0x20000884
 80085a0:	20000864 	.word	0x20000864
 80085a4:	20000760 	.word	0x20000760
 80085a8:	2000081c 	.word	0x2000081c
 80085ac:	2000075c 	.word	0x2000075c
 80085b0:	20000870 	.word	0x20000870

080085b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085bc:	4b06      	ldr	r3, [pc, #24]	@ (80085d8 <vTaskInternalSetTimeOutState+0x24>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085c4:	4b05      	ldr	r3, [pc, #20]	@ (80085dc <vTaskInternalSetTimeOutState+0x28>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	605a      	str	r2, [r3, #4]
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	20000874 	.word	0x20000874
 80085dc:	20000860 	.word	0x20000860

080085e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10d      	bne.n	800860c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	b672      	cpsid	i
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	b662      	cpsie	i
 8008604:	613b      	str	r3, [r7, #16]
}
 8008606:	bf00      	nop
 8008608:	bf00      	nop
 800860a:	e7fd      	b.n	8008608 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10d      	bne.n	800862e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	60fb      	str	r3, [r7, #12]
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	e7fd      	b.n	800862a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800862e:	f000 fc55 	bl	8008edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008632:	4b1d      	ldr	r3, [pc, #116]	@ (80086a8 <xTaskCheckForTimeOut+0xc8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d102      	bne.n	8008652 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800864c:	2300      	movs	r3, #0
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e023      	b.n	800869a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	4b15      	ldr	r3, [pc, #84]	@ (80086ac <xTaskCheckForTimeOut+0xcc>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d007      	beq.n	800866e <xTaskCheckForTimeOut+0x8e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	d302      	bcc.n	800866e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	e015      	b.n	800869a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	429a      	cmp	r2, r3
 8008676:	d20b      	bcs.n	8008690 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff95 	bl	80085b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e004      	b.n	800869a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800869a:	f000 fc55 	bl	8008f48 <vPortExitCritical>

	return xReturn;
 800869e:	69fb      	ldr	r3, [r7, #28]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20000860 	.word	0x20000860
 80086ac:	20000874 	.word	0x20000874

080086b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086b4:	4b03      	ldr	r3, [pc, #12]	@ (80086c4 <vTaskMissedYield+0x14>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
}
 80086ba:	bf00      	nop
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	20000870 	.word	0x20000870

080086c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086d0:	f000 f852 	bl	8008778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d4:	4b06      	ldr	r3, [pc, #24]	@ (80086f0 <prvIdleTask+0x28>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d9f9      	bls.n	80086d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086dc:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <prvIdleTask+0x2c>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086ec:	e7f0      	b.n	80086d0 <prvIdleTask+0x8>
 80086ee:	bf00      	nop
 80086f0:	20000760 	.word	0x20000760
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086fe:	2300      	movs	r3, #0
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	e00c      	b.n	800871e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a12      	ldr	r2, [pc, #72]	@ (8008758 <prvInitialiseTaskLists+0x60>)
 8008710:	4413      	add	r3, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe faf0 	bl	8006cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b06      	cmp	r3, #6
 8008722:	d9ef      	bls.n	8008704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008724:	480d      	ldr	r0, [pc, #52]	@ (800875c <prvInitialiseTaskLists+0x64>)
 8008726:	f7fe fae7 	bl	8006cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800872a:	480d      	ldr	r0, [pc, #52]	@ (8008760 <prvInitialiseTaskLists+0x68>)
 800872c:	f7fe fae4 	bl	8006cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008730:	480c      	ldr	r0, [pc, #48]	@ (8008764 <prvInitialiseTaskLists+0x6c>)
 8008732:	f7fe fae1 	bl	8006cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008736:	480c      	ldr	r0, [pc, #48]	@ (8008768 <prvInitialiseTaskLists+0x70>)
 8008738:	f7fe fade 	bl	8006cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800873c:	480b      	ldr	r0, [pc, #44]	@ (800876c <prvInitialiseTaskLists+0x74>)
 800873e:	f7fe fadb 	bl	8006cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008742:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <prvInitialiseTaskLists+0x78>)
 8008744:	4a05      	ldr	r2, [pc, #20]	@ (800875c <prvInitialiseTaskLists+0x64>)
 8008746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008748:	4b0a      	ldr	r3, [pc, #40]	@ (8008774 <prvInitialiseTaskLists+0x7c>)
 800874a:	4a05      	ldr	r2, [pc, #20]	@ (8008760 <prvInitialiseTaskLists+0x68>)
 800874c:	601a      	str	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000760 	.word	0x20000760
 800875c:	200007ec 	.word	0x200007ec
 8008760:	20000800 	.word	0x20000800
 8008764:	2000081c 	.word	0x2000081c
 8008768:	20000830 	.word	0x20000830
 800876c:	20000848 	.word	0x20000848
 8008770:	20000814 	.word	0x20000814
 8008774:	20000818 	.word	0x20000818

08008778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800877e:	e019      	b.n	80087b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008780:	f000 fbac 	bl	8008edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b10      	ldr	r3, [pc, #64]	@ (80087c8 <prvCheckTasksWaitingTermination+0x50>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fb3b 	bl	8006e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008796:	4b0d      	ldr	r3, [pc, #52]	@ (80087cc <prvCheckTasksWaitingTermination+0x54>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3b01      	subs	r3, #1
 800879c:	4a0b      	ldr	r2, [pc, #44]	@ (80087cc <prvCheckTasksWaitingTermination+0x54>)
 800879e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087a0:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	4a0a      	ldr	r2, [pc, #40]	@ (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087aa:	f000 fbcd 	bl	8008f48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f810 	bl	80087d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b4:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e1      	bne.n	8008780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000830 	.word	0x20000830
 80087cc:	2000085c 	.word	0x2000085c
 80087d0:	20000844 	.word	0x20000844

080087d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fd77 	bl	80092d4 <vPortFree>
			vPortFree( pxTCB );
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fd74 	bl	80092d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <prvResetNextTaskUnblockTime+0x38>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008804:	4b0a      	ldr	r3, [pc, #40]	@ (8008830 <prvResetNextTaskUnblockTime+0x3c>)
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800880c:	e008      	b.n	8008820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880e:	4b07      	ldr	r3, [pc, #28]	@ (800882c <prvResetNextTaskUnblockTime+0x38>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a04      	ldr	r2, [pc, #16]	@ (8008830 <prvResetNextTaskUnblockTime+0x3c>)
 800881e:	6013      	str	r3, [r2, #0]
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	20000814 	.word	0x20000814
 8008830:	2000087c 	.word	0x2000087c

08008834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800883a:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <xTaskGetSchedulerState+0x34>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008842:	2301      	movs	r3, #1
 8008844:	607b      	str	r3, [r7, #4]
 8008846:	e008      	b.n	800885a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008848:	4b08      	ldr	r3, [pc, #32]	@ (800886c <xTaskGetSchedulerState+0x38>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008850:	2302      	movs	r3, #2
 8008852:	607b      	str	r3, [r7, #4]
 8008854:	e001      	b.n	800885a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800885a:	687b      	ldr	r3, [r7, #4]
	}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	20000868 	.word	0x20000868
 800886c:	20000884 	.word	0x20000884

08008870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d069      	beq.n	800895a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800888a:	4b36      	ldr	r3, [pc, #216]	@ (8008964 <xTaskPriorityInherit+0xf4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	429a      	cmp	r2, r3
 8008892:	d259      	bcs.n	8008948 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	db06      	blt.n	80088aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889c:	4b31      	ldr	r3, [pc, #196]	@ (8008964 <xTaskPriorityInherit+0xf4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	f1c3 0207 	rsb	r2, r3, #7
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6959      	ldr	r1, [r3, #20]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4a2b      	ldr	r2, [pc, #172]	@ (8008968 <xTaskPriorityInherit+0xf8>)
 80088bc:	4413      	add	r3, r2
 80088be:	4299      	cmp	r1, r3
 80088c0:	d13a      	bne.n	8008938 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe faa0 	bl	8006e0c <uxListRemove>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d115      	bne.n	80088fe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	4924      	ldr	r1, [pc, #144]	@ (8008968 <xTaskPriorityInherit+0xf8>)
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <xTaskPriorityInherit+0x8e>
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ec:	2201      	movs	r2, #1
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	43da      	mvns	r2, r3
 80088f4:	4b1d      	ldr	r3, [pc, #116]	@ (800896c <xTaskPriorityInherit+0xfc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4013      	ands	r3, r2
 80088fa:	4a1c      	ldr	r2, [pc, #112]	@ (800896c <xTaskPriorityInherit+0xfc>)
 80088fc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088fe:	4b19      	ldr	r3, [pc, #100]	@ (8008964 <xTaskPriorityInherit+0xf4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	2201      	movs	r2, #1
 800890e:	409a      	lsls	r2, r3
 8008910:	4b16      	ldr	r3, [pc, #88]	@ (800896c <xTaskPriorityInherit+0xfc>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4313      	orrs	r3, r2
 8008916:	4a15      	ldr	r2, [pc, #84]	@ (800896c <xTaskPriorityInherit+0xfc>)
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4a10      	ldr	r2, [pc, #64]	@ (8008968 <xTaskPriorityInherit+0xf8>)
 8008928:	441a      	add	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7fe fa0e 	bl	8006d52 <vListInsertEnd>
 8008936:	e004      	b.n	8008942 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008938:	4b0a      	ldr	r3, [pc, #40]	@ (8008964 <xTaskPriorityInherit+0xf4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008942:	2301      	movs	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e008      	b.n	800895a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800894c:	4b05      	ldr	r3, [pc, #20]	@ (8008964 <xTaskPriorityInherit+0xf4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008952:	429a      	cmp	r2, r3
 8008954:	d201      	bcs.n	800895a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008956:	2301      	movs	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800895a:	68fb      	ldr	r3, [r7, #12]
	}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	2000075c 	.word	0x2000075c
 8008968:	20000760 	.word	0x20000760
 800896c:	20000864 	.word	0x20000864

08008970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d074      	beq.n	8008a70 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008986:	4b3d      	ldr	r3, [pc, #244]	@ (8008a7c <xTaskPriorityDisinherit+0x10c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	429a      	cmp	r2, r3
 800898e:	d00d      	beq.n	80089ac <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	b672      	cpsid	i
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	b662      	cpsie	i
 80089a4:	60fb      	str	r3, [r7, #12]
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10d      	bne.n	80089d0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	b672      	cpsid	i
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	b662      	cpsie	i
 80089c8:	60bb      	str	r3, [r7, #8]
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d044      	beq.n	8008a70 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d140      	bne.n	8008a70 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	3304      	adds	r3, #4
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fa0a 	bl	8006e0c <uxListRemove>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d115      	bne.n	8008a2a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a02:	491f      	ldr	r1, [pc, #124]	@ (8008a80 <xTaskPriorityDisinherit+0x110>)
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <xTaskPriorityDisinherit+0xba>
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a18:	2201      	movs	r2, #1
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	43da      	mvns	r2, r3
 8008a20:	4b18      	ldr	r3, [pc, #96]	@ (8008a84 <xTaskPriorityDisinherit+0x114>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4013      	ands	r3, r2
 8008a26:	4a17      	ldr	r2, [pc, #92]	@ (8008a84 <xTaskPriorityDisinherit+0x114>)
 8008a28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a36:	f1c3 0207 	rsb	r2, r3, #7
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	2201      	movs	r2, #1
 8008a44:	409a      	lsls	r2, r3
 8008a46:	4b0f      	ldr	r3, [pc, #60]	@ (8008a84 <xTaskPriorityDisinherit+0x114>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8008a84 <xTaskPriorityDisinherit+0x114>)
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4a08      	ldr	r2, [pc, #32]	@ (8008a80 <xTaskPriorityDisinherit+0x110>)
 8008a5e:	441a      	add	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4619      	mov	r1, r3
 8008a66:	4610      	mov	r0, r2
 8008a68:	f7fe f973 	bl	8006d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a70:	697b      	ldr	r3, [r7, #20]
	}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2000075c 	.word	0x2000075c
 8008a80:	20000760 	.word	0x20000760
 8008a84:	20000864 	.word	0x20000864

08008a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a96:	2301      	movs	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8089 	beq.w	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10d      	bne.n	8008ac6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	b672      	cpsid	i
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	b662      	cpsie	i
 8008abe:	60fb      	str	r3, [r7, #12]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d902      	bls.n	8008ad6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	e002      	b.n	8008adc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ada:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d066      	beq.n	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d161      	bne.n	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008af0:	4b32      	ldr	r3, [pc, #200]	@ (8008bbc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d10d      	bne.n	8008b16 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	b672      	cpsid	i
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	b662      	cpsie	i
 8008b0e:	60bb      	str	r3, [r7, #8]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	69fa      	ldr	r2, [r7, #28]
 8008b20:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	db04      	blt.n	8008b34 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f1c3 0207 	rsb	r2, r3, #7
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	6959      	ldr	r1, [r3, #20]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4a1f      	ldr	r2, [pc, #124]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b44:	4413      	add	r3, r2
 8008b46:	4299      	cmp	r1, r3
 8008b48:	d134      	bne.n	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe f95c 	bl	8006e0c <uxListRemove>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d115      	bne.n	8008b86 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5e:	4918      	ldr	r1, [pc, #96]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b74:	2201      	movs	r2, #1
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	43da      	mvns	r2, r3
 8008b7c:	4b11      	ldr	r3, [pc, #68]	@ (8008bc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4013      	ands	r3, r2
 8008b82:	4a10      	ldr	r2, [pc, #64]	@ (8008bc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	409a      	lsls	r2, r3
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	4a0b      	ldr	r2, [pc, #44]	@ (8008bc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4a06      	ldr	r2, [pc, #24]	@ (8008bc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008ba6:	441a      	add	r2, r3
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7fe f8cf 	bl	8006d52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bb4:	bf00      	nop
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	2000075c 	.word	0x2000075c
 8008bc0:	20000760 	.word	0x20000760
 8008bc4:	20000864 	.word	0x20000864

08008bc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008bcc:	4b07      	ldr	r3, [pc, #28]	@ (8008bec <pvTaskIncrementMutexHeldCount+0x24>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008bd4:	4b05      	ldr	r3, [pc, #20]	@ (8008bec <pvTaskIncrementMutexHeldCount+0x24>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bda:	3201      	adds	r2, #1
 8008bdc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008bde:	4b03      	ldr	r3, [pc, #12]	@ (8008bec <pvTaskIncrementMutexHeldCount+0x24>)
 8008be0:	681b      	ldr	r3, [r3, #0]
	}
 8008be2:	4618      	mov	r0, r3
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	2000075c 	.word	0x2000075c

08008bf0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c00:	4b28      	ldr	r3, [pc, #160]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe f900 	bl	8006e0c <uxListRemove>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c12:	4b24      	ldr	r3, [pc, #144]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c18:	2201      	movs	r2, #1
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	43da      	mvns	r2, r3
 8008c20:	4b21      	ldr	r3, [pc, #132]	@ (8008ca8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4013      	ands	r3, r2
 8008c26:	4a20      	ldr	r2, [pc, #128]	@ (8008ca8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d10a      	bne.n	8008c48 <prvAddCurrentTaskToDelayedList+0x58>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c38:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4619      	mov	r1, r3
 8008c40:	481a      	ldr	r0, [pc, #104]	@ (8008cac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c42:	f7fe f886 	bl	8006d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c46:	e026      	b.n	8008c96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c50:	4b14      	ldr	r3, [pc, #80]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d209      	bcs.n	8008c74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c60:	4b13      	ldr	r3, [pc, #76]	@ (8008cb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f7fe f894 	bl	8006d9a <vListInsert>
}
 8008c72:	e010      	b.n	8008c96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c74:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f7fe f88a 	bl	8006d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c86:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d202      	bcs.n	8008c96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c90:	4a09      	ldr	r2, [pc, #36]	@ (8008cb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	6013      	str	r3, [r2, #0]
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000860 	.word	0x20000860
 8008ca4:	2000075c 	.word	0x2000075c
 8008ca8:	20000864 	.word	0x20000864
 8008cac:	20000848 	.word	0x20000848
 8008cb0:	20000818 	.word	0x20000818
 8008cb4:	20000814 	.word	0x20000814
 8008cb8:	2000087c 	.word	0x2000087c

08008cbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3b04      	subs	r3, #4
 8008ccc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f023 0201 	bic.w	r2, r3, #1
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3b04      	subs	r3, #4
 8008cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cec:	4a0c      	ldr	r2, [pc, #48]	@ (8008d20 <pxPortInitialiseStack+0x64>)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3b14      	subs	r3, #20
 8008cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3b04      	subs	r3, #4
 8008d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f06f 0202 	mvn.w	r2, #2
 8008d0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3b20      	subs	r3, #32
 8008d10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d12:	68fb      	ldr	r3, [r7, #12]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	08008d25 	.word	0x08008d25

08008d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d2e:	4b15      	ldr	r3, [pc, #84]	@ (8008d84 <prvTaskExitError+0x60>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d00d      	beq.n	8008d54 <prvTaskExitError+0x30>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3c:	b672      	cpsid	i
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	b662      	cpsie	i
 8008d4c:	60fb      	str	r3, [r7, #12]
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	e7fd      	b.n	8008d50 <prvTaskExitError+0x2c>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d58:	b672      	cpsid	i
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	b662      	cpsie	i
 8008d68:	60bb      	str	r3, [r7, #8]
}
 8008d6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d6c:	bf00      	nop
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0fc      	beq.n	8008d6e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	2000001c 	.word	0x2000001c
	...

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	@ (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008de6:	4b37      	ldr	r3, [pc, #220]	@ (8008ec4 <xPortStartScheduler+0xe4>)
 8008de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	22ff      	movs	r2, #255	@ 0xff
 8008df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e10:	2207      	movs	r2, #7
 8008e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e14:	e009      	b.n	8008e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e16:	4b2d      	ldr	r3, [pc, #180]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e32:	2b80      	cmp	r3, #128	@ 0x80
 8008e34:	d0ef      	beq.n	8008e16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e36:	4b25      	ldr	r3, [pc, #148]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f1c3 0307 	rsb	r3, r3, #7
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d00d      	beq.n	8008e5e <xPortStartScheduler+0x7e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	b672      	cpsid	i
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	b662      	cpsie	i
 8008e56:	60bb      	str	r3, [r7, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	4a19      	ldr	r2, [pc, #100]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e70:	4a16      	ldr	r2, [pc, #88]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e7c:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e88:	4b11      	ldr	r3, [pc, #68]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a10      	ldr	r2, [pc, #64]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e94:	f000 f8dc 	bl	8009050 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <xPortStartScheduler+0xf4>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e9e:	f000 f8fb 	bl	8009098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed8 <xPortStartScheduler+0xf8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed8 <xPortStartScheduler+0xf8>)
 8008ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eae:	f7ff ff83 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008eb2:	f7ff fa93 	bl	80083dc <vTaskSwitchContext>
	prvTaskExitError();
 8008eb6:	f7ff ff35 	bl	8008d24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000e400 	.word	0xe000e400
 8008ec8:	20000888 	.word	0x20000888
 8008ecc:	2000088c 	.word	0x2000088c
 8008ed0:	e000ed20 	.word	0xe000ed20
 8008ed4:	2000001c 	.word	0x2000001c
 8008ed8:	e000ef34 	.word	0xe000ef34

08008edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	607b      	str	r3, [r7, #4]
}
 8008ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008efa:	4b11      	ldr	r3, [pc, #68]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	4a0f      	ldr	r2, [pc, #60]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008f02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f04:	4b0e      	ldr	r3, [pc, #56]	@ (8008f40 <vPortEnterCritical+0x64>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d112      	bne.n	8008f32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f44 <vPortEnterCritical+0x68>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <vPortEnterCritical+0x56>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	b672      	cpsid	i
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	b662      	cpsie	i
 8008f2a:	603b      	str	r3, [r7, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <vPortEnterCritical+0x52>
	}
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	2000001c 	.word	0x2000001c
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f4e:	4b13      	ldr	r3, [pc, #76]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <vPortExitCritical+0x2a>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	b672      	cpsid	i
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	b662      	cpsie	i
 8008f6a:	607b      	str	r3, [r7, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008f72:	4b0a      	ldr	r3, [pc, #40]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	4a08      	ldr	r2, [pc, #32]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f7c:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <vPortExitCritical+0x54>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <vPortExitCritical+0x48>
 8008f84:	2300      	movs	r3, #0
 8008f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	f383 8811 	msr	BASEPRI, r3
}
 8008f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	2000001c 	.word	0x2000001c

08008fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fa0:	f3ef 8009 	mrs	r0, PSP
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	4b15      	ldr	r3, [pc, #84]	@ (8009000 <pxCurrentTCBConst>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f01e 0f10 	tst.w	lr, #16
 8008fb0:	bf08      	it	eq
 8008fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	6010      	str	r0, [r2, #0]
 8008fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fc4:	b672      	cpsid	i
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	b662      	cpsie	i
 8008fd4:	f7ff fa02 	bl	80083dc <vTaskSwitchContext>
 8008fd8:	f04f 0000 	mov.w	r0, #0
 8008fdc:	f380 8811 	msr	BASEPRI, r0
 8008fe0:	bc09      	pop	{r0, r3}
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	6808      	ldr	r0, [r1, #0]
 8008fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	f01e 0f10 	tst.w	lr, #16
 8008fee:	bf08      	it	eq
 8008ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ff4:	f380 8809 	msr	PSP, r0
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop

08009000 <pxCurrentTCBConst>:
 8009000:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop

08009008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	b672      	cpsid	i
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	b662      	cpsie	i
 8009022:	607b      	str	r3, [r7, #4]
}
 8009024:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009026:	f7ff f91d 	bl	8008264 <xTaskIncrementTick>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <SysTick_Handler+0x44>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	2300      	movs	r3, #0
 800903a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f383 8811 	msr	BASEPRI, r3
}
 8009042:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009054:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <vPortSetupTimerInterrupt+0x34>)
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800905a:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <vPortSetupTimerInterrupt+0x38>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009060:	4b0a      	ldr	r3, [pc, #40]	@ (800908c <vPortSetupTimerInterrupt+0x3c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a0a      	ldr	r2, [pc, #40]	@ (8009090 <vPortSetupTimerInterrupt+0x40>)
 8009066:	fba2 2303 	umull	r2, r3, r2, r3
 800906a:	099b      	lsrs	r3, r3, #6
 800906c:	4a09      	ldr	r2, [pc, #36]	@ (8009094 <vPortSetupTimerInterrupt+0x44>)
 800906e:	3b01      	subs	r3, #1
 8009070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009072:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <vPortSetupTimerInterrupt+0x34>)
 8009074:	2207      	movs	r2, #7
 8009076:	601a      	str	r2, [r3, #0]
}
 8009078:	bf00      	nop
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	e000e010 	.word	0xe000e010
 8009088:	e000e018 	.word	0xe000e018
 800908c:	20000010 	.word	0x20000010
 8009090:	10624dd3 	.word	0x10624dd3
 8009094:	e000e014 	.word	0xe000e014

08009098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009098:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090a8 <vPortEnableVFP+0x10>
 800909c:	6801      	ldr	r1, [r0, #0]
 800909e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090a2:	6001      	str	r1, [r0, #0]
 80090a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090a6:	bf00      	nop
 80090a8:	e000ed88 	.word	0xe000ed88

080090ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090b2:	f3ef 8305 	mrs	r3, IPSR
 80090b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d917      	bls.n	80090ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090be:	4a1a      	ldr	r2, [pc, #104]	@ (8009128 <vPortValidateInterruptPriority+0x7c>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090c8:	4b18      	ldr	r3, [pc, #96]	@ (800912c <vPortValidateInterruptPriority+0x80>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	7afa      	ldrb	r2, [r7, #11]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d20d      	bcs.n	80090ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	b672      	cpsid	i
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	b662      	cpsie	i
 80090e6:	607b      	str	r3, [r7, #4]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ee:	4b10      	ldr	r3, [pc, #64]	@ (8009130 <vPortValidateInterruptPriority+0x84>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <vPortValidateInterruptPriority+0x88>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d90d      	bls.n	800911a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	b672      	cpsid	i
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	b662      	cpsie	i
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <vPortValidateInterruptPriority+0x6a>
	}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	e000e3f0 	.word	0xe000e3f0
 800912c:	20000888 	.word	0x20000888
 8009130:	e000ed0c 	.word	0xe000ed0c
 8009134:	2000088c 	.word	0x2000088c

08009138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	@ 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009140:	2300      	movs	r3, #0
 8009142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009144:	f7fe ffbe 	bl	80080c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009148:	4b5d      	ldr	r3, [pc, #372]	@ (80092c0 <pvPortMalloc+0x188>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009150:	f000 f920 	bl	8009394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009154:	4b5b      	ldr	r3, [pc, #364]	@ (80092c4 <pvPortMalloc+0x18c>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4013      	ands	r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 8094 	bne.w	800928a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d020      	beq.n	80091aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009168:	2208      	movs	r2, #8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d017      	beq.n	80091aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f023 0307 	bic.w	r3, r3, #7
 8009180:	3308      	adds	r3, #8
 8009182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00d      	beq.n	80091aa <pvPortMalloc+0x72>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	b672      	cpsid	i
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	b662      	cpsie	i
 80091a2:	617b      	str	r3, [r7, #20]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d06c      	beq.n	800928a <pvPortMalloc+0x152>
 80091b0:	4b45      	ldr	r3, [pc, #276]	@ (80092c8 <pvPortMalloc+0x190>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d867      	bhi.n	800928a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ba:	4b44      	ldr	r3, [pc, #272]	@ (80092cc <pvPortMalloc+0x194>)
 80091bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091be:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <pvPortMalloc+0x194>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091c4:	e004      	b.n	80091d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d903      	bls.n	80091e2 <pvPortMalloc+0xaa>
 80091da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f1      	bne.n	80091c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091e2:	4b37      	ldr	r3, [pc, #220]	@ (80092c0 <pvPortMalloc+0x188>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d04e      	beq.n	800928a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2208      	movs	r2, #8
 80091f2:	4413      	add	r3, r2
 80091f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	2308      	movs	r3, #8
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	d922      	bls.n	8009254 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800920e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <pvPortMalloc+0x104>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	613b      	str	r3, [r7, #16]
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800924e:	69b8      	ldr	r0, [r7, #24]
 8009250:	f000 f902 	bl	8009458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009254:	4b1c      	ldr	r3, [pc, #112]	@ (80092c8 <pvPortMalloc+0x190>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	4a1a      	ldr	r2, [pc, #104]	@ (80092c8 <pvPortMalloc+0x190>)
 8009260:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009262:	4b19      	ldr	r3, [pc, #100]	@ (80092c8 <pvPortMalloc+0x190>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b1a      	ldr	r3, [pc, #104]	@ (80092d0 <pvPortMalloc+0x198>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d203      	bcs.n	8009276 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800926e:	4b16      	ldr	r3, [pc, #88]	@ (80092c8 <pvPortMalloc+0x190>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a17      	ldr	r2, [pc, #92]	@ (80092d0 <pvPortMalloc+0x198>)
 8009274:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <pvPortMalloc+0x18c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	431a      	orrs	r2, r3
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800928a:	f7fe ff29 	bl	80080e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00d      	beq.n	80092b4 <pvPortMalloc+0x17c>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <pvPortMalloc+0x178>
	return pvReturn;
 80092b4:	69fb      	ldr	r3, [r7, #28]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3728      	adds	r7, #40	@ 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20004498 	.word	0x20004498
 80092c4:	200044a4 	.word	0x200044a4
 80092c8:	2000449c 	.word	0x2000449c
 80092cc:	20004490 	.word	0x20004490
 80092d0:	200044a0 	.word	0x200044a0

080092d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d04e      	beq.n	8009384 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092e6:	2308      	movs	r3, #8
 80092e8:	425b      	negs	r3, r3
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	4b24      	ldr	r3, [pc, #144]	@ (800938c <vPortFree+0xb8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <vPortFree+0x4a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <vPortFree+0x6e>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	60bb      	str	r3, [r7, #8]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	4b11      	ldr	r3, [pc, #68]	@ (800938c <vPortFree+0xb8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d019      	beq.n	8009384 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d115      	bne.n	8009384 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	4b0b      	ldr	r3, [pc, #44]	@ (800938c <vPortFree+0xb8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	43db      	mvns	r3, r3
 8009362:	401a      	ands	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009368:	f7fe feac 	bl	80080c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4b07      	ldr	r3, [pc, #28]	@ (8009390 <vPortFree+0xbc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4413      	add	r3, r2
 8009376:	4a06      	ldr	r2, [pc, #24]	@ (8009390 <vPortFree+0xbc>)
 8009378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800937a:	6938      	ldr	r0, [r7, #16]
 800937c:	f000 f86c 	bl	8009458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009380:	f7fe feae 	bl	80080e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009384:	bf00      	nop
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	200044a4 	.word	0x200044a4
 8009390:	2000449c 	.word	0x2000449c

08009394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800939a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800939e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093a0:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <prvHeapInit+0xac>)
 80093a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00c      	beq.n	80093c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3307      	adds	r3, #7
 80093b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0307 	bic.w	r3, r3, #7
 80093ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009440 <prvHeapInit+0xac>)
 80093c4:	4413      	add	r3, r2
 80093c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009444 <prvHeapInit+0xb0>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009444 <prvHeapInit+0xb0>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093e0:	2208      	movs	r2, #8
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0307 	bic.w	r3, r3, #7
 80093ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a15      	ldr	r2, [pc, #84]	@ (8009448 <prvHeapInit+0xb4>)
 80093f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093f6:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <prvHeapInit+0xb4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2200      	movs	r2, #0
 80093fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093fe:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <prvHeapInit+0xb4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <prvHeapInit+0xb4>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	4a0a      	ldr	r2, [pc, #40]	@ (800944c <prvHeapInit+0xb8>)
 8009422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	4a09      	ldr	r2, [pc, #36]	@ (8009450 <prvHeapInit+0xbc>)
 800942a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800942c:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <prvHeapInit+0xc0>)
 800942e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009432:	601a      	str	r2, [r3, #0]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	20000890 	.word	0x20000890
 8009444:	20004490 	.word	0x20004490
 8009448:	20004498 	.word	0x20004498
 800944c:	200044a0 	.word	0x200044a0
 8009450:	2000449c 	.word	0x2000449c
 8009454:	200044a4 	.word	0x200044a4

08009458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009460:	4b28      	ldr	r3, [pc, #160]	@ (8009504 <prvInsertBlockIntoFreeList+0xac>)
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e002      	b.n	800946c <prvInsertBlockIntoFreeList+0x14>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	429a      	cmp	r2, r3
 8009474:	d8f7      	bhi.n	8009466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d108      	bne.n	800949a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	441a      	add	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d118      	bne.n	80094e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b15      	ldr	r3, [pc, #84]	@ (8009508 <prvInsertBlockIntoFreeList+0xb0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d00d      	beq.n	80094d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	441a      	add	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e008      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <prvInsertBlockIntoFreeList+0xb0>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	e003      	b.n	80094e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d002      	beq.n	80094f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20004490 	.word	0x20004490
 8009508:	20004498 	.word	0x20004498

0800950c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af02      	add	r7, sp, #8
 8009512:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2220      	movs	r2, #32
 8009518:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	791b      	ldrb	r3, [r3, #4]
 8009522:	4619      	mov	r1, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	1d5a      	adds	r2, r3, #5
 8009528:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	2303      	movs	r3, #3
 8009530:	f7f9 fecc 	bl	80032cc <HAL_I2C_Master_Transmit>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8009550:	220f      	movs	r2, #15
 8009552:	2141      	movs	r1, #65	@ 0x41
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f80c 	bl	8009572 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	f043 0304 	orr.w	r3, r3, #4
 8009560:	b2db      	uxtb	r3, r3
 8009562:	4619      	mov	r1, r3
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 f81f 	bl	80095a8 <MAX581x_Reference>
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
 800957e:	4613      	mov	r3, r2
 8009580:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009588:	b2da      	uxtb	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	78ba      	ldrb	r2, [r7, #2]
 8009592:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff ffb6 	bl	800950c <MAX581x_WriteCommand>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff ff9d 	bl	800950c <MAX581x_WriteCommand>
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
 80095e6:	4613      	mov	r3, r2
 80095e8:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 80095f0:	883b      	ldrh	r3, [r7, #0]
 80095f2:	091b      	lsrs	r3, r3, #4
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 80095fc:	883b      	ldrh	r3, [r7, #0]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	011b      	lsls	r3, r3, #4
 8009602:	b2da      	uxtb	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff7f 	bl	800950c <MAX581x_WriteCommand>
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
 8009622:	4613      	mov	r3, r2
 8009624:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800962c:	b2da      	uxtb	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8009632:	883b      	ldrh	r3, [r7, #0]
 8009634:	091b      	lsrs	r3, r3, #4
 8009636:	b29b      	uxth	r3, r3
 8009638:	b2da      	uxtb	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800963e:	883b      	ldrh	r3, [r7, #0]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	b2da      	uxtb	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff ff5e 	bl	800950c <MAX581x_WriteCommand>
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8009658:	b084      	sub	sp, #16
 800965a:	b4b0      	push	{r4, r5, r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	f107 001c 	add.w	r0, r7, #28
 8009666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	461d      	mov	r5, r3
 800966e:	f107 041c 	add.w	r4, r7, #28
 8009672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009676:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800967a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009684:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	pid->error = 0;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f04f 0200 	mov.w	r2, #0
 800968e:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f04f 0200 	mov.w	r2, #0
 8009696:	625a      	str	r2, [r3, #36]	@ 0x24

	pid->lastMeasure = 0;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f04f 0200 	mov.w	r2, #0
 800969e:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->integral = 0;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	62da      	str	r2, [r3, #44]	@ 0x2c

	pid->enable = enable;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bcb0      	pop	{r4, r5, r7}
 80096ba:	b004      	add	sp, #16
 80096bc:	4770      	bx	lr

080096be <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 80096be:	b480      	push	{r7}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80096ca:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d006      	beq.n	80096e6 <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	629a      	str	r2, [r3, #40]	@ 0x28
		pid->output = reference;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 80096e4:	e085      	b.n	80097f2 <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80096f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80096f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	edd3 6a08 	vldr	s13, [r3, #32]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	if (pid->integral > pid->params.integralMax)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	edd3 7a05 	vldr	s15, [r3, #20]
 800972c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	dd04      	ble.n	8009740 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	695a      	ldr	r2, [r3, #20]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800973e:	e014      	b.n	800976a <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	edd3 7a05 	vldr	s15, [r3, #20]
 800974c:	eef1 7a67 	vneg.f32	s15, s15
 8009750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009758:	d507      	bpl.n	800976a <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	edd3 7a05 	vldr	s15, [r3, #20]
 8009760:	eef1 7a67 	vneg.f32	s15, s15
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8009770:	ed97 7a01 	vldr	s14, [r7, #4]
 8009774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009778:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	ed93 7a08 	vldr	s14, [r3, #32]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	edd3 7a00 	vldr	s15, [r3]
 8009788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8009792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	edd3 6a02 	vldr	s13, [r3, #8]
 800979c:	edd7 7a05 	vldr	s15, [r7, #20]
 80097a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (pid->output > pid->params.outputMax)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80097ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	dd04      	ble.n	80097ce <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80097cc:	e00e      	b.n	80097ec <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80097da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e2:	d503      	bpl.n	80097ec <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	pid->lastMeasure = measure;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8009808:	887b      	ldrh	r3, [r7, #2]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7f9 fcb2 	bl	8003176 <HAL_GPIO_TogglePin>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <Board_GetID>:

uint16_t Board_GetID()
{
 800981c:	b598      	push	{r3, r4, r7, lr}
 800981e:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8009820:	2102      	movs	r1, #2
 8009822:	481d      	ldr	r0, [pc, #116]	@ (8009898 <Board_GetID+0x7c>)
 8009824:	f7f9 fc76 	bl	8003114 <HAL_GPIO_ReadPin>
 8009828:	4603      	mov	r3, r0
 800982a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 800982c:	2101      	movs	r1, #1
 800982e:	481a      	ldr	r0, [pc, #104]	@ (8009898 <Board_GetID+0x7c>)
 8009830:	f7f9 fc70 	bl	8003114 <HAL_GPIO_ReadPin>
 8009834:	4603      	mov	r3, r0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8009836:	b21b      	sxth	r3, r3
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	b21b      	sxth	r3, r3
 800983c:	4323      	orrs	r3, r4
 800983e:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8009840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009844:	4815      	ldr	r0, [pc, #84]	@ (800989c <Board_GetID+0x80>)
 8009846:	f7f9 fc65 	bl	8003114 <HAL_GPIO_ReadPin>
 800984a:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 800984c:	b21b      	sxth	r3, r3
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	b21b      	sxth	r3, r3
 8009852:	4323      	orrs	r3, r4
 8009854:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8009856:	2104      	movs	r1, #4
 8009858:	4811      	ldr	r0, [pc, #68]	@ (80098a0 <Board_GetID+0x84>)
 800985a:	f7f9 fc5b 	bl	8003114 <HAL_GPIO_ReadPin>
 800985e:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8009860:	b21b      	sxth	r3, r3
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	b21b      	sxth	r3, r3
 8009866:	4323      	orrs	r3, r4
 8009868:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 800986a:	2110      	movs	r1, #16
 800986c:	480d      	ldr	r0, [pc, #52]	@ (80098a4 <Board_GetID+0x88>)
 800986e:	f7f9 fc51 	bl	8003114 <HAL_GPIO_ReadPin>
 8009872:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8009874:	b21b      	sxth	r3, r3
 8009876:	011b      	lsls	r3, r3, #4
 8009878:	b21b      	sxth	r3, r3
 800987a:	4323      	orrs	r3, r4
 800987c:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 800987e:	2110      	movs	r1, #16
 8009880:	4809      	ldr	r0, [pc, #36]	@ (80098a8 <Board_GetID+0x8c>)
 8009882:	f7f9 fc47 	bl	8003114 <HAL_GPIO_ReadPin>
 8009886:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 8009888:	b21b      	sxth	r3, r3
 800988a:	015b      	lsls	r3, r3, #5
 800988c:	b21b      	sxth	r3, r3
 800988e:	4323      	orrs	r3, r4
 8009890:	b21b      	sxth	r3, r3
 8009892:	b29b      	uxth	r3, r3
}
 8009894:	4618      	mov	r0, r3
 8009896:	bd98      	pop	{r3, r4, r7, pc}
 8009898:	40022400 	.word	0x40022400
 800989c:	40022000 	.word	0x40022000
 80098a0:	40020400 	.word	0x40020400
 80098a4:	40020800 	.word	0x40020800
 80098a8:	40021c00 	.word	0x40021c00
 80098ac:	00000000 	.word	0x00000000

080098b0 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7c1b      	ldrb	r3, [r3, #16]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d002      	beq.n	80098ca <Encoder_Update+0x1a>
		return 0;
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	e03a      	b.n	8009940 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 80098d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098de:	eef0 7ae7 	vabs.f32	s15, s15
 80098e2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80098e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ee:	d502      	bpl.n	80098f6 <Encoder_Update+0x46>
 80098f0:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8009960 <Encoder_Update+0xb0>
 80098f4:	e005      	b.n	8009902 <Encoder_Update+0x52>
 80098f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009902:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 800990e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009912:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800991a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8009958 <Encoder_Update+0xa8>
 800991e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8009922:	edd7 7a00 	vldr	s15, [r7]
 8009926:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009964 <Encoder_Update+0xb4>
 800992a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800992e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009932:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009936:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800993a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 800993e:	68fb      	ldr	r3, [r7, #12]
}
 8009940:	ee07 3a90 	vmov	s15, r3
 8009944:	eeb0 0a67 	vmov.f32	s0, s15
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	f3af 8000 	nop.w
 8009958:	54442d18 	.word	0x54442d18
 800995c:	400921fb 	.word	0x400921fb
 8009960:	00000000 	.word	0x00000000
 8009964:	46000000 	.word	0x46000000

08009968 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
 8009974:	4613      	mov	r3, r2
 8009976:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	78ba      	ldrb	r2, [r7, #2]
 800997c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	motorDevice->outputID = motorID;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	78fa      	ldrb	r2, [r7, #3]
 8009984:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motorDevice->refSpeed = 0;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	671a      	str	r2, [r3, #112]	@ 0x70
	motorDevice->measSpeed = 0;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f04f 0200 	mov.w	r2, #0
 8009996:	675a      	str	r2, [r3, #116]	@ 0x74
	Motor_Enable(motorDevice, enable);
 8009998:	78bb      	ldrb	r3, [r7, #2]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f853 	bl	8009a48 <Motor_Enable>
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed  * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 80099ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80099be:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8009a44 <Motor_CLDrive+0x98>
 80099c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80099d8:	eeb0 0a67 	vmov.f32	s0, s15
 80099dc:	4610      	mov	r0, r2
 80099de:	f7ff ff67 	bl	80098b0 <Encoder_Update>
 80099e2:	eef0 7a40 	vmov.f32	s15, s0
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 80099fa:	eef0 0a47 	vmov.f32	s1, s14
 80099fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009a02:	4610      	mov	r0, r2
 8009a04:	f7ff fe5b 	bl	80096be <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8009a0e:	eef0 7ae7 	vabs.f32	s15, s15
 8009a12:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8009a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1e:	d503      	bpl.n	8009a28 <Motor_CLDrive+0x7c>
		motorDevice->pid.output = 0.0;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f04f 0200 	mov.w	r2, #0
 8009a26:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8009a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f84b 	bl	8009ad0 <Motor_SetVoltage>
}
 8009a3a:	bf00      	nop
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	3cdd82fd 	.word	0x3cdd82fd

08009a48 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	78fa      	ldrb	r2, [r7, #3]
 8009a58:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4619      	mov	r1, r3
 8009a70:	f7f9 fb68 	bl	8003144 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 8009a74:	e008      	b.n	8009a88 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a80:	2201      	movs	r2, #1
 8009a82:	4619      	mov	r1, r3
 8009a84:	f7f9 fb5e 	bl	8003144 <HAL_GPIO_WritePin>
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d109      	bne.n	8009ab6 <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009aac:	2200      	movs	r2, #0
 8009aae:	4619      	mov	r1, r3
 8009ab0:	f7f9 fb48 	bl	8003144 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 8009ab4:	e008      	b.n	8009ac8 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	f7f9 fb3e 	bl	8003144 <HAL_GPIO_WritePin>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8009ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aea:	db1d      	blt.n	8009b28 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009af6:	2201      	movs	r2, #1
 8009af8:	4619      	mov	r1, r3
 8009afa:	f7f9 fb23 	bl	8003144 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8009afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b06:	ee17 3a90 	vmov	r3, s15
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8009b1e:	461a      	mov	r2, r3
 8009b20:	68b8      	ldr	r0, [r7, #8]
 8009b22:	f7ff fd78 	bl	8009616 <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 8009b26:	e01e      	b.n	8009b66 <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b32:	2200      	movs	r2, #0
 8009b34:	4619      	mov	r1, r3
 8009b36:	f7f9 fb05 	bl	8003144 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8009b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8009b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b46:	ee17 3a90 	vmov	r3, s15
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8009b5e:	461a      	mov	r2, r3
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f7ff fd58 	bl	8009616 <MAX581x_CodeLoad>
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6898      	ldr	r0, [r3, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8a5b      	ldrh	r3, [r3, #18]
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	4619      	mov	r1, r3
 8009b86:	f7f9 fadd 	bl	8003144 <HAL_GPIO_WritePin>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6858      	ldr	r0, [r3, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	8a1b      	ldrh	r3, [r3, #16]
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f7f9 facb 	bl	8003144 <HAL_GPIO_WritePin>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	607a      	str	r2, [r7, #4]
 8009bc2:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	887a      	ldrh	r2, [r7, #2]
 8009bd4:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8bba      	ldrh	r2, [r7, #28]
 8009be0:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009be2:	2101      	movs	r1, #1
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff ffd4 	bl	8009b92 <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8009bea:	2100      	movs	r1, #0
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7ff ffbe 	bl	8009b6e <nRF24_CE_State>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af02      	add	r7, sp, #8
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	f107 020f 	add.w	r2, r7, #15
 8009c0e:	1cf9      	adds	r1, r7, #3
 8009c10:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	2301      	movs	r3, #1
 8009c18:	f7fb fa6f 	bl	80050fa <HAL_SPI_TransmitReceive>
  return rxData;
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009c32:	2100      	movs	r1, #0
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ffac 	bl	8009b92 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	f003 031f 	and.w	r3, r3, #31
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff ffd8 	bl	8009bfa <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8009c4a:	21ff      	movs	r1, #255	@ 0xff
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff ffd4 	bl	8009bfa <nRF24_LL_RW>
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009c56:	2101      	movs	r1, #1
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff ff9a 	bl	8009b92 <nRF24_CSN_State>

  return value;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70fb      	strb	r3, [r7, #3]
 8009c74:	4613      	mov	r3, r2
 8009c76:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff ff89 	bl	8009b92 <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	2b1f      	cmp	r3, #31
 8009c84:	d812      	bhi.n	8009cac <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8009c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c8a:	f003 031f 	and.w	r3, r3, #31
 8009c8e:	b25b      	sxtb	r3, r3
 8009c90:	f043 0320 	orr.w	r3, r3, #32
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff ffad 	bl	8009bfa <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 8009ca0:	78bb      	ldrb	r3, [r7, #2]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff ffa8 	bl	8009bfa <nRF24_LL_RW>
 8009caa:	e015      	b.n	8009cd8 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff ffa2 	bl	8009bfa <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	2be1      	cmp	r3, #225	@ 0xe1
 8009cba:	d00d      	beq.n	8009cd8 <nRF24_WriteReg+0x70>
 8009cbc:	78fb      	ldrb	r3, [r7, #3]
 8009cbe:	2be2      	cmp	r3, #226	@ 0xe2
 8009cc0:	d00a      	beq.n	8009cd8 <nRF24_WriteReg+0x70>
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	2be3      	cmp	r3, #227	@ 0xe3
 8009cc6:	d007      	beq.n	8009cd8 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	2bff      	cmp	r3, #255	@ 0xff
 8009ccc:	d004      	beq.n	8009cd8 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 8009cce:	78bb      	ldrb	r3, [r7, #2]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff ff91 	bl	8009bfa <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009cd8:	2101      	movs	r1, #1
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff ff59 	bl	8009b92 <nRF24_CSN_State>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	72fb      	strb	r3, [r7, #11]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff ff47 	bl	8009b92 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8009d04:	7afb      	ldrb	r3, [r7, #11]
 8009d06:	4619      	mov	r1, r3
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff ff76 	bl	8009bfa <nRF24_LL_RW>
  while (count--)
 8009d0e:	e008      	b.n	8009d22 <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8009d10:	687c      	ldr	r4, [r7, #4]
 8009d12:	1c63      	adds	r3, r4, #1
 8009d14:	607b      	str	r3, [r7, #4]
 8009d16:	21ff      	movs	r1, #255	@ 0xff
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff ff6e 	bl	8009bfa <nRF24_LL_RW>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	7023      	strb	r3, [r4, #0]
  while (count--)
 8009d22:	7abb      	ldrb	r3, [r7, #10]
 8009d24:	1e5a      	subs	r2, r3, #1
 8009d26:	72ba      	strb	r2, [r7, #10]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f1      	bne.n	8009d10 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7ff ff2f 	bl	8009b92 <nRF24_CSN_State>
}
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd90      	pop	{r4, r7, pc}

08009d3c <nRF24_WriteMBReg>:

void nRF24_WriteMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	460b      	mov	r3, r1
 8009d4a:	72fb      	strb	r3, [r7, #11]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009d50:	2100      	movs	r1, #0
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7ff ff1d 	bl	8009b92 <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff ff4c 	bl	8009bfa <nRF24_LL_RW>
  while (count--)
 8009d62:	e007      	b.n	8009d74 <nRF24_WriteMBReg+0x38>
  {
    nRF24_LL_RW(device, *pBuf++);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff ff43 	bl	8009bfa <nRF24_LL_RW>
  while (count--)
 8009d74:	7abb      	ldrb	r3, [r7, #10]
 8009d76:	1e5a      	subs	r2, r3, #1
 8009d78:	72ba      	strb	r2, [r7, #10]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f2      	bne.n	8009d64 <nRF24_WriteMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009d7e:	2101      	movs	r1, #1
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff ff06 	bl	8009b92 <nRF24_CSN_State>
}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <nRF24_Init>:

void nRF24_Init(nRF24_Handler_t *device) {
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8009d96:	2208      	movs	r2, #8
 8009d98:	2100      	movs	r1, #0
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ff64 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8009da0:	223f      	movs	r2, #63	@ 0x3f
 8009da2:	2101      	movs	r1, #1
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff ff5f 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8009daa:	2203      	movs	r2, #3
 8009dac:	2102      	movs	r1, #2
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff ff5a 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 8009db4:	2203      	movs	r2, #3
 8009db6:	2103      	movs	r1, #3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff55 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	2104      	movs	r1, #4
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff ff50 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 8009dc8:	2202      	movs	r2, #2
 8009dca:	2105      	movs	r1, #5
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff ff4b 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8009dd2:	220e      	movs	r2, #14
 8009dd4:	2106      	movs	r1, #6
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff ff46 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2107      	movs	r1, #7
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7ff ff41 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 8009de6:	2200      	movs	r2, #0
 8009de8:	2111      	movs	r1, #17
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff ff3c 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 8009df0:	2200      	movs	r2, #0
 8009df2:	2112      	movs	r1, #18
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff37 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2113      	movs	r1, #19
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff ff32 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8009e04:	2200      	movs	r2, #0
 8009e06:	2114      	movs	r1, #20
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff ff2d 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2115      	movs	r1, #21
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff ff28 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2116      	movs	r1, #22
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff ff23 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 8009e22:	2200      	movs	r2, #0
 8009e24:	211c      	movs	r1, #28
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff ff1e 	bl	8009c68 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	211d      	movs	r1, #29
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff ff19 	bl	8009c68 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa62 	bl	800a300 <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fa52 	bl	800a2e6 <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa69 	bl	800a31a <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8009e48:	2101      	movs	r1, #1
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fea1 	bl	8009b92 <nRF24_CSN_State>
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff fedd 	bl	8009c26 <nRF24_ReadReg>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d104      	bne.n	8009e80 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	f043 0302 	orr.w	r3, r3, #2
 8009e7c:	73fb      	strb	r3, [r7, #15]
 8009e7e:	e003      	b.n	8009e88 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	f023 0302 	bic.w	r3, r3, #2
 8009e86:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff feea 	bl	8009c68 <nRF24_WriteReg>
}
 8009e94:	bf00      	nop
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff febb 	bl	8009c26 <nRF24_ReadReg>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	f023 0301 	bic.w	r3, r3, #1
 8009eba:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8009ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	b25a      	sxtb	r2, r3
 8009ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	b25b      	sxtb	r3, r3
 8009ece:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fec6 	bl	8009c68 <nRF24_WriteReg>
}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	2105      	movs	r1, #5
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff feb6 	bl	8009c68 <nRF24_WriteReg>
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	2b06      	cmp	r3, #6
 8009f16:	f200 813e 	bhi.w	800a196 <nRF24_SetAddr+0x292>
 8009f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f20 <nRF24_SetAddr+0x1c>)
 8009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f20:	08009f3d 	.word	0x08009f3d
 8009f24:	08009f93 	.word	0x08009f93
 8009f28:	08009fe9 	.word	0x08009fe9
 8009f2c:	0800a03f 	.word	0x0800a03f
 8009f30:	0800a095 	.word	0x0800a095
 8009f34:	0800a0eb 	.word	0x0800a0eb
 8009f38:	0800a141 	.word	0x0800a141
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8009f3c:	2103      	movs	r1, #3
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7ff fe71 	bl	8009c26 <nRF24_ReadReg>
 8009f44:	4603      	mov	r3, r0
 8009f46:	3301      	adds	r3, #1
 8009f48:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	4413      	add	r3, r2
 8009f50:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009f52:	2100      	movs	r1, #0
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff fe1c 	bl	8009b92 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	4a90      	ldr	r2, [pc, #576]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 8009f5e:	5cd3      	ldrb	r3, [r2, r3]
 8009f60:	f043 0320 	orr.w	r3, r3, #32
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	4619      	mov	r1, r3
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff fe46 	bl	8009bfa <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	1e5a      	subs	r2, r3, #1
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff fe3e 	bl	8009bfa <nRF24_LL_RW>
      } while (addr_width--);
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	1e5a      	subs	r2, r3, #1
 8009f82:	75fa      	strb	r2, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1f2      	bne.n	8009f6e <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8009f88:	2101      	movs	r1, #1
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff fe01 	bl	8009b92 <nRF24_CSN_State>
      break;
 8009f90:	e102      	b.n	800a198 <nRF24_SetAddr+0x294>

    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8009f92:	2103      	movs	r1, #3
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fe46 	bl	8009c26 <nRF24_ReadReg>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff fdf1 	bl	8009b92 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	4a7b      	ldr	r2, [pc, #492]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 8009fb4:	5cd3      	ldrb	r3, [r2, r3]
 8009fb6:	f043 0320 	orr.w	r3, r3, #32
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f7ff fe1b 	bl	8009bfa <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	1e5a      	subs	r2, r3, #1
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7ff fe13 	bl	8009bfa <nRF24_LL_RW>
      } while (addr_width--);
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	1e5a      	subs	r2, r3, #1
 8009fd8:	75fa      	strb	r2, [r7, #23]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1f2      	bne.n	8009fc4 <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8009fde:	2101      	movs	r1, #1
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7ff fdd6 	bl	8009b92 <nRF24_CSN_State>
      break;
 8009fe6:	e0d7      	b.n	800a198 <nRF24_SetAddr+0x294>

    case nRF24_PIPE2:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8009fe8:	2103      	movs	r1, #3
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff fe1b 	bl	8009c26 <nRF24_ReadReg>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8009ffe:	2100      	movs	r1, #0
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff fdc6 	bl	8009b92 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	4a65      	ldr	r2, [pc, #404]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
 800a00c:	f043 0320 	orr.w	r3, r3, #32
 800a010:	b2db      	uxtb	r3, r3
 800a012:	4619      	mov	r1, r3
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7ff fdf0 	bl	8009bfa <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	1e5a      	subs	r2, r3, #1
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	4619      	mov	r1, r3
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fde8 	bl	8009bfa <nRF24_LL_RW>
	  } while (addr_width--);
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	1e5a      	subs	r2, r3, #1
 800a02e:	75fa      	strb	r2, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1f2      	bne.n	800a01a <nRF24_SetAddr+0x116>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a034:	2101      	movs	r1, #1
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff fdab 	bl	8009b92 <nRF24_CSN_State>
	  break;
 800a03c:	e0ac      	b.n	800a198 <nRF24_SetAddr+0x294>

    case nRF24_PIPE3:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a03e:	2103      	movs	r1, #3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fdf0 	bl	8009c26 <nRF24_ReadReg>
 800a046:	4603      	mov	r3, r0
 800a048:	3301      	adds	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	4413      	add	r3, r2
 800a052:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a054:	2100      	movs	r1, #0
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7ff fd9b 	bl	8009b92 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	4a50      	ldr	r2, [pc, #320]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 800a060:	5cd3      	ldrb	r3, [r2, r3]
 800a062:	f043 0320 	orr.w	r3, r3, #32
 800a066:	b2db      	uxtb	r3, r3
 800a068:	4619      	mov	r1, r3
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fdc5 	bl	8009bfa <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	1e5a      	subs	r2, r3, #1
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	4619      	mov	r1, r3
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fdbd 	bl	8009bfa <nRF24_LL_RW>
	  } while (addr_width--);
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	1e5a      	subs	r2, r3, #1
 800a084:	75fa      	strb	r2, [r7, #23]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1f2      	bne.n	800a070 <nRF24_SetAddr+0x16c>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a08a:	2101      	movs	r1, #1
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7ff fd80 	bl	8009b92 <nRF24_CSN_State>
	  break;
 800a092:	e081      	b.n	800a198 <nRF24_SetAddr+0x294>


    case nRF24_PIPE4:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a094:	2103      	movs	r1, #3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fdc5 	bl	8009c26 <nRF24_ReadReg>
 800a09c:	4603      	mov	r3, r0
 800a09e:	3301      	adds	r3, #1
 800a0a0:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff fd70 	bl	8009b92 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	4a3a      	ldr	r2, [pc, #232]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 800a0b6:	5cd3      	ldrb	r3, [r2, r3]
 800a0b8:	f043 0320 	orr.w	r3, r3, #32
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	4619      	mov	r1, r3
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff fd9a 	bl	8009bfa <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	1e5a      	subs	r2, r3, #1
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff fd92 	bl	8009bfa <nRF24_LL_RW>
	  } while (addr_width--);
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
 800a0d8:	1e5a      	subs	r2, r3, #1
 800a0da:	75fa      	strb	r2, [r7, #23]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f2      	bne.n	800a0c6 <nRF24_SetAddr+0x1c2>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f7ff fd55 	bl	8009b92 <nRF24_CSN_State>
	  break;
 800a0e8:	e056      	b.n	800a198 <nRF24_SetAddr+0x294>


    case nRF24_PIPE5:

    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a0ea:	2103      	movs	r1, #3
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff fd9a 	bl	8009c26 <nRF24_ReadReg>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a100:	2100      	movs	r1, #0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fd45 	bl	8009b92 <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a108:	7afb      	ldrb	r3, [r7, #11]
 800a10a:	4a25      	ldr	r2, [pc, #148]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 800a10c:	5cd3      	ldrb	r3, [r2, r3]
 800a10e:	f043 0320 	orr.w	r3, r3, #32
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fd6f 	bl	8009bfa <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	1e5a      	subs	r2, r3, #1
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	4619      	mov	r1, r3
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff fd67 	bl	8009bfa <nRF24_LL_RW>
	  } while (addr_width--);
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	1e5a      	subs	r2, r3, #1
 800a130:	75fa      	strb	r2, [r7, #23]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1f2      	bne.n	800a11c <nRF24_SetAddr+0x218>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 800a136:	2101      	movs	r1, #1
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f7ff fd2a 	bl	8009b92 <nRF24_CSN_State>
	  break;
 800a13e:	e02b      	b.n	800a198 <nRF24_SetAddr+0x294>


    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800a140:	2103      	movs	r1, #3
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fd6f 	bl	8009c26 <nRF24_ReadReg>
 800a148:	4603      	mov	r3, r0
 800a14a:	3301      	adds	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 800a156:	2100      	movs	r1, #0
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff fd1a 	bl	8009b92 <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a15e:	7afb      	ldrb	r3, [r7, #11]
 800a160:	4a0f      	ldr	r2, [pc, #60]	@ (800a1a0 <nRF24_SetAddr+0x29c>)
 800a162:	5cd3      	ldrb	r3, [r2, r3]
 800a164:	f043 0320 	orr.w	r3, r3, #32
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	4619      	mov	r1, r3
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff fd44 	bl	8009bfa <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	1e5a      	subs	r2, r3, #1
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	4619      	mov	r1, r3
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7ff fd3c 	bl	8009bfa <nRF24_LL_RW>
      } while (addr_width--);
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	1e5a      	subs	r2, r3, #1
 800a186:	75fa      	strb	r2, [r7, #23]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f2      	bne.n	800a172 <nRF24_SetAddr+0x26e>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 800a18c:	2101      	movs	r1, #1
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7ff fcff 	bl	8009b92 <nRF24_CSN_State>
      break;
 800a194:	e000      	b.n	800a198 <nRF24_SetAddr+0x294>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 800a196:	bf00      	nop
  }
}
 800a198:	bf00      	nop
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	0800a904 	.word	0x0800a904

0800a1a4 <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	70fb      	strb	r3, [r7, #3]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70bb      	strb	r3, [r7, #2]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800a1be:	2102      	movs	r1, #2
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff fd30 	bl	8009c26 <nRF24_ReadReg>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	b25a      	sxtb	r2, r3
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d2:	b25b      	sxtb	r3, r3
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1de:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	2102      	movs	r1, #2
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff fd3e 	bl	8009c68 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a258 <nRF24_SetRXPipe+0xb4>)
 800a1f0:	5cd1      	ldrb	r1, [r2, r3]
 800a1f2:	787b      	ldrb	r3, [r7, #1]
 800a1f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fd33 	bl	8009c68 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800a202:	2101      	movs	r1, #1
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff fd0e 	bl	8009c26 <nRF24_ReadReg>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 800a20e:	78bb      	ldrb	r3, [r7, #2]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d10a      	bne.n	800a22a <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	2201      	movs	r2, #1
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	b25a      	sxtb	r2, r3
 800a21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a222:	4313      	orrs	r3, r2
 800a224:	b25b      	sxtb	r3, r3
 800a226:	73fb      	strb	r3, [r7, #15]
 800a228:	e00b      	b.n	800a242 <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	2201      	movs	r2, #1
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	b25b      	sxtb	r3, r3
 800a234:	43db      	mvns	r3, r3
 800a236:	b25a      	sxtb	r2, r3
 800a238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a23c:	4013      	ands	r3, r2
 800a23e:	b25b      	sxtb	r3, r3
 800a240:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	461a      	mov	r2, r3
 800a246:	2101      	movs	r1, #1
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff fd0d 	bl	8009c68 <nRF24_WriteReg>
}
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	0800a8fc 	.word	0x0800a8fc

0800a25c <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	d905      	bls.n	800a27a <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 800a26e:	2200      	movs	r2, #0
 800a270:	2101      	movs	r1, #1
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff fcf8 	bl	8009c68 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 800a278:	e017      	b.n	800a2aa <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800a27a:	2101      	movs	r1, #1
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff fcd2 	bl	8009c26 <nRF24_ReadReg>
 800a282:	4603      	mov	r3, r0
 800a284:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	2201      	movs	r2, #1
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	43db      	mvns	r3, r3
 800a292:	b25a      	sxtb	r2, r3
 800a294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a298:	4013      	ands	r3, r2
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fcdf 	bl	8009c68 <nRF24_WriteReg>
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a2ba:	2107      	movs	r1, #7
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff fcb2 	bl	8009c26 <nRF24_ReadReg>
 800a2c2:	4603      	mov	r3, r0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <nRF24_GetConfig>:

uint8_t nRF24_GetConfig(nRF24_Handler_t *device) {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7ff fca5 	bl	8009c26 <nRF24_ReadReg>
 800a2dc:	4603      	mov	r3, r0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800a2ee:	22ff      	movs	r2, #255	@ 0xff
 800a2f0:	21e1      	movs	r1, #225	@ 0xe1
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fcb8 	bl	8009c68 <nRF24_WriteReg>
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800a308:	22ff      	movs	r2, #255	@ 0xff
 800a30a:	21e2      	movs	r1, #226	@ 0xe2
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff fcab 	bl	8009c68 <nRF24_WriteReg>
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a322:	2107      	movs	r1, #7
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fc7e 	bl	8009c26 <nRF24_ReadReg>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a334:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	461a      	mov	r2, r3
 800a33a:	2107      	movs	r1, #7
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff fc93 	bl	8009c68 <nRF24_WriteReg>
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <nRF24_ClearIRQFlagsTx>:

void nRF24_ClearIRQFlagsTx(nRF24_Handler_t *device) {
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a352:	2107      	movs	r1, #7
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff fc66 	bl	8009c26 <nRF24_ReadReg>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_TX;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800a364:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	461a      	mov	r2, r3
 800a36a:	2107      	movs	r1, #7
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff fc7b 	bl	8009c68 <nRF24_WriteReg>
}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <nRF24_ClearIRQFlagsRx>:

void nRF24_ClearIRQFlagsRx(nRF24_Handler_t *device) {
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DRbits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800a382:	2107      	movs	r1, #7
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff fc4e 	bl	8009c26 <nRF24_ReadReg>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_RX;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a394:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	461a      	mov	r2, r3
 800a39a:	2107      	movs	r1, #7
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff fc63 	bl	8009c68 <nRF24_WriteReg>
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <nRF24_WritePayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	71fb      	strb	r3, [r7, #7]
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	21a0      	movs	r1, #160	@ 0xa0
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fcbc 	bl	8009d3c <nRF24_WriteMBReg>
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <nRF24_ReadPayload>:

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800a3d8:	2107      	movs	r1, #7
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff fc23 	bl	8009c26 <nRF24_ReadReg>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	105b      	asrs	r3, r3, #1
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d817      	bhi.n	800a422 <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a434 <nRF24_ReadPayload+0x68>)
 800a3f6:	5cd3      	ldrb	r3, [r2, r3]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f7ff fc13 	bl	8009c26 <nRF24_ReadReg>
 800a400:	4603      	mov	r3, r0
 800a402:	461a      	mov	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d006      	beq.n	800a41e <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	2161      	movs	r1, #97	@ 0x61
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fc65 	bl	8009ce8 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	e003      	b.n	800a42a <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 800a428:	23ff      	movs	r3, #255	@ 0xff
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	0800a8fc 	.word	0x0800a8fc

0800a438 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800a444:	887b      	ldrh	r3, [r7, #2]
 800a446:	0a1b      	lsrs	r3, r3, #8
 800a448:	b29b      	uxth	r3, r3
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 800a450:	887b      	ldrh	r3, [r7, #2]
 800a452:	b2da      	uxtb	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	791b      	ldrb	r3, [r3, #4]
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6818      	ldr	r0, [r3, #0]
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	b299      	uxth	r1, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f103 0209 	add.w	r2, r3, #9
 800a46e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2302      	movs	r3, #2
 800a476:	f7f8 ff29 	bl	80032cc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6818      	ldr	r0, [r3, #0]
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	b299      	uxth	r1, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	1d5a      	adds	r2, r3, #5
 800a486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	2301      	movs	r3, #1
 800a48e:	f7f9 f811 	bl	80034b4 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	795b      	ldrb	r3, [r3, #5]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af02      	add	r7, sp, #8
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	807b      	strh	r3, [r7, #2]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800a4ae:	887b      	ldrh	r3, [r7, #2]
 800a4b0:	0a1b      	lsrs	r3, r3, #8
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 800a4ba:	887b      	ldrh	r3, [r7, #2]
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	791b      	ldrb	r3, [r3, #4]
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	787a      	ldrb	r2, [r7, #1]
 800a4ce:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	b299      	uxth	r1, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 0209 	add.w	r2, r3, #9
 800a4de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	f7f8 fef1 	bl	80032cc <HAL_I2C_Master_Transmit>
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	79fa      	ldrb	r2, [r7, #7]
 800a50a:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff ff92 	bl	800a438 <VL6180X_Read8>
 800a514:	4603      	mov	r3, r0
 800a516:	2bb4      	cmp	r3, #180	@ 0xb4
 800a518:	d001      	beq.n	800a51e <VL6180X_Init+0x2c>
    return false;
 800a51a:	2300      	movs	r3, #0
 800a51c:	e011      	b.n	800a542 <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 800a51e:	2116      	movs	r1, #22
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff ff89 	bl	800a438 <VL6180X_Read8>
 800a526:	4603      	mov	r3, r0
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d007      	beq.n	800a540 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 f80a 	bl	800a54a <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800a536:	2200      	movs	r2, #0
 800a538:	2116      	movs	r1, #22
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff ffaf 	bl	800a49e <VL6180X_Write8>
  }

  return true;
 800a540:	2301      	movs	r3, #1
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 800a552:	2201      	movs	r2, #1
 800a554:	f240 2107 	movw	r1, #519	@ 0x207
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff ffa0 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 800a55e:	2201      	movs	r2, #1
 800a560:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff ff9a 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 800a56a:	2200      	movs	r2, #0
 800a56c:	2196      	movs	r1, #150	@ 0x96
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff ff95 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 800a574:	22fd      	movs	r2, #253	@ 0xfd
 800a576:	2197      	movs	r1, #151	@ 0x97
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff ff90 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 800a57e:	2200      	movs	r2, #0
 800a580:	21e3      	movs	r1, #227	@ 0xe3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff ff8b 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 800a588:	2204      	movs	r2, #4
 800a58a:	21e4      	movs	r1, #228	@ 0xe4
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ff86 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 800a592:	2202      	movs	r2, #2
 800a594:	21e5      	movs	r1, #229	@ 0xe5
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff ff81 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 800a59c:	2201      	movs	r2, #1
 800a59e:	21e6      	movs	r1, #230	@ 0xe6
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ff7c 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	21e7      	movs	r1, #231	@ 0xe7
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff ff77 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	21f5      	movs	r1, #245	@ 0xf5
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff ff72 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 800a5ba:	2205      	movs	r2, #5
 800a5bc:	21d9      	movs	r1, #217	@ 0xd9
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff ff6d 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 800a5c4:	22ce      	movs	r2, #206	@ 0xce
 800a5c6:	21db      	movs	r1, #219	@ 0xdb
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff68 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	21dc      	movs	r1, #220	@ 0xdc
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff ff63 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 800a5d8:	22f8      	movs	r2, #248	@ 0xf8
 800a5da:	21dd      	movs	r1, #221	@ 0xdd
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff ff5e 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	219f      	movs	r1, #159	@ 0x9f
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff ff59 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 800a5ec:	223c      	movs	r2, #60	@ 0x3c
 800a5ee:	21a3      	movs	r1, #163	@ 0xa3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff ff54 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	21b7      	movs	r1, #183	@ 0xb7
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff ff4f 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 800a600:	223c      	movs	r2, #60	@ 0x3c
 800a602:	21bb      	movs	r1, #187	@ 0xbb
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff ff4a 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 800a60a:	2209      	movs	r2, #9
 800a60c:	21b2      	movs	r1, #178	@ 0xb2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff ff45 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800a614:	2209      	movs	r2, #9
 800a616:	21ca      	movs	r1, #202	@ 0xca
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ff40 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 800a61e:	2201      	movs	r2, #1
 800a620:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff ff3a 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 800a62a:	2217      	movs	r2, #23
 800a62c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff ff34 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800a636:	2200      	movs	r2, #0
 800a638:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff ff2e 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800a642:	2205      	movs	r2, #5
 800a644:	21ff      	movs	r1, #255	@ 0xff
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff ff29 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 800a64c:	2205      	movs	r2, #5
 800a64e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff ff23 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 800a658:	2205      	movs	r2, #5
 800a65a:	f240 1199 	movw	r1, #409	@ 0x199
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff ff1d 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800a664:	221b      	movs	r2, #27
 800a666:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff ff17 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 800a670:	223e      	movs	r2, #62	@ 0x3e
 800a672:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff ff11 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 800a67c:	221f      	movs	r2, #31
 800a67e:	f240 11a7 	movw	r1, #423	@ 0x1a7
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff ff0b 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 800a688:	2200      	movs	r2, #0
 800a68a:	2130      	movs	r1, #48	@ 0x30
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff ff06 	bl	800a49e <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 800a692:	2210      	movs	r2, #16
 800a694:	2111      	movs	r1, #17
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff ff01 	bl	800a49e <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 800a69c:	2230      	movs	r2, #48	@ 0x30
 800a69e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff fefb 	bl	800a49e <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 800a6a8:	2246      	movs	r2, #70	@ 0x46
 800a6aa:	213f      	movs	r1, #63	@ 0x3f
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff fef6 	bl	800a49e <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 800a6b2:	22ff      	movs	r2, #255	@ 0xff
 800a6b4:	2131      	movs	r1, #49	@ 0x31
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff fef1 	bl	800a49e <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 800a6bc:	2263      	movs	r2, #99	@ 0x63
 800a6be:	2141      	movs	r1, #65	@ 0x41
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff feec 	bl	800a49e <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	212e      	movs	r1, #46	@ 0x2e
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff fee7 	bl	800a49e <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 800a6d0:	2209      	movs	r2, #9
 800a6d2:	211b      	movs	r1, #27
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff fee2 	bl	800a49e <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 800a6da:	2231      	movs	r2, #49	@ 0x31
 800a6dc:	213e      	movs	r1, #62	@ 0x3e
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff fedd 	bl	800a49e <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 800a6e4:	2224      	movs	r2, #36	@ 0x24
 800a6e6:	2114      	movs	r1, #20
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fed8 	bl	800a49e <VL6180X_Write8>
                        // Ready threshold event'
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 800a6fe:	bf00      	nop
 800a700:	214d      	movs	r1, #77	@ 0x4d
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fe98 	bl	800a438 <VL6180X_Read8>
 800a708:	4603      	mov	r3, r0
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0f6      	beq.n	800a700 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800a712:	2201      	movs	r2, #1
 800a714:	2118      	movs	r1, #24
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fec1 	bl	800a49e <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 800a71c:	bf00      	nop
 800a71e:	214f      	movs	r1, #79	@ 0x4f
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff fe89 	bl	800a438 <VL6180X_Read8>
 800a726:	4603      	mov	r3, r0
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0f6      	beq.n	800a71e <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 800a730:	2162      	movs	r1, #98	@ 0x62
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff fe80 	bl	800a438 <VL6180X_Read8>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 800a73c:	2207      	movs	r2, #7
 800a73e:	2115      	movs	r1, #21
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff feac 	bl	800a49e <VL6180X_Write8>

  return range;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <memset>:
 800a750:	4402      	add	r2, r0
 800a752:	4603      	mov	r3, r0
 800a754:	4293      	cmp	r3, r2
 800a756:	d100      	bne.n	800a75a <memset+0xa>
 800a758:	4770      	bx	lr
 800a75a:	f803 1b01 	strb.w	r1, [r3], #1
 800a75e:	e7f9      	b.n	800a754 <memset+0x4>

0800a760 <__errno>:
 800a760:	4b01      	ldr	r3, [pc, #4]	@ (800a768 <__errno+0x8>)
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	20000020 	.word	0x20000020

0800a76c <__libc_init_array>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	4d0d      	ldr	r5, [pc, #52]	@ (800a7a4 <__libc_init_array+0x38>)
 800a770:	4c0d      	ldr	r4, [pc, #52]	@ (800a7a8 <__libc_init_array+0x3c>)
 800a772:	1b64      	subs	r4, r4, r5
 800a774:	10a4      	asrs	r4, r4, #2
 800a776:	2600      	movs	r6, #0
 800a778:	42a6      	cmp	r6, r4
 800a77a:	d109      	bne.n	800a790 <__libc_init_array+0x24>
 800a77c:	4d0b      	ldr	r5, [pc, #44]	@ (800a7ac <__libc_init_array+0x40>)
 800a77e:	4c0c      	ldr	r4, [pc, #48]	@ (800a7b0 <__libc_init_array+0x44>)
 800a780:	f000 f84a 	bl	800a818 <_init>
 800a784:	1b64      	subs	r4, r4, r5
 800a786:	10a4      	asrs	r4, r4, #2
 800a788:	2600      	movs	r6, #0
 800a78a:	42a6      	cmp	r6, r4
 800a78c:	d105      	bne.n	800a79a <__libc_init_array+0x2e>
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	f855 3b04 	ldr.w	r3, [r5], #4
 800a794:	4798      	blx	r3
 800a796:	3601      	adds	r6, #1
 800a798:	e7ee      	b.n	800a778 <__libc_init_array+0xc>
 800a79a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79e:	4798      	blx	r3
 800a7a0:	3601      	adds	r6, #1
 800a7a2:	e7f2      	b.n	800a78a <__libc_init_array+0x1e>
 800a7a4:	0800a914 	.word	0x0800a914
 800a7a8:	0800a914 	.word	0x0800a914
 800a7ac:	0800a914 	.word	0x0800a914
 800a7b0:	0800a918 	.word	0x0800a918

0800a7b4 <memcpy>:
 800a7b4:	440a      	add	r2, r1
 800a7b6:	4291      	cmp	r1, r2
 800a7b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7bc:	d100      	bne.n	800a7c0 <memcpy+0xc>
 800a7be:	4770      	bx	lr
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7ca:	4291      	cmp	r1, r2
 800a7cc:	d1f9      	bne.n	800a7c2 <memcpy+0xe>
 800a7ce:	bd10      	pop	{r4, pc}

0800a7d0 <sqrt>:
 800a7d0:	b508      	push	{r3, lr}
 800a7d2:	ed2d 8b04 	vpush	{d8-d9}
 800a7d6:	eeb0 8b40 	vmov.f64	d8, d0
 800a7da:	f000 f819 	bl	800a810 <__ieee754_sqrt>
 800a7de:	eeb4 8b48 	vcmp.f64	d8, d8
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	d60c      	bvs.n	800a802 <sqrt+0x32>
 800a7e8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800a808 <sqrt+0x38>
 800a7ec:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f4:	d505      	bpl.n	800a802 <sqrt+0x32>
 800a7f6:	f7ff ffb3 	bl	800a760 <__errno>
 800a7fa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a7fe:	2321      	movs	r3, #33	@ 0x21
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	ecbd 8b04 	vpop	{d8-d9}
 800a806:	bd08      	pop	{r3, pc}
	...

0800a810 <__ieee754_sqrt>:
 800a810:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a814:	4770      	bx	lr
	...

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
