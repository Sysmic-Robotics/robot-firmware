
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009488  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800975c  0800975c  0000b090  2**0
                  CONTENTS
  4 .ARM          00000008  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009764  08009764  0000b090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009764  08009764  0000a764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009768  08009768  0000a768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800976c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004468  20000090  080097fc  0000b090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044f8  080097fc  0000b4f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e600  00000000  00000000  0000b0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d2  00000000  00000000  000296be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134b  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cefc  00000000  00000000  00030d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022496  00000000  00000000  0005dc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001042b3  00000000  00000000  000800a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c8  00000000  00000000  0018439c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0018ac64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	08009670 	.word	0x08009670

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	08009670 	.word	0x08009670

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <BallDetectorFunction>:
#include "ball_detector_task.h"
#include "system_globals.h"
#include "vl6180x.h"
#include <string.h>

void BallDetectorFunction(void const * argument) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8000574:	2229      	movs	r2, #41	@ 0x29
 8000576:	4928      	ldr	r1, [pc, #160]	@ (8000618 <BallDetectorFunction+0xac>)
 8000578:	4828      	ldr	r0, [pc, #160]	@ (800061c <BallDetectorFunction+0xb0>)
 800057a:	f008 fee6 	bl	800934a <VL6180X_Init>
    ball_range = VL6180X_ReadRange(&range_sensor);
 800057e:	4827      	ldr	r0, [pc, #156]	@ (800061c <BallDetectorFunction+0xb0>)
 8000580:	f008 ffe5 	bl	800954e <VL6180X_ReadRange>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b25      	ldr	r3, [pc, #148]	@ (8000620 <BallDetectorFunction+0xb4>)
 800058a:	801a      	strh	r2, [r3, #0]
    memset(ball_meas_set, ball_range, 10);
 800058c:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <BallDetectorFunction+0xb4>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	220a      	movs	r2, #10
 8000592:	4619      	mov	r1, r3
 8000594:	4823      	ldr	r0, [pc, #140]	@ (8000624 <BallDetectorFunction+0xb8>)
 8000596:	f009 f807 	bl	80095a8 <memset>
    for (;;) {
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 800059a:	4820      	ldr	r0, [pc, #128]	@ (800061c <BallDetectorFunction+0xb0>)
 800059c:	f008 ffd7 	bl	800954e <VL6180X_ReadRange>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005a6:	701a      	strb	r2, [r3, #0]
        ball_accum = ball_meas_set[0];
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005b0:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 9; i > 0; i--) {
 80005b2:	2309      	movs	r3, #9
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e013      	b.n	80005e0 <BallDetectorFunction+0x74>
            ball_accum += ball_meas_set[i];
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005ca:	801a      	strh	r2, [r3, #0]
            ball_meas_set[i] = ball_meas_set[i - 1];
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4914      	ldr	r1, [pc, #80]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005d4:	5c89      	ldrb	r1, [r1, r2]
 80005d6:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <BallDetectorFunction+0xb8>)
 80005d8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 9; i > 0; i--) {
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	3b01      	subs	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1e8      	bne.n	80005b8 <BallDetectorFunction+0x4c>
        }
        ball_range = ball_accum / 10;
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <BallDetectorFunction+0xbc>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4a10      	ldr	r2, [pc, #64]	@ (800062c <BallDetectorFunction+0xc0>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <BallDetectorFunction+0xb4>)
 80005f6:	801a      	strh	r2, [r3, #0]
        if (ball_range < VL6180X_THRESHOLD) {
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <BallDetectorFunction+0xb4>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b40      	cmp	r3, #64	@ 0x40
 80005fe:	d803      	bhi.n	8000608 <BallDetectorFunction+0x9c>
            ball_posession = 0x01;
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <BallDetectorFunction+0xc4>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e002      	b.n	800060e <BallDetectorFunction+0xa2>
        } else {
            ball_posession = 0x00;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <BallDetectorFunction+0xc4>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
        }
        osDelay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f005 f91c 	bl	800584c <osDelay>
        ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 8000614:	e7c1      	b.n	800059a <BallDetectorFunction+0x2e>
 8000616:	bf00      	nop
 8000618:	20000488 	.word	0x20000488
 800061c:	200003ac 	.word	0x200003ac
 8000620:	200003be 	.word	0x200003be
 8000624:	200003c4 	.word	0x200003c4
 8000628:	200003c0 	.word	0x200003c0
 800062c:	cccccccd 	.word	0xcccccccd
 8000630:	200003bc 	.word	0x200003bc

08000634 <DriveFunction>:
#ifndef KICKER_START
#define KICKER_START 2
#endif

void DriveFunction(void const * argument)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b098      	sub	sp, #96	@ 0x60
 8000638:	af06      	add	r7, sp, #24
 800063a:	6078      	str	r0, [r7, #4]
    // Init PID sampler
    uint32_t timeToWait = osKernelSysTick();
 800063c:	f005 f8cf 	bl	80057de <osKernelSysTick>
 8000640:	4603      	mov	r3, r0
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
    // Init robot_id
    robot_id = Board_GetID();
 8000644:	f008 f812 	bl	800866c <Board_GetID>
 8000648:	4603      	mov	r3, r0
 800064a:	b29a      	uxth	r2, r3
 800064c:	4bbd      	ldr	r3, [pc, #756]	@ (8000944 <DriveFunction+0x310>)
 800064e:	801a      	strh	r2, [r3, #0]

    // Init wheels motors DAC: 2.0[V] ref
    MAX581x_Handler_t driveDAC;
    MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 8000650:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000654:	2202      	movs	r2, #2
 8000656:	49bc      	ldr	r1, [pc, #752]	@ (8000948 <DriveFunction+0x314>)
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fe97 	bl	800838c <MAX581x_Init>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 800065e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fedf 	bl	800842a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 800066c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000670:	2200      	movs	r2, #0
 8000672:	2101      	movs	r1, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f007 fed8 	bl	800842a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 800067a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f007 fed1 	bl	800842a <MAX581x_Code>
    MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 8000688:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800068c:	2200      	movs	r2, #0
 800068e:	2103      	movs	r1, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f007 feca 	bl	800842a <MAX581x_Code>

    // Init dribbler motor DAC: 2.0[V] ref
    MAX581x_Handler_t dribblerDAC;
    MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 8000696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800069a:	2202      	movs	r2, #2
 800069c:	49ab      	ldr	r1, [pc, #684]	@ (800094c <DriveFunction+0x318>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 fe74 	bl	800838c <MAX581x_Init>
    MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 80006a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 febc 	bl	800842a <MAX581x_Code>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b8:	48a5      	ldr	r0, [pc, #660]	@ (8000950 <DriveFunction+0x31c>)
 80006ba:	f002 f8e9 	bl	8002890 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	48a3      	ldr	r0, [pc, #652]	@ (8000950 <DriveFunction+0x31c>)
 80006c4:	f002 f8e4 	bl	8002890 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2140      	movs	r1, #64	@ 0x40
 80006cc:	48a0      	ldr	r0, [pc, #640]	@ (8000950 <DriveFunction+0x31c>)
 80006ce:	f002 f8df 	bl	8002890 <HAL_GPIO_WritePin>

    // Config motors GPIO and TIM
    // Motor 1
    motor[0].enablePin.GPIOx = GPIOA;
 80006d2:	4ba0      	ldr	r3, [pc, #640]	@ (8000954 <DriveFunction+0x320>)
 80006d4:	4aa0      	ldr	r2, [pc, #640]	@ (8000958 <DriveFunction+0x324>)
 80006d6:	655a      	str	r2, [r3, #84]	@ 0x54
    motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 80006d8:	4b9e      	ldr	r3, [pc, #632]	@ (8000954 <DriveFunction+0x320>)
 80006da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006de:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    motor[0].dirPin.GPIOx = GPIOA;
 80006e2:	4b9c      	ldr	r3, [pc, #624]	@ (8000954 <DriveFunction+0x320>)
 80006e4:	4a9c      	ldr	r2, [pc, #624]	@ (8000958 <DriveFunction+0x324>)
 80006e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 80006e8:	4b9a      	ldr	r3, [pc, #616]	@ (8000954 <DriveFunction+0x320>)
 80006ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    motor[0].brakePin.GPIOx = GPIOA;
 80006f2:	4b98      	ldr	r3, [pc, #608]	@ (8000954 <DriveFunction+0x320>)
 80006f4:	4a98      	ldr	r2, [pc, #608]	@ (8000958 <DriveFunction+0x324>)
 80006f6:	665a      	str	r2, [r3, #100]	@ 0x64
    motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 80006f8:	4b96      	ldr	r3, [pc, #600]	@ (8000954 <DriveFunction+0x320>)
 80006fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    motor[0].encoder.count = &TIM3->CNT;
 8000702:	4b94      	ldr	r3, [pc, #592]	@ (8000954 <DriveFunction+0x320>)
 8000704:	4a95      	ldr	r2, [pc, #596]	@ (800095c <DriveFunction+0x328>)
 8000706:	641a      	str	r2, [r3, #64]	@ 0x40
    motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 8000708:	4b95      	ldr	r3, [pc, #596]	@ (8000960 <DriveFunction+0x32c>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000714:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8000964 <DriveFunction+0x330>
 8000720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000724:	4b8b      	ldr	r3, [pc, #556]	@ (8000954 <DriveFunction+0x320>)
 8000726:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 800072a:	4b8a      	ldr	r3, [pc, #552]	@ (8000954 <DriveFunction+0x320>)
 800072c:	2201      	movs	r2, #1
 800072e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8000732:	4b88      	ldr	r3, [pc, #544]	@ (8000954 <DriveFunction+0x320>)
 8000734:	4a8c      	ldr	r2, [pc, #560]	@ (8000968 <DriveFunction+0x334>)
 8000736:	64da      	str	r2, [r3, #76]	@ 0x4c
    TIM3->CR1 = TIM_CR1_CEN;
 8000738:	4b89      	ldr	r3, [pc, #548]	@ (8000960 <DriveFunction+0x32c>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]

    // Motor 2
    motor[1].enablePin.GPIOx = GPIOC;
 800073e:	4b85      	ldr	r3, [pc, #532]	@ (8000954 <DriveFunction+0x320>)
 8000740:	4a8a      	ldr	r2, [pc, #552]	@ (800096c <DriveFunction+0x338>)
 8000742:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 8000746:	4b83      	ldr	r3, [pc, #524]	@ (8000954 <DriveFunction+0x320>)
 8000748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074c:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    motor[1].dirPin.GPIOx = GPIOC;
 8000750:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <DriveFunction+0x320>)
 8000752:	4a86      	ldr	r2, [pc, #536]	@ (800096c <DriveFunction+0x338>)
 8000754:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8000758:	4b7e      	ldr	r3, [pc, #504]	@ (8000954 <DriveFunction+0x320>)
 800075a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800075e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    motor[1].brakePin.GPIOx = GPIOD;
 8000762:	4b7c      	ldr	r3, [pc, #496]	@ (8000954 <DriveFunction+0x320>)
 8000764:	4a82      	ldr	r2, [pc, #520]	@ (8000970 <DriveFunction+0x33c>)
 8000766:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 800076a:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <DriveFunction+0x320>)
 800076c:	2201      	movs	r2, #1
 800076e:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    motor[1].encoder.count = &TIM8->CNT;
 8000772:	4b78      	ldr	r3, [pc, #480]	@ (8000954 <DriveFunction+0x320>)
 8000774:	4a7f      	ldr	r2, [pc, #508]	@ (8000974 <DriveFunction+0x340>)
 8000776:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 800077a:	4b7f      	ldr	r3, [pc, #508]	@ (8000978 <DriveFunction+0x344>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000786:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800078a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800078e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000964 <DriveFunction+0x330>
 8000792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000796:	4b6f      	ldr	r3, [pc, #444]	@ (8000954 <DriveFunction+0x320>)
 8000798:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
    motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 800079c:	4b6d      	ldr	r3, [pc, #436]	@ (8000954 <DriveFunction+0x320>)
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
    motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80007a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000954 <DriveFunction+0x320>)
 80007a6:	4a70      	ldr	r2, [pc, #448]	@ (8000968 <DriveFunction+0x334>)
 80007a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    TIM8->CR1 = TIM_CR1_CEN;
 80007ac:	4b72      	ldr	r3, [pc, #456]	@ (8000978 <DriveFunction+0x344>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]

    // Motor 3
    motor[2].enablePin.GPIOx = GPIOK;
 80007b2:	4b68      	ldr	r3, [pc, #416]	@ (8000954 <DriveFunction+0x320>)
 80007b4:	4a71      	ldr	r2, [pc, #452]	@ (800097c <DriveFunction+0x348>)
 80007b6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 80007ba:	4b66      	ldr	r3, [pc, #408]	@ (8000954 <DriveFunction+0x320>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
    motor[2].dirPin.GPIOx = GPIOG;
 80007c2:	4b64      	ldr	r3, [pc, #400]	@ (8000954 <DriveFunction+0x320>)
 80007c4:	4a6e      	ldr	r2, [pc, #440]	@ (8000980 <DriveFunction+0x34c>)
 80007c6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 80007ca:	4b62      	ldr	r3, [pc, #392]	@ (8000954 <DriveFunction+0x320>)
 80007cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007d0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
    motor[2].brakePin.GPIOx = GPIOK;
 80007d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000954 <DriveFunction+0x320>)
 80007d6:	4a69      	ldr	r2, [pc, #420]	@ (800097c <DriveFunction+0x348>)
 80007d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 80007dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000954 <DriveFunction+0x320>)
 80007de:	2240      	movs	r2, #64	@ 0x40
 80007e0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
    motor[2].encoder.count = &TIM2->CNT;
 80007e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000954 <DriveFunction+0x320>)
 80007e6:	4a67      	ldr	r2, [pc, #412]	@ (8000984 <DriveFunction+0x350>)
 80007e8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 80007ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f2:	ee07 3a90 	vmov	s15, r3
 80007f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80007fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000802:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8000964 <DriveFunction+0x330>
 8000806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800080a:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <DriveFunction+0x320>)
 800080c:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 8000810:	4b50      	ldr	r3, [pc, #320]	@ (8000954 <DriveFunction+0x320>)
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8000818:	4b4e      	ldr	r3, [pc, #312]	@ (8000954 <DriveFunction+0x320>)
 800081a:	4a53      	ldr	r2, [pc, #332]	@ (8000968 <DriveFunction+0x334>)
 800081c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    TIM2->CR1 = TIM_CR1_CEN;
 8000820:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]

    // Motor 4
    motor[3].enablePin.GPIOx = GPIOF;
 8000828:	4b4a      	ldr	r3, [pc, #296]	@ (8000954 <DriveFunction+0x320>)
 800082a:	4a57      	ldr	r2, [pc, #348]	@ (8000988 <DriveFunction+0x354>)
 800082c:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
    motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 8000830:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <DriveFunction+0x320>)
 8000832:	2220      	movs	r2, #32
 8000834:	f8a3 21cc 	strh.w	r2, [r3, #460]	@ 0x1cc
    motor[3].dirPin.GPIOx = GPIOF;
 8000838:	4b46      	ldr	r3, [pc, #280]	@ (8000954 <DriveFunction+0x320>)
 800083a:	4a53      	ldr	r2, [pc, #332]	@ (8000988 <DriveFunction+0x354>)
 800083c:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
    motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 8000840:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <DriveFunction+0x320>)
 8000842:	2208      	movs	r2, #8
 8000844:	f8a3 21d4 	strh.w	r2, [r3, #468]	@ 0x1d4
    motor[3].brakePin.GPIOx = GPIOF;
 8000848:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <DriveFunction+0x320>)
 800084a:	4a4f      	ldr	r2, [pc, #316]	@ (8000988 <DriveFunction+0x354>)
 800084c:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
    motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 8000850:	4b40      	ldr	r3, [pc, #256]	@ (8000954 <DriveFunction+0x320>)
 8000852:	2210      	movs	r2, #16
 8000854:	f8a3 21dc 	strh.w	r2, [r3, #476]	@ 0x1dc
    motor[3].encoder.count = &TIM5->CNT;
 8000858:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <DriveFunction+0x320>)
 800085a:	4a4c      	ldr	r2, [pc, #304]	@ (800098c <DriveFunction+0x358>)
 800085c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8000860:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <DriveFunction+0x35c>)
 8000862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000864:	ee07 3a90 	vmov	s15, r3
 8000868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800086c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000874:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000964 <DriveFunction+0x330>
 8000878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <DriveFunction+0x320>)
 800087e:	edc3 7a6e 	vstr	s15, [r3, #440]	@ 0x1b8
    motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 8000882:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <DriveFunction+0x320>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4
    motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <DriveFunction+0x320>)
 800088c:	4a36      	ldr	r2, [pc, #216]	@ (8000968 <DriveFunction+0x334>)
 800088e:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    TIM5->CR1 = TIM_CR1_CEN;
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <DriveFunction+0x35c>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]

    // Config PID
    PID_Params_t pidParams;
    pidParams.Kp = 12.0f;
 8000898:	4b3e      	ldr	r3, [pc, #248]	@ (8000994 <DriveFunction+0x360>)
 800089a:	60fb      	str	r3, [r7, #12]
    pidParams.Ki = 4.5f;
 800089c:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <DriveFunction+0x364>)
 800089e:	613b      	str	r3, [r7, #16]
    pidParams.Kd = 0.0f;
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
    pidParams.outputMax = (float)(4095.0f);
 80008a6:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <DriveFunction+0x368>)
 80008a8:	61bb      	str	r3, [r7, #24]
    pidParams.outputMin = (float)(-4095.0f);
 80008aa:	4b3d      	ldr	r3, [pc, #244]	@ (80009a0 <DriveFunction+0x36c>)
 80008ac:	61fb      	str	r3, [r7, #28]
    pidParams.integralMax = pidParams.outputMax / 5.0f;
 80008ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80008b2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ba:	edc7 7a08 	vstr	s15, [r7, #32]
    pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 80008be:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <DriveFunction+0x370>)
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Enable motors and disable brake
    for (uint8_t i = 0; i < 4; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80008c8:	e034      	b.n	8000934 <DriveFunction+0x300>
    {
        Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 80008ca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80008ce:	4613      	mov	r3, r2
 80008d0:	015b      	lsls	r3, r3, #5
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <DriveFunction+0x320>)
 80008d8:	4413      	add	r3, r2
 80008da:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80008de:	2201      	movs	r2, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f007 ff69 	bl	80087b8 <Motor_Init>
        Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 80008e6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80008ea:	4613      	mov	r3, r2
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <DriveFunction+0x320>)
 80008f4:	4413      	add	r3, r2
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fff5 	bl	80088e8 <Motor_SetBrake>
        PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 80008fe:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000902:	4613      	mov	r3, r2
 8000904:	015b      	lsls	r3, r3, #5
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <DriveFunction+0x320>)
 800090c:	189d      	adds	r5, r3, r2
 800090e:	2301      	movs	r3, #1
 8000910:	9304      	str	r3, [sp, #16]
 8000912:	466c      	mov	r4, sp
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000924:	4628      	mov	r0, r5
 8000926:	f007 fdbf 	bl	80084a8 <PID_Init>
    for (uint8_t i = 0; i < 4; i++)
 800092a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800092e:	3301      	adds	r3, #1
 8000930:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000938:	2b03      	cmp	r3, #3
 800093a:	d9c6      	bls.n	80008ca <DriveFunction+0x296>
    }

    // Infinite loop
    for(;;)
    {
        for (uint8_t i = 0; i < 4; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000942:	e059      	b.n	80009f8 <DriveFunction+0x3c4>
 8000944:	200000f8 	.word	0x200000f8
 8000948:	200003e0 	.word	0x200003e0
 800094c:	20000434 	.word	0x20000434
 8000950:	40022400 	.word	0x40022400
 8000954:	200001a0 	.word	0x200001a0
 8000958:	40020000 	.word	0x40020000
 800095c:	40000424 	.word	0x40000424
 8000960:	40000400 	.word	0x40000400
 8000964:	45000000 	.word	0x45000000
 8000968:	3f714639 	.word	0x3f714639
 800096c:	40020800 	.word	0x40020800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40010424 	.word	0x40010424
 8000978:	40010400 	.word	0x40010400
 800097c:	40022800 	.word	0x40022800
 8000980:	40021800 	.word	0x40021800
 8000984:	40000024 	.word	0x40000024
 8000988:	40021400 	.word	0x40021400
 800098c:	40000c24 	.word	0x40000c24
 8000990:	40000c00 	.word	0x40000c00
 8000994:	41400000 	.word	0x41400000
 8000998:	40900000 	.word	0x40900000
 800099c:	457ff000 	.word	0x457ff000
 80009a0:	c57ff000 	.word	0xc57ff000
 80009a4:	3a83126f 	.word	0x3a83126f
        {
            // Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine
            Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 80009a8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80009ac:	4613      	mov	r3, r2
 80009ae:	015b      	lsls	r3, r3, #5
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a60 <DriveFunction+0x42c>)
 80009b6:	441a      	add	r2, r3
 80009b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009bc:	4929      	ldr	r1, [pc, #164]	@ (8000a64 <DriveFunction+0x430>)
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009ca:	eeb0 0a67 	vmov.f32	s0, s15
 80009ce:	4619      	mov	r1, r3
 80009d0:	4610      	mov	r0, r2
 80009d2:	f007 ff13 	bl	80087fc <Motor_CLDrive>
            // TODO: make dribbler files, variable speeds
            MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <DriveFunction+0x434>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <DriveFunction+0x438>)
 80009de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f007 fd1e 	bl	800842a <MAX581x_Code>
        for (uint8_t i = 0; i < 4; i++)
 80009ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009f2:	3301      	adds	r3, #1
 80009f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80009f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d9d3      	bls.n	80009a8 <DriveFunction+0x374>
        }

        if(ball_posession && kick_sel && kick_flag == KICKER_CHARGED) {
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <DriveFunction+0x43c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d01d      	beq.n	8000a44 <DriveFunction+0x410>
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <DriveFunction+0x440>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d019      	beq.n	8000a44 <DriveFunction+0x410>
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <DriveFunction+0x444>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d115      	bne.n	8000a44 <DriveFunction+0x410>
            osMutexWait(kickFlagHandle, osWaitForever);
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <DriveFunction+0x448>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 ff33 	bl	800588c <osMutexWait>
            kick_flag = KICKER_START;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <DriveFunction+0x444>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	701a      	strb	r2, [r3, #0]
            osMutexRelease(kickFlagHandle);
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <DriveFunction+0x448>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 ff79 	bl	8005928 <osMutexRelease>
            osMessagePut(kickQueueHandle, 0, 0);
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <DriveFunction+0x44c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 ffba 	bl	80059b8 <osMessagePut>
        }

        osMessagePut(nrf24CheckHandle, 0, 0);
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <DriveFunction+0x450>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 ffb3 	bl	80059b8 <osMessagePut>
        osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 8000a52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a56:	2101      	movs	r1, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 f861 	bl	8005b20 <osDelayUntil>
        for (uint8_t i = 0; i < 4; i++)
 8000a5e:	e76d      	b.n	800093c <DriveFunction+0x308>
 8000a60:	200001a0 	.word	0x200001a0
 8000a64:	20000160 	.word	0x20000160
 8000a68:	2000039c 	.word	0x2000039c
 8000a6c:	08009728 	.word	0x08009728
 8000a70:	200003bc 	.word	0x200003bc
 8000a74:	2000039d 	.word	0x2000039d
 8000a78:	2000039e 	.word	0x2000039e
 8000a7c:	200003a8 	.word	0x200003a8
 8000a80:	200003a4 	.word	0x200003a4
 8000a84:	20000158 	.word	0x20000158

08000a88 <setSpeed>:
    }
}

void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	@ 0x38
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8000a94:	4bb1      	ldr	r3, [pc, #708]	@ (8000d5c <setSpeed+0x2d4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a9a:	4bb0      	ldr	r3, [pc, #704]	@ (8000d5c <setSpeed+0x2d4>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da16      	bge.n	8000ada <setSpeed+0x52>
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	eeb1 7a67 	vneg.f32	s14, s15
 8000ad0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8000d60 <setSpeed+0x2d8>
 8000ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad8:	e013      	b.n	8000b02 <setSpeed+0x7a>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3304      	adds	r3, #4
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000af0:	4313      	orrs	r3, r2
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000afa:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8000d60 <setSpeed+0x2d8>
 8000afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b02:	4b96      	ldr	r3, [pc, #600]	@ (8000d5c <setSpeed+0x2d4>)
 8000b04:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da16      	bge.n	8000b42 <setSpeed+0xba>
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3304      	adds	r3, #4
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3302      	adds	r3, #2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b34:	eeb1 7a67 	vneg.f32	s14, s15
 8000b38:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8000d60 <setSpeed+0x2d8>
 8000b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b40:	e013      	b.n	8000b6a <setSpeed+0xe2>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3304      	adds	r3, #4
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3302      	adds	r3, #2
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	ee07 3a90 	vmov	s15, r3
 8000b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b62:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8000d60 <setSpeed+0x2d8>
 8000b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d5c <setSpeed+0x2d4>)
 8000b6c:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3303      	adds	r3, #3
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da16      	bge.n	8000baa <setSpeed+0x122>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	01db      	lsls	r3, r3, #7
 8000b84:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b92:	4313      	orrs	r3, r2
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b9c:	eeb1 7a67 	vneg.f32	s14, s15
 8000ba0:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8000d60 <setSpeed+0x2d8>
 8000ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba8:	e013      	b.n	8000bd2 <setSpeed+0x14a>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3304      	adds	r3, #4
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	01db      	lsls	r3, r3, #7
 8000bb2:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3303      	adds	r3, #3
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bca:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8000d60 <setSpeed+0x2d8>
 8000bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd2:	4b62      	ldr	r3, [pc, #392]	@ (8000d5c <setSpeed+0x2d4>)
 8000bd4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 8000bd8:	4b60      	ldr	r3, [pc, #384]	@ (8000d5c <setSpeed+0x2d4>)
 8000bda:	ed93 7a00 	vldr	s14, [r3]
 8000bde:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be6:	edc7 7a08 	vstr	s15, [r7, #32]
 8000bea:	4b5c      	ldr	r3, [pc, #368]	@ (8000d5c <setSpeed+0x2d4>)
 8000bec:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bf0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf8:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 8000bfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c10:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8000c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f008 fd02 	bl	8009628 <sqrt>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2c:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 8000c30:	edd7 6a08 	vldr	s13, [r7, #32]
 8000c34:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8000c44:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c4c:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 8000c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c54:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000d64 <setSpeed+0x2dc>
 8000c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	dd23      	ble.n	8000caa <setSpeed+0x222>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 8000c62:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <setSpeed+0x2e0>)
 8000c64:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 8000c66:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c72:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 8000c76:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c82:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 8000c86:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c92:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <setSpeed+0x2d4>)
 8000c94:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 8000c98:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <setSpeed+0x2d4>)
 8000ca6:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000cb0:	e04b      	b.n	8000d4a <setSpeed+0x2c2>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
		for (uint8_t j = 0; j < 3; j++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cbe:	e020      	b.n	8000d02 <setSpeed+0x27a>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8000cc0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000cc4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000cc8:	4828      	ldr	r0, [pc, #160]	@ (8000d6c <setSpeed+0x2e4>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4403      	add	r3, r0
 8000cd6:	ed93 7a00 	vldr	s14, [r3]
 8000cda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cde:	4a1f      	ldr	r2, [pc, #124]	@ (8000d5c <setSpeed+0x2d4>)
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cec:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		for (uint8_t j = 0; j < 3; j++)
 8000cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d9da      	bls.n	8000cc0 <setSpeed+0x238>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 8000d0a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	bfcc      	ite	gt
 8000d18:	2301      	movgt	r3, #1
 8000d1a:	2300      	movle	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4619      	mov	r1, r3
 8000d26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 8000d32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d3e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8000d40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d44:	3301      	adds	r3, #1
 8000d46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d9af      	bls.n	8000cb2 <setSpeed+0x22a>
	}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3738      	adds	r7, #56	@ 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000390 	.word	0x20000390
 8000d60:	42c80000 	.word	0x42c80000
 8000d64:	3dcccccd 	.word	0x3dcccccd
 8000d68:	3dcccccd 	.word	0x3dcccccd
 8000d6c:	20000170 	.word	0x20000170

08000d70 <KickFunction>:
#include "kick_task.h"
#include "cmsis_os.h"
#include "stm32f7xx_hal.h"

void KickFunction(void const * argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        // --- Cargar el capacitor del kicker ---
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4824      	ldr	r0, [pc, #144]	@ (8000e10 <KickFunction+0xa0>)
 8000d7e:	f001 fd87 	bl	8002890 <HAL_GPIO_WritePin>
        osDelay(4000);
 8000d82:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d86:	f004 fd61 	bl	800584c <osDelay>
        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4820      	ldr	r0, [pc, #128]	@ (8000e10 <KickFunction+0xa0>)
 8000d90:	f001 fd7e 	bl	8002890 <HAL_GPIO_WritePin>

        // --- Marcar kicker como cargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <KickFunction+0xa4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fd75 	bl	800588c <osMutexWait>
        kick_flag = KICKER_CHARGED;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <KickFunction+0xa8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <KickFunction+0xa4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fdbb 	bl	8005928 <osMutexRelease>

        // --- Esperar evento de disparo ---
        osEvent kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <KickFunction+0xac>)
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fe3a 	bl	8005a38 <osMessageGet>

        // --- Activar el kicker (disparo) ---
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dca:	4815      	ldr	r0, [pc, #84]	@ (8000e20 <KickFunction+0xb0>)
 8000dcc:	f001 fd60 	bl	8002890 <HAL_GPIO_WritePin>
        osDelay(10);
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f004 fd3b 	bl	800584c <osDelay>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ddc:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <KickFunction+0xb0>)
 8000dde:	f001 fd57 	bl	8002890 <HAL_GPIO_WritePin>

        // --- Marcar kicker como descargado ---
        osMutexWait(kickFlagHandle, osWaitForever);
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <KickFunction+0xa4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 fd4e 	bl	800588c <osMutexWait>
        kick_flag = KICKER_DISCHARGED;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <KickFunction+0xa8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
        osMutexRelease(kickFlagHandle);
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <KickFunction+0xa4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fd94 	bl	8005928 <osMutexRelease>

        // --- Contador de disparos ---
        kick_count++;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <KickFunction+0xb4>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <KickFunction+0xb4>)
 8000e0a:	801a      	strh	r2, [r3, #0]
    {
 8000e0c:	bf00      	nop
 8000e0e:	e7b3      	b.n	8000d78 <KickFunction+0x8>
 8000e10:	40022400 	.word	0x40022400
 8000e14:	200003a8 	.word	0x200003a8
 8000e18:	2000039e 	.word	0x2000039e
 8000e1c:	200003a4 	.word	0x200003a4
 8000e20:	40021400 	.word	0x40021400
 8000e24:	200003a0 	.word	0x200003a0

08000e28 <getDribbler_speed>:
    }
}

uint8_t getDribbler_speed(uint8_t *buffer)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	109b      	asrs	r3, r3, #2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	105b      	asrs	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <main>:
void DriveFunction(void const * argument);
void RadioFunction(void const * argument);
void KickFunction(void const * argument);

int main(void)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b09a      	sub	sp, #104	@ 0x68
 8000e74:	af00      	add	r7, sp, #0
    HAL_Init();
 8000e76:	f001 fa14 	bl	80022a2 <HAL_Init>
    SystemClock_Config();
 8000e7a:	f000 fd51 	bl	8001920 <SystemClock_Config>
    MX_GPIO_Init();
 8000e7e:	f001 f819 	bl	8001eb4 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000e82:	f000 fe7b 	bl	8001b7c <MX_SPI1_Init>
    MX_I2C1_Init();
 8000e86:	f000 fdb9 	bl	80019fc <MX_I2C1_Init>
    MX_I2C2_Init();
 8000e8a:	f000 fdf7 	bl	8001a7c <MX_I2C2_Init>
    MX_TIM2_Init();
 8000e8e:	f000 feb7 	bl	8001c00 <MX_TIM2_Init>
    MX_TIM3_Init();
 8000e92:	f000 ff09 	bl	8001ca8 <MX_TIM3_Init>
    MX_TIM5_Init();
 8000e96:	f000 ff5d 	bl	8001d54 <MX_TIM5_Init>
    MX_TIM8_Init();
 8000e9a:	f000 ffb1 	bl	8001e00 <MX_TIM8_Init>
    MX_I2C3_Init();
 8000e9e:	f000 fe2d 	bl	8001afc <MX_I2C3_Init>

    // Inicialización de la matriz cinemática
    kinematic[0][0] = sin(WHEEL_ANGlE_1); kinematic[0][1] = -cos(WHEEL_ANGlE_1); kinematic[0][2] = -ROBOT_RADIO;
 8000ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800100c <main+0x19c>)
 8000ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8001010 <main+0x1a0>)
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	4b58      	ldr	r3, [pc, #352]	@ (800100c <main+0x19c>)
 8000eaa:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	4b56      	ldr	r3, [pc, #344]	@ (800100c <main+0x19c>)
 8000eb2:	4a58      	ldr	r2, [pc, #352]	@ (8001014 <main+0x1a4>)
 8000eb4:	609a      	str	r2, [r3, #8]
    kinematic[1][0] = sin(WHEEL_ANGlE_2); kinematic[1][1] = -cos(WHEEL_ANGlE_2); kinematic[1][2] = -ROBOT_RADIO;
 8000eb6:	4b55      	ldr	r3, [pc, #340]	@ (800100c <main+0x19c>)
 8000eb8:	4a57      	ldr	r2, [pc, #348]	@ (8001018 <main+0x1a8>)
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	4b53      	ldr	r3, [pc, #332]	@ (800100c <main+0x19c>)
 8000ebe:	4a57      	ldr	r2, [pc, #348]	@ (800101c <main+0x1ac>)
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	4b52      	ldr	r3, [pc, #328]	@ (800100c <main+0x19c>)
 8000ec4:	4a53      	ldr	r2, [pc, #332]	@ (8001014 <main+0x1a4>)
 8000ec6:	615a      	str	r2, [r3, #20]
    kinematic[2][0] = sin(WHEEL_ANGlE_3); kinematic[2][1] = -cos(WHEEL_ANGlE_3); kinematic[2][2] = -ROBOT_RADIO;
 8000ec8:	4b50      	ldr	r3, [pc, #320]	@ (800100c <main+0x19c>)
 8000eca:	4a55      	ldr	r2, [pc, #340]	@ (8001020 <main+0x1b0>)
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	4b4f      	ldr	r3, [pc, #316]	@ (800100c <main+0x19c>)
 8000ed0:	4a52      	ldr	r2, [pc, #328]	@ (800101c <main+0x1ac>)
 8000ed2:	61da      	str	r2, [r3, #28]
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <main+0x19c>)
 8000ed6:	4a4f      	ldr	r2, [pc, #316]	@ (8001014 <main+0x1a4>)
 8000ed8:	621a      	str	r2, [r3, #32]
    kinematic[3][0] = sin(WHEEL_ANGlE_4); kinematic[3][1] = -cos(WHEEL_ANGlE_4); kinematic[3][2] = -ROBOT_RADIO;
 8000eda:	4b4c      	ldr	r3, [pc, #304]	@ (800100c <main+0x19c>)
 8000edc:	4a51      	ldr	r2, [pc, #324]	@ (8001024 <main+0x1b4>)
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800100c <main+0x19c>)
 8000ee2:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ee8:	4b48      	ldr	r3, [pc, #288]	@ (800100c <main+0x19c>)
 8000eea:	4a4a      	ldr	r2, [pc, #296]	@ (8001014 <main+0x1a4>)
 8000eec:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Parpadeo de LEDs para indicar inicio
    for (uint8_t i = 0; i < 5; i++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000ef4:	e016      	b.n	8000f24 <main+0xb4>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 8000ef6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efa:	484b      	ldr	r0, [pc, #300]	@ (8001028 <main+0x1b8>)
 8000efc:	f007 fba6 	bl	800864c <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 8000f00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f04:	4848      	ldr	r0, [pc, #288]	@ (8001028 <main+0x1b8>)
 8000f06:	f007 fba1 	bl	800864c <Board_LedToggle>
        Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 8000f0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0e:	4846      	ldr	r0, [pc, #280]	@ (8001028 <main+0x1b8>)
 8000f10:	f007 fb9c 	bl	800864c <Board_LedToggle>
        HAL_Delay(100);
 8000f14:	2064      	movs	r0, #100	@ 0x64
 8000f16:	f001 f9f1 	bl	80022fc <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 8000f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000f24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d9e4      	bls.n	8000ef6 <main+0x86>
    }

    // Mutex para el sistema de kick
    osMutexDef(kickFlag);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	663b      	str	r3, [r7, #96]	@ 0x60
    kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 8000f30:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fc9d 	bl	8005874 <osMutexCreate>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a3b      	ldr	r2, [pc, #236]	@ (800102c <main+0x1bc>)
 8000f3e:	6013      	str	r3, [r2, #0]

    // Colas de mensajes
    osMessageQDef(kickQueue, 1, uint16_t);
 8000f40:	4a3b      	ldr	r2, [pc, #236]	@ (8001030 <main+0x1c0>)
 8000f42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4a:	e883 0003 	stmia.w	r3, {r0, r1}
    kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 8000f4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fd1d 	bl	8005994 <osMessageCreate>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a35      	ldr	r2, [pc, #212]	@ (8001034 <main+0x1c4>)
 8000f5e:	6013      	str	r3, [r2, #0]
    osMessageQDef(nrf24Check, 16, uint16_t);
 8000f60:	4a35      	ldr	r2, [pc, #212]	@ (8001038 <main+0x1c8>)
 8000f62:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6a:	e883 0003 	stmia.w	r3, {r0, r1}
    nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 8000f6e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 fd0d 	bl	8005994 <osMessageCreate>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800103c <main+0x1cc>)
 8000f7e:	6013      	str	r3, [r2, #0]

    // Tareas principales del sistema
    osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8000f80:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <main+0x1d0>)
 8000f82:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f86:	461d      	mov	r5, r3
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	6023      	str	r3, [r4, #0]
    driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8000f90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fc31 	bl	80057fe <osThreadCreate>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a29      	ldr	r2, [pc, #164]	@ (8001044 <main+0x1d4>)
 8000fa0:	6013      	str	r3, [r2, #0]
    osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8000fa2:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <main+0x1d8>)
 8000fa4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000fa8:	461d      	mov	r5, r3
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	6023      	str	r3, [r4, #0]
    radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fc20 	bl	80057fe <osThreadCreate>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a22      	ldr	r2, [pc, #136]	@ (800104c <main+0x1dc>)
 8000fc2:	6013      	str	r3, [r2, #0]
    osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8000fc4:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <main+0x1e0>)
 8000fc6:	f107 0414 	add.w	r4, r7, #20
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	6023      	str	r3, [r4, #0]
    kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fc0f 	bl	80057fe <osThreadCreate>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <main+0x1e4>)
 8000fe4:	6013      	str	r3, [r2, #0]
    osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <main+0x1e8>)
 8000fe8:	463c      	mov	r4, r7
 8000fea:	461d      	mov	r5, r3
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	6023      	str	r3, [r4, #0]
    ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 fc00 	bl	80057fe <osThreadCreate>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a16      	ldr	r2, [pc, #88]	@ (800105c <main+0x1ec>)
 8001002:	6013      	str	r3, [r2, #0]

    osKernelStart(); // Inicia el scheduler RTOS
 8001004:	f004 fbe4 	bl	80057d0 <osKernelStart>

    // Bucle infinito de seguridad (no debería llegar aquí)
    while (1) {}
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <main+0x198>
 800100c:	20000170 	.word	0x20000170
 8001010:	3f5db3d7 	.word	0x3f5db3d7
 8001014:	bda83e42 	.word	0xbda83e42
 8001018:	3f441b7d 	.word	0x3f441b7d
 800101c:	3f248dbb 	.word	0x3f248dbb
 8001020:	bf441b7d 	.word	0xbf441b7d
 8001024:	bf5db3d7 	.word	0xbf5db3d7
 8001028:	40022000 	.word	0x40022000
 800102c:	200003a8 	.word	0x200003a8
 8001030:	08009688 	.word	0x08009688
 8001034:	200003a4 	.word	0x200003a4
 8001038:	08009690 	.word	0x08009690
 800103c:	20000158 	.word	0x20000158
 8001040:	080096a4 	.word	0x080096a4
 8001044:	200003d4 	.word	0x200003d4
 8001048:	080096c4 	.word	0x080096c4
 800104c:	200003d8 	.word	0x200003d8
 8001050:	080096e4 	.word	0x080096e4
 8001054:	200003dc 	.word	0x200003dc
 8001058:	0800970c 	.word	0x0800970c
 800105c:	200003d0 	.word	0x200003d0

08001060 <HAL_TIM_PeriodElapsedCallback>:
}

// Callback de periodo de timer (para HAL)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8001072:	f001 f923 	bl	80022bc <HAL_IncTick>
    }
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40010000 	.word	0x40010000

08001084 <Error_Handler>:

// Handler de error simple
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    // Implementar manejo de error si es necesario
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <RadioFunction>:
#include "board.h"
#include <string.h>
#include "kick_task.h"
#include "drive_task.h"

void RadioFunction(void const * argument) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af02      	add	r7, sp, #8
 800109a:	6178      	str	r0, [r7, #20]
    // --- Inicialización del módulo nRF24 ---
    nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 800109c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	4b67      	ldr	r3, [pc, #412]	@ (8001240 <RadioFunction+0x1ac>)
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010aa:	4a65      	ldr	r2, [pc, #404]	@ (8001240 <RadioFunction+0x1ac>)
 80010ac:	4965      	ldr	r1, [pc, #404]	@ (8001244 <RadioFunction+0x1b0>)
 80010ae:	4866      	ldr	r0, [pc, #408]	@ (8001248 <RadioFunction+0x1b4>)
 80010b0:	f007 fcad 	bl	8008a0e <nRF24_HW_Init>
    nRF24_Init(&nrf_device);
 80010b4:	4864      	ldr	r0, [pc, #400]	@ (8001248 <RadioFunction+0x1b4>)
 80010b6:	f007 fd96 	bl	8008be6 <nRF24_Init>
    nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 80010ba:	4a64      	ldr	r2, [pc, #400]	@ (800124c <RadioFunction+0x1b8>)
 80010bc:	2100      	movs	r1, #0
 80010be:	4862      	ldr	r0, [pc, #392]	@ (8001248 <RadioFunction+0x1b4>)
 80010c0:	f007 fe4c 	bl	8008d5c <nRF24_SetAddr>
    nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 80010c4:	216a      	movs	r1, #106	@ 0x6a
 80010c6:	4860      	ldr	r0, [pc, #384]	@ (8001248 <RadioFunction+0x1b4>)
 80010c8:	f007 fe38 	bl	8008d3c <nRF24_SetRFChannel>
    nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 80010cc:	231e      	movs	r3, #30
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	485d      	ldr	r0, [pc, #372]	@ (8001248 <RadioFunction+0x1b4>)
 80010d4:	f007 ff92 	bl	8008ffc <nRF24_SetRXPipe>
    nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 80010d8:	2102      	movs	r1, #2
 80010da:	485b      	ldr	r0, [pc, #364]	@ (8001248 <RadioFunction+0x1b4>)
 80010dc:	f007 fde8 	bl	8008cb0 <nRF24_SetPowerMode>
    nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 80010e0:	2101      	movs	r1, #1
 80010e2:	4859      	ldr	r0, [pc, #356]	@ (8001248 <RadioFunction+0x1b4>)
 80010e4:	f007 fe06 	bl	8008cf4 <nRF24_SetOperationalMode>
    nRF24_RX_ON(&nrf_device);
 80010e8:	2101      	movs	r1, #1
 80010ea:	4857      	ldr	r0, [pc, #348]	@ (8001248 <RadioFunction+0x1b4>)
 80010ec:	f007 fc6b 	bl	80089c6 <nRF24_CE_State>
    memset(nrf_device.rx_data, 0, 32);
 80010f0:	2220      	movs	r2, #32
 80010f2:	2100      	movs	r1, #0
 80010f4:	4856      	ldr	r0, [pc, #344]	@ (8001250 <RadioFunction+0x1bc>)
 80010f6:	f008 fa57 	bl	80095a8 <memset>
    nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 80010fa:	2106      	movs	r1, #6
 80010fc:	4852      	ldr	r0, [pc, #328]	@ (8001248 <RadioFunction+0x1b4>)
 80010fe:	f007 ffd9 	bl	80090b4 <nRF24_DisableAA>
    tx_node_addr[4] = Board_GetID();
 8001102:	f007 fab3 	bl	800866c <Board_GetID>
 8001106:	4603      	mov	r3, r0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b52      	ldr	r3, [pc, #328]	@ (8001254 <RadioFunction+0x1c0>)
 800110c:	711a      	strb	r2, [r3, #4]
    nRF24_SetAddr(&nrf_device, nRF24_PIPETX, tx_node_addr);
 800110e:	4a51      	ldr	r2, [pc, #324]	@ (8001254 <RadioFunction+0x1c0>)
 8001110:	2106      	movs	r1, #6
 8001112:	484d      	ldr	r0, [pc, #308]	@ (8001248 <RadioFunction+0x1b4>)
 8001114:	f007 fe22 	bl	8008d5c <nRF24_SetAddr>
    nrf_config = nRF24_GetConfig(&nrf_device);
 8001118:	484b      	ldr	r0, [pc, #300]	@ (8001248 <RadioFunction+0x1b4>)
 800111a:	f008 f803 	bl	8009124 <nRF24_GetConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b4d      	ldr	r3, [pc, #308]	@ (8001258 <RadioFunction+0x1c4>)
 8001124:	701a      	strb	r2, [r3, #0]

    // --- Bucle principal de la tarea ---
    for (;;) {
        // Espera evento de la cola (sin timeout)
        osMessageGet(nrf24CheckHandle, osWaitForever);
 8001126:	4b4d      	ldr	r3, [pc, #308]	@ (800125c <RadioFunction+0x1c8>)
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	463b      	mov	r3, r7
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	4618      	mov	r0, r3
 8001132:	f004 fc81 	bl	8005a38 <osMessageGet>

        // Actualiza estado del nRF24
        nrf_status = nRF24_GetStatus(&nrf_device);
 8001136:	4844      	ldr	r0, [pc, #272]	@ (8001248 <RadioFunction+0x1b4>)
 8001138:	f007 ffe7 	bl	800910a <nRF24_GetStatus>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <RadioFunction+0x1cc>)
 8001142:	701a      	strb	r2, [r3, #0]
        nrf_config = nRF24_GetConfig(&nrf_device);
 8001144:	4840      	ldr	r0, [pc, #256]	@ (8001248 <RadioFunction+0x1b4>)
 8001146:	f007 ffed 	bl	8009124 <nRF24_GetConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b42      	ldr	r3, [pc, #264]	@ (8001258 <RadioFunction+0x1c4>)
 8001150:	701a      	strb	r2, [r3, #0]

        // Si hay datos recibidos
        if (nrf_status & nRF24_FLAG_RX_DR) {
 8001152:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <RadioFunction+0x1cc>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0e3      	beq.n	8001126 <RadioFunction+0x92>
            // --- Procesamiento de datos recibidos ---
            nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 800115e:	4a41      	ldr	r2, [pc, #260]	@ (8001264 <RadioFunction+0x1d0>)
 8001160:	493b      	ldr	r1, [pc, #236]	@ (8001250 <RadioFunction+0x1bc>)
 8001162:	4839      	ldr	r0, [pc, #228]	@ (8001248 <RadioFunction+0x1b4>)
 8001164:	f008 f85e 	bl	8009224 <nRF24_ReadPayload>
            nRF24_FlushRX(&nrf_device);
 8001168:	4837      	ldr	r0, [pc, #220]	@ (8001248 <RadioFunction+0x1b4>)
 800116a:	f007 fff5 	bl	8009158 <nRF24_FlushRX>
            nRF24_ClearIRQFlagsRx(&nrf_device);
 800116e:	4836      	ldr	r0, [pc, #216]	@ (8001248 <RadioFunction+0x1b4>)
 8001170:	f008 f82f 	bl	80091d2 <nRF24_ClearIRQFlagsRx>

            setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 8001174:	4b3c      	ldr	r3, [pc, #240]	@ (8001268 <RadioFunction+0x1d4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4b33      	ldr	r3, [pc, #204]	@ (8001250 <RadioFunction+0x1bc>)
 8001184:	4413      	add	r3, r2
 8001186:	4a39      	ldr	r2, [pc, #228]	@ (800126c <RadioFunction+0x1d8>)
 8001188:	4939      	ldr	r1, [pc, #228]	@ (8001270 <RadioFunction+0x1dc>)
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fc7c 	bl	8000a88 <setSpeed>
            dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 8001190:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <RadioFunction+0x1d4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <RadioFunction+0x1bc>)
 80011a0:	4413      	add	r3, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe40 	bl	8000e28 <getDribbler_speed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <RadioFunction+0x1e0>)
 80011ae:	701a      	strb	r2, [r3, #0]
            kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);
 80011b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <RadioFunction+0x1d4>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <RadioFunction+0x1bc>)
 80011c0:	4413      	add	r3, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fe42 	bl	8000e4c <getKickerStatus>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <RadioFunction+0x1e4>)
 80011ce:	701a      	strb	r2, [r3, #0]
            updateBuffer(txBuffer);
 80011d0:	482a      	ldr	r0, [pc, #168]	@ (800127c <RadioFunction+0x1e8>)
 80011d2:	f000 f855 	bl	8001280 <updateBuffer>

            // --- Cambio a modo TX y envío de datos ---
            nRF24_RX_OFF(&nrf_device);
 80011d6:	2100      	movs	r1, #0
 80011d8:	481b      	ldr	r0, [pc, #108]	@ (8001248 <RadioFunction+0x1b4>)
 80011da:	f007 fbf4 	bl	80089c6 <nRF24_CE_State>
            nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_TX);
 80011de:	2100      	movs	r1, #0
 80011e0:	4819      	ldr	r0, [pc, #100]	@ (8001248 <RadioFunction+0x1b4>)
 80011e2:	f007 fd87 	bl	8008cf4 <nRF24_SetOperationalMode>
            while (nrf_config & nRF24_CONFIG_PRIM_RX) {
 80011e6:	e006      	b.n	80011f6 <RadioFunction+0x162>
                nrf_config = nRF24_GetConfig(&nrf_device);
 80011e8:	4817      	ldr	r0, [pc, #92]	@ (8001248 <RadioFunction+0x1b4>)
 80011ea:	f007 ff9b 	bl	8009124 <nRF24_GetConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <RadioFunction+0x1c4>)
 80011f4:	701a      	strb	r2, [r3, #0]
            while (nrf_config & nRF24_CONFIG_PRIM_RX) {
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <RadioFunction+0x1c4>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f2      	bne.n	80011e8 <RadioFunction+0x154>
            }
            nRF24_TxPacket(&nrf_device, txBuffer, 32);
 8001202:	2220      	movs	r2, #32
 8001204:	491d      	ldr	r1, [pc, #116]	@ (800127c <RadioFunction+0x1e8>)
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <RadioFunction+0x1b4>)
 8001208:	f000 f86c 	bl	80012e4 <nRF24_TxPacket>

            // --- Regreso a modo RX ---
            nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 800120c:	2101      	movs	r1, #1
 800120e:	480e      	ldr	r0, [pc, #56]	@ (8001248 <RadioFunction+0x1b4>)
 8001210:	f007 fd70 	bl	8008cf4 <nRF24_SetOperationalMode>
            while (!(nrf_config & nRF24_CONFIG_PRIM_RX)) {
 8001214:	e006      	b.n	8001224 <RadioFunction+0x190>
                nrf_config = nRF24_GetConfig(&nrf_device);
 8001216:	480c      	ldr	r0, [pc, #48]	@ (8001248 <RadioFunction+0x1b4>)
 8001218:	f007 ff84 	bl	8009124 <nRF24_GetConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <RadioFunction+0x1c4>)
 8001222:	701a      	strb	r2, [r3, #0]
            while (!(nrf_config & nRF24_CONFIG_PRIM_RX)) {
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <RadioFunction+0x1c4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f2      	beq.n	8001216 <RadioFunction+0x182>
            }
            nRF24_RX_ON(&nrf_device);
 8001230:	2101      	movs	r1, #1
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <RadioFunction+0x1b4>)
 8001234:	f007 fbc7 	bl	80089c6 <nRF24_CE_State>
            nRF24_ClearIRQFlags(&nrf_device);
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <RadioFunction+0x1b4>)
 800123a:	f007 ff9a 	bl	8009172 <nRF24_ClearIRQFlags>
        osMessageGet(nrf24CheckHandle, osWaitForever);
 800123e:	e772      	b.n	8001126 <RadioFunction+0x92>
 8001240:	40021800 	.word	0x40021800
 8001244:	200004dc 	.word	0x200004dc
 8001248:	20000100 	.word	0x20000100
 800124c:	20000028 	.word	0x20000028
 8001250:	20000136 	.word	0x20000136
 8001254:	20000020 	.word	0x20000020
 8001258:	200000fc 	.word	0x200000fc
 800125c:	20000158 	.word	0x20000158
 8001260:	200000fb 	.word	0x200000fb
 8001264:	200000fa 	.word	0x200000fa
 8001268:	200000f8 	.word	0x200000f8
 800126c:	2000015c 	.word	0x2000015c
 8001270:	20000160 	.word	0x20000160
 8001274:	2000039c 	.word	0x2000039c
 8001278:	2000039d 	.word	0x2000039d
 800127c:	20000000 	.word	0x20000000

08001280 <updateBuffer>:
        }
    }
}


void updateBuffer(uint8_t *buffer) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	// Fill buffer with zeros if necessary
	memset(&buffer[0], 0, 32);
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f008 f98b 	bl	80095a8 <memset>

    // Copy the motor speeds to the txBuffer
    memcpy(&buffer[0], (const void *)&motor[0].measSpeed, sizeof(float));
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <updateBuffer+0x60>)
 8001294:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
    buffer[4] = '\n';
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	220a      	movs	r2, #10
 80012a0:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[5], (const void *)&motor[1].measSpeed, sizeof(float));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3305      	adds	r3, #5
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <updateBuffer+0x60>)
 80012a8:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80012ac:	601a      	str	r2, [r3, #0]
    buffer[9] = '\n';
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3309      	adds	r3, #9
 80012b2:	220a      	movs	r2, #10
 80012b4:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[10], (const void *)&motor[2].measSpeed, sizeof(float));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	330a      	adds	r3, #10
 80012ba:	4a09      	ldr	r2, [pc, #36]	@ (80012e0 <updateBuffer+0x60>)
 80012bc:	f8d2 216c 	ldr.w	r2, [r2, #364]	@ 0x16c
 80012c0:	601a      	str	r2, [r3, #0]
    buffer[14] = '\n';
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	330e      	adds	r3, #14
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[15], (const void *)&motor[3].measSpeed, sizeof(float));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	330f      	adds	r3, #15
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <updateBuffer+0x60>)
 80012d0:	f8d2 21e8 	ldr.w	r2, [r2, #488]	@ 0x1e8
 80012d4:	601a      	str	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001a0 	.word	0x200001a0

080012e4 <nRF24_TxPacket>:


void nRF24_TxPacket(nRF24_Handler_t *device, uint8_t* Buf, uint32_t Len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012f6:	4822      	ldr	r0, [pc, #136]	@ (8001380 <nRF24_TxPacket+0x9c>)
 80012f8:	f001 faca 	bl	8002890 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < Len; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00c      	b.n	800131c <nRF24_TxPacket+0x38>
        device->tx_data[i] = *Buf++;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	7819      	ldrb	r1, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	3316      	adds	r3, #22
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < Len; i++) {
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3ee      	bcc.n	8001302 <nRF24_TxPacket+0x1e>
    }

    nRF24_WritePayload(device, device->tx_data, Len);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3316      	adds	r3, #22
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	4619      	mov	r1, r3
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f007 ff67 	bl	8009202 <nRF24_WritePayload>
    nRF24_CE_State(device, GPIO_PIN_SET);
 8001334:	2101      	movs	r1, #1
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f007 fb45 	bl	80089c6 <nRF24_CE_State>

    while (!(nrf_status & (nRF24_FLAG_TX_DS))) {
 800133c:	e006      	b.n	800134c <nRF24_TxPacket+0x68>
        nrf_status = nRF24_GetStatus(device);
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f007 fee3 	bl	800910a <nRF24_GetStatus>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <nRF24_TxPacket+0xa0>)
 800134a:	701a      	strb	r2, [r3, #0]
    while (!(nrf_status & (nRF24_FLAG_TX_DS))) {
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <nRF24_TxPacket+0xa0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f2      	beq.n	800133e <nRF24_TxPacket+0x5a>
    }

    nRF24_ClearIRQFlagsTx(device);
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f007 ff22 	bl	80091a2 <nRF24_ClearIRQFlagsTx>
    nRF24_FlushTX(device);
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f007 feed 	bl	800913e <nRF24_FlushTX>

    nRF24_CE_State(device, GPIO_PIN_RESET);
 8001364:	2100      	movs	r1, #0
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f007 fb2d 	bl	80089c6 <nRF24_CE_State>

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <nRF24_TxPacket+0x9c>)
 8001374:	f001 fa8c 	bl	8002890 <HAL_GPIO_WritePin>
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40022000 	.word	0x40022000
 8001384:	200000fb 	.word	0x200000fb

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	@ 0x40
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	210f      	movs	r1, #15
 80013c2:	f06f 0001 	mvn.w	r0, #1
 80013c6:	f001 f875 	bl	80024b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0b2      	sub	sp, #200	@ 0xc8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	2290      	movs	r2, #144	@ 0x90
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f008 f8d5 	bl	80095a8 <memset>
  if(hi2c->Instance==I2C1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a65      	ldr	r2, [pc, #404]	@ (8001598 <HAL_I2C_MspInit+0x1c0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d13d      	bne.n	8001484 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001408:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fd2d 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001424:	f7ff fe2e 	bl	8001084 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b5c      	ldr	r3, [pc, #368]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	4a5b      	ldr	r2, [pc, #364]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6313      	str	r3, [r2, #48]	@ 0x30
 8001434:	4b59      	ldr	r3, [pc, #356]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	623b      	str	r3, [r7, #32]
 800143e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001440:	23c0      	movs	r3, #192	@ 0xc0
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	2312      	movs	r3, #18
 8001448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144c:	2301      	movs	r3, #1
 800144e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001458:	2304      	movs	r3, #4
 800145a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001462:	4619      	mov	r1, r3
 8001464:	484e      	ldr	r0, [pc, #312]	@ (80015a0 <HAL_I2C_MspInit+0x1c8>)
 8001466:	f001 f84f 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146a:	4b4c      	ldr	r3, [pc, #304]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a4b      	ldr	r2, [pc, #300]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b49      	ldr	r3, [pc, #292]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001482:	e085      	b.n	8001590 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a46      	ldr	r2, [pc, #280]	@ (80015a4 <HAL_I2C_MspInit+0x1cc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d13d      	bne.n	800150a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800148e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fcea 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80014aa:	f7ff fdeb 	bl	8001084 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a3a      	ldr	r2, [pc, #232]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b38      	ldr	r3, [pc, #224]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014de:	2304      	movs	r3, #4
 80014e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014e8:	4619      	mov	r1, r3
 80014ea:	482f      	ldr	r0, [pc, #188]	@ (80015a8 <HAL_I2C_MspInit+0x1d0>)
 80014ec:	f001 f80c 	bl	8002508 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f0:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	4a29      	ldr	r2, [pc, #164]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 80014f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
}
 8001508:	e042      	b.n	8001590 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a27      	ldr	r2, [pc, #156]	@ (80015ac <HAL_I2C_MspInit+0x1d4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d13d      	bne.n	8001590 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fca7 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001530:	f7ff fda8 	bl	8001084 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4a18      	ldr	r2, [pc, #96]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 800153a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800154c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001566:	2304      	movs	r3, #4
 8001568:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800156c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001570:	4619      	mov	r1, r3
 8001572:	480f      	ldr	r0, [pc, #60]	@ (80015b0 <HAL_I2C_MspInit+0x1d8>)
 8001574:	f000 ffc8 	bl	8002508 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a07      	ldr	r2, [pc, #28]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 800157e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_I2C_MspInit+0x1c4>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	bf00      	nop
 8001592:	37c8      	adds	r7, #200	@ 0xc8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40005400 	.word	0x40005400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40005800 	.word	0x40005800
 80015a8:	40021400 	.word	0x40021400
 80015ac:	40005c00 	.word	0x40005c00
 80015b0:	40021c00 	.word	0x40021c00

080015b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_SPI_MspInit+0x7c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d127      	bne.n	8001626 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <HAL_SPI_MspInit+0x80>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <HAL_SPI_MspInit+0x80>)
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <HAL_SPI_MspInit+0x80>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_SPI_MspInit+0x80>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_SPI_MspInit+0x80>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_SPI_MspInit+0x80>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001606:	23e0      	movs	r3, #224	@ 0xe0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001616:	2305      	movs	r3, #5
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_SPI_MspInit+0x84>)
 8001622:	f000 ff71 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40013000 	.word	0x40013000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b090      	sub	sp, #64	@ 0x40
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165c:	d128      	bne.n	80016b0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	4b5b      	ldr	r3, [pc, #364]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a5a      	ldr	r2, [pc, #360]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b55      	ldr	r3, [pc, #340]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a54      	ldr	r2, [pc, #336]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b52      	ldr	r3, [pc, #328]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800168e:	2303      	movs	r3, #3
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800169e:	2301      	movs	r3, #1
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016a6:	4619      	mov	r1, r3
 80016a8:	4849      	ldr	r0, [pc, #292]	@ (80017d0 <HAL_TIM_Encoder_MspInit+0x194>)
 80016aa:	f000 ff2d 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016ae:	e089      	b.n	80017c4 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a47      	ldr	r2, [pc, #284]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0x198>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d128      	bne.n	800170c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ba:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a43      	ldr	r2, [pc, #268]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b41      	ldr	r3, [pc, #260]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b3e      	ldr	r3, [pc, #248]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a3d      	ldr	r2, [pc, #244]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ea:	23c0      	movs	r3, #192	@ 0xc0
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016fa:	2302      	movs	r3, #2
 80016fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	4834      	ldr	r0, [pc, #208]	@ (80017d8 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001706:	f000 feff 	bl	8002508 <HAL_GPIO_Init>
}
 800170a:	e05b      	b.n	80017c4 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a32      	ldr	r2, [pc, #200]	@ (80017dc <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d129      	bne.n	800176a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	6413      	str	r3, [r2, #64]	@ 0x40
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001746:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001758:	2302      	movs	r3, #2
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800175c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001760:	4619      	mov	r1, r3
 8001762:	481f      	ldr	r0, [pc, #124]	@ (80017e0 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001764:	f000 fed0 	bl	8002508 <HAL_GPIO_Init>
}
 8001768:	e02c      	b.n	80017c4 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d127      	bne.n	80017c4 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001790:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001796:	6313      	str	r3, [r2, #48]	@ 0x30
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x190>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017a4:	2360      	movs	r3, #96	@ 0x60
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017b4:	2303      	movs	r3, #3
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017bc:	4619      	mov	r1, r3
 80017be:	480a      	ldr	r0, [pc, #40]	@ (80017e8 <HAL_TIM_Encoder_MspInit+0x1ac>)
 80017c0:	f000 fea2 	bl	8002508 <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	3740      	adds	r7, #64	@ 0x40
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40000c00 	.word	0x40000c00
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40010400 	.word	0x40010400
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017fc:	4b2f      	ldr	r3, [pc, #188]	@ (80018bc <HAL_InitTick+0xd0>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	4a2e      	ldr	r2, [pc, #184]	@ (80018bc <HAL_InitTick+0xd0>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6453      	str	r3, [r2, #68]	@ 0x44
 8001808:	4b2c      	ldr	r3, [pc, #176]	@ (80018bc <HAL_InitTick+0xd0>)
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001814:	f107 020c 	add.w	r2, r7, #12
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f002 faf8 	bl	8003e14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001824:	f002 fae2 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8001828:	4603      	mov	r3, r0
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001830:	4a23      	ldr	r2, [pc, #140]	@ (80018c0 <HAL_InitTick+0xd4>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9b      	lsrs	r3, r3, #18
 8001838:	3b01      	subs	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <HAL_InitTick+0xd8>)
 800183e:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <HAL_InitTick+0xdc>)
 8001840:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001842:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <HAL_InitTick+0xd8>)
 8001844:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001848:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800184a:	4a1e      	ldr	r2, [pc, #120]	@ (80018c4 <HAL_InitTick+0xd8>)
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <HAL_InitTick+0xd8>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_InitTick+0xd8>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_InitTick+0xd8>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001862:	4818      	ldr	r0, [pc, #96]	@ (80018c4 <HAL_InitTick+0xd8>)
 8001864:	f003 fb76 	bl	8004f54 <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800186e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001872:	2b00      	cmp	r3, #0
 8001874:	d11b      	bne.n	80018ae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001876:	4813      	ldr	r0, [pc, #76]	@ (80018c4 <HAL_InitTick+0xd8>)
 8001878:	f003 fbce 	bl	8005018 <HAL_TIM_Base_Start_IT>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001886:	2b00      	cmp	r3, #0
 8001888:	d111      	bne.n	80018ae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800188a:	2019      	movs	r0, #25
 800188c:	f000 fe2e 	bl	80024ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	d808      	bhi.n	80018a8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001896:	2200      	movs	r2, #0
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	2019      	movs	r0, #25
 800189c:	f000 fe0a 	bl	80024b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_InitTick+0xe0>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e002      	b.n	80018ae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3730      	adds	r7, #48	@ 0x30
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	431bde83 	.word	0x431bde83
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	40010000 	.word	0x40010000
 80018cc:	20000034 	.word	0x20000034

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	bf00      	nop
 80018e4:	e7fd      	b.n	80018e2 <HardFault_Handler+0x4>

080018e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <BusFault_Handler+0x4>

080018f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fa:	bf00      	nop
 80018fc:	e7fd      	b.n	80018fa <UsageFault_Handler+0x4>

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001912:	f003 fc9f 	bl	8005254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200000ac 	.word	0x200000ac

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	@ 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2234      	movs	r2, #52	@ 0x34
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f007 fe3a 	bl	80095a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <SystemClock_Config+0xd4>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a2a      	ldr	r2, [pc, #168]	@ (80019f4 <SystemClock_Config+0xd4>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <SystemClock_Config+0xd4>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800195c:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <SystemClock_Config+0xd8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a25      	ldr	r2, [pc, #148]	@ (80019f8 <SystemClock_Config+0xd8>)
 8001962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <SystemClock_Config+0xd8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800197c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197e:	2302      	movs	r3, #2
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001988:	2304      	movs	r3, #4
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800198c:	23d8      	movs	r3, #216	@ 0xd8
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001990:	2302      	movs	r3, #2
 8001992:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001994:	2302      	movs	r3, #2
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001998:	2302      	movs	r3, #2
 800199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fd77 	bl	8003494 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019ac:	f7ff fb6a 	bl	8001084 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019b0:	f001 fd20 	bl	80033f4 <HAL_PWREx_EnableOverDrive>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019ba:	f7ff fb63 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019be:	230f      	movs	r3, #15
 80019c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c2:	2302      	movs	r3, #2
 80019c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2107      	movs	r1, #7
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f807 	bl	80039f0 <HAL_RCC_ClockConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80019e8:	f7ff fb4c 	bl	8001084 <Error_Handler>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3750      	adds	r7, #80	@ 0x50
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000

080019fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <MX_I2C1_Init+0x78>)
 8001a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a08:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <MX_I2C1_Init+0x7c>)
 8001a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a36:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a38:	f000 ff5e 	bl	80028f8 <HAL_I2C_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a42:	f7ff fb1f 	bl	8001084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a46:	2100      	movs	r1, #0
 8001a48:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a4a:	f001 fc3b 	bl	80032c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a54:	f7ff fb16 	bl	8001084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a5c:	f001 fc7d 	bl	800335a <HAL_I2CEx_ConfigDigitalFilter>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f7ff fb0d 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003e0 	.word	0x200003e0
 8001a74:	40005400 	.word	0x40005400
 8001a78:	6000030d 	.word	0x6000030d

08001a7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <MX_I2C2_Init+0x78>)
 8001a84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <MX_I2C2_Init+0x7c>)
 8001a8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001ab8:	f000 ff1e 	bl	80028f8 <HAL_I2C_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ac2:	f7ff fadf 	bl	8001084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aca:	f001 fbfb 	bl	80032c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ad4:	f7ff fad6 	bl	8001084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001adc:	f001 fc3d 	bl	800335a <HAL_I2CEx_ConfigDigitalFilter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ae6:	f7ff facd 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000434 	.word	0x20000434
 8001af4:	40005800 	.word	0x40005800
 8001af8:	6000030d 	.word	0x6000030d

08001afc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b02:	4a1c      	ldr	r2, [pc, #112]	@ (8001b74 <MX_I2C3_Init+0x78>)
 8001b04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b08:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <MX_I2C3_Init+0x7c>)
 8001b0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b38:	f000 fede 	bl	80028f8 <HAL_I2C_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b42:	f7ff fa9f 	bl	8001084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4809      	ldr	r0, [pc, #36]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b4a:	f001 fbbb 	bl	80032c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b54:	f7ff fa96 	bl	8001084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_I2C3_Init+0x74>)
 8001b5c:	f001 fbfd 	bl	800335a <HAL_I2CEx_ConfigDigitalFilter>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b66:	f7ff fa8d 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000488 	.word	0x20000488
 8001b74:	40005c00 	.word	0x40005c00
 8001b78:	6000030d 	.word	0x6000030d

08001b7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001b82:	4a1e      	ldr	r2, [pc, #120]	@ (8001bfc <MX_SPI1_Init+0x80>)
 8001b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001b88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b94:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001b96:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bb2:	2218      	movs	r2, #24
 8001bb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bca:	2207      	movs	r2, #7
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bda:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bdc:	f002 fd74 	bl	80046c8 <HAL_SPI_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001be6:	f7ff fa4d 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 8001bea:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <MX_SPI1_Init+0x7c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf2:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200004dc 	.word	0x200004dc
 8001bfc:	40013000 	.word	0x40013000

08001c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f007 fcca 	bl	80095a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c46:	2303      	movs	r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c72:	f003 fa49 	bl	8005108 <HAL_TIM_Encoder_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001c7c:	f7ff fa02 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c8e:	f003 fcc9 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c98:	f7ff f9f4 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	3730      	adds	r7, #48	@ 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000540 	.word	0x20000540

08001ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	@ 0x30
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2224      	movs	r2, #36	@ 0x24
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 fc76 	bl	80095a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001cc8:	4a21      	ldr	r2, [pc, #132]	@ (8001d50 <MX_TIM3_Init+0xa8>)
 8001cca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cec:	2303      	movs	r3, #3
 8001cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001d18:	f003 f9f6 	bl	8005108 <HAL_TIM_Encoder_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d22:	f7ff f9af 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001d34:	f003 fc76 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d3e:	f7ff f9a1 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	@ 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000058c 	.word	0x2000058c
 8001d50:	40000400 	.word	0x40000400

08001d54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2224      	movs	r2, #36	@ 0x24
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f007 fc20 	bl	80095a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001d74:	4a21      	ldr	r2, [pc, #132]	@ (8001dfc <MX_TIM5_Init+0xa8>)
 8001d76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001dc4:	f003 f9a0 	bl	8005108 <HAL_TIM_Encoder_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001dce:	f7ff f959 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dda:	463b      	mov	r3, r7
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	@ (8001df8 <MX_TIM5_Init+0xa4>)
 8001de0:	f003 fc20 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001dea:	f7ff f94b 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	@ 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200005d8 	.word	0x200005d8
 8001dfc:	40000c00 	.word	0x40000c00

08001e00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	@ 0x30
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	2224      	movs	r2, #36	@ 0x24
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f007 fbca 	bl	80095a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e20:	4a23      	ldr	r2, [pc, #140]	@ (8001eb0 <MX_TIM8_Init+0xb0>)
 8001e22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e24:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e38:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e52:	2301      	movs	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	4619      	mov	r1, r3
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e76:	f003 f947 	bl	8005108 <HAL_TIM_Encoder_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e80:	f7ff f900 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e90:	463b      	mov	r3, r7
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	@ (8001eac <MX_TIM8_Init+0xac>)
 8001e96:	f003 fbc5 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ea0:	f7ff f8f0 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	3730      	adds	r7, #48	@ 0x30
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000624 	.word	0x20000624
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b090      	sub	sp, #64	@ 0x40
 8001eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eca:	4bb3      	ldr	r3, [pc, #716]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4ab2      	ldr	r2, [pc, #712]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4bb0      	ldr	r3, [pc, #704]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ee2:	4bad      	ldr	r3, [pc, #692]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4aac      	ldr	r2, [pc, #688]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4baa      	ldr	r3, [pc, #680]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efa:	4ba7      	ldr	r3, [pc, #668]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4aa6      	ldr	r2, [pc, #664]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4ba4      	ldr	r3, [pc, #656]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4ba1      	ldr	r3, [pc, #644]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4aa0      	ldr	r2, [pc, #640]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b9b      	ldr	r3, [pc, #620]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a9a      	ldr	r2, [pc, #616]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b98      	ldr	r3, [pc, #608]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b95      	ldr	r3, [pc, #596]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a94      	ldr	r2, [pc, #592]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b92      	ldr	r3, [pc, #584]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a8e      	ldr	r2, [pc, #568]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b8c      	ldr	r3, [pc, #560]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	4b89      	ldr	r3, [pc, #548]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a88      	ldr	r2, [pc, #544]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b86      	ldr	r3, [pc, #536]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f8a:	4b83      	ldr	r3, [pc, #524]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a82      	ldr	r2, [pc, #520]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b80      	ldr	r3, [pc, #512]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001fa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b7a      	ldr	r3, [pc, #488]	@ (8002198 <MX_GPIO_Init+0x2e4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001fc0:	4876      	ldr	r0, [pc, #472]	@ (800219c <MX_GPIO_Init+0x2e8>)
 8001fc2:	f000 fc65 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f640 0138 	movw	r1, #2104	@ 0x838
 8001fcc:	4874      	ldr	r0, [pc, #464]	@ (80021a0 <MX_GPIO_Init+0x2ec>)
 8001fce:	f000 fc5f 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8001fd8:	4872      	ldr	r0, [pc, #456]	@ (80021a4 <MX_GPIO_Init+0x2f0>)
 8001fda:	f000 fc59 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fe4:	4870      	ldr	r0, [pc, #448]	@ (80021a8 <MX_GPIO_Init+0x2f4>)
 8001fe6:	f000 fc53 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001ff0:	486e      	ldr	r0, [pc, #440]	@ (80021ac <MX_GPIO_Init+0x2f8>)
 8001ff2:	f000 fc4d 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001ffc:	486c      	ldr	r0, [pc, #432]	@ (80021b0 <MX_GPIO_Init+0x2fc>)
 8001ffe:	f000 fc47 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2101      	movs	r1, #1
 8002006:	486b      	ldr	r0, [pc, #428]	@ (80021b4 <MX_GPIO_Init+0x300>)
 8002008:	f000 fc42 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002012:	4869      	ldr	r0, [pc, #420]	@ (80021b8 <MX_GPIO_Init+0x304>)
 8002014:	f000 fc3c 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	21c0      	movs	r1, #192	@ 0xc0
 800201c:	4867      	ldr	r0, [pc, #412]	@ (80021bc <MX_GPIO_Init+0x308>)
 800201e:	f000 fc37 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002022:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002038:	4619      	mov	r1, r3
 800203a:	4858      	ldr	r0, [pc, #352]	@ (800219c <MX_GPIO_Init+0x2e8>)
 800203c:	f000 fa64 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8002040:	f640 0338 	movw	r3, #2104	@ 0x838
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002056:	4619      	mov	r1, r3
 8002058:	4851      	ldr	r0, [pc, #324]	@ (80021a0 <MX_GPIO_Init+0x2ec>)
 800205a:	f000 fa55 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800205e:	2310      	movs	r3, #16
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800206a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800206e:	4619      	mov	r1, r3
 8002070:	4853      	ldr	r0, [pc, #332]	@ (80021c0 <MX_GPIO_Init+0x30c>)
 8002072:	f000 fa49 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002076:	2310      	movs	r3, #16
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002086:	4619      	mov	r1, r3
 8002088:	4849      	ldr	r0, [pc, #292]	@ (80021b0 <MX_GPIO_Init+0x2fc>)
 800208a:	f000 fa3d 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800208e:	2304      	movs	r3, #4
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800209e:	4619      	mov	r1, r3
 80020a0:	4841      	ldr	r0, [pc, #260]	@ (80021a8 <MX_GPIO_Init+0x2f4>)
 80020a2:	f000 fa31 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b8:	4619      	mov	r1, r3
 80020ba:	4838      	ldr	r0, [pc, #224]	@ (800219c <MX_GPIO_Init+0x2e8>)
 80020bc:	f000 fa24 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020c0:	2303      	movs	r3, #3
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4834      	ldr	r0, [pc, #208]	@ (80021a4 <MX_GPIO_Init+0x2f0>)
 80020d4:	f000 fa18 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80020d8:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ee:	4619      	mov	r1, r3
 80020f0:	482c      	ldr	r0, [pc, #176]	@ (80021a4 <MX_GPIO_Init+0x2f0>)
 80020f2:	f000 fa09 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	4826      	ldr	r0, [pc, #152]	@ (80021a8 <MX_GPIO_Init+0x2f4>)
 8002110:	f000 f9fa 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002114:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211a:	2301      	movs	r3, #1
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212a:	4619      	mov	r1, r3
 800212c:	481f      	ldr	r0, [pc, #124]	@ (80021ac <MX_GPIO_Init+0x2f8>)
 800212e:	f000 f9eb 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002132:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002148:	4619      	mov	r1, r3
 800214a:	4819      	ldr	r0, [pc, #100]	@ (80021b0 <MX_GPIO_Init+0x2fc>)
 800214c:	f000 f9dc 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002150:	2301      	movs	r3, #1
 8002152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002154:	2301      	movs	r3, #1
 8002156:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002160:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002164:	4619      	mov	r1, r3
 8002166:	4813      	ldr	r0, [pc, #76]	@ (80021b4 <MX_GPIO_Init+0x300>)
 8002168:	f000 f9ce 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800216c:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800217e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002182:	4619      	mov	r1, r3
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <MX_GPIO_Init+0x304>)
 8002186:	f000 f9bf 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800218a:	23c0      	movs	r3, #192	@ 0xc0
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	e016      	b.n	80021c4 <MX_GPIO_Init+0x310>
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40022400 	.word	0x40022400
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40022800 	.word	0x40022800
 80021c0:	40021c00 	.word	0x40021c00
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80021ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ce:	4619      	mov	r1, r3
 80021d0:	4803      	ldr	r0, [pc, #12]	@ (80021e0 <MX_GPIO_Init+0x32c>)
 80021d2:	f000 f999 	bl	8002508 <HAL_GPIO_Init>

 80021d6:	bf00      	nop
 80021d8:	3740      	adds	r7, #64	@ 0x40
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022800 	.word	0x40022800

080021e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <SystemInit+0x5c>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	4a14      	ldr	r2, [pc, #80]	@ (8002240 <SystemInit+0x5c>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <SystemInit+0x60>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a11      	ldr	r2, [pc, #68]	@ (8002244 <SystemInit+0x60>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002204:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <SystemInit+0x60>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800220a:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <SystemInit+0x60>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	490d      	ldr	r1, [pc, #52]	@ (8002244 <SystemInit+0x60>)
 8002210:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <SystemInit+0x64>)
 8002212:	4013      	ands	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002216:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <SystemInit+0x60>)
 8002218:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <SystemInit+0x68>)
 800221a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800221c:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <SystemInit+0x60>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <SystemInit+0x60>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <SystemInit+0x60>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800222e:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <SystemInit+0x5c>)
 8002230:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002234:	609a      	str	r2, [r3, #8]
#endif
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00
 8002244:	40023800 	.word	0x40023800
 8002248:	fef6ffff 	.word	0xfef6ffff
 800224c:	24003010 	.word	0x24003010

08002250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002288 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002254:	480d      	ldr	r0, [pc, #52]	@ (800228c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002256:	490e      	ldr	r1, [pc, #56]	@ (8002290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002258:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800225c:	e002      	b.n	8002264 <LoopCopyDataInit>

0800225e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002262:	3304      	adds	r3, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002268:	d3f9      	bcc.n	800225e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226a:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800226c:	4c0b      	ldr	r4, [pc, #44]	@ (800229c <LoopFillZerobss+0x26>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002270:	e001      	b.n	8002276 <LoopFillZerobss>

08002272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002274:	3204      	adds	r2, #4

08002276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002278:	d3fb      	bcc.n	8002272 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227a:	f7ff ffb3 	bl	80021e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f007 f9a1 	bl	80095c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002282:	f7fe fdf5 	bl	8000e70 <main>
  bx  lr    
 8002286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002288:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002294:	0800976c 	.word	0x0800976c
  ldr r2, =_sbss
 8002298:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800229c:	200044f8 	.word	0x200044f8

080022a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC_IRQHandler>

080022a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a6:	2003      	movs	r0, #3
 80022a8:	f000 f8f9 	bl	800249e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff fa9d 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b2:	f7ff f869 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000038 	.word	0x20000038
 80022e0:	20000670 	.word	0x20000670

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000670 	.word	0x20000670

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffde 	bl	80022e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000038 	.word	0x20000038

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	05fa0000 	.word	0x05fa0000

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff4c 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c6:	f7ff ff61 	bl	800238c <__NVIC_GetPriorityGrouping>
 80024ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	6978      	ldr	r0, [r7, #20]
 80024d2:	f7ff ffb1 	bl	8002438 <NVIC_EncodePriority>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff80 	bl	80023e4 <__NVIC_SetPriority>
}
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ff54 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e175      	b.n	8002814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8164 	bne.w	800280e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x56>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80be 	beq.w	800280e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	4b66      	ldr	r3, [pc, #408]	@ (800282c <HAL_GPIO_Init+0x324>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a65      	ldr	r2, [pc, #404]	@ (800282c <HAL_GPIO_Init+0x324>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b63      	ldr	r3, [pc, #396]	@ (800282c <HAL_GPIO_Init+0x324>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026aa:	4a61      	ldr	r2, [pc, #388]	@ (8002830 <HAL_GPIO_Init+0x328>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a58      	ldr	r2, [pc, #352]	@ (8002834 <HAL_GPIO_Init+0x32c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d037      	beq.n	8002746 <HAL_GPIO_Init+0x23e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a57      	ldr	r2, [pc, #348]	@ (8002838 <HAL_GPIO_Init+0x330>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d031      	beq.n	8002742 <HAL_GPIO_Init+0x23a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a56      	ldr	r2, [pc, #344]	@ (800283c <HAL_GPIO_Init+0x334>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02b      	beq.n	800273e <HAL_GPIO_Init+0x236>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a55      	ldr	r2, [pc, #340]	@ (8002840 <HAL_GPIO_Init+0x338>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d025      	beq.n	800273a <HAL_GPIO_Init+0x232>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a54      	ldr	r2, [pc, #336]	@ (8002844 <HAL_GPIO_Init+0x33c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01f      	beq.n	8002736 <HAL_GPIO_Init+0x22e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a53      	ldr	r2, [pc, #332]	@ (8002848 <HAL_GPIO_Init+0x340>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x22a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_GPIO_Init+0x344>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x226>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	@ (8002850 <HAL_GPIO_Init+0x348>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x222>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_GPIO_Init+0x34c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	@ (8002858 <HAL_GPIO_Init+0x350>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x21a>
 800271e:	2309      	movs	r3, #9
 8002720:	e012      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002722:	230a      	movs	r3, #10
 8002724:	e010      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002726:	2308      	movs	r3, #8
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800272a:	2307      	movs	r3, #7
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	@ (8002830 <HAL_GPIO_Init+0x328>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <HAL_GPIO_Init+0x354>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a34      	ldr	r2, [pc, #208]	@ (800285c <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <HAL_GPIO_Init+0x354>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a29      	ldr	r2, [pc, #164]	@ (800285c <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b28      	ldr	r3, [pc, #160]	@ (800285c <HAL_GPIO_Init+0x354>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <HAL_GPIO_Init+0x354>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_GPIO_Init+0x354>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <HAL_GPIO_Init+0x354>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae86 	bls.w	8002528 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800
 8002850:	40021c00 	.word	0x40021c00
 8002854:	40022000 	.word	0x40022000
 8002858:	40022400 	.word	0x40022400
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	e001      	b.n	8002882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d4:	887a      	ldrh	r2, [r7, #2]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43d9      	mvns	r1, r3
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	400b      	ands	r3, r1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fd5a 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	@ 0x24
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002948:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002958:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e006      	b.n	8002980 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800297e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d104      	bne.n	8002992 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <HAL_I2C_Init+0x11c>)
 800299e:	430b      	orrs	r3, r1
 80029a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	02008000 	.word	0x02008000

08002a18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	461a      	mov	r2, r3
 8002a24:	460b      	mov	r3, r1
 8002a26:	817b      	strh	r3, [r7, #10]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	f040 80da 	bne.w	8002bee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x30>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0d3      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a50:	f7ff fc48 	bl	80022e4 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2319      	movs	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f9e6 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0be      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2221      	movs	r2, #33	@ 0x21
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2bff      	cmp	r3, #255	@ 0xff
 8002aa2:	d90e      	bls.n	8002ac2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	22ff      	movs	r2, #255	@ 0xff
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	4b51      	ldr	r3, [pc, #324]	@ (8002bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fbd0 	bl	8003260 <I2C_TransferConfig>
 8002ac0:	e06c      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	4b48      	ldr	r3, [pc, #288]	@ (8002bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fbbf 	bl	8003260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ae2:	e05b      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	6a39      	ldr	r1, [r7, #32]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f9e3 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e07b      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d034      	beq.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d130      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f975 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e04d      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2bff      	cmp	r3, #255	@ 0xff
 8002b5c:	d90e      	bls.n	8002b7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	22ff      	movs	r2, #255	@ 0xff
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fb73 	bl	8003260 <I2C_TransferConfig>
 8002b7a:	e00f      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb62 	bl	8003260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d19e      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f9c2 	bl	8002f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e01a      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_I2C_Master_Transmit+0x1e4>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	80002000 	.word	0x80002000
 8002bfc:	fe00e800 	.word	0xfe00e800

08002c00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 80db 	bne.w	8002dd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Receive+0x30>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0d4      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c38:	f7ff fb54 	bl	80022e4 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2319      	movs	r3, #25
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8f2 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0bf      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2222      	movs	r2, #34	@ 0x22
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2210      	movs	r2, #16
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2bff      	cmp	r3, #255	@ 0xff
 8002c8a:	d90e      	bls.n	8002caa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <HAL_I2C_Master_Receive+0x1e4>)
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fadc 	bl	8003260 <I2C_TransferConfig>
 8002ca8:	e06d      	b.n	8002d86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	4b49      	ldr	r3, [pc, #292]	@ (8002de4 <HAL_I2C_Master_Receive+0x1e4>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 facb 	bl	8003260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002cca:	e05c      	b.n	8002d86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f96b 	bl	8002fac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e07c      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d034      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x186>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d130      	bne.n	8002d86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	@ 0x80
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f880 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e04d      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2bff      	cmp	r3, #255	@ 0xff
 8002d46:	d90e      	bls.n	8002d66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	22ff      	movs	r2, #255	@ 0xff
 8002d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	8979      	ldrh	r1, [r7, #10]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fa7e 	bl	8003260 <I2C_TransferConfig>
 8002d64:	e00f      	b.n	8002d86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fa6d 	bl	8003260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d19d      	bne.n	8002ccc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6a39      	ldr	r1, [r7, #32]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8cd 	bl	8002f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e01a      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2220      	movs	r2, #32
 8002daa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_I2C_Master_Receive+0x1e8>)
 8002db8:	400b      	ands	r3, r1
 8002dba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	80002400 	.word	0x80002400
 8002de8:	fe00e800 	.word	0xfe00e800

08002dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d103      	bne.n	8002e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d007      	beq.n	8002e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	619a      	str	r2, [r3, #24]
  }
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e022      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d01e      	beq.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7ff fa49 	bl	80022e4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d113      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e00f      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d0cd      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec0:	e02c      	b.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f8ea 	bl	80030a0 <I2C_IsErrorOccurred>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02a      	b.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d01e      	beq.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7ff fa01 	bl	80022e4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d113      	bne.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d1cb      	bne.n	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f40:	e028      	b.n	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f8aa 	bl	80030a0 <I2C_IsErrorOccurred>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e026      	b.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7ff f9c5 	bl	80022e4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d113      	bne.n	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d1cf      	bne.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fb8:	e064      	b.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f86e 	bl	80030a0 <I2C_IsErrorOccurred>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e062      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d138      	bne.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d105      	bne.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e04e      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b10      	cmp	r3, #16
 8003002:	d107      	bne.n	8003014 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2210      	movs	r2, #16
 800300a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2204      	movs	r2, #4
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
 8003012:	e002      	b.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2220      	movs	r2, #32
 8003020:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800302e:	400b      	ands	r3, r1
 8003030:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e022      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7ff f949 	bl	80022e4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10f      	bne.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d193      	bne.n	8002fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fe00e800 	.word	0xfe00e800

080030a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d068      	beq.n	800319e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030d4:	e049      	b.n	800316a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d045      	beq.n	800316a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7ff f901 	bl	80022e4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_IsErrorOccurred+0x54>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13a      	bne.n	800316a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003116:	d121      	bne.n	800315c <I2C_IsErrorOccurred+0xbc>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800311e:	d01d      	beq.n	800315c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b20      	cmp	r3, #32
 8003124:	d01a      	beq.n	800315c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003136:	f7ff f8d5 	bl	80022e4 <HAL_GetTick>
 800313a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313c:	e00e      	b.n	800315c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800313e:	f7ff f8d1 	bl	80022e4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b19      	cmp	r3, #25
 800314a:	d907      	bls.n	800315c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0320 	orr.w	r3, r3, #32
 8003152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800315a:	e006      	b.n	800316a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d1e9      	bne.n	800313e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d003      	beq.n	8003180 <I2C_IsErrorOccurred+0xe0>
 8003178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0aa      	beq.n	80030d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800320c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01c      	beq.n	800324e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fde9 	bl	8002dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <I2C_IsErrorOccurred+0x1bc>)
 8003226:	400b      	ands	r3, r1
 8003228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003252:	4618      	mov	r0, r3
 8003254:	3728      	adds	r7, #40	@ 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	fe00e800 	.word	0xfe00e800

08003260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	4613      	mov	r3, r2
 8003270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003278:	7a7b      	ldrb	r3, [r7, #9]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	4313      	orrs	r3, r2
 800328a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800328e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	0d5b      	lsrs	r3, r3, #21
 800329a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <I2C_TransferConfig+0x60>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	43db      	mvns	r3, r3
 80032a4:	ea02 0103 	and.w	r1, r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	03ff63ff 	.word	0x03ff63ff

080032c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d138      	bne.n	800334c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e032      	b.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	@ 0x24
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d139      	bne.n	80033e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800337a:	2302      	movs	r3, #2
 800337c:	e033      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2224      	movs	r2, #36	@ 0x24
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_PWREx_EnableOverDrive+0x98>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	4a22      	ldr	r2, [pc, #136]	@ (800348c <HAL_PWREx_EnableOverDrive+0x98>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	@ 0x40
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_PWREx_EnableOverDrive+0x98>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003416:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003422:	f7fe ff5f 	bl	80022e4 <HAL_GetTick>
 8003426:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003428:	e009      	b.n	800343e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800342a:	f7fe ff5b 	bl	80022e4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003438:	d901      	bls.n	800343e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e022      	b.n	8003484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800343e:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344a:	d1ee      	bne.n	800342a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800344c:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0f      	ldr	r2, [pc, #60]	@ (8003490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003458:	f7fe ff44 	bl	80022e4 <HAL_GetTick>
 800345c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800345e:	e009      	b.n	8003474 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003460:	f7fe ff40 	bl	80022e4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800346e:	d901      	bls.n	8003474 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e007      	b.n	8003484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003480:	d1ee      	bne.n	8003460 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	40007000 	.word	0x40007000

08003494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e29b      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8087 	beq.w	80035c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b8:	4b96      	ldr	r3, [pc, #600]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d00c      	beq.n	80034de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c4:	4b93      	ldr	r3, [pc, #588]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d112      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62>
 80034d0:	4b90      	ldr	r3, [pc, #576]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034dc:	d10b      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034de:	4b8d      	ldr	r3, [pc, #564]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d06c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x130>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d168      	bne.n	80035c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e275      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x7a>
 8003500:	4b84      	ldr	r3, [pc, #528]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a83      	ldr	r2, [pc, #524]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e02e      	b.n	800356c <HAL_RCC_OscConfig+0xd8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x9c>
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a7e      	ldr	r2, [pc, #504]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800351c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b7c      	ldr	r3, [pc, #496]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7b      	ldr	r2, [pc, #492]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xd8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0xc0>
 800353a:	4b76      	ldr	r3, [pc, #472]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b73      	ldr	r3, [pc, #460]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a72      	ldr	r2, [pc, #456]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xd8>
 8003554:	4b6f      	ldr	r3, [pc, #444]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b6c      	ldr	r3, [pc, #432]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe feb6 	bl	80022e4 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe feb2 	bl	80022e4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	@ 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e229      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b61      	ldr	r3, [pc, #388]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xe8>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fea2 	bl	80022e4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fe9e 	bl	80022e4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e215      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b57      	ldr	r3, [pc, #348]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x110>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d069      	beq.n	80036a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d2:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035de:	4b4d      	ldr	r3, [pc, #308]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d11c      	bne.n	8003624 <HAL_RCC_OscConfig+0x190>
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d116      	bne.n	8003624 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x17a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e1e9      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	493d      	ldr	r1, [pc, #244]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	e040      	b.n	80036a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d023      	beq.n	8003674 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362c:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a38      	ldr	r2, [pc, #224]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fe54 	bl	80022e4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe fe50 	bl	80022e4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1c7      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4929      	ldr	r1, [pc, #164]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
 8003672:	e018      	b.n	80036a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003674:	4b27      	ldr	r3, [pc, #156]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a26      	ldr	r2, [pc, #152]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fe30 	bl	80022e4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fe fe2c 	bl	80022e4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1a3      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	4b1e      	ldr	r3, [pc, #120]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d038      	beq.n	8003724 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80036bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036be:	4a15      	ldr	r2, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7fe fe0d 	bl	80022e4 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ce:	f7fe fe09 	bl	80022e4 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e180      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80036e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x23a>
 80036ec:	e01a      	b.n	8003724 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <HAL_RCC_OscConfig+0x280>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe fdf3 	bl	80022e4 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe fdef 	bl	80022e4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d903      	bls.n	8003718 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e166      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
 8003714:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b92      	ldr	r3, [pc, #584]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ee      	bne.n	8003702 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a4 	beq.w	800387a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b8c      	ldr	r3, [pc, #560]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4b89      	ldr	r3, [pc, #548]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	4a88      	ldr	r2, [pc, #544]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	@ 0x40
 800374a:	4b86      	ldr	r3, [pc, #536]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375a:	4b83      	ldr	r3, [pc, #524]	@ (8003968 <HAL_RCC_OscConfig+0x4d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003766:	4b80      	ldr	r3, [pc, #512]	@ (8003968 <HAL_RCC_OscConfig+0x4d4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a7f      	ldr	r2, [pc, #508]	@ (8003968 <HAL_RCC_OscConfig+0x4d4>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fe fdb7 	bl	80022e4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7fe fdb3 	bl	80022e4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b64      	cmp	r3, #100	@ 0x64
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e12a      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378c:	4b76      	ldr	r3, [pc, #472]	@ (8003968 <HAL_RCC_OscConfig+0x4d4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x31a>
 80037a0:	4b70      	ldr	r3, [pc, #448]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4a6f      	ldr	r2, [pc, #444]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ac:	e02d      	b.n	800380a <HAL_RCC_OscConfig+0x376>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x33c>
 80037b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c2:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	4a67      	ldr	r2, [pc, #412]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ce:	e01c      	b.n	800380a <HAL_RCC_OscConfig+0x376>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x35e>
 80037d8:	4b62      	ldr	r3, [pc, #392]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a61      	ldr	r2, [pc, #388]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	4b5f      	ldr	r3, [pc, #380]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f0:	e00b      	b.n	800380a <HAL_RCC_OscConfig+0x376>
 80037f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fe:	4b59      	ldr	r3, [pc, #356]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	4a58      	ldr	r2, [pc, #352]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d015      	beq.n	800383e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fe fd67 	bl	80022e4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fe fd63 	bl	80022e4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0d8      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	4b4c      	ldr	r3, [pc, #304]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ee      	beq.n	800381a <HAL_RCC_OscConfig+0x386>
 800383c:	e014      	b.n	8003868 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fe fd51 	bl	80022e4 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fe fd4d 	bl	80022e4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0c2      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	4b41      	ldr	r3, [pc, #260]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ee      	bne.n	8003846 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386e:	4b3d      	ldr	r3, [pc, #244]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	4a3c      	ldr	r2, [pc, #240]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80ae 	beq.w	80039e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003884:	4b37      	ldr	r3, [pc, #220]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	2b08      	cmp	r3, #8
 800388e:	d06d      	beq.n	800396c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d14b      	bne.n	8003930 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003898:	4b32      	ldr	r3, [pc, #200]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a31      	ldr	r2, [pc, #196]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fd1e 	bl	80022e4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe fd1a 	bl	80022e4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e091      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b29      	ldr	r3, [pc, #164]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	491b      	ldr	r1, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe fcec 	bl	80022e4 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fce8 	bl	80022e4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e05f      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x47c>
 800392e:	e057      	b.n	80039e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0b      	ldr	r2, [pc, #44]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe fcd2 	bl	80022e4 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fcce 	bl	80022e4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e045      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x4b0>
 8003962:	e03d      	b.n	80039e0 <HAL_RCC_OscConfig+0x54c>
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800396c:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <HAL_RCC_OscConfig+0x558>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d030      	beq.n	80039dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d129      	bne.n	80039dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d122      	bne.n	80039dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d119      	bne.n	80039dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d10f      	bne.n	80039dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0d0      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d910      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b67      	ldr	r3, [pc, #412]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 020f 	bic.w	r2, r3, #15
 8003a1e:	4965      	ldr	r1, [pc, #404]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d040      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d115      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b41      	ldr	r3, [pc, #260]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e073      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06b      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4936      	ldr	r1, [pc, #216]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fe fbfe 	bl	80022e4 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7fe fbfa 	bl	80022e4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e053      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b27      	ldr	r3, [pc, #156]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d210      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4922      	ldr	r1, [pc, #136]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f821 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	@ (8003bbc <HAL_RCC_ClockConfig+0x1cc>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fe22 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08009734 	.word	0x08009734
 8003bc0:	20000030 	.word	0x20000030
 8003bc4:	20000034 	.word	0x20000034

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bcc:	b094      	sub	sp, #80	@ 0x50
 8003bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	2300      	movs	r3, #0
 8003bda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be0:	4b79      	ldr	r3, [pc, #484]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x40>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f200 80e1 	bhi.w	8003db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x34>
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfa:	e0db      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b73      	ldr	r3, [pc, #460]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c00:	e0db      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c02:	4b73      	ldr	r3, [pc, #460]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c06:	e0d8      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c08:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c12:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d063      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	2200      	movs	r2, #0
 8003c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c32:	2300      	movs	r3, #0
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4621      	mov	r1, r4
 8003c54:	1a51      	subs	r1, r2, r1
 8003c56:	6139      	str	r1, [r7, #16]
 8003c58:	4629      	mov	r1, r5
 8003c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	018b      	lsls	r3, r1, #6
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c76:	4651      	mov	r1, sl
 8003c78:	018a      	lsls	r2, r1, #6
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c80:	4659      	mov	r1, fp
 8003c82:	eb63 0901 	sbc.w	r9, r3, r1
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9a:	4690      	mov	r8, r2
 8003c9c:	4699      	mov	r9, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	eb18 0303 	adds.w	r3, r8, r3
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	eb49 0303 	adc.w	r3, r9, r3
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	024b      	lsls	r3, r1, #9
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	024a      	lsls	r2, r1, #9
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cce:	2200      	movs	r2, #0
 8003cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cd8:	f7fc fab2 	bl	8000240 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce4:	e058      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b38      	ldr	r3, [pc, #224]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	2200      	movs	r2, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d00:	4642      	mov	r2, r8
 8003d02:	464b      	mov	r3, r9
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	0159      	lsls	r1, r3, #5
 8003d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d12:	0150      	lsls	r0, r2, #5
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d1e:	4649      	mov	r1, r9
 8003d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d38:	ebb2 040a 	subs.w	r4, r2, sl
 8003d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	00eb      	lsls	r3, r5, #3
 8003d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4e:	00e2      	lsls	r2, r4, #3
 8003d50:	4614      	mov	r4, r2
 8003d52:	461d      	mov	r5, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	18e3      	adds	r3, r4, r3
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	eb45 0303 	adc.w	r3, r5, r3
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	028b      	lsls	r3, r1, #10
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d78:	4621      	mov	r1, r4
 8003d7a:	028a      	lsls	r2, r1, #10
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d82:	2200      	movs	r2, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	61fa      	str	r2, [r7, #28]
 8003d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8c:	f7fc fa58 	bl	8000240 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3750      	adds	r7, #80	@ 0x50
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	007a1200 	.word	0x007a1200

08003dd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000030 	.word	0x20000030

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08009744 	.word	0x08009744

08003e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	220f      	movs	r2, #15
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e48:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_RCC_GetClockConfig+0x60>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea0:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003eaa:	6093      	str	r3, [r2, #8]
 8003eac:	4b66      	ldr	r3, [pc, #408]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb4:	4964      	ldr	r1, [pc, #400]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ed8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	4959      	ldr	r1, [pc, #356]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d017      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	494a      	ldr	r1, [pc, #296]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 808b 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	4a39      	ldr	r2, [pc, #228]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f68:	4b37      	ldr	r3, [pc, #220]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f74:	4b35      	ldr	r3, [pc, #212]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a34      	ldr	r2, [pc, #208]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fe f9b0 	bl	80022e4 <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fe f9ac 	bl	80022e4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	@ 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e38f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fa6:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d035      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d02e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fc4:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fce:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	4a1a      	ldr	r2, [pc, #104]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fec:	4b16      	ldr	r3, [pc, #88]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d114      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f974 	bl	80022e4 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe f970 	bl	80022e4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e351      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ee      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800402e:	d111      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800403e:	400b      	ands	r3, r1
 8004040:	4901      	ldr	r1, [pc, #4]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
 8004050:	0ffffcff 	.word	0x0ffffcff
 8004054:	4bac      	ldr	r3, [pc, #688]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4aab      	ldr	r2, [pc, #684]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800405e:	6093      	str	r3, [r2, #8]
 8004060:	4ba9      	ldr	r3, [pc, #676]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	49a6      	ldr	r1, [pc, #664]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	4313      	orrs	r3, r2
 8004070:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800407e:	4ba2      	ldr	r3, [pc, #648]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004084:	4aa0      	ldr	r2, [pc, #640]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800408a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800408e:	4b9e      	ldr	r3, [pc, #632]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	499b      	ldr	r1, [pc, #620]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ac:	4b96      	ldr	r3, [pc, #600]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ba:	4993      	ldr	r1, [pc, #588]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ce:	4b8e      	ldr	r3, [pc, #568]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040dc:	498a      	ldr	r1, [pc, #552]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f0:	4b85      	ldr	r3, [pc, #532]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fe:	4982      	ldr	r1, [pc, #520]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004112:	4b7d      	ldr	r3, [pc, #500]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004118:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004120:	4979      	ldr	r1, [pc, #484]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004134:	4b74      	ldr	r3, [pc, #464]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	4971      	ldr	r1, [pc, #452]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004156:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415c:	f023 020c 	bic.w	r2, r3, #12
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004164:	4968      	ldr	r1, [pc, #416]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004178:	4b63      	ldr	r3, [pc, #396]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004186:	4960      	ldr	r1, [pc, #384]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800419a:	4b5b      	ldr	r3, [pc, #364]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a8:	4957      	ldr	r1, [pc, #348]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041bc:	4b52      	ldr	r3, [pc, #328]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	494f      	ldr	r1, [pc, #316]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	4946      	ldr	r1, [pc, #280]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004200:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	493e      	ldr	r1, [pc, #248]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004222:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004228:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004230:	4935      	ldr	r1, [pc, #212]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004244:	4b30      	ldr	r3, [pc, #192]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004252:	492d      	ldr	r1, [pc, #180]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004266:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004274:	4924      	ldr	r1, [pc, #144]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004284:	d101      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a6:	4b18      	ldr	r3, [pc, #96]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b4:	4914      	ldr	r1, [pc, #80]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d8:	490b      	ldr	r1, [pc, #44]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fc:	4902      	ldr	r1, [pc, #8]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004304:	e002      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004318:	4b8a      	ldr	r3, [pc, #552]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800431e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	4986      	ldr	r1, [pc, #536]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800433c:	4b81      	ldr	r3, [pc, #516]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004342:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800434c:	497d      	ldr	r1, [pc, #500]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d006      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d6 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004368:	4b76      	ldr	r3, [pc, #472]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a75      	ldr	r2, [pc, #468]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd ffb6 	bl	80022e4 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437c:	f7fd ffb2 	bl	80022e4 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e195      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438e:	4b6d      	ldr	r3, [pc, #436]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d021      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11d      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ae:	4b65      	ldr	r3, [pc, #404]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043bc:	4b61      	ldr	r3, [pc, #388]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c2:	0e1b      	lsrs	r3, r3, #24
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	4958      	ldr	r1, [pc, #352]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004414:	d129      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004416:	4b4b      	ldr	r3, [pc, #300]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004424:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800442a:	0f1b      	lsrs	r3, r3, #28
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	493e      	ldr	r1, [pc, #248]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004452:	4b3c      	ldr	r3, [pc, #240]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004458:	f023 021f 	bic.w	r2, r3, #31
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	3b01      	subs	r3, #1
 8004462:	4938      	ldr	r1, [pc, #224]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004476:	4b33      	ldr	r3, [pc, #204]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004484:	4b2f      	ldr	r3, [pc, #188]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448a:	0f1b      	lsrs	r3, r3, #28
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	019a      	lsls	r2, r3, #6
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	4926      	ldr	r1, [pc, #152]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d011      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	019a      	lsls	r2, r3, #6
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	491a      	ldr	r1, [pc, #104]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e2:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ee:	f7fd fef9 	bl	80022e4 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044f6:	f7fd fef5 	bl	80022e4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	@ 0x64
 8004502:	d901      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0d8      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	f040 80ce 	bne.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004528:	f7fd fedc 	bl	80022e4 <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004530:	f7fd fed8 	bl	80022e4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	@ 0x64
 800453c:	d904      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0bb      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004548:	4b5e      	ldr	r3, [pc, #376]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004554:	d0ec      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800457e:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800458c:	4b4d      	ldr	r3, [pc, #308]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	4944      	ldr	r1, [pc, #272]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ba:	4b42      	ldr	r3, [pc, #264]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	493d      	ldr	r1, [pc, #244]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e8:	d11d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ea:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f8:	4b32      	ldr	r3, [pc, #200]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	0f1b      	lsrs	r3, r3, #28
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	019a      	lsls	r2, r3, #6
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	4929      	ldr	r1, [pc, #164]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004640:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	071b      	lsls	r3, r3, #28
 8004666:	4917      	ldr	r1, [pc, #92]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004674:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	4911      	ldr	r1, [pc, #68]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004684:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a0e      	ldr	r2, [pc, #56]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fd fe28 	bl	80022e4 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004698:	f7fd fe24 	bl	80022e4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e007      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b6:	d1ef      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e09d      	b.n	8004816 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc ff4a 	bl	80015b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004740:	d902      	bls.n	8004748 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e002      	b.n	800474e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800474c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004756:	d007      	beq.n	8004768 <HAL_SPI_Init+0xa0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047aa:	ea42 0103 	orr.w	r1, r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 0204 	and.w	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b08a      	sub	sp, #40	@ 0x28
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800482c:	2301      	movs	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x26>
 8004840:	2302      	movs	r3, #2
 8004842:	e1fb      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x41e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800484c:	f7fd fd4a 	bl	80022e4 <HAL_GetTick>
 8004850:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004858:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004864:	887b      	ldrh	r3, [r7, #2]
 8004866:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004868:	7efb      	ldrb	r3, [r7, #27]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d00e      	beq.n	800488c <HAL_SPI_TransmitReceive+0x6e>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004874:	d106      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x66>
 800487e:	7efb      	ldrb	r3, [r7, #27]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d003      	beq.n	800488c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004884:	2302      	movs	r3, #2
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800488a:	e1cd      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_SPI_TransmitReceive+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_SPI_TransmitReceive+0x80>
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d103      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80048a4:	e1c0      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d003      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2205      	movs	r2, #5
 80048b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	887a      	ldrh	r2, [r7, #2]
 80048ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	887a      	ldrh	r2, [r7, #2]
 80048e6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048fc:	d802      	bhi.n	8004904 <HAL_SPI_TransmitReceive+0xe6>
 80048fe:	8a3b      	ldrh	r3, [r7, #16]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d908      	bls.n	8004916 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004912:	605a      	str	r2, [r3, #4]
 8004914:	e007      	b.n	8004926 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	d007      	beq.n	8004944 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800494c:	d97c      	bls.n	8004a48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SPI_TransmitReceive+0x13e>
 8004956:	8a7b      	ldrh	r3, [r7, #18]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d169      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	1c9a      	adds	r2, r3, #2
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004980:	e056      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d11b      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x1aa>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x1aa>
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	2b01      	cmp	r3, #1
 800499e:	d113      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	1c9a      	adds	r2, r3, #2
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d11c      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x1f2>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	b292      	uxth	r2, r2
 80049ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	1c9a      	adds	r2, r3, #2
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a10:	f7fd fc68 	bl	80022e4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d807      	bhi.n	8004a30 <HAL_SPI_TransmitReceive+0x212>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d003      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004a2e:	e0fb      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1a3      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x164>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d19d      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x164>
 8004a46:	e0df      	b.n	8004c08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x23a>
 8004a50:	8a7b      	ldrh	r3, [r7, #18]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	f040 80cb 	bne.w	8004bee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d912      	bls.n	8004a88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b02      	subs	r3, #2
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a86:	e0b2      	b.n	8004bee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aae:	e09e      	b.n	8004bee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d134      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x30a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02f      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x30a>
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d12c      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d912      	bls.n	8004afe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b02      	subs	r3, #2
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004afc:	e012      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d148      	bne.n	8004bc8 <HAL_SPI_TransmitReceive+0x3aa>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d042      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d923      	bls.n	8004b96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b02      	subs	r3, #2
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d81f      	bhi.n	8004bc4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	e016      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f103 020c 	add.w	r2, r3, #12
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bc8:	f7fd fb8c 	bl	80022e4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d803      	bhi.n	8004be0 <HAL_SPI_TransmitReceive+0x3c2>
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d102      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x3c8>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004bec:	e01c      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f47f af5b 	bne.w	8004ab0 <HAL_SPI_TransmitReceive+0x292>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f47f af54 	bne.w	8004ab0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f937 	bl	8004e80 <SPI_EndRxTxTransaction>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c24:	e000      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3728      	adds	r7, #40	@ 0x28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c54:	f7fd fb46 	bl	80022e4 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c64:	f7fd fb3e 	bl	80022e4 <HAL_GetTick>
 8004c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	015b      	lsls	r3, r3, #5
 8004c70:	0d1b      	lsrs	r3, r3, #20
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c7a:	e054      	b.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d050      	beq.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c84:	f7fd fb2e 	bl	80022e4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d902      	bls.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d13d      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb2:	d111      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbc:	d004      	beq.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d107      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce0:	d10f      	bne.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e017      	b.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d19b      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000030 	.word	0x20000030

08004d54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08a      	sub	sp, #40	@ 0x28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d66:	f7fd fabd 	bl	80022e4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	4413      	add	r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d76:	f7fd fab5 	bl	80022e4 <HAL_GetTick>
 8004d7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d84:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00da      	lsls	r2, r3, #3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	0d1b      	lsrs	r3, r3, #20
 8004d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d9c:	e060      	b.n	8004e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004da4:	d107      	bne.n	8004db6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d050      	beq.n	8004e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dbe:	f7fd fa91 	bl	80022e4 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d902      	bls.n	8004dd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d13d      	bne.n	8004e50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004de2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dec:	d111      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df6:	d004      	beq.n	8004e02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e00:	d107      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1a:	d10f      	bne.n	8004e3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e010      	b.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d196      	bne.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3728      	adds	r7, #40	@ 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000030 	.word	0x20000030

08004e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff ff5b 	bl	8004d54 <SPI_WaitFifoStateUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e046      	b.n	8004f42 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eb4:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <SPI_EndRxTxTransaction+0xcc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a25      	ldr	r2, [pc, #148]	@ (8004f50 <SPI_EndRxTxTransaction+0xd0>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0d5b      	lsrs	r3, r3, #21
 8004ec0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ed2:	d112      	bne.n	8004efa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2180      	movs	r1, #128	@ 0x80
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff feb0 	bl	8004c44 <SPI_WaitFlagStateUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e023      	b.n	8004f42 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f10:	2b80      	cmp	r3, #128	@ 0x80
 8004f12:	d0f2      	beq.n	8004efa <SPI_EndRxTxTransaction+0x7a>
 8004f14:	e000      	b.n	8004f18 <SPI_EndRxTxTransaction+0x98>
        break;
 8004f16:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff15 	bl	8004d54 <SPI_WaitFifoStateUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e000      	b.n	8004f42 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000030 	.word	0x20000030
 8004f50:	165e9f81 	.word	0x165e9f81

08004f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e049      	b.n	8004ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f841 	bl	8005002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f000 faa6 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e054      	b.n	80050da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a26      	ldr	r2, [pc, #152]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505a:	d01d      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a21      	ldr	r2, [pc, #132]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1c      	ldr	r2, [pc, #112]	@ (80050fc <HAL_TIM_Base_Start_IT+0xe4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1b      	ldr	r2, [pc, #108]	@ (8005100 <HAL_TIM_Base_Start_IT+0xe8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d115      	bne.n	80050c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	4b19      	ldr	r3, [pc, #100]	@ (8005104 <HAL_TIM_Base_Start_IT+0xec>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d015      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xbe>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b0:	d011      	beq.n	80050d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	e008      	b.n	80050d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e000      	b.n	80050d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40010400 	.word	0x40010400
 80050fc:	40014000 	.word	0x40014000
 8005100:	40001800 	.word	0x40001800
 8005104:	00010007 	.word	0x00010007

08005108 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e08f      	b.n	800523c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fc fa83 	bl	800163c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b3e      	ldr	r3, [pc, #248]	@ (8005244 <HAL_TIM_Encoder_Init+0x13c>)
 800514a:	400b      	ands	r3, r1
 800514c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 f9c3 	bl	80054e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4b31      	ldr	r3, [pc, #196]	@ (8005248 <HAL_TIM_Encoder_Init+0x140>)
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	4313      	orrs	r3, r2
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_TIM_Encoder_Init+0x144>)
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005250 <HAL_TIM_Encoder_Init+0x148>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	4313      	orrs	r3, r2
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	031b      	lsls	r3, r3, #12
 80051c8:	4313      	orrs	r3, r2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4313      	orrs	r3, r2
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	fffebff8 	.word	0xfffebff8
 8005248:	fffffcfc 	.word	0xfffffcfc
 800524c:	fffff3f3 	.word	0xfffff3f3
 8005250:	ffff0f0f 	.word	0xffff0f0f

08005254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0202 	mvn.w	r2, #2
 8005280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f905 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8f7 	bl	8005492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f908 	bl	80054ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0204 	mvn.w	r2, #4
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8db 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8cd 	bl	8005492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f8de 	bl	80054ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b08      	cmp	r3, #8
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0208 	mvn.w	r2, #8
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2204      	movs	r2, #4
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8b1 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8a3 	bl	8005492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8b4 	bl	80054ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b10      	cmp	r3, #16
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b10      	cmp	r3, #16
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0210 	mvn.w	r2, #16
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2208      	movs	r2, #8
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f887 	bl	80054a6 <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f879 	bl	8005492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f88a 	bl	80054ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10e      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d107      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0201 	mvn.w	r2, #1
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fb fe44 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d10e      	bne.n	8005404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b80      	cmp	r3, #128	@ 0x80
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9a8 	bl	8005754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005412:	d10e      	bne.n	8005432 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d107      	bne.n	8005432 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f99b 	bl	8005768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543c:	2b40      	cmp	r3, #64	@ 0x40
 800543e:	d10e      	bne.n	800545e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544a:	2b40      	cmp	r3, #64	@ 0x40
 800544c:	d107      	bne.n	800545e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f838 	bl	80054ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b20      	cmp	r3, #32
 800546a:	d10e      	bne.n	800548a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b20      	cmp	r3, #32
 8005478:	d107      	bne.n	800548a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0220 	mvn.w	r2, #32
 8005482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f95b 	bl	8005740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a40      	ldr	r2, [pc, #256]	@ (80055f8 <TIM_Base_SetConfig+0x114>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a3d      	ldr	r2, [pc, #244]	@ (80055fc <TIM_Base_SetConfig+0x118>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3c      	ldr	r2, [pc, #240]	@ (8005600 <TIM_Base_SetConfig+0x11c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3b      	ldr	r2, [pc, #236]	@ (8005604 <TIM_Base_SetConfig+0x120>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3a      	ldr	r2, [pc, #232]	@ (8005608 <TIM_Base_SetConfig+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2f      	ldr	r2, [pc, #188]	@ (80055f8 <TIM_Base_SetConfig+0x114>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005544:	d027      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <TIM_Base_SetConfig+0x118>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d023      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2b      	ldr	r2, [pc, #172]	@ (8005600 <TIM_Base_SetConfig+0x11c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2a      	ldr	r2, [pc, #168]	@ (8005604 <TIM_Base_SetConfig+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a29      	ldr	r2, [pc, #164]	@ (8005608 <TIM_Base_SetConfig+0x124>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a28      	ldr	r2, [pc, #160]	@ (800560c <TIM_Base_SetConfig+0x128>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a27      	ldr	r2, [pc, #156]	@ (8005610 <TIM_Base_SetConfig+0x12c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a26      	ldr	r2, [pc, #152]	@ (8005614 <TIM_Base_SetConfig+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a25      	ldr	r2, [pc, #148]	@ (8005618 <TIM_Base_SetConfig+0x134>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a24      	ldr	r2, [pc, #144]	@ (800561c <TIM_Base_SetConfig+0x138>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a23      	ldr	r2, [pc, #140]	@ (8005620 <TIM_Base_SetConfig+0x13c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <TIM_Base_SetConfig+0x114>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005608 <TIM_Base_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001800 	.word	0x40001800
 800561c:	40001c00 	.word	0x40001c00
 8005620:	40002000 	.word	0x40002000

08005624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005638:	2302      	movs	r3, #2
 800563a:	e06d      	b.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a30      	ldr	r2, [pc, #192]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2f      	ldr	r2, [pc, #188]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a20      	ldr	r2, [pc, #128]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d022      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d01d      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1d      	ldr	r2, [pc, #116]	@ (800572c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a15      	ldr	r2, [pc, #84]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d10c      	bne.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40010000 	.word	0x40010000
 8005728:	40010400 	.word	0x40010400
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800578a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578e:	2b84      	cmp	r3, #132	@ 0x84
 8005790:	d005      	beq.n	800579e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005792:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	3303      	adds	r3, #3
 800579c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800579e:	68fb      	ldr	r3, [r7, #12]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b2:	f3ef 8305 	mrs	r3, IPSR
 80057b6:	607b      	str	r3, [r7, #4]
  return(result);
 80057b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bf14      	ite	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	2300      	moveq	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057d4:	f001 fb54 	bl	8006e80 <vTaskStartScheduler>
  
  return osOK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}

080057de <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80057e2:	f7ff ffe3 	bl	80057ac <inHandlerMode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80057ec:	f001 fc52 	bl	8007094 <xTaskGetTickCountFromISR>
 80057f0:	4603      	mov	r3, r0
 80057f2:	e002      	b.n	80057fa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80057f4:	f001 fc3e 	bl	8007074 <xTaskGetTickCount>
 80057f8:	4603      	mov	r3, r0
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	bd80      	pop	{r7, pc}

080057fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005800:	b087      	sub	sp, #28
 8005802:	af02      	add	r7, sp, #8
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685c      	ldr	r4, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005814:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ffad 	bl	800577c <makeFreeRtosPriority>
 8005822:	4602      	mov	r2, r0
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	9200      	str	r2, [sp, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4632      	mov	r2, r6
 8005830:	4629      	mov	r1, r5
 8005832:	4620      	mov	r0, r4
 8005834:	f001 f930 	bl	8006a98 <xTaskCreate>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d001      	beq.n	8005842 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	e000      	b.n	8005844 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005842:	68fb      	ldr	r3, [r7, #12]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800584c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <osDelay+0x16>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	e000      	b.n	8005864 <osDelay+0x18>
 8005862:	2301      	movs	r3, #1
 8005864:	4618      	mov	r0, r3
 8005866:	f001 fad3 	bl	8006e10 <vTaskDelay>
  
  return osOK;
 800586a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800587c:	2001      	movs	r0, #1
 800587e:	f000 fafd 	bl	8005e7c <xQueueCreateMutex>
 8005882:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <osMutexWait+0x18>
    return osErrorParameter;
 80058a0:	2380      	movs	r3, #128	@ 0x80
 80058a2:	e03a      	b.n	800591a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d103      	bne.n	80058b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80058b0:	f04f 33ff 	mov.w	r3, #4294967295
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e009      	b.n	80058cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <osMutexWait+0x40>
      ticks = 1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80058cc:	f7ff ff6e 	bl	80057ac <inHandlerMode>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	461a      	mov	r2, r3
 80058dc:	2100      	movs	r1, #0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 ff2a 	bl	8006738 <xQueueReceiveFromISR>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d001      	beq.n	80058ee <osMutexWait+0x62>
      return osErrorOS;
 80058ea:	23ff      	movs	r3, #255	@ 0xff
 80058ec:	e015      	b.n	800591a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d011      	beq.n	8005918 <osMutexWait+0x8c>
 80058f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <osMutexWait+0x98>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	e008      	b.n	8005918 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fdfd 	bl	8006508 <xQueueSemaphoreTake>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <osMutexWait+0x8c>
    return osErrorOS;
 8005914:	23ff      	movs	r3, #255	@ 0xff
 8005916:	e000      	b.n	800591a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005938:	f7ff ff38 	bl	80057ac <inHandlerMode>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d016      	beq.n	8005970 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005942:	f107 0308 	add.w	r3, r7, #8
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fc5c 	bl	8006206 <xQueueGiveFromISR>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <osMutexRelease+0x30>
      return osErrorOS;
 8005954:	23ff      	movs	r3, #255	@ 0xff
 8005956:	e017      	b.n	8005988 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d013      	beq.n	8005986 <osMutexRelease+0x5e>
 800595e:	4b0c      	ldr	r3, [pc, #48]	@ (8005990 <osMutexRelease+0x68>)
 8005960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	e00a      	b.n	8005986 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005970:	2300      	movs	r3, #0
 8005972:	2200      	movs	r2, #0
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa98 	bl	8005eac <xQueueGenericSend>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005982:	23ff      	movs	r3, #255	@ 0xff
 8005984:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	4619      	mov	r1, r3
 80059aa:	f000 f9ef 	bl	8005d8c <xQueueGenericCreate>
 80059ae:	4603      	mov	r3, r0
#endif
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <osMessagePut+0x1e>
    ticks = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80059d6:	f7ff fee9 	bl	80057ac <inHandlerMode>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d018      	beq.n	8005a12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80059e0:	f107 0210 	add.w	r2, r7, #16
 80059e4:	f107 0108 	add.w	r1, r7, #8
 80059e8:	2300      	movs	r3, #0
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fb68 	bl	80060c0 <xQueueGenericSendFromISR>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <osMessagePut+0x42>
      return osErrorOS;
 80059f6:	23ff      	movs	r3, #255	@ 0xff
 80059f8:	e018      	b.n	8005a2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d014      	beq.n	8005a2a <osMessagePut+0x72>
 8005a00:	4b0c      	ldr	r3, [pc, #48]	@ (8005a34 <osMessagePut+0x7c>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	e00b      	b.n	8005a2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005a12:	f107 0108 	add.w	r1, r7, #8
 8005a16:	2300      	movs	r3, #0
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa46 	bl	8005eac <xQueueGenericSend>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d001      	beq.n	8005a2a <osMessagePut+0x72>
      return osErrorOS;
 8005a26:	23ff      	movs	r3, #255	@ 0xff
 8005a28:	e000      	b.n	8005a2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005a38:	b590      	push	{r4, r7, lr}
 8005a3a:	b08b      	sub	sp, #44	@ 0x2c
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	617b      	str	r3, [r7, #20]
    return event;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	461c      	mov	r4, r3
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a66:	e054      	b.n	8005b12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7e:	e009      	b.n	8005a94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d006      	beq.n	8005a94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <osMessageGet+0x5c>
      ticks = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005a94:	f7ff fe8a 	bl	80057ac <inHandlerMode>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01c      	beq.n	8005ad8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005a9e:	f107 0220 	add.w	r2, r7, #32
 8005aa2:	f107 0314 	add.w	r3, r7, #20
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	68b8      	ldr	r0, [r7, #8]
 8005aac:	f000 fe44 	bl	8006738 <xQueueReceiveFromISR>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d102      	bne.n	8005abc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005ab6:	2310      	movs	r3, #16
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e001      	b.n	8005ac0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01d      	beq.n	8005b02 <osMessageGet+0xca>
 8005ac6:	4b15      	ldr	r3, [pc, #84]	@ (8005b1c <osMessageGet+0xe4>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e014      	b.n	8005b02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005ad8:	f107 0314 	add.w	r3, r7, #20
 8005adc:	3304      	adds	r3, #4
 8005ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f000 fc28 	bl	8006338 <xQueueReceive>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d102      	bne.n	8005af4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005aee:	2310      	movs	r3, #16
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e006      	b.n	8005b02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <osMessageGet+0xc6>
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <osMessageGet+0xc8>
 8005afe:	2340      	movs	r3, #64	@ 0x40
 8005b00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	461c      	mov	r4, r3
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	372c      	adds	r7, #44	@ 0x2c
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <osDelayUntil+0x18>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e000      	b.n	8005b3a <osDelayUntil+0x1a>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 f8e1 	bl	8006d04 <vTaskDelayUntil>
  
  return osOK;
 8005b42:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f103 0208 	add.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f103 0208 	add.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f103 0208 	add.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d103      	bne.n	8005c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e00c      	b.n	8005c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3308      	adds	r3, #8
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <vListInsert+0x2e>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d2f6      	bcs.n	8005c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6892      	ldr	r2, [r2, #8]
 8005c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d103      	bne.n	8005c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	b672      	cpsid	i
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	b662      	cpsie	i
 8005cdc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005ce4:	f002 f822 	bl	8007d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d14:	3b01      	subs	r3, #1
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	22ff      	movs	r2, #255	@ 0xff
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22ff      	movs	r2, #255	@ 0xff
 8005d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d114      	bne.n	8005d64 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01a      	beq.n	8005d78 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3310      	adds	r3, #16
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 faf8 	bl	800733c <xTaskRemoveFromEventList>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d012      	beq.n	8005d78 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <xQueueGenericReset+0xd4>)
 8005d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	e009      	b.n	8005d78 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3310      	adds	r3, #16
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff feef 	bl	8005b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3324      	adds	r3, #36	@ 0x24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff feea 	bl	8005b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d78:	f002 f80e 	bl	8007d98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d7c:	2301      	movs	r3, #1
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10d      	bne.n	8005dbc <xQueueGenericCreate+0x30>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	b672      	cpsid	i
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	b662      	cpsie	i
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e004      	b.n	8005dd2 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3348      	adds	r3, #72	@ 0x48
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f002 f8d6 	bl	8007f88 <pvPortMalloc>
 8005ddc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3348      	adds	r3, #72	@ 0x48
 8005dec:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dee:	79fa      	ldrb	r2, [r7, #7]
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f805 	bl	8005e0a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e00:	69bb      	ldr	r3, [r7, #24]
	}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e002      	b.n	8005e2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e38:	2101      	movs	r1, #1
 8005e3a:	69b8      	ldr	r0, [r7, #24]
 8005e3c:	f7ff ff3a 	bl	8005cb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f81c 	bl	8005eac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e86:	2301      	movs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	6978      	ldr	r0, [r7, #20]
 8005e96:	f7ff ff79 	bl	8005d8c <xQueueGenericCreate>
 8005e9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff ffd3 	bl	8005e48 <prvInitialiseMutex>

		return xNewQueue;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	@ 0x38
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10d      	bne.n	8005ee4 <xQueueGenericSend+0x38>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <xQueueGenericSend+0x46>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <xQueueGenericSend+0x4a>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueGenericSend+0x4c>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <xQueueGenericSend+0x6c>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f00:	b672      	cpsid	i
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	b662      	cpsie	i
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d103      	bne.n	8005f26 <xQueueGenericSend+0x7a>
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <xQueueGenericSend+0x7e>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <xQueueGenericSend+0x80>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10d      	bne.n	8005f4c <xQueueGenericSend+0xa0>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	b672      	cpsid	i
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	b662      	cpsie	i
 8005f44:	623b      	str	r3, [r7, #32]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f4c:	f001 fb9c 	bl	8007688 <xTaskGetSchedulerState>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <xQueueGenericSend+0xb0>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <xQueueGenericSend+0xb4>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <xQueueGenericSend+0xb6>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <xQueueGenericSend+0xd6>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	b672      	cpsid	i
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	b662      	cpsie	i
 8005f7a:	61fb      	str	r3, [r7, #28]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f82:	f001 fed3 	bl	8007d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <xQueueGenericSend+0xec>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d129      	bne.n	8005fec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9e:	f000 fc6b 	bl	8006878 <prvCopyDataToQueue>
 8005fa2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	3324      	adds	r3, #36	@ 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 f9c3 	bl	800733c <xTaskRemoveFromEventList>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80060bc <xQueueGenericSend+0x210>)
 8005fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	e00a      	b.n	8005fe4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fd4:	4b39      	ldr	r3, [pc, #228]	@ (80060bc <xQueueGenericSend+0x210>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fe4:	f001 fed8 	bl	8007d98 <vPortExitCritical>
				return pdPASS;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e063      	b.n	80060b4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ff2:	f001 fed1 	bl	8007d98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e05c      	b.n	80060b4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	4618      	mov	r0, r3
 8006006:	f001 f9ff 	bl	8007408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800600a:	2301      	movs	r3, #1
 800600c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800600e:	f001 fec3 	bl	8007d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006012:	f000 ff81 	bl	8006f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006016:	f001 fe89 	bl	8007d2c <vPortEnterCritical>
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006020:	b25b      	sxtb	r3, r3
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d103      	bne.n	8006030 <xQueueGenericSend+0x184>
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006036:	b25b      	sxtb	r3, r3
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d103      	bne.n	8006046 <xQueueGenericSend+0x19a>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006046:	f001 fea7 	bl	8007d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800604a:	1d3a      	adds	r2, r7, #4
 800604c:	f107 0314 	add.w	r3, r7, #20
 8006050:	4611      	mov	r1, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f9ee 	bl	8007434 <xTaskCheckForTimeOut>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d124      	bne.n	80060a8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800605e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006060:	f000 fd02 	bl	8006a68 <prvIsQueueFull>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	3310      	adds	r3, #16
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f93a 	bl	80072ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800607a:	f000 fc8d 	bl	8006998 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800607e:	f000 ff59 	bl	8006f34 <xTaskResumeAll>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f af7c 	bne.w	8005f82 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <xQueueGenericSend+0x210>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	e772      	b.n	8005f82 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800609c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609e:	f000 fc7b 	bl	8006998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060a2:	f000 ff47 	bl	8006f34 <xTaskResumeAll>
 80060a6:	e76c      	b.n	8005f82 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060aa:	f000 fc75 	bl	8006998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ae:	f000 ff41 	bl	8006f34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3738      	adds	r7, #56	@ 0x38
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	@ 0x38
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	b672      	cpsid	i
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	b662      	cpsie	i
 80060ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <xQueueGenericSendFromISR+0x42>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <xQueueGenericSendFromISR+0x46>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <xQueueGenericSendFromISR+0x48>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10d      	bne.n	8006128 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	b672      	cpsid	i
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	b662      	cpsie	i
 8006120:	623b      	str	r3, [r7, #32]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d103      	bne.n	8006136 <xQueueGenericSendFromISR+0x76>
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <xQueueGenericSendFromISR+0x7a>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <xQueueGenericSendFromISR+0x7c>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	b672      	cpsid	i
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	b662      	cpsie	i
 8006154:	61fb      	str	r3, [r7, #28]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800615c:	f001 fece 	bl	8007efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006160:	f3ef 8211 	mrs	r2, BASEPRI
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	b672      	cpsid	i
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	b662      	cpsie	i
 8006178:	61ba      	str	r2, [r7, #24]
 800617a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800617c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <xQueueGenericSendFromISR+0xd2>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d12c      	bne.n	80061ec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061a2:	f000 fb69 	bl	8006878 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d112      	bne.n	80061d6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d016      	beq.n	80061e6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	3324      	adds	r3, #36	@ 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f8bd 	bl	800733c <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00e      	beq.n	80061e6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e007      	b.n	80061e6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061da:	3301      	adds	r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	b25a      	sxtb	r2, r3
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061e6:	2301      	movs	r3, #1
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80061ea:	e001      	b.n	80061f0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3738      	adds	r7, #56	@ 0x38
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08e      	sub	sp, #56	@ 0x38
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <xQueueGiveFromISR+0x30>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	b672      	cpsid	i
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	b662      	cpsie	i
 800622e:	623b      	str	r3, [r7, #32]
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <xQueueGiveFromISR+0x54>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006242:	b672      	cpsid	i
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	b662      	cpsie	i
 8006252:	61fb      	str	r3, [r7, #28]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <xQueueGiveFromISR+0x64>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <xQueueGiveFromISR+0x68>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <xQueueGiveFromISR+0x6a>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10d      	bne.n	8006290 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006278:	b672      	cpsid	i
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	b662      	cpsie	i
 8006288:	61bb      	str	r3, [r7, #24]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006290:	f001 fe34 	bl	8007efc <vPortValidateInterruptPriority>
	__asm volatile
 8006294:	f3ef 8211 	mrs	r2, BASEPRI
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	b672      	cpsid	i
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	b662      	cpsie	i
 80062ac:	617a      	str	r2, [r7, #20]
 80062ae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80062b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d22b      	bcs.n	800631c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d112      	bne.n	8006306 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d016      	beq.n	8006316 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	3324      	adds	r3, #36	@ 0x24
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f825 	bl	800733c <xTaskRemoveFromEventList>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e007      	b.n	8006316 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800630a:	3301      	adds	r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	b25a      	sxtb	r2, r3
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006316:	2301      	movs	r3, #1
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
 800631a:	e001      	b.n	8006320 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800631c:	2300      	movs	r3, #0
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f383 8811 	msr	BASEPRI, r3
}
 800632a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800632c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800632e:	4618      	mov	r0, r3
 8006330:	3738      	adds	r7, #56	@ 0x38
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	@ 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006344:	2300      	movs	r3, #0
 8006346:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <xQueueReceive+0x36>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	b672      	cpsid	i
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	b662      	cpsie	i
 8006366:	623b      	str	r3, [r7, #32]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <xQueueReceive+0x44>
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <xQueueReceive+0x48>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <xQueueReceive+0x4a>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10d      	bne.n	80063a2 <xQueueReceive+0x6a>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	61fb      	str	r3, [r7, #28]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a2:	f001 f971 	bl	8007688 <xTaskGetSchedulerState>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <xQueueReceive+0x7a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <xQueueReceive+0x7e>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueReceive+0x80>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <xQueueReceive+0xa0>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	b672      	cpsid	i
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	b662      	cpsie	i
 80063d0:	61bb      	str	r3, [r7, #24]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d8:	f001 fca8 	bl	8007d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01f      	beq.n	8006428 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063ec:	f000 faae 	bl	800694c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	1e5a      	subs	r2, r3, #1
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00f      	beq.n	8006420 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	3310      	adds	r3, #16
 8006404:	4618      	mov	r0, r3
 8006406:	f000 ff99 	bl	800733c <xTaskRemoveFromEventList>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006410:	4b3c      	ldr	r3, [pc, #240]	@ (8006504 <xQueueReceive+0x1cc>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006420:	f001 fcba 	bl	8007d98 <vPortExitCritical>
				return pdPASS;
 8006424:	2301      	movs	r3, #1
 8006426:	e069      	b.n	80064fc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800642e:	f001 fcb3 	bl	8007d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006432:	2300      	movs	r3, #0
 8006434:	e062      	b.n	80064fc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800643c:	f107 0310 	add.w	r3, r7, #16
 8006440:	4618      	mov	r0, r3
 8006442:	f000 ffe1 	bl	8007408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006446:	2301      	movs	r3, #1
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800644a:	f001 fca5 	bl	8007d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800644e:	f000 fd63 	bl	8006f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006452:	f001 fc6b 	bl	8007d2c <vPortEnterCritical>
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800645c:	b25b      	sxtb	r3, r3
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d103      	bne.n	800646c <xQueueReceive+0x134>
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006472:	b25b      	sxtb	r3, r3
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d103      	bne.n	8006482 <xQueueReceive+0x14a>
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006482:	f001 fc89 	bl	8007d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006486:	1d3a      	adds	r2, r7, #4
 8006488:	f107 0310 	add.w	r3, r7, #16
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f000 ffd0 	bl	8007434 <xTaskCheckForTimeOut>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d123      	bne.n	80064e2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800649a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800649c:	f000 face 	bl	8006a3c <prvIsQueueEmpty>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d017      	beq.n	80064d6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	3324      	adds	r3, #36	@ 0x24
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4611      	mov	r1, r2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 ff1c 	bl	80072ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b6:	f000 fa6f 	bl	8006998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064ba:	f000 fd3b 	bl	8006f34 <xTaskResumeAll>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d189      	bne.n	80063d8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80064c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <xQueueReceive+0x1cc>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	e780      	b.n	80063d8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d8:	f000 fa5e 	bl	8006998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064dc:	f000 fd2a 	bl	8006f34 <xTaskResumeAll>
 80064e0:	e77a      	b.n	80063d8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e4:	f000 fa58 	bl	8006998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e8:	f000 fd24 	bl	8006f34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ee:	f000 faa5 	bl	8006a3c <prvIsQueueEmpty>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f43f af6f 	beq.w	80063d8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3730      	adds	r7, #48	@ 0x30
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08e      	sub	sp, #56	@ 0x38
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800651a:	2300      	movs	r3, #0
 800651c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006528:	b672      	cpsid	i
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	b662      	cpsie	i
 8006538:	623b      	str	r3, [r7, #32]
}
 800653a:	bf00      	nop
 800653c:	bf00      	nop
 800653e:	e7fd      	b.n	800653c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00d      	beq.n	8006564 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	b672      	cpsid	i
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	b662      	cpsie	i
 800655c:	61fb      	str	r3, [r7, #28]
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006564:	f001 f890 	bl	8007688 <xTaskGetSchedulerState>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <xQueueSemaphoreTake+0x6c>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <xQueueSemaphoreTake+0x70>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <xQueueSemaphoreTake+0x72>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10d      	bne.n	800659a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	61bb      	str	r3, [r7, #24]
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	e7fd      	b.n	8006596 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800659a:	f001 fbc7 	bl	8007d2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800659e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d024      	beq.n	80065f4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065ba:	f001 fa2f 	bl	8007a1c <pvTaskIncrementMutexHeldCount>
 80065be:	4602      	mov	r2, r0
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00f      	beq.n	80065ec <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	3310      	adds	r3, #16
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 feb3 	bl	800733c <xTaskRemoveFromEventList>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065dc:	4b55      	ldr	r3, [pc, #340]	@ (8006734 <xQueueSemaphoreTake+0x22c>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065ec:	f001 fbd4 	bl	8007d98 <vPortExitCritical>
				return pdPASS;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e09a      	b.n	800672a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d114      	bne.n	8006624 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00d      	beq.n	800661c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	b672      	cpsid	i
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	b662      	cpsie	i
 8006614:	617b      	str	r3, [r7, #20]
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800661c:	f001 fbbc 	bl	8007d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006620:	2300      	movs	r3, #0
 8006622:	e082      	b.n	800672a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800662a:	f107 030c 	add.w	r3, r7, #12
 800662e:	4618      	mov	r0, r3
 8006630:	f000 feea 	bl	8007408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006638:	f001 fbae 	bl	8007d98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800663c:	f000 fc6c 	bl	8006f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006640:	f001 fb74 	bl	8007d2c <vPortEnterCritical>
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800664a:	b25b      	sxtb	r3, r3
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d103      	bne.n	800665a <xQueueSemaphoreTake+0x152>
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006660:	b25b      	sxtb	r3, r3
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d103      	bne.n	8006670 <xQueueSemaphoreTake+0x168>
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006670:	f001 fb92 	bl	8007d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006674:	463a      	mov	r2, r7
 8006676:	f107 030c 	add.w	r3, r7, #12
 800667a:	4611      	mov	r1, r2
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fed9 	bl	8007434 <xTaskCheckForTimeOut>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d132      	bne.n	80066ee <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006688:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800668a:	f000 f9d7 	bl	8006a3c <prvIsQueueEmpty>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d026      	beq.n	80066e2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800669c:	f001 fb46 	bl	8007d2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 f80d 	bl	80076c4 <xTaskPriorityInherit>
 80066aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80066ac:	f001 fb74 	bl	8007d98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	3324      	adds	r3, #36	@ 0x24
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fe17 	bl	80072ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066c0:	f000 f96a 	bl	8006998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066c4:	f000 fc36 	bl	8006f34 <xTaskResumeAll>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f47f af65 	bne.w	800659a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80066d0:	4b18      	ldr	r3, [pc, #96]	@ (8006734 <xQueueSemaphoreTake+0x22c>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	e75b      	b.n	800659a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066e4:	f000 f958 	bl	8006998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066e8:	f000 fc24 	bl	8006f34 <xTaskResumeAll>
 80066ec:	e755      	b.n	800659a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066f0:	f000 f952 	bl	8006998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066f4:	f000 fc1e 	bl	8006f34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066fa:	f000 f99f 	bl	8006a3c <prvIsQueueEmpty>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f43f af4a 	beq.w	800659a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800670c:	f001 fb0e 	bl	8007d2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006712:	f000 f899 	bl	8006848 <prvGetDisinheritPriorityAfterTimeout>
 8006716:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f8dc 	bl	80078dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006724:	f001 fb38 	bl	8007d98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800672a:	4618      	mov	r0, r3
 800672c:	3738      	adds	r7, #56	@ 0x38
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	@ 0x38
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	b672      	cpsid	i
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	b662      	cpsie	i
 8006762:	623b      	str	r3, [r7, #32]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <xQueueReceiveFromISR+0x40>
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <xQueueReceiveFromISR+0x44>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <xQueueReceiveFromISR+0x46>
 800677c:	2300      	movs	r3, #0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10d      	bne.n	800679e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	61fb      	str	r3, [r7, #28]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679e:	f001 fbad 	bl	8007efc <vPortValidateInterruptPriority>
	__asm volatile
 80067a2:	f3ef 8211 	mrs	r2, BASEPRI
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	b672      	cpsid	i
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	b662      	cpsie	i
 80067ba:	61ba      	str	r2, [r7, #24]
 80067bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d02f      	beq.n	800682e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067dc:	f000 f8b6 	bl	800694c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	1e5a      	subs	r2, r3, #1
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d112      	bne.n	8006818 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d016      	beq.n	8006828 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	3310      	adds	r3, #16
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fd9c 	bl	800733c <xTaskRemoveFromEventList>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e007      	b.n	8006828 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800681c:	3301      	adds	r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	b25a      	sxtb	r2, r3
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006828:	2301      	movs	r3, #1
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34
 800682c:	e001      	b.n	8006832 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800682e:	2300      	movs	r3, #0
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
 8006832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006834:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f383 8811 	msr	BASEPRI, r3
}
 800683c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800683e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006840:	4618      	mov	r0, r3
 8006842:	3738      	adds	r7, #56	@ 0x38
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d006      	beq.n	8006866 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1c3 0307 	rsb	r3, r3, #7
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e001      	b.n	800686a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800686a:	68fb      	ldr	r3, [r7, #12]
	}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10d      	bne.n	80068b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d14d      	bne.n	800693a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 ff8e 	bl	80077c4 <xTaskPriorityDisinherit>
 80068a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	e043      	b.n	800693a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d119      	bne.n	80068ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6858      	ldr	r0, [r3, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	461a      	mov	r2, r3
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	f002 fea2 	bl	800960c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d32b      	bcc.n	800693a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	e026      	b.n	800693a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68d8      	ldr	r0, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	461a      	mov	r2, r3
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	f002 fe88 	bl	800960c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006904:	425b      	negs	r3, r3
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d207      	bcs.n	8006928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006920:	425b      	negs	r3, r3
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d105      	bne.n	800693a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	3b01      	subs	r3, #1
 8006938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006942:	697b      	ldr	r3, [r7, #20]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d018      	beq.n	8006990 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	441a      	add	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	429a      	cmp	r2, r3
 8006976:	d303      	bcc.n	8006980 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68d9      	ldr	r1, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	461a      	mov	r2, r3
 800698a:	6838      	ldr	r0, [r7, #0]
 800698c:	f002 fe3e 	bl	800960c <memcpy>
	}
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069a0:	f001 f9c4 	bl	8007d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ac:	e011      	b.n	80069d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d012      	beq.n	80069dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3324      	adds	r3, #36	@ 0x24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fcbe 	bl	800733c <xTaskRemoveFromEventList>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069c6:	f000 fd9d 	bl	8007504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dce9      	bgt.n	80069ae <prvUnlockQueue+0x16>
 80069da:	e000      	b.n	80069de <prvUnlockQueue+0x46>
					break;
 80069dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	22ff      	movs	r2, #255	@ 0xff
 80069e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069e6:	f001 f9d7 	bl	8007d98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ea:	f001 f99f 	bl	8007d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069f6:	e011      	b.n	8006a1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d012      	beq.n	8006a26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3310      	adds	r3, #16
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fc99 	bl	800733c <xTaskRemoveFromEventList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a10:	f000 fd78 	bl	8007504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dce9      	bgt.n	80069f8 <prvUnlockQueue+0x60>
 8006a24:	e000      	b.n	8006a28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	22ff      	movs	r2, #255	@ 0xff
 8006a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a30:	f001 f9b2 	bl	8007d98 <vPortExitCritical>
}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a44:	f001 f972 	bl	8007d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e001      	b.n	8006a5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a5a:	f001 f99d 	bl	8007d98 <vPortExitCritical>

	return xReturn;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a70:	f001 f95c 	bl	8007d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d102      	bne.n	8006a86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e001      	b.n	8006a8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a8a:	f001 f985 	bl	8007d98 <vPortExitCritical>

	return xReturn;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	@ 0x30
 8006a9c:	af04      	add	r7, sp, #16
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f001 fa6b 	bl	8007f88 <pvPortMalloc>
 8006ab2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aba:	2054      	movs	r0, #84	@ 0x54
 8006abc:	f001 fa64 	bl	8007f88 <pvPortMalloc>
 8006ac0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ace:	e005      	b.n	8006adc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ad0:	6978      	ldr	r0, [r7, #20]
 8006ad2:	f001 fb27 	bl	8008124 <vPortFree>
 8006ad6:	e001      	b.n	8006adc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d013      	beq.n	8006b0a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9303      	str	r3, [sp, #12]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	9302      	str	r3, [sp, #8]
 8006aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f80e 	bl	8006b1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006afe:	69f8      	ldr	r0, [r7, #28]
 8006b00:	f000 f896 	bl	8006c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b04:	2301      	movs	r3, #1
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e002      	b.n	8006b10 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b10:	69bb      	ldr	r3, [r7, #24]
	}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006b32:	440b      	add	r3, r1
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00d      	beq.n	8006b68 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	617b      	str	r3, [r7, #20]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01f      	beq.n	8006bae <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e012      	b.n	8006b9a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	7819      	ldrb	r1, [r3, #0]
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	3334      	adds	r3, #52	@ 0x34
 8006b84:	460a      	mov	r2, r1
 8006b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b0f      	cmp	r3, #15
 8006b9e:	d9e9      	bls.n	8006b74 <prvInitialiseNewTask+0x5a>
 8006ba0:	e000      	b.n	8006ba4 <prvInitialiseNewTask+0x8a>
			{
				break;
 8006ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bac:	e003      	b.n	8006bb6 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	2b06      	cmp	r3, #6
 8006bba:	d901      	bls.n	8006bc0 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bbc:	2306      	movs	r3, #6
 8006bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bca:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	2200      	movs	r2, #0
 8006bd0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe ffd8 	bl	8005b8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	3318      	adds	r3, #24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe ffd3 	bl	8005b8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	f1c3 0207 	rsb	r2, r3, #7
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bfa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	2200      	movs	r2, #0
 8006c00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	68f9      	ldr	r1, [r7, #12]
 8006c0e:	69b8      	ldr	r0, [r7, #24]
 8006c10:	f000 ff7e 	bl	8007b10 <pxPortInitialiseStack>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c26:	bf00      	nop
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c38:	f001 f878 	bl	8007d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce8 <prvAddNewTaskToReadyList+0xb8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a29      	ldr	r2, [pc, #164]	@ (8006ce8 <prvAddNewTaskToReadyList+0xb8>)
 8006c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c46:	4b29      	ldr	r3, [pc, #164]	@ (8006cec <prvAddNewTaskToReadyList+0xbc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c4e:	4a27      	ldr	r2, [pc, #156]	@ (8006cec <prvAddNewTaskToReadyList+0xbc>)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c54:	4b24      	ldr	r3, [pc, #144]	@ (8006ce8 <prvAddNewTaskToReadyList+0xb8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d110      	bne.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c5c:	f000 fc76 	bl	800754c <prvInitialiseTaskLists>
 8006c60:	e00d      	b.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c62:	4b23      	ldr	r3, [pc, #140]	@ (8006cf0 <prvAddNewTaskToReadyList+0xc0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6a:	4b20      	ldr	r3, [pc, #128]	@ (8006cec <prvAddNewTaskToReadyList+0xbc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d802      	bhi.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c78:	4a1c      	ldr	r2, [pc, #112]	@ (8006cec <prvAddNewTaskToReadyList+0xbc>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <prvAddNewTaskToReadyList+0xc4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf4 <prvAddNewTaskToReadyList+0xc4>)
 8006c86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	4b19      	ldr	r3, [pc, #100]	@ (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	4a18      	ldr	r2, [pc, #96]	@ (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4a15      	ldr	r2, [pc, #84]	@ (8006cfc <prvAddNewTaskToReadyList+0xcc>)
 8006ca8:	441a      	add	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7fe ff78 	bl	8005ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cb6:	f001 f86f 	bl	8007d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <prvAddNewTaskToReadyList+0xc0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <prvAddNewTaskToReadyList+0xbc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d207      	bcs.n	8006ce0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <prvAddNewTaskToReadyList+0xd0>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000774 	.word	0x20000774
 8006cec:	20000674 	.word	0x20000674
 8006cf0:	20000780 	.word	0x20000780
 8006cf4:	20000790 	.word	0x20000790
 8006cf8:	2000077c 	.word	0x2000077c
 8006cfc:	20000678 	.word	0x20000678
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	@ 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10d      	bne.n	8006d34 <vTaskDelayUntil+0x30>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	617b      	str	r3, [r7, #20]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <vTaskDelayUntil+0x52>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	b672      	cpsid	i
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	b662      	cpsie	i
 8006d4e:	613b      	str	r3, [r7, #16]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d56:	4b2b      	ldr	r3, [pc, #172]	@ (8006e04 <vTaskDelayUntil+0x100>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <vTaskDelayUntil+0x76>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	b672      	cpsid	i
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	b662      	cpsie	i
 8006d72:	60fb      	str	r3, [r7, #12]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8006d7a:	f000 f8cd 	bl	8006f18 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006d7e:	4b22      	ldr	r3, [pc, #136]	@ (8006e08 <vTaskDelayUntil+0x104>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d20b      	bcs.n	8006db0 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d211      	bcs.n	8006dc6 <vTaskDelayUntil+0xc2>
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d90d      	bls.n	8006dc6 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dae:	e00a      	b.n	8006dc6 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d303      	bcc.n	8006dc2 <vTaskDelayUntil+0xbe>
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d901      	bls.n	8006dc6 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fe32 	bl	8007a44 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006de0:	f000 f8a8 	bl	8006f34 <xTaskResumeAll>
 8006de4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8006dec:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <vTaskDelayUntil+0x108>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dfc:	bf00      	nop
 8006dfe:	3728      	adds	r7, #40	@ 0x28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	2000079c 	.word	0x2000079c
 8006e08:	20000778 	.word	0x20000778
 8006e0c:	e000ed04 	.word	0xe000ed04

08006e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01a      	beq.n	8006e58 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e22:	4b15      	ldr	r3, [pc, #84]	@ (8006e78 <vTaskDelay+0x68>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <vTaskDelay+0x36>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2e:	b672      	cpsid	i
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	b662      	cpsie	i
 8006e3e:	60bb      	str	r3, [r7, #8]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006e46:	f000 f867 	bl	8006f18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fdf9 	bl	8007a44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e52:	f000 f86f 	bl	8006f34 <xTaskResumeAll>
 8006e56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006e5e:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <vTaskDelay+0x6c>)
 8006e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	2000079c 	.word	0x2000079c
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006e86:	4b1e      	ldr	r3, [pc, #120]	@ (8006f00 <vTaskStartScheduler+0x80>)
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2280      	movs	r2, #128	@ 0x80
 8006e92:	491c      	ldr	r1, [pc, #112]	@ (8006f04 <vTaskStartScheduler+0x84>)
 8006e94:	481c      	ldr	r0, [pc, #112]	@ (8006f08 <vTaskStartScheduler+0x88>)
 8006e96:	f7ff fdff 	bl	8006a98 <xTaskCreate>
 8006e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d118      	bne.n	8006ed4 <vTaskStartScheduler+0x54>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea6:	b672      	cpsid	i
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	b662      	cpsie	i
 8006eb6:	60bb      	str	r3, [r7, #8]
}
 8006eb8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eba:	4b14      	ldr	r3, [pc, #80]	@ (8006f0c <vTaskStartScheduler+0x8c>)
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ec2:	4b13      	ldr	r3, [pc, #76]	@ (8006f10 <vTaskStartScheduler+0x90>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ec8:	4b12      	ldr	r3, [pc, #72]	@ (8006f14 <vTaskStartScheduler+0x94>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ece:	f000 feaf 	bl	8007c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ed2:	e011      	b.n	8006ef8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d10d      	bne.n	8006ef8 <vTaskStartScheduler+0x78>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	b672      	cpsid	i
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	b662      	cpsie	i
 8006ef0:	607b      	str	r3, [r7, #4]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <vTaskStartScheduler+0x74>
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000798 	.word	0x20000798
 8006f04:	08009720 	.word	0x08009720
 8006f08:	0800751d 	.word	0x0800751d
 8006f0c:	20000794 	.word	0x20000794
 8006f10:	20000780 	.word	0x20000780
 8006f14:	20000778 	.word	0x20000778

08006f18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f1c:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <vTaskSuspendAll+0x18>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	4a03      	ldr	r2, [pc, #12]	@ (8006f30 <vTaskSuspendAll+0x18>)
 8006f24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	2000079c 	.word	0x2000079c

08006f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f42:	4b43      	ldr	r3, [pc, #268]	@ (8007050 <xTaskResumeAll+0x11c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10d      	bne.n	8006f66 <xTaskResumeAll+0x32>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	b672      	cpsid	i
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	b662      	cpsie	i
 8006f5e:	603b      	str	r3, [r7, #0]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f66:	f000 fee1 	bl	8007d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f6a:	4b39      	ldr	r3, [pc, #228]	@ (8007050 <xTaskResumeAll+0x11c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <xTaskResumeAll+0x11c>)
 8006f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f74:	4b36      	ldr	r3, [pc, #216]	@ (8007050 <xTaskResumeAll+0x11c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d161      	bne.n	8007040 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f7c:	4b35      	ldr	r3, [pc, #212]	@ (8007054 <xTaskResumeAll+0x120>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05d      	beq.n	8007040 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f84:	e02e      	b.n	8006fe4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f86:	4b34      	ldr	r3, [pc, #208]	@ (8007058 <xTaskResumeAll+0x124>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3318      	adds	r3, #24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fe64 	bl	8005c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fe5f 	bl	8005c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	4b2c      	ldr	r3, [pc, #176]	@ (800705c <xTaskResumeAll+0x128>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800705c <xTaskResumeAll+0x128>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a27      	ldr	r2, [pc, #156]	@ (8007060 <xTaskResumeAll+0x12c>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7fe fdeb 	bl	8005ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd4:	4b23      	ldr	r3, [pc, #140]	@ (8007064 <xTaskResumeAll+0x130>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006fde:	4b22      	ldr	r3, [pc, #136]	@ (8007068 <xTaskResumeAll+0x134>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8007058 <xTaskResumeAll+0x124>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1cc      	bne.n	8006f86 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ff2:	f000 fb29 	bl	8007648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800706c <xTaskResumeAll+0x138>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d010      	beq.n	8007024 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007002:	f000 f859 	bl	80070b8 <xTaskIncrementTick>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800700c:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <xTaskResumeAll+0x134>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f1      	bne.n	8007002 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800701e:	4b13      	ldr	r3, [pc, #76]	@ (800706c <xTaskResumeAll+0x138>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007024:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <xTaskResumeAll+0x134>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007030:	4b0f      	ldr	r3, [pc, #60]	@ (8007070 <xTaskResumeAll+0x13c>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007040:	f000 feaa 	bl	8007d98 <vPortExitCritical>

	return xAlreadyYielded;
 8007044:	68bb      	ldr	r3, [r7, #8]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	2000079c 	.word	0x2000079c
 8007054:	20000774 	.word	0x20000774
 8007058:	20000734 	.word	0x20000734
 800705c:	2000077c 	.word	0x2000077c
 8007060:	20000678 	.word	0x20000678
 8007064:	20000674 	.word	0x20000674
 8007068:	20000788 	.word	0x20000788
 800706c:	20000784 	.word	0x20000784
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800707a:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <xTaskGetTickCount+0x1c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007080:	687b      	ldr	r3, [r7, #4]
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000778 	.word	0x20000778

08007094 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800709a:	f000 ff2f 	bl	8007efc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800709e:	2300      	movs	r3, #0
 80070a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80070a2:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <xTaskGetTickCountFromISR+0x20>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a8:	683b      	ldr	r3, [r7, #0]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000778 	.word	0x20000778

080070b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c2:	4b50      	ldr	r3, [pc, #320]	@ (8007204 <xTaskIncrementTick+0x14c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 808b 	bne.w	80071e2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007208 <xTaskIncrementTick+0x150>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070d4:	4a4c      	ldr	r2, [pc, #304]	@ (8007208 <xTaskIncrementTick+0x150>)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d123      	bne.n	8007128 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80070e0:	4b4a      	ldr	r3, [pc, #296]	@ (800720c <xTaskIncrementTick+0x154>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00d      	beq.n	8007106 <xTaskIncrementTick+0x4e>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ee:	b672      	cpsid	i
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	b662      	cpsie	i
 80070fe:	603b      	str	r3, [r7, #0]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <xTaskIncrementTick+0x4a>
 8007106:	4b41      	ldr	r3, [pc, #260]	@ (800720c <xTaskIncrementTick+0x154>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	4b40      	ldr	r3, [pc, #256]	@ (8007210 <xTaskIncrementTick+0x158>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3e      	ldr	r2, [pc, #248]	@ (800720c <xTaskIncrementTick+0x154>)
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	4a3e      	ldr	r2, [pc, #248]	@ (8007210 <xTaskIncrementTick+0x158>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	4b3e      	ldr	r3, [pc, #248]	@ (8007214 <xTaskIncrementTick+0x15c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	4a3c      	ldr	r2, [pc, #240]	@ (8007214 <xTaskIncrementTick+0x15c>)
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	f000 fa90 	bl	8007648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007128:	4b3b      	ldr	r3, [pc, #236]	@ (8007218 <xTaskIncrementTick+0x160>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d348      	bcc.n	80071c4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007132:	4b36      	ldr	r3, [pc, #216]	@ (800720c <xTaskIncrementTick+0x154>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713c:	4b36      	ldr	r3, [pc, #216]	@ (8007218 <xTaskIncrementTick+0x160>)
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	601a      	str	r2, [r3, #0]
					break;
 8007144:	e03e      	b.n	80071c4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007146:	4b31      	ldr	r3, [pc, #196]	@ (800720c <xTaskIncrementTick+0x154>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	429a      	cmp	r2, r3
 800715c:	d203      	bcs.n	8007166 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800715e:	4a2e      	ldr	r2, [pc, #184]	@ (8007218 <xTaskIncrementTick+0x160>)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007164:	e02e      	b.n	80071c4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	3304      	adds	r3, #4
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fd78 	bl	8005c60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	3318      	adds	r3, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fd6f 	bl	8005c60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	2201      	movs	r2, #1
 8007188:	409a      	lsls	r2, r3
 800718a:	4b24      	ldr	r3, [pc, #144]	@ (800721c <xTaskIncrementTick+0x164>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4313      	orrs	r3, r2
 8007190:	4a22      	ldr	r2, [pc, #136]	@ (800721c <xTaskIncrementTick+0x164>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007220 <xTaskIncrementTick+0x168>)
 80071a2:	441a      	add	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fcfb 	bl	8005ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007224 <xTaskIncrementTick+0x16c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3b9      	bcc.n	8007132 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c2:	e7b6      	b.n	8007132 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071c4:	4b17      	ldr	r3, [pc, #92]	@ (8007224 <xTaskIncrementTick+0x16c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ca:	4915      	ldr	r1, [pc, #84]	@ (8007220 <xTaskIncrementTick+0x168>)
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d907      	bls.n	80071ec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e004      	b.n	80071ec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071e2:	4b11      	ldr	r3, [pc, #68]	@ (8007228 <xTaskIncrementTick+0x170>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3301      	adds	r3, #1
 80071e8:	4a0f      	ldr	r2, [pc, #60]	@ (8007228 <xTaskIncrementTick+0x170>)
 80071ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071ec:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <xTaskIncrementTick+0x174>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071f8:	697b      	ldr	r3, [r7, #20]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2000079c 	.word	0x2000079c
 8007208:	20000778 	.word	0x20000778
 800720c:	2000072c 	.word	0x2000072c
 8007210:	20000730 	.word	0x20000730
 8007214:	2000078c 	.word	0x2000078c
 8007218:	20000794 	.word	0x20000794
 800721c:	2000077c 	.word	0x2000077c
 8007220:	20000678 	.word	0x20000678
 8007224:	20000674 	.word	0x20000674
 8007228:	20000784 	.word	0x20000784
 800722c:	20000788 	.word	0x20000788

08007230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007236:	4b28      	ldr	r3, [pc, #160]	@ (80072d8 <vTaskSwitchContext+0xa8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800723e:	4b27      	ldr	r3, [pc, #156]	@ (80072dc <vTaskSwitchContext+0xac>)
 8007240:	2201      	movs	r2, #1
 8007242:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007244:	e042      	b.n	80072cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007246:	4b25      	ldr	r3, [pc, #148]	@ (80072dc <vTaskSwitchContext+0xac>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724c:	4b24      	ldr	r3, [pc, #144]	@ (80072e0 <vTaskSwitchContext+0xb0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	fab3 f383 	clz	r3, r3
 8007258:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	f1c3 031f 	rsb	r3, r3, #31
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	4920      	ldr	r1, [pc, #128]	@ (80072e4 <vTaskSwitchContext+0xb4>)
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10d      	bne.n	8007292 <vTaskSwitchContext+0x62>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	b672      	cpsid	i
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	b662      	cpsie	i
 800728a:	607b      	str	r3, [r7, #4]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <vTaskSwitchContext+0x5e>
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <vTaskSwitchContext+0xb4>)
 800729e:	4413      	add	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	3308      	adds	r3, #8
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d104      	bne.n	80072c2 <vTaskSwitchContext+0x92>
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	4a07      	ldr	r2, [pc, #28]	@ (80072e8 <vTaskSwitchContext+0xb8>)
 80072ca:	6013      	str	r3, [r2, #0]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	2000079c 	.word	0x2000079c
 80072dc:	20000788 	.word	0x20000788
 80072e0:	2000077c 	.word	0x2000077c
 80072e4:	20000678 	.word	0x20000678
 80072e8:	20000674 	.word	0x20000674

080072ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	b672      	cpsid	i
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	b662      	cpsie	i
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007318:	4b07      	ldr	r3, [pc, #28]	@ (8007338 <vTaskPlaceOnEventList+0x4c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3318      	adds	r3, #24
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fe fc64 	bl	8005bee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007326:	2101      	movs	r1, #1
 8007328:	6838      	ldr	r0, [r7, #0]
 800732a:	f000 fb8b 	bl	8007a44 <prvAddCurrentTaskToDelayedList>
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000674 	.word	0x20000674

0800733c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10d      	bne.n	800736e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	b672      	cpsid	i
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	b662      	cpsie	i
 8007366:	60fb      	str	r3, [r7, #12]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	3318      	adds	r3, #24
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fc74 	bl	8005c60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007378:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <xTaskRemoveFromEventList+0xb4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11c      	bne.n	80073ba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3304      	adds	r3, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fc6b 	bl	8005c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	2201      	movs	r2, #1
 8007390:	409a      	lsls	r2, r3
 8007392:	4b18      	ldr	r3, [pc, #96]	@ (80073f4 <xTaskRemoveFromEventList+0xb8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	4a16      	ldr	r2, [pc, #88]	@ (80073f4 <xTaskRemoveFromEventList+0xb8>)
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4a13      	ldr	r2, [pc, #76]	@ (80073f8 <xTaskRemoveFromEventList+0xbc>)
 80073aa:	441a      	add	r2, r3
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe fbf7 	bl	8005ba6 <vListInsertEnd>
 80073b8:	e005      	b.n	80073c6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3318      	adds	r3, #24
 80073be:	4619      	mov	r1, r3
 80073c0:	480e      	ldr	r0, [pc, #56]	@ (80073fc <xTaskRemoveFromEventList+0xc0>)
 80073c2:	f7fe fbf0 	bl	8005ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007400 <xTaskRemoveFromEventList+0xc4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d905      	bls.n	80073e0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007404 <xTaskRemoveFromEventList+0xc8>)
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e001      	b.n	80073e4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073e4:	697b      	ldr	r3, [r7, #20]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	2000079c 	.word	0x2000079c
 80073f4:	2000077c 	.word	0x2000077c
 80073f8:	20000678 	.word	0x20000678
 80073fc:	20000734 	.word	0x20000734
 8007400:	20000674 	.word	0x20000674
 8007404:	20000788 	.word	0x20000788

08007408 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <vTaskInternalSetTimeOutState+0x24>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <vTaskInternalSetTimeOutState+0x28>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	2000078c 	.word	0x2000078c
 8007430:	20000778 	.word	0x20000778

08007434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10d      	bne.n	8007460 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	b672      	cpsid	i
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	b662      	cpsie	i
 8007458:	613b      	str	r3, [r7, #16]
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10d      	bne.n	8007482 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	b672      	cpsid	i
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	b662      	cpsie	i
 800747a:	60fb      	str	r3, [r7, #12]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007482:	f000 fc53 	bl	8007d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007486:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <xTaskCheckForTimeOut+0xc8>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d102      	bne.n	80074a6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e023      	b.n	80074ee <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4b15      	ldr	r3, [pc, #84]	@ (8007500 <xTaskCheckForTimeOut+0xcc>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d007      	beq.n	80074c2 <xTaskCheckForTimeOut+0x8e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d302      	bcc.n	80074c2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074bc:	2301      	movs	r3, #1
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e015      	b.n	80074ee <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d20b      	bcs.n	80074e4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ff95 	bl	8007408 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	e004      	b.n	80074ee <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ee:	f000 fc53 	bl	8007d98 <vPortExitCritical>

	return xReturn;
 80074f2:	69fb      	ldr	r3, [r7, #28]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000778 	.word	0x20000778
 8007500:	2000078c 	.word	0x2000078c

08007504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007508:	4b03      	ldr	r3, [pc, #12]	@ (8007518 <vTaskMissedYield+0x14>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	20000788 	.word	0x20000788

0800751c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007524:	f000 f852 	bl	80075cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <prvIdleTask+0x28>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d9f9      	bls.n	8007524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <prvIdleTask+0x2c>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007540:	e7f0      	b.n	8007524 <prvIdleTask+0x8>
 8007542:	bf00      	nop
 8007544:	20000678 	.word	0x20000678
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007552:	2300      	movs	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	e00c      	b.n	8007572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a12      	ldr	r2, [pc, #72]	@ (80075ac <prvInitialiseTaskLists+0x60>)
 8007564:	4413      	add	r3, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe faf0 	bl	8005b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3301      	adds	r3, #1
 8007570:	607b      	str	r3, [r7, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b06      	cmp	r3, #6
 8007576:	d9ef      	bls.n	8007558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007578:	480d      	ldr	r0, [pc, #52]	@ (80075b0 <prvInitialiseTaskLists+0x64>)
 800757a:	f7fe fae7 	bl	8005b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800757e:	480d      	ldr	r0, [pc, #52]	@ (80075b4 <prvInitialiseTaskLists+0x68>)
 8007580:	f7fe fae4 	bl	8005b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007584:	480c      	ldr	r0, [pc, #48]	@ (80075b8 <prvInitialiseTaskLists+0x6c>)
 8007586:	f7fe fae1 	bl	8005b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800758a:	480c      	ldr	r0, [pc, #48]	@ (80075bc <prvInitialiseTaskLists+0x70>)
 800758c:	f7fe fade 	bl	8005b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007590:	480b      	ldr	r0, [pc, #44]	@ (80075c0 <prvInitialiseTaskLists+0x74>)
 8007592:	f7fe fadb 	bl	8005b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <prvInitialiseTaskLists+0x78>)
 8007598:	4a05      	ldr	r2, [pc, #20]	@ (80075b0 <prvInitialiseTaskLists+0x64>)
 800759a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <prvInitialiseTaskLists+0x7c>)
 800759e:	4a05      	ldr	r2, [pc, #20]	@ (80075b4 <prvInitialiseTaskLists+0x68>)
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000678 	.word	0x20000678
 80075b0:	20000704 	.word	0x20000704
 80075b4:	20000718 	.word	0x20000718
 80075b8:	20000734 	.word	0x20000734
 80075bc:	20000748 	.word	0x20000748
 80075c0:	20000760 	.word	0x20000760
 80075c4:	2000072c 	.word	0x2000072c
 80075c8:	20000730 	.word	0x20000730

080075cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075d2:	e019      	b.n	8007608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075d4:	f000 fbaa 	bl	8007d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d8:	4b10      	ldr	r3, [pc, #64]	@ (800761c <prvCheckTasksWaitingTermination+0x50>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fb3b 	bl	8005c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <prvCheckTasksWaitingTermination+0x54>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007620 <prvCheckTasksWaitingTermination+0x54>)
 80075f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007624 <prvCheckTasksWaitingTermination+0x58>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007624 <prvCheckTasksWaitingTermination+0x58>)
 80075fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075fe:	f000 fbcb 	bl	8007d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f810 	bl	8007628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <prvCheckTasksWaitingTermination+0x58>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e1      	bne.n	80075d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000748 	.word	0x20000748
 8007620:	20000774 	.word	0x20000774
 8007624:	2000075c 	.word	0x2000075c

08007628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fd75 	bl	8008124 <vPortFree>
			vPortFree( pxTCB );
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fd72 	bl	8008124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764e:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <prvResetNextTaskUnblockTime+0x38>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007658:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <prvResetNextTaskUnblockTime+0x3c>)
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007660:	e008      	b.n	8007674 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007662:	4b07      	ldr	r3, [pc, #28]	@ (8007680 <prvResetNextTaskUnblockTime+0x38>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a04      	ldr	r2, [pc, #16]	@ (8007684 <prvResetNextTaskUnblockTime+0x3c>)
 8007672:	6013      	str	r3, [r2, #0]
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	2000072c 	.word	0x2000072c
 8007684:	20000794 	.word	0x20000794

08007688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800768e:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <xTaskGetSchedulerState+0x34>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007696:	2301      	movs	r3, #1
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	e008      	b.n	80076ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769c:	4b08      	ldr	r3, [pc, #32]	@ (80076c0 <xTaskGetSchedulerState+0x38>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076a4:	2302      	movs	r3, #2
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	e001      	b.n	80076ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076aa:	2300      	movs	r3, #0
 80076ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076ae:	687b      	ldr	r3, [r7, #4]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	20000780 	.word	0x20000780
 80076c0:	2000079c 	.word	0x2000079c

080076c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d069      	beq.n	80077ae <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <xTaskPriorityInherit+0xf4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d259      	bcs.n	800779c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	db06      	blt.n	80076fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f0:	4b31      	ldr	r3, [pc, #196]	@ (80077b8 <xTaskPriorityInherit+0xf4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f6:	f1c3 0207 	rsb	r2, r3, #7
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6959      	ldr	r1, [r3, #20]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a2b      	ldr	r2, [pc, #172]	@ (80077bc <xTaskPriorityInherit+0xf8>)
 8007710:	4413      	add	r3, r2
 8007712:	4299      	cmp	r1, r3
 8007714:	d13a      	bne.n	800778c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3304      	adds	r3, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe faa0 	bl	8005c60 <uxListRemove>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d115      	bne.n	8007752 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	4924      	ldr	r1, [pc, #144]	@ (80077bc <xTaskPriorityInherit+0xf8>)
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <xTaskPriorityInherit+0x8e>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	2201      	movs	r2, #1
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43da      	mvns	r2, r3
 8007748:	4b1d      	ldr	r3, [pc, #116]	@ (80077c0 <xTaskPriorityInherit+0xfc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4013      	ands	r3, r2
 800774e:	4a1c      	ldr	r2, [pc, #112]	@ (80077c0 <xTaskPriorityInherit+0xfc>)
 8007750:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007752:	4b19      	ldr	r3, [pc, #100]	@ (80077b8 <xTaskPriorityInherit+0xf4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	2201      	movs	r2, #1
 8007762:	409a      	lsls	r2, r3
 8007764:	4b16      	ldr	r3, [pc, #88]	@ (80077c0 <xTaskPriorityInherit+0xfc>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4313      	orrs	r3, r2
 800776a:	4a15      	ldr	r2, [pc, #84]	@ (80077c0 <xTaskPriorityInherit+0xfc>)
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4a10      	ldr	r2, [pc, #64]	@ (80077bc <xTaskPriorityInherit+0xf8>)
 800777c:	441a      	add	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f7fe fa0e 	bl	8005ba6 <vListInsertEnd>
 800778a:	e004      	b.n	8007796 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <xTaskPriorityInherit+0xf4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007796:	2301      	movs	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	e008      	b.n	80077ae <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077a0:	4b05      	ldr	r3, [pc, #20]	@ (80077b8 <xTaskPriorityInherit+0xf4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d201      	bcs.n	80077ae <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077ae:	68fb      	ldr	r3, [r7, #12]
	}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000674 	.word	0x20000674
 80077bc:	20000678 	.word	0x20000678
 80077c0:	2000077c 	.word	0x2000077c

080077c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d074      	beq.n	80078c4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077da:	4b3d      	ldr	r3, [pc, #244]	@ (80078d0 <xTaskPriorityDisinherit+0x10c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d00d      	beq.n	8007800 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	b672      	cpsid	i
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	b662      	cpsie	i
 80077f8:	60fb      	str	r3, [r7, #12]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10d      	bne.n	8007824 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	b672      	cpsid	i
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	b662      	cpsie	i
 800781c:	60bb      	str	r3, [r7, #8]
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	e7fd      	b.n	8007820 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	429a      	cmp	r2, r3
 8007838:	d044      	beq.n	80078c4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800783e:	2b00      	cmp	r3, #0
 8007840:	d140      	bne.n	80078c4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3304      	adds	r3, #4
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fa0a 	bl	8005c60 <uxListRemove>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d115      	bne.n	800787e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007856:	491f      	ldr	r1, [pc, #124]	@ (80078d4 <xTaskPriorityDisinherit+0x110>)
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xTaskPriorityDisinherit+0xba>
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	2201      	movs	r2, #1
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	43da      	mvns	r2, r3
 8007874:	4b18      	ldr	r3, [pc, #96]	@ (80078d8 <xTaskPriorityDisinherit+0x114>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4013      	ands	r3, r2
 800787a:	4a17      	ldr	r2, [pc, #92]	@ (80078d8 <xTaskPriorityDisinherit+0x114>)
 800787c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	f1c3 0207 	rsb	r2, r3, #7
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	2201      	movs	r2, #1
 8007898:	409a      	lsls	r2, r3
 800789a:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <xTaskPriorityDisinherit+0x114>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4313      	orrs	r3, r2
 80078a0:	4a0d      	ldr	r2, [pc, #52]	@ (80078d8 <xTaskPriorityDisinherit+0x114>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a08      	ldr	r2, [pc, #32]	@ (80078d4 <xTaskPriorityDisinherit+0x110>)
 80078b2:	441a      	add	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe f973 	bl	8005ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078c4:	697b      	ldr	r3, [r7, #20]
	}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000674 	.word	0x20000674
 80078d4:	20000678 	.word	0x20000678
 80078d8:	2000077c 	.word	0x2000077c

080078dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8089 	beq.w	8007a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10d      	bne.n	800791a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	b672      	cpsid	i
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	b662      	cpsie	i
 8007912:	60fb      	str	r3, [r7, #12]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d902      	bls.n	800792a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	e002      	b.n	8007930 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	429a      	cmp	r2, r3
 8007938:	d066      	beq.n	8007a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	429a      	cmp	r2, r3
 8007942:	d161      	bne.n	8007a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007944:	4b32      	ldr	r3, [pc, #200]	@ (8007a10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	429a      	cmp	r2, r3
 800794c:	d10d      	bne.n	800796a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	b672      	cpsid	i
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	b662      	cpsie	i
 8007962:	60bb      	str	r3, [r7, #8]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	db04      	blt.n	8007988 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f1c3 0207 	rsb	r2, r3, #7
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6959      	ldr	r1, [r3, #20]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4a1f      	ldr	r2, [pc, #124]	@ (8007a14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007998:	4413      	add	r3, r2
 800799a:	4299      	cmp	r1, r3
 800799c:	d134      	bne.n	8007a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe f95c 	bl	8005c60 <uxListRemove>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d115      	bne.n	80079da <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b2:	4918      	ldr	r1, [pc, #96]	@ (8007a14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	2201      	movs	r2, #1
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	43da      	mvns	r2, r3
 80079d0:	4b11      	ldr	r3, [pc, #68]	@ (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4013      	ands	r3, r2
 80079d6:	4a10      	ldr	r2, [pc, #64]	@ (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	2201      	movs	r2, #1
 80079e0:	409a      	lsls	r2, r3
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4a06      	ldr	r2, [pc, #24]	@ (8007a14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079fa:	441a      	add	r2, r3
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe f8cf 	bl	8005ba6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a08:	bf00      	nop
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000674 	.word	0x20000674
 8007a14:	20000678 	.word	0x20000678
 8007a18:	2000077c 	.word	0x2000077c

08007a1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a20:	4b07      	ldr	r3, [pc, #28]	@ (8007a40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a2e:	3201      	adds	r2, #1
 8007a30:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007a32:	4b03      	ldr	r3, [pc, #12]	@ (8007a40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a34:	681b      	ldr	r3, [r3, #0]
	}
 8007a36:	4618      	mov	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	20000674 	.word	0x20000674

08007a44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a4e:	4b29      	ldr	r3, [pc, #164]	@ (8007af4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a54:	4b28      	ldr	r3, [pc, #160]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe f900 	bl	8005c60 <uxListRemove>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a66:	4b24      	ldr	r3, [pc, #144]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43da      	mvns	r2, r3
 8007a74:	4b21      	ldr	r3, [pc, #132]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	4a20      	ldr	r2, [pc, #128]	@ (8007afc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d10a      	bne.n	8007a9c <prvAddCurrentTaskToDelayedList+0x58>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	481a      	ldr	r0, [pc, #104]	@ (8007b00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a96:	f7fe f886 	bl	8005ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a9a:	e026      	b.n	8007aea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aa4:	4b14      	ldr	r3, [pc, #80]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d209      	bcs.n	8007ac8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab4:	4b13      	ldr	r3, [pc, #76]	@ (8007b04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fe f894 	bl	8005bee <vListInsert>
}
 8007ac6:	e010      	b.n	8007aea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	4b0a      	ldr	r3, [pc, #40]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f7fe f88a 	bl	8005bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ada:	4b0c      	ldr	r3, [pc, #48]	@ (8007b0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d202      	bcs.n	8007aea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ae4:	4a09      	ldr	r2, [pc, #36]	@ (8007b0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6013      	str	r3, [r2, #0]
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000778 	.word	0x20000778
 8007af8:	20000674 	.word	0x20000674
 8007afc:	2000077c 	.word	0x2000077c
 8007b00:	20000760 	.word	0x20000760
 8007b04:	20000730 	.word	0x20000730
 8007b08:	2000072c 	.word	0x2000072c
 8007b0c:	20000794 	.word	0x20000794

08007b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3b04      	subs	r3, #4
 8007b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f023 0201 	bic.w	r2, r3, #1
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3b04      	subs	r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b40:	4a0c      	ldr	r2, [pc, #48]	@ (8007b74 <pxPortInitialiseStack+0x64>)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3b14      	subs	r3, #20
 8007b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f06f 0202 	mvn.w	r2, #2
 8007b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3b20      	subs	r3, #32
 8007b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b66:	68fb      	ldr	r3, [r7, #12]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	08007b79 	.word	0x08007b79

08007b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b82:	4b15      	ldr	r3, [pc, #84]	@ (8007bd8 <prvTaskExitError+0x60>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d00d      	beq.n	8007ba8 <prvTaskExitError+0x30>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	60fb      	str	r3, [r7, #12]
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <prvTaskExitError+0x2c>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	b672      	cpsid	i
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	b662      	cpsie	i
 8007bbc:	60bb      	str	r3, [r7, #8]
}
 8007bbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bc0:	bf00      	nop
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0fc      	beq.n	8007bc2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	2000003c 	.word	0x2000003c
 8007bdc:	00000000 	.word	0x00000000

08007be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <pxCurrentTCBConst2>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f380 8809 	msr	PSP, r0
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	4770      	bx	lr
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst2>:
 8007c00:	20000674 	.word	0x20000674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c08:	4808      	ldr	r0, [pc, #32]	@ (8007c2c <prvPortStartFirstTask+0x24>)
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	f380 8808 	msr	MSP, r0
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8814 	msr	CONTROL, r0
 8007c1a:	b662      	cpsie	i
 8007c1c:	b661      	cpsie	f
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	df00      	svc	0
 8007c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c2a:	bf00      	nop
 8007c2c:	e000ed08 	.word	0xe000ed08

08007c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c36:	4b37      	ldr	r3, [pc, #220]	@ (8007d14 <xPortStartScheduler+0xe4>)
 8007c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	22ff      	movs	r2, #255	@ 0xff
 8007c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d18 <xPortStartScheduler+0xe8>)
 8007c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c64:	e009      	b.n	8007c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c66:	4b2d      	ldr	r3, [pc, #180]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c82:	2b80      	cmp	r3, #128	@ 0x80
 8007c84:	d0ef      	beq.n	8007c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c86:	4b25      	ldr	r3, [pc, #148]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d00d      	beq.n	8007cae <xPortStartScheduler+0x7e>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
 8007ca6:	60bb      	str	r3, [r7, #8]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cae:	4b1b      	ldr	r3, [pc, #108]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	4a19      	ldr	r2, [pc, #100]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb8:	4b18      	ldr	r3, [pc, #96]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cc0:	4a16      	ldr	r2, [pc, #88]	@ (8007d1c <xPortStartScheduler+0xec>)
 8007cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ccc:	4b14      	ldr	r3, [pc, #80]	@ (8007d20 <xPortStartScheduler+0xf0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <xPortStartScheduler+0xf0>)
 8007cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd8:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <xPortStartScheduler+0xf0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a10      	ldr	r2, [pc, #64]	@ (8007d20 <xPortStartScheduler+0xf0>)
 8007cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ce4:	f000 f8dc 	bl	8007ea0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d24 <xPortStartScheduler+0xf4>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cee:	f000 f8fb 	bl	8007ee8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <xPortStartScheduler+0xf8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d28 <xPortStartScheduler+0xf8>)
 8007cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cfe:	f7ff ff83 	bl	8007c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d02:	f7ff fa95 	bl	8007230 <vTaskSwitchContext>
	prvTaskExitError();
 8007d06:	f7ff ff37 	bl	8007b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000e400 	.word	0xe000e400
 8007d18:	200007a0 	.word	0x200007a0
 8007d1c:	200007a4 	.word	0x200007a4
 8007d20:	e000ed20 	.word	0xe000ed20
 8007d24:	2000003c 	.word	0x2000003c
 8007d28:	e000ef34 	.word	0xe000ef34

08007d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	b672      	cpsid	i
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	b662      	cpsie	i
 8007d46:	607b      	str	r3, [r7, #4]
}
 8007d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d4a:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <vPortEnterCritical+0x64>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	4a0f      	ldr	r2, [pc, #60]	@ (8007d90 <vPortEnterCritical+0x64>)
 8007d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d54:	4b0e      	ldr	r3, [pc, #56]	@ (8007d90 <vPortEnterCritical+0x64>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d112      	bne.n	8007d82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <vPortEnterCritical+0x68>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <vPortEnterCritical+0x56>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6a:	b672      	cpsid	i
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	b662      	cpsie	i
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	e7fd      	b.n	8007d7e <vPortEnterCritical+0x52>
	}
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	2000003c 	.word	0x2000003c
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9e:	4b13      	ldr	r3, [pc, #76]	@ (8007dec <vPortExitCritical+0x54>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10d      	bne.n	8007dc2 <vPortExitCritical+0x2a>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	607b      	str	r3, [r7, #4]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <vPortExitCritical+0x54>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4a08      	ldr	r2, [pc, #32]	@ (8007dec <vPortExitCritical+0x54>)
 8007dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <vPortExitCritical+0x54>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <vPortExitCritical+0x48>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f383 8811 	msr	BASEPRI, r3
}
 8007dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	2000003c 	.word	0x2000003c

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	@ (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e14:	b672      	cpsid	i
 8007e16:	f380 8811 	msr	BASEPRI, r0
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	b662      	cpsie	i
 8007e24:	f7ff fa04 	bl	8007230 <vTaskSwitchContext>
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	f380 8811 	msr	BASEPRI, r0
 8007e30:	bc09      	pop	{r0, r3}
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f01e 0f10 	tst.w	lr, #16
 8007e3e:	bf08      	it	eq
 8007e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e44:	f380 8809 	msr	PSP, r0
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000674 	.word	0x20000674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	b672      	cpsid	i
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	b662      	cpsie	i
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e76:	f7ff f91f 	bl	80070b8 <xTaskIncrementTick>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e80:	4b06      	ldr	r3, [pc, #24]	@ (8007e9c <SysTick_Handler+0x44>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f383 8811 	msr	BASEPRI, r3
}
 8007e92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed4 <vPortSetupTimerInterrupt+0x34>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <vPortSetupTimerInterrupt+0x38>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007edc <vPortSetupTimerInterrupt+0x3c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee0 <vPortSetupTimerInterrupt+0x40>)
 8007eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eba:	099b      	lsrs	r3, r3, #6
 8007ebc:	4a09      	ldr	r2, [pc, #36]	@ (8007ee4 <vPortSetupTimerInterrupt+0x44>)
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ec2:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <vPortSetupTimerInterrupt+0x34>)
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	601a      	str	r2, [r3, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	e000e010 	.word	0xe000e010
 8007ed8:	e000e018 	.word	0xe000e018
 8007edc:	20000030 	.word	0x20000030
 8007ee0:	10624dd3 	.word	0x10624dd3
 8007ee4:	e000e014 	.word	0xe000e014

08007ee8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ef8 <vPortEnableVFP+0x10>
 8007eec:	6801      	ldr	r1, [r0, #0]
 8007eee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ef2:	6001      	str	r1, [r0, #0]
 8007ef4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef6:	bf00      	nop
 8007ef8:	e000ed88 	.word	0xe000ed88

08007efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f02:	f3ef 8305 	mrs	r3, IPSR
 8007f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b0f      	cmp	r3, #15
 8007f0c:	d917      	bls.n	8007f3e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f78 <vPortValidateInterruptPriority+0x7c>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f18:	4b18      	ldr	r3, [pc, #96]	@ (8007f7c <vPortValidateInterruptPriority+0x80>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	7afa      	ldrb	r2, [r7, #11]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d20d      	bcs.n	8007f3e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f26:	b672      	cpsid	i
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	b662      	cpsie	i
 8007f36:	607b      	str	r3, [r7, #4]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f3e:	4b10      	ldr	r3, [pc, #64]	@ (8007f80 <vPortValidateInterruptPriority+0x84>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f46:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <vPortValidateInterruptPriority+0x88>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d90d      	bls.n	8007f6a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	603b      	str	r3, [r7, #0]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <vPortValidateInterruptPriority+0x6a>
	}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	e000e3f0 	.word	0xe000e3f0
 8007f7c:	200007a0 	.word	0x200007a0
 8007f80:	e000ed0c 	.word	0xe000ed0c
 8007f84:	200007a4 	.word	0x200007a4

08007f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	@ 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f94:	f7fe ffc0 	bl	8006f18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f98:	4b5d      	ldr	r3, [pc, #372]	@ (8008110 <pvPortMalloc+0x188>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fa0:	f000 f920 	bl	80081e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8008114 <pvPortMalloc+0x18c>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 8094 	bne.w	80080da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d020      	beq.n	8007ffa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007fb8:	2208      	movs	r2, #8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d017      	beq.n	8007ffa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00d      	beq.n	8007ffa <pvPortMalloc+0x72>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	b672      	cpsid	i
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	b662      	cpsie	i
 8007ff2:	617b      	str	r3, [r7, #20]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d06c      	beq.n	80080da <pvPortMalloc+0x152>
 8008000:	4b45      	ldr	r3, [pc, #276]	@ (8008118 <pvPortMalloc+0x190>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d867      	bhi.n	80080da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800800a:	4b44      	ldr	r3, [pc, #272]	@ (800811c <pvPortMalloc+0x194>)
 800800c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800800e:	4b43      	ldr	r3, [pc, #268]	@ (800811c <pvPortMalloc+0x194>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008014:	e004      	b.n	8008020 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d903      	bls.n	8008032 <pvPortMalloc+0xaa>
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f1      	bne.n	8008016 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008032:	4b37      	ldr	r3, [pc, #220]	@ (8008110 <pvPortMalloc+0x188>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008038:	429a      	cmp	r2, r3
 800803a:	d04e      	beq.n	80080da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2208      	movs	r2, #8
 8008042:	4413      	add	r3, r2
 8008044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	1ad2      	subs	r2, r2, r3
 8008056:	2308      	movs	r3, #8
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	429a      	cmp	r2, r3
 800805c:	d922      	bls.n	80080a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800805e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4413      	add	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00d      	beq.n	800808c <pvPortMalloc+0x104>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	b672      	cpsid	i
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	b662      	cpsie	i
 8008084:	613b      	str	r3, [r7, #16]
}
 8008086:	bf00      	nop
 8008088:	bf00      	nop
 800808a:	e7fd      	b.n	8008088 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	1ad2      	subs	r2, r2, r3
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800809e:	69b8      	ldr	r0, [r7, #24]
 80080a0:	f000 f902 	bl	80082a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008118 <pvPortMalloc+0x190>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008118 <pvPortMalloc+0x190>)
 80080b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080b2:	4b19      	ldr	r3, [pc, #100]	@ (8008118 <pvPortMalloc+0x190>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008120 <pvPortMalloc+0x198>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d203      	bcs.n	80080c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080be:	4b16      	ldr	r3, [pc, #88]	@ (8008118 <pvPortMalloc+0x190>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a17      	ldr	r2, [pc, #92]	@ (8008120 <pvPortMalloc+0x198>)
 80080c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	4b12      	ldr	r3, [pc, #72]	@ (8008114 <pvPortMalloc+0x18c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080da:	f7fe ff2b 	bl	8006f34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00d      	beq.n	8008104 <pvPortMalloc+0x17c>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ec:	b672      	cpsid	i
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	b662      	cpsie	i
 80080fc:	60fb      	str	r3, [r7, #12]
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <pvPortMalloc+0x178>
	return pvReturn;
 8008104:	69fb      	ldr	r3, [r7, #28]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3728      	adds	r7, #40	@ 0x28
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200043b0 	.word	0x200043b0
 8008114:	200043bc 	.word	0x200043bc
 8008118:	200043b4 	.word	0x200043b4
 800811c:	200043a8 	.word	0x200043a8
 8008120:	200043b8 	.word	0x200043b8

08008124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d04e      	beq.n	80081d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008136:	2308      	movs	r3, #8
 8008138:	425b      	negs	r3, r3
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4413      	add	r3, r2
 800813e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	4b24      	ldr	r3, [pc, #144]	@ (80081dc <vPortFree+0xb8>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4013      	ands	r3, r2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10d      	bne.n	800816e <vPortFree+0x4a>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	b672      	cpsid	i
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	b662      	cpsie	i
 8008166:	60fb      	str	r3, [r7, #12]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00d      	beq.n	8008192 <vPortFree+0x6e>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	b672      	cpsid	i
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	b662      	cpsie	i
 800818a:	60bb      	str	r3, [r7, #8]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <vPortFree+0xb8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d019      	beq.n	80081d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d115      	bne.n	80081d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	4b0b      	ldr	r3, [pc, #44]	@ (80081dc <vPortFree+0xb8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	401a      	ands	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081b8:	f7fe feae 	bl	8006f18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4b07      	ldr	r3, [pc, #28]	@ (80081e0 <vPortFree+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	4a06      	ldr	r2, [pc, #24]	@ (80081e0 <vPortFree+0xbc>)
 80081c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ca:	6938      	ldr	r0, [r7, #16]
 80081cc:	f000 f86c 	bl	80082a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081d0:	f7fe feb0 	bl	8006f34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081d4:	bf00      	nop
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200043bc 	.word	0x200043bc
 80081e0:	200043b4 	.word	0x200043b4

080081e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80081ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081f0:	4b27      	ldr	r3, [pc, #156]	@ (8008290 <prvHeapInit+0xac>)
 80081f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3307      	adds	r3, #7
 8008202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	4a1f      	ldr	r2, [pc, #124]	@ (8008290 <prvHeapInit+0xac>)
 8008214:	4413      	add	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800821c:	4a1d      	ldr	r2, [pc, #116]	@ (8008294 <prvHeapInit+0xb0>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008222:	4b1c      	ldr	r3, [pc, #112]	@ (8008294 <prvHeapInit+0xb0>)
 8008224:	2200      	movs	r2, #0
 8008226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4413      	add	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008230:	2208      	movs	r2, #8
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a15      	ldr	r2, [pc, #84]	@ (8008298 <prvHeapInit+0xb4>)
 8008244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008246:	4b14      	ldr	r3, [pc, #80]	@ (8008298 <prvHeapInit+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800824e:	4b12      	ldr	r3, [pc, #72]	@ (8008298 <prvHeapInit+0xb4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008264:	4b0c      	ldr	r3, [pc, #48]	@ (8008298 <prvHeapInit+0xb4>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4a0a      	ldr	r2, [pc, #40]	@ (800829c <prvHeapInit+0xb8>)
 8008272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a09      	ldr	r2, [pc, #36]	@ (80082a0 <prvHeapInit+0xbc>)
 800827a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800827c:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <prvHeapInit+0xc0>)
 800827e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	200007a8 	.word	0x200007a8
 8008294:	200043a8 	.word	0x200043a8
 8008298:	200043b0 	.word	0x200043b0
 800829c:	200043b8 	.word	0x200043b8
 80082a0:	200043b4 	.word	0x200043b4
 80082a4:	200043bc 	.word	0x200043bc

080082a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082b0:	4b28      	ldr	r3, [pc, #160]	@ (8008354 <prvInsertBlockIntoFreeList+0xac>)
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e002      	b.n	80082bc <prvInsertBlockIntoFreeList+0x14>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d8f7      	bhi.n	80082b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4413      	add	r3, r2
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d108      	bne.n	80082ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d118      	bne.n	8008330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b15      	ldr	r3, [pc, #84]	@ (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d00d      	beq.n	8008326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e008      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008326:	4b0c      	ldr	r3, [pc, #48]	@ (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e003      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d002      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	200043a8 	.word	0x200043a8
 8008358:	200043b0 	.word	0x200043b0

0800835c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af02      	add	r7, sp, #8
 8008362:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	4619      	mov	r1, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	1d5a      	adds	r2, r3, #5
 8008378:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2303      	movs	r3, #3
 8008380:	f7fa fb4a 	bl	8002a18 <HAL_I2C_Master_Transmit>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 80083a0:	220f      	movs	r2, #15
 80083a2:	2141      	movs	r1, #65	@ 0x41
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f80c 	bl	80083c2 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	4619      	mov	r1, r3
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f81f 	bl	80083f8 <MAX581x_Reference>
}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
 80083ce:	4613      	mov	r3, r2
 80083d0:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	78ba      	ldrb	r2, [r7, #2]
 80083e2:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ffb6 	bl	800835c <MAX581x_WriteCommand>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800840a:	b2da      	uxtb	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff ff9d 	bl	800835c <MAX581x_WriteCommand>
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
 8008436:	4613      	mov	r3, r2
 8008438:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008440:	883b      	ldrh	r3, [r7, #0]
 8008442:	091b      	lsrs	r3, r3, #4
 8008444:	b29b      	uxth	r3, r3
 8008446:	b2da      	uxtb	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800844c:	883b      	ldrh	r3, [r7, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ff7f 	bl	800835c <MAX581x_WriteCommand>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
 8008472:	4613      	mov	r3, r2
 8008474:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800847c:	b2da      	uxtb	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008482:	883b      	ldrh	r3, [r7, #0]
 8008484:	091b      	lsrs	r3, r3, #4
 8008486:	b29b      	uxth	r3, r3
 8008488:	b2da      	uxtb	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800848e:	883b      	ldrh	r3, [r7, #0]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	b2da      	uxtb	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff ff5e 	bl	800835c <MAX581x_WriteCommand>
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 80084a8:	b084      	sub	sp, #16
 80084aa:	b4b0      	push	{r4, r5, r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	f107 001c 	add.w	r0, r7, #28
 80084b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	461d      	mov	r5, r3
 80084be:	f107 041c 	add.w	r4, r7, #28
 80084c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80084ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	pid->error = 0;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f04f 0200 	mov.w	r2, #0
 80084e6:	625a      	str	r2, [r3, #36]	@ 0x24

	pid->lastMeasure = 0;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->integral = 0;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	62da      	str	r2, [r3, #44]	@ 0x2c

	pid->enable = enable;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	bcb0      	pop	{r4, r5, r7}
 800850a:	b004      	add	sp, #16
 800850c:	4770      	bx	lr

0800850e <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 800850e:	b480      	push	{r7}
 8008510:	b087      	sub	sp, #28
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	ed87 0a02 	vstr	s0, [r7, #8]
 800851a:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008524:	2b01      	cmp	r3, #1
 8008526:	d006      	beq.n	8008536 <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	629a      	str	r2, [r3, #40]	@ 0x28
		pid->output = reference;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 8008534:	e085      	b.n	8008642 <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	ed93 7a07 	vldr	s14, [r3, #28]
 8008542:	edd7 7a01 	vldr	s15, [r7, #4]
 8008546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	edd3 6a08 	vldr	s13, [r3, #32]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	if (pid->integral > pid->params.integralMax)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	edd3 7a05 	vldr	s15, [r3, #20]
 800857c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	dd04      	ble.n	8008590 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800858e:	e014      	b.n	80085ba <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	edd3 7a05 	vldr	s15, [r3, #20]
 800859c:	eef1 7a67 	vneg.f32	s15, s15
 80085a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a8:	d507      	bpl.n	80085ba <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80085b0:	eef1 7a67 	vneg.f32	s15, s15
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80085c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80085c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085c8:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	edd3 7a00 	vldr	s15, [r3]
 80085d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80085e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80085ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80085f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (pid->output > pid->params.outputMax)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	edd3 7a03 	vldr	s15, [r3, #12]
 800860a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800860e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008612:	dd04      	ble.n	800861e <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	625a      	str	r2, [r3, #36]	@ 0x24
 800861c:	e00e      	b.n	800863c <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	edd3 7a04 	vldr	s15, [r3, #16]
 800862a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	d503      	bpl.n	800863c <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	pid->lastMeasure = measure;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8008658:	887b      	ldrh	r3, [r7, #2]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fa f930 	bl	80028c2 <HAL_GPIO_TogglePin>
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <Board_GetID>:

uint16_t Board_GetID()
{
 800866c:	b598      	push	{r3, r4, r7, lr}
 800866e:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008670:	2102      	movs	r1, #2
 8008672:	481d      	ldr	r0, [pc, #116]	@ (80086e8 <Board_GetID+0x7c>)
 8008674:	f7fa f8f4 	bl	8002860 <HAL_GPIO_ReadPin>
 8008678:	4603      	mov	r3, r0
 800867a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 800867c:	2101      	movs	r1, #1
 800867e:	481a      	ldr	r0, [pc, #104]	@ (80086e8 <Board_GetID+0x7c>)
 8008680:	f7fa f8ee 	bl	8002860 <HAL_GPIO_ReadPin>
 8008684:	4603      	mov	r3, r0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008686:	b21b      	sxth	r3, r3
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	b21b      	sxth	r3, r3
 800868c:	4323      	orrs	r3, r4
 800868e:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008694:	4815      	ldr	r0, [pc, #84]	@ (80086ec <Board_GetID+0x80>)
 8008696:	f7fa f8e3 	bl	8002860 <HAL_GPIO_ReadPin>
 800869a:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 800869c:	b21b      	sxth	r3, r3
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	b21b      	sxth	r3, r3
 80086a2:	4323      	orrs	r3, r4
 80086a4:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 80086a6:	2104      	movs	r1, #4
 80086a8:	4811      	ldr	r0, [pc, #68]	@ (80086f0 <Board_GetID+0x84>)
 80086aa:	f7fa f8d9 	bl	8002860 <HAL_GPIO_ReadPin>
 80086ae:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 80086b0:	b21b      	sxth	r3, r3
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	4323      	orrs	r3, r4
 80086b8:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 80086ba:	2110      	movs	r1, #16
 80086bc:	480d      	ldr	r0, [pc, #52]	@ (80086f4 <Board_GetID+0x88>)
 80086be:	f7fa f8cf 	bl	8002860 <HAL_GPIO_ReadPin>
 80086c2:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 80086c4:	b21b      	sxth	r3, r3
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	b21b      	sxth	r3, r3
 80086ca:	4323      	orrs	r3, r4
 80086cc:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 80086ce:	2110      	movs	r1, #16
 80086d0:	4809      	ldr	r0, [pc, #36]	@ (80086f8 <Board_GetID+0x8c>)
 80086d2:	f7fa f8c5 	bl	8002860 <HAL_GPIO_ReadPin>
 80086d6:	4603      	mov	r3, r0
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 80086d8:	b21b      	sxth	r3, r3
 80086da:	015b      	lsls	r3, r3, #5
 80086dc:	b21b      	sxth	r3, r3
 80086de:	4323      	orrs	r3, r4
 80086e0:	b21b      	sxth	r3, r3
 80086e2:	b29b      	uxth	r3, r3
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	bd98      	pop	{r3, r4, r7, pc}
 80086e8:	40022400 	.word	0x40022400
 80086ec:	40022000 	.word	0x40022000
 80086f0:	40020400 	.word	0x40020400
 80086f4:	40020800 	.word	0x40020800
 80086f8:	40021c00 	.word	0x40021c00
 80086fc:	00000000 	.word	0x00000000

08008700 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7c1b      	ldrb	r3, [r3, #16]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d002      	beq.n	800871a <Encoder_Update+0x1a>
		return 0;
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	e03a      	b.n	8008790 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 8008722:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800872e:	eef0 7ae7 	vabs.f32	s15, s15
 8008732:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	d502      	bpl.n	8008746 <Encoder_Update+0x46>
 8008740:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80087b0 <Encoder_Update+0xb0>
 8008744:	e005      	b.n	8008752 <Encoder_Update+0x52>
 8008746:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008752:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 800875e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008762:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800876a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80087a8 <Encoder_Update+0xa8>
 800876e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8008772:	edd7 7a00 	vldr	s15, [r7]
 8008776:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80087b4 <Encoder_Update+0xb4>
 800877a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800877e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008782:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800878a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 800878e:	68fb      	ldr	r3, [r7, #12]
}
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eeb0 0a67 	vmov.f32	s0, s15
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	f3af 8000 	nop.w
 80087a8:	54442d18 	.word	0x54442d18
 80087ac:	400921fb 	.word	0x400921fb
 80087b0:	00000000 	.word	0x00000000
 80087b4:	46000000 	.word	0x46000000

080087b8 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
 80087c4:	4613      	mov	r3, r2
 80087c6:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	78ba      	ldrb	r2, [r7, #2]
 80087cc:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	motorDevice->outputID = motorID;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motorDevice->refSpeed = 0;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	671a      	str	r2, [r3, #112]	@ 0x70
	motorDevice->measSpeed = 0;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	675a      	str	r2, [r3, #116]	@ 0x74
	Motor_Enable(motorDevice, enable);
 80087e8:	78bb      	ldrb	r3, [r7, #2]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f857 	bl	80088a0 <Motor_Enable>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed * WHEEL_GEAR_RATIO * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 800880a:	edd7 7a01 	vldr	s15, [r7, #4]
 800880e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8008812:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008816:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800889c <Motor_CLDrive+0xa0>
 800881a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008830:	eeb0 0a67 	vmov.f32	s0, s15
 8008834:	4610      	mov	r0, r2
 8008836:	f7ff ff63 	bl	8008700 <Encoder_Update>
 800883a:	eef0 7a40 	vmov.f32	s15, s0
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8008852:	eef0 0a47 	vmov.f32	s1, s14
 8008856:	eeb0 0a67 	vmov.f32	s0, s15
 800885a:	4610      	mov	r0, r2
 800885c:	f7ff fe57 	bl	800850e <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008866:	eef0 7ae7 	vabs.f32	s15, s15
 800886a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800886e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008876:	d503      	bpl.n	8008880 <Motor_CLDrive+0x84>
		motorDevice->pid.output = 0.0;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f04f 0200 	mov.w	r2, #0
 800887e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008886:	eeb0 0a67 	vmov.f32	s0, s15
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f84b 	bl	8008928 <Motor_SetVoltage>
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	3cdd82fd 	.word	0x3cdd82fd

080088a0 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088c4:	2200      	movs	r2, #0
 80088c6:	4619      	mov	r1, r3
 80088c8:	f7f9 ffe2 	bl	8002890 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 80088cc:	e008      	b.n	80088e0 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088d8:	2201      	movs	r2, #1
 80088da:	4619      	mov	r1, r3
 80088dc:	f7f9 ffd8 	bl	8002890 <HAL_GPIO_WritePin>
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d109      	bne.n	800890e <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008904:	2200      	movs	r2, #0
 8008906:	4619      	mov	r1, r3
 8008908:	f7f9 ffc2 	bl	8002890 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 800890c:	e008      	b.n	8008920 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008918:	2201      	movs	r2, #1
 800891a:	4619      	mov	r1, r3
 800891c:	f7f9 ffb8 	bl	8002890 <HAL_GPIO_WritePin>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8008936:	edd7 7a01 	vldr	s15, [r7, #4]
 800893a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800893e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008942:	db1d      	blt.n	8008980 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800894e:	2201      	movs	r2, #1
 8008950:	4619      	mov	r1, r3
 8008952:	f7f9 ff9d 	bl	8002890 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8008956:	edd7 7a01 	vldr	s15, [r7, #4]
 800895a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895e:	ee17 3a90 	vmov	r3, s15
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8008976:	461a      	mov	r2, r3
 8008978:	68b8      	ldr	r0, [r7, #8]
 800897a:	f7ff fd74 	bl	8008466 <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 800897e:	e01e      	b.n	80089be <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800898a:	2200      	movs	r2, #0
 800898c:	4619      	mov	r1, r3
 800898e:	f7f9 ff7f 	bl	8002890 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8008992:	edd7 7a01 	vldr	s15, [r7, #4]
 8008996:	eef0 7ae7 	vabs.f32	s15, s15
 800899a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899e:	ee17 3a90 	vmov	r3, s15
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80089b6:	461a      	mov	r2, r3
 80089b8:	68b8      	ldr	r0, [r7, #8]
 80089ba:	f7ff fd54 	bl	8008466 <MAX581x_CodeLoad>
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6898      	ldr	r0, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	8a5b      	ldrh	r3, [r3, #18]
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4619      	mov	r1, r3
 80089de:	f7f9 ff57 	bl	8002890 <HAL_GPIO_WritePin>
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6858      	ldr	r0, [r3, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8a1b      	ldrh	r3, [r3, #16]
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f7f9 ff45 	bl	8002890 <HAL_GPIO_WritePin>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	887a      	ldrh	r2, [r7, #2]
 8008a2c:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8bba      	ldrh	r2, [r7, #28]
 8008a38:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7ff ffd4 	bl	80089ea <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8008a42:	2100      	movs	r1, #0
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff ffbe 	bl	80089c6 <nRF24_CE_State>
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b086      	sub	sp, #24
 8008a56:	af02      	add	r7, sp, #8
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f107 020f 	add.w	r2, r7, #15
 8008a66:	1cf9      	adds	r1, r7, #3
 8008a68:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f7fb fed5 	bl	800481e <HAL_SPI_TransmitReceive>
  return rxData;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ffac 	bl	80089ea <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	f003 031f 	and.w	r3, r3, #31
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ffd8 	bl	8008a52 <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008aa2:	21ff      	movs	r1, #255	@ 0xff
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ffd4 	bl	8008a52 <nRF24_LL_RW>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008aae:	2101      	movs	r1, #1
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff ff9a 	bl	80089ea <nRF24_CSN_State>

  return value;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
 8008acc:	4613      	mov	r3, r2
 8008ace:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ff89 	bl	80089ea <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b1f      	cmp	r3, #31
 8008adc:	d812      	bhi.n	8008b04 <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8008ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	f043 0320 	orr.w	r3, r3, #32
 8008aec:	b25b      	sxtb	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff ffad 	bl	8008a52 <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 8008af8:	78bb      	ldrb	r3, [r7, #2]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff ffa8 	bl	8008a52 <nRF24_LL_RW>
 8008b02:	e015      	b.n	8008b30 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ffa2 	bl	8008a52 <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	2be1      	cmp	r3, #225	@ 0xe1
 8008b12:	d00d      	beq.n	8008b30 <nRF24_WriteReg+0x70>
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2be2      	cmp	r3, #226	@ 0xe2
 8008b18:	d00a      	beq.n	8008b30 <nRF24_WriteReg+0x70>
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	2be3      	cmp	r3, #227	@ 0xe3
 8008b1e:	d007      	beq.n	8008b30 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	2bff      	cmp	r3, #255	@ 0xff
 8008b24:	d004      	beq.n	8008b30 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 8008b26:	78bb      	ldrb	r3, [r7, #2]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff ff91 	bl	8008a52 <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b30:	2101      	movs	r1, #1
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff ff59 	bl	80089ea <nRF24_CSN_State>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008b40:	b590      	push	{r4, r7, lr}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	607a      	str	r2, [r7, #4]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	72fb      	strb	r3, [r7, #11]
 8008b50:	4613      	mov	r3, r2
 8008b52:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008b54:	2100      	movs	r1, #0
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff ff47 	bl	80089ea <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8008b5c:	7afb      	ldrb	r3, [r7, #11]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff ff76 	bl	8008a52 <nRF24_LL_RW>
  while (count--)
 8008b66:	e008      	b.n	8008b7a <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008b68:	687c      	ldr	r4, [r7, #4]
 8008b6a:	1c63      	adds	r3, r4, #1
 8008b6c:	607b      	str	r3, [r7, #4]
 8008b6e:	21ff      	movs	r1, #255	@ 0xff
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7ff ff6e 	bl	8008a52 <nRF24_LL_RW>
 8008b76:	4603      	mov	r3, r0
 8008b78:	7023      	strb	r3, [r4, #0]
  while (count--)
 8008b7a:	7abb      	ldrb	r3, [r7, #10]
 8008b7c:	1e5a      	subs	r2, r3, #1
 8008b7e:	72ba      	strb	r2, [r7, #10]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f1      	bne.n	8008b68 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b84:	2101      	movs	r1, #1
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7ff ff2f 	bl	80089ea <nRF24_CSN_State>
}
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd90      	pop	{r4, r7, pc}

08008b94 <nRF24_WriteMBReg>:

void nRF24_WriteMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	72fb      	strb	r3, [r7, #11]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008ba8:	2100      	movs	r1, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7ff ff1d 	bl	80089ea <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7ff ff4c 	bl	8008a52 <nRF24_LL_RW>
  while (count--)
 8008bba:	e007      	b.n	8008bcc <nRF24_WriteMBReg+0x38>
  {
    nRF24_LL_RW(device, *pBuf++);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ff43 	bl	8008a52 <nRF24_LL_RW>
  while (count--)
 8008bcc:	7abb      	ldrb	r3, [r7, #10]
 8008bce:	1e5a      	subs	r2, r3, #1
 8008bd0:	72ba      	strb	r2, [r7, #10]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f2      	bne.n	8008bbc <nRF24_WriteMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff ff06 	bl	80089ea <nRF24_CSN_State>
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <nRF24_Init>:

void nRF24_Init(nRF24_Handler_t *device) {
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8008bee:	2208      	movs	r2, #8
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ff64 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8008bf8:	223f      	movs	r2, #63	@ 0x3f
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff ff5f 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8008c02:	2203      	movs	r2, #3
 8008c04:	2102      	movs	r1, #2
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff ff5a 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	2103      	movs	r1, #3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff ff55 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8008c16:	2203      	movs	r2, #3
 8008c18:	2104      	movs	r1, #4
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ff50 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 8008c20:	2202      	movs	r2, #2
 8008c22:	2105      	movs	r1, #5
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff ff4b 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8008c2a:	220e      	movs	r2, #14
 8008c2c:	2106      	movs	r1, #6
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff ff46 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 8008c34:	2200      	movs	r2, #0
 8008c36:	2107      	movs	r1, #7
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff ff41 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2111      	movs	r1, #17
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff ff3c 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2112      	movs	r1, #18
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff ff37 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 8008c52:	2200      	movs	r2, #0
 8008c54:	2113      	movs	r1, #19
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff ff32 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2114      	movs	r1, #20
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff ff2d 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 8008c66:	2200      	movs	r2, #0
 8008c68:	2115      	movs	r1, #21
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ff28 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8008c70:	2200      	movs	r2, #0
 8008c72:	2116      	movs	r1, #22
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff ff23 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	211c      	movs	r1, #28
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ff1e 	bl	8008ac0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8008c84:	2200      	movs	r2, #0
 8008c86:	211d      	movs	r1, #29
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff ff19 	bl	8008ac0 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa62 	bl	8009158 <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa52 	bl	800913e <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa69 	bl	8009172 <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff fea1 	bl	80089ea <nRF24_CSN_State>
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff fedd 	bl	8008a7e <nRF24_ReadReg>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d104      	bne.n	8008cd8 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	f043 0302 	orr.w	r3, r3, #2
 8008cd4:	73fb      	strb	r3, [r7, #15]
 8008cd6:	e003      	b.n	8008ce0 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	f023 0302 	bic.w	r3, r3, #2
 8008cde:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff feea 	bl	8008ac0 <nRF24_WriteReg>
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff febb 	bl	8008a7e <nRF24_ReadReg>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8008d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	b25a      	sxtb	r2, r3
 8008d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fec6 	bl	8008ac0 <nRF24_WriteReg>
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2105      	movs	r1, #5
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff feb6 	bl	8008ac0 <nRF24_WriteReg>
}
 8008d54:	bf00      	nop
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	460b      	mov	r3, r1
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
 8008d6c:	2b06      	cmp	r3, #6
 8008d6e:	f200 813e 	bhi.w	8008fee <nRF24_SetAddr+0x292>
 8008d72:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <nRF24_SetAddr+0x1c>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d95 	.word	0x08008d95
 8008d7c:	08008deb 	.word	0x08008deb
 8008d80:	08008e41 	.word	0x08008e41
 8008d84:	08008e97 	.word	0x08008e97
 8008d88:	08008eed 	.word	0x08008eed
 8008d8c:	08008f43 	.word	0x08008f43
 8008d90:	08008f99 	.word	0x08008f99
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008d94:	2103      	movs	r1, #3
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f7ff fe71 	bl	8008a7e <nRF24_ReadReg>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	3301      	adds	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008daa:	2100      	movs	r1, #0
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff fe1c 	bl	80089ea <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	4a90      	ldr	r2, [pc, #576]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008db6:	5cd3      	ldrb	r3, [r2, r3]
 8008db8:	f043 0320 	orr.w	r3, r3, #32
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff fe46 	bl	8008a52 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	1e5a      	subs	r2, r3, #1
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fe3e 	bl	8008a52 <nRF24_LL_RW>
      } while (addr_width--);
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	1e5a      	subs	r2, r3, #1
 8008dda:	75fa      	strb	r2, [r7, #23]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1f2      	bne.n	8008dc6 <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008de0:	2101      	movs	r1, #1
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fe01 	bl	80089ea <nRF24_CSN_State>
      break;
 8008de8:	e102      	b.n	8008ff0 <nRF24_SetAddr+0x294>

    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008dea:	2103      	movs	r1, #3
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7ff fe46 	bl	8008a7e <nRF24_ReadReg>
 8008df2:	4603      	mov	r3, r0
 8008df4:	3301      	adds	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008e00:	2100      	movs	r1, #0
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fdf1 	bl	80089ea <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	4a7b      	ldr	r2, [pc, #492]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008e0c:	5cd3      	ldrb	r3, [r2, r3]
 8008e0e:	f043 0320 	orr.w	r3, r3, #32
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7ff fe1b 	bl	8008a52 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	1e5a      	subs	r2, r3, #1
 8008e20:	607a      	str	r2, [r7, #4]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff fe13 	bl	8008a52 <nRF24_LL_RW>
      } while (addr_width--);
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	1e5a      	subs	r2, r3, #1
 8008e30:	75fa      	strb	r2, [r7, #23]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1f2      	bne.n	8008e1c <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008e36:	2101      	movs	r1, #1
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fdd6 	bl	80089ea <nRF24_CSN_State>
      break;
 8008e3e:	e0d7      	b.n	8008ff0 <nRF24_SetAddr+0x294>

    case nRF24_PIPE2:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008e40:	2103      	movs	r1, #3
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff fe1b 	bl	8008a7e <nRF24_ReadReg>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	4413      	add	r3, r2
 8008e54:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008e56:	2100      	movs	r1, #0
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff fdc6 	bl	80089ea <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	4a65      	ldr	r2, [pc, #404]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008e62:	5cd3      	ldrb	r3, [r2, r3]
 8008e64:	f043 0320 	orr.w	r3, r3, #32
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff fdf0 	bl	8008a52 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	1e5a      	subs	r2, r3, #1
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fde8 	bl	8008a52 <nRF24_LL_RW>
	  } while (addr_width--);
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	1e5a      	subs	r2, r3, #1
 8008e86:	75fa      	strb	r2, [r7, #23]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f2      	bne.n	8008e72 <nRF24_SetAddr+0x116>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fdab 	bl	80089ea <nRF24_CSN_State>
	  break;
 8008e94:	e0ac      	b.n	8008ff0 <nRF24_SetAddr+0x294>

    case nRF24_PIPE3:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008e96:	2103      	movs	r1, #3
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff fdf0 	bl	8008a7e <nRF24_ReadReg>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008eac:	2100      	movs	r1, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f7ff fd9b 	bl	80089ea <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	4a50      	ldr	r2, [pc, #320]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008eb8:	5cd3      	ldrb	r3, [r2, r3]
 8008eba:	f043 0320 	orr.w	r3, r3, #32
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f7ff fdc5 	bl	8008a52 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	1e5a      	subs	r2, r3, #1
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7ff fdbd 	bl	8008a52 <nRF24_LL_RW>
	  } while (addr_width--);
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	1e5a      	subs	r2, r3, #1
 8008edc:	75fa      	strb	r2, [r7, #23]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f2      	bne.n	8008ec8 <nRF24_SetAddr+0x16c>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fd80 	bl	80089ea <nRF24_CSN_State>
	  break;
 8008eea:	e081      	b.n	8008ff0 <nRF24_SetAddr+0x294>


    case nRF24_PIPE4:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008eec:	2103      	movs	r1, #3
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff fdc5 	bl	8008a7e <nRF24_ReadReg>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4413      	add	r3, r2
 8008f00:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008f02:	2100      	movs	r1, #0
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fd70 	bl	80089ea <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
 8008f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008f0e:	5cd3      	ldrb	r3, [r2, r3]
 8008f10:	f043 0320 	orr.w	r3, r3, #32
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	4619      	mov	r1, r3
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff fd9a 	bl	8008a52 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	1e5a      	subs	r2, r3, #1
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff fd92 	bl	8008a52 <nRF24_LL_RW>
	  } while (addr_width--);
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	1e5a      	subs	r2, r3, #1
 8008f32:	75fa      	strb	r2, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1f2      	bne.n	8008f1e <nRF24_SetAddr+0x1c2>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008f38:	2101      	movs	r1, #1
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff fd55 	bl	80089ea <nRF24_CSN_State>
	  break;
 8008f40:	e056      	b.n	8008ff0 <nRF24_SetAddr+0x294>


    case nRF24_PIPE5:

    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008f42:	2103      	movs	r1, #3
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff fd9a 	bl	8008a7e <nRF24_ReadReg>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008f58:	2100      	movs	r1, #0
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fd45 	bl	80089ea <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	4a25      	ldr	r2, [pc, #148]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008f64:	5cd3      	ldrb	r3, [r2, r3]
 8008f66:	f043 0320 	orr.w	r3, r3, #32
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff fd6f 	bl	8008a52 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	1e5a      	subs	r2, r3, #1
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7ff fd67 	bl	8008a52 <nRF24_LL_RW>
	  } while (addr_width--);
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	1e5a      	subs	r2, r3, #1
 8008f88:	75fa      	strb	r2, [r7, #23]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f2      	bne.n	8008f74 <nRF24_SetAddr+0x218>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008f8e:	2101      	movs	r1, #1
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fd2a 	bl	80089ea <nRF24_CSN_State>
	  break;
 8008f96:	e02b      	b.n	8008ff0 <nRF24_SetAddr+0x294>


    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008f98:	2103      	movs	r1, #3
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fd6f 	bl	8008a7e <nRF24_ReadReg>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	4413      	add	r3, r2
 8008fac:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008fae:	2100      	movs	r1, #0
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff fd1a 	bl	80089ea <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008fb6:	7afb      	ldrb	r3, [r7, #11]
 8008fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8008ff8 <nRF24_SetAddr+0x29c>)
 8008fba:	5cd3      	ldrb	r3, [r2, r3]
 8008fbc:	f043 0320 	orr.w	r3, r3, #32
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fd44 	bl	8008a52 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	1e5a      	subs	r2, r3, #1
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff fd3c 	bl	8008a52 <nRF24_LL_RW>
      } while (addr_width--);
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	75fa      	strb	r2, [r7, #23]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1f2      	bne.n	8008fca <nRF24_SetAddr+0x26e>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fcff 	bl	80089ea <nRF24_CSN_State>
      break;
 8008fec:	e000      	b.n	8008ff0 <nRF24_SetAddr+0x294>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 8008fee:	bf00      	nop
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	08009754 	.word	0x08009754

08008ffc <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	4608      	mov	r0, r1
 8009006:	4611      	mov	r1, r2
 8009008:	461a      	mov	r2, r3
 800900a:	4603      	mov	r3, r0
 800900c:	70fb      	strb	r3, [r7, #3]
 800900e:	460b      	mov	r3, r1
 8009010:	70bb      	strb	r3, [r7, #2]
 8009012:	4613      	mov	r3, r2
 8009014:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8009016:	2102      	movs	r1, #2
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fd30 	bl	8008a7e <nRF24_ReadReg>
 800901e:	4603      	mov	r3, r0
 8009020:	b25a      	sxtb	r2, r3
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	2101      	movs	r1, #1
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	b25b      	sxtb	r3, r3
 800902c:	4313      	orrs	r3, r2
 800902e:	b25b      	sxtb	r3, r3
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009036:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	461a      	mov	r2, r3
 800903c:	2102      	movs	r1, #2
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fd3e 	bl	8008ac0 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	4a1a      	ldr	r2, [pc, #104]	@ (80090b0 <nRF24_SetRXPipe+0xb4>)
 8009048:	5cd1      	ldrb	r1, [r2, r3]
 800904a:	787b      	ldrb	r3, [r7, #1]
 800904c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff fd33 	bl	8008ac0 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800905a:	2101      	movs	r1, #1
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff fd0e 	bl	8008a7e <nRF24_ReadReg>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 8009066:	78bb      	ldrb	r3, [r7, #2]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d10a      	bne.n	8009082 <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	2201      	movs	r2, #1
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	b25a      	sxtb	r2, r3
 8009076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907a:	4313      	orrs	r3, r2
 800907c:	b25b      	sxtb	r3, r3
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	e00b      	b.n	800909a <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 8009082:	78fb      	ldrb	r3, [r7, #3]
 8009084:	2201      	movs	r2, #1
 8009086:	fa02 f303 	lsl.w	r3, r2, r3
 800908a:	b25b      	sxtb	r3, r3
 800908c:	43db      	mvns	r3, r3
 800908e:	b25a      	sxtb	r2, r3
 8009090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009094:	4013      	ands	r3, r2
 8009096:	b25b      	sxtb	r3, r3
 8009098:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	461a      	mov	r2, r3
 800909e:	2101      	movs	r1, #1
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fd0d 	bl	8008ac0 <nRF24_WriteReg>
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	0800974c 	.word	0x0800974c

080090b4 <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	d905      	bls.n	80090d2 <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 80090c6:	2200      	movs	r2, #0
 80090c8:	2101      	movs	r1, #1
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff fcf8 	bl	8008ac0 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 80090d0:	e017      	b.n	8009102 <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 80090d2:	2101      	movs	r1, #1
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fcd2 	bl	8008a7e <nRF24_ReadReg>
 80090da:	4603      	mov	r3, r0
 80090dc:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	2201      	movs	r2, #1
 80090e2:	fa02 f303 	lsl.w	r3, r2, r3
 80090e6:	b25b      	sxtb	r3, r3
 80090e8:	43db      	mvns	r3, r3
 80090ea:	b25a      	sxtb	r2, r3
 80090ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f0:	4013      	ands	r3, r2
 80090f2:	b25b      	sxtb	r3, r3
 80090f4:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	461a      	mov	r2, r3
 80090fa:	2101      	movs	r1, #1
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fcdf 	bl	8008ac0 <nRF24_WriteReg>
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 8009112:	2107      	movs	r1, #7
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff fcb2 	bl	8008a7e <nRF24_ReadReg>
 800911a:	4603      	mov	r3, r0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <nRF24_GetConfig>:

uint8_t nRF24_GetConfig(nRF24_Handler_t *device) {
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fca5 	bl	8008a7e <nRF24_ReadReg>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8009146:	22ff      	movs	r2, #255	@ 0xff
 8009148:	21e1      	movs	r1, #225	@ 0xe1
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff fcb8 	bl	8008ac0 <nRF24_WriteReg>
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8009160:	22ff      	movs	r2, #255	@ 0xff
 8009162:	21e2      	movs	r1, #226	@ 0xe2
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fcab 	bl	8008ac0 <nRF24_WriteReg>
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800917a:	2107      	movs	r1, #7
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff fc7e 	bl	8008a7e <nRF24_ReadReg>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800918c:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	461a      	mov	r2, r3
 8009192:	2107      	movs	r1, #7
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fc93 	bl	8008ac0 <nRF24_WriteReg>
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <nRF24_ClearIRQFlagsTx>:

void nRF24_ClearIRQFlagsTx(nRF24_Handler_t *device) {
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 80091aa:	2107      	movs	r1, #7
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff fc66 	bl	8008a7e <nRF24_ReadReg>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_TX;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80091bc:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	461a      	mov	r2, r3
 80091c2:	2107      	movs	r1, #7
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fc7b 	bl	8008ac0 <nRF24_WriteReg>
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <nRF24_ClearIRQFlagsRx>:

void nRF24_ClearIRQFlagsRx(nRF24_Handler_t *device) {
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DRbits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 80091da:	2107      	movs	r1, #7
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fc4e 	bl	8008a7e <nRF24_ReadReg>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_RX;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ec:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	461a      	mov	r2, r3
 80091f2:	2107      	movs	r1, #7
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff fc63 	bl	8008ac0 <nRF24_WriteReg>
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <nRF24_WritePayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	4613      	mov	r3, r2
 800920e:	71fb      	strb	r3, [r7, #7]
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	21a0      	movs	r1, #160	@ 0xa0
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fcbc 	bl	8008b94 <nRF24_WriteMBReg>
}
 800921c:	bf00      	nop
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <nRF24_ReadPayload>:

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8009230:	2107      	movs	r1, #7
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff fc23 	bl	8008a7e <nRF24_ReadReg>
 8009238:	4603      	mov	r3, r0
 800923a:	105b      	asrs	r3, r3, #1
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	2b05      	cmp	r3, #5
 8009248:	d817      	bhi.n	800927a <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	4a0f      	ldr	r2, [pc, #60]	@ (800928c <nRF24_ReadPayload+0x68>)
 800924e:	5cd3      	ldrb	r3, [r2, r3]
 8009250:	4619      	mov	r1, r3
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fc13 	bl	8008a7e <nRF24_ReadReg>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d006      	beq.n	8009276 <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	2161      	movs	r1, #97	@ 0x61
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff fc65 	bl	8008b40 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	e003      	b.n	8009282 <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 8009280:	23ff      	movs	r3, #255	@ 0xff
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	0800974c 	.word	0x0800974c

08009290 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af02      	add	r7, sp, #8
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800929c:	887b      	ldrh	r3, [r7, #2]
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 80092a8:	887b      	ldrh	r3, [r7, #2]
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	791b      	ldrb	r3, [r3, #4]
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	b299      	uxth	r1, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f103 0209 	add.w	r2, r3, #9
 80092c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	2302      	movs	r3, #2
 80092ce:	f7f9 fba3 	bl	8002a18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	b299      	uxth	r1, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	1d5a      	adds	r2, r3, #5
 80092de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	2301      	movs	r3, #1
 80092e6:	f7f9 fc8b 	bl	8002c00 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	795b      	ldrb	r3, [r3, #5]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af02      	add	r7, sp, #8
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	807b      	strh	r3, [r7, #2]
 8009302:	4613      	mov	r3, r2
 8009304:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 8009306:	887b      	ldrh	r3, [r7, #2]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	b29b      	uxth	r3, r3
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	791b      	ldrb	r3, [r3, #4]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	787a      	ldrb	r2, [r7, #1]
 8009326:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	b299      	uxth	r1, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f103 0209 	add.w	r2, r3, #9
 8009336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2303      	movs	r3, #3
 800933e:	f7f9 fb6b 	bl	8002a18 <HAL_I2C_Master_Transmit>
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	4613      	mov	r3, r2
 8009356:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	79fa      	ldrb	r2, [r7, #7]
 8009362:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8009364:	2100      	movs	r1, #0
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff ff92 	bl	8009290 <VL6180X_Read8>
 800936c:	4603      	mov	r3, r0
 800936e:	2bb4      	cmp	r3, #180	@ 0xb4
 8009370:	d001      	beq.n	8009376 <VL6180X_Init+0x2c>
    return false;
 8009372:	2300      	movs	r3, #0
 8009374:	e011      	b.n	800939a <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 8009376:	2116      	movs	r1, #22
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7ff ff89 	bl	8009290 <VL6180X_Read8>
 800937e:	4603      	mov	r3, r0
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f80a 	bl	80093a2 <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800938e:	2200      	movs	r2, #0
 8009390:	2116      	movs	r1, #22
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff ffaf 	bl	80092f6 <VL6180X_Write8>
  }

  return true;
 8009398:	2301      	movs	r3, #1
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 80093aa:	2201      	movs	r2, #1
 80093ac:	f240 2107 	movw	r1, #519	@ 0x207
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ffa0 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 80093b6:	2201      	movs	r2, #1
 80093b8:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff ff9a 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 80093c2:	2200      	movs	r2, #0
 80093c4:	2196      	movs	r1, #150	@ 0x96
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff ff95 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 80093cc:	22fd      	movs	r2, #253	@ 0xfd
 80093ce:	2197      	movs	r1, #151	@ 0x97
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff ff90 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 80093d6:	2200      	movs	r2, #0
 80093d8:	21e3      	movs	r1, #227	@ 0xe3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff ff8b 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 80093e0:	2204      	movs	r2, #4
 80093e2:	21e4      	movs	r1, #228	@ 0xe4
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ff86 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 80093ea:	2202      	movs	r2, #2
 80093ec:	21e5      	movs	r1, #229	@ 0xe5
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff ff81 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 80093f4:	2201      	movs	r2, #1
 80093f6:	21e6      	movs	r1, #230	@ 0xe6
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff ff7c 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 80093fe:	2203      	movs	r2, #3
 8009400:	21e7      	movs	r1, #231	@ 0xe7
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff ff77 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 8009408:	2202      	movs	r2, #2
 800940a:	21f5      	movs	r1, #245	@ 0xf5
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff ff72 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 8009412:	2205      	movs	r2, #5
 8009414:	21d9      	movs	r1, #217	@ 0xd9
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff ff6d 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 800941c:	22ce      	movs	r2, #206	@ 0xce
 800941e:	21db      	movs	r1, #219	@ 0xdb
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff ff68 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 8009426:	2203      	movs	r2, #3
 8009428:	21dc      	movs	r1, #220	@ 0xdc
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff ff63 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 8009430:	22f8      	movs	r2, #248	@ 0xf8
 8009432:	21dd      	movs	r1, #221	@ 0xdd
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff5e 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 800943a:	2200      	movs	r2, #0
 800943c:	219f      	movs	r1, #159	@ 0x9f
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ff59 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 8009444:	223c      	movs	r2, #60	@ 0x3c
 8009446:	21a3      	movs	r1, #163	@ 0xa3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ff54 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 800944e:	2200      	movs	r2, #0
 8009450:	21b7      	movs	r1, #183	@ 0xb7
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff4f 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 8009458:	223c      	movs	r2, #60	@ 0x3c
 800945a:	21bb      	movs	r1, #187	@ 0xbb
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff4a 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 8009462:	2209      	movs	r2, #9
 8009464:	21b2      	movs	r1, #178	@ 0xb2
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff ff45 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800946c:	2209      	movs	r2, #9
 800946e:	21ca      	movs	r1, #202	@ 0xca
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ff40 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 8009476:	2201      	movs	r2, #1
 8009478:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff3a 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 8009482:	2217      	movs	r2, #23
 8009484:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff ff34 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800948e:	2200      	movs	r2, #0
 8009490:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ff2e 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800949a:	2205      	movs	r2, #5
 800949c:	21ff      	movs	r1, #255	@ 0xff
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff ff29 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 80094a4:	2205      	movs	r2, #5
 80094a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff ff23 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 80094b0:	2205      	movs	r2, #5
 80094b2:	f240 1199 	movw	r1, #409	@ 0x199
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff ff1d 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 80094bc:	221b      	movs	r2, #27
 80094be:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff ff17 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 80094c8:	223e      	movs	r2, #62	@ 0x3e
 80094ca:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff ff11 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 80094d4:	221f      	movs	r2, #31
 80094d6:	f240 11a7 	movw	r1, #423	@ 0x1a7
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff ff0b 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 80094e0:	2200      	movs	r2, #0
 80094e2:	2130      	movs	r1, #48	@ 0x30
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff06 	bl	80092f6 <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 80094ea:	2210      	movs	r2, #16
 80094ec:	2111      	movs	r1, #17
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff ff01 	bl	80092f6 <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 80094f4:	2230      	movs	r2, #48	@ 0x30
 80094f6:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fefb 	bl	80092f6 <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 8009500:	2246      	movs	r2, #70	@ 0x46
 8009502:	213f      	movs	r1, #63	@ 0x3f
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fef6 	bl	80092f6 <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 800950a:	22ff      	movs	r2, #255	@ 0xff
 800950c:	2131      	movs	r1, #49	@ 0x31
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff fef1 	bl	80092f6 <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 8009514:	2263      	movs	r2, #99	@ 0x63
 8009516:	2141      	movs	r1, #65	@ 0x41
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff feec 	bl	80092f6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 800951e:	2201      	movs	r2, #1
 8009520:	212e      	movs	r1, #46	@ 0x2e
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fee7 	bl	80092f6 <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 8009528:	2209      	movs	r2, #9
 800952a:	211b      	movs	r1, #27
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff fee2 	bl	80092f6 <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 8009532:	2231      	movs	r2, #49	@ 0x31
 8009534:	213e      	movs	r1, #62	@ 0x3e
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fedd 	bl	80092f6 <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 800953c:	2224      	movs	r2, #36	@ 0x24
 800953e:	2114      	movs	r1, #20
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7ff fed8 	bl	80092f6 <VL6180X_Write8>
                        // Ready threshold event'
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 8009556:	bf00      	nop
 8009558:	214d      	movs	r1, #77	@ 0x4d
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fe98 	bl	8009290 <VL6180X_Read8>
 8009560:	4603      	mov	r3, r0
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0f6      	beq.n	8009558 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800956a:	2201      	movs	r2, #1
 800956c:	2118      	movs	r1, #24
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff fec1 	bl	80092f6 <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 8009574:	bf00      	nop
 8009576:	214f      	movs	r1, #79	@ 0x4f
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fe89 	bl	8009290 <VL6180X_Read8>
 800957e:	4603      	mov	r3, r0
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0f6      	beq.n	8009576 <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 8009588:	2162      	movs	r1, #98	@ 0x62
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fe80 	bl	8009290 <VL6180X_Read8>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8009594:	2207      	movs	r2, #7
 8009596:	2115      	movs	r1, #21
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff feac 	bl	80092f6 <VL6180X_Write8>

  return range;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <memset>:
 80095a8:	4402      	add	r2, r0
 80095aa:	4603      	mov	r3, r0
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d100      	bne.n	80095b2 <memset+0xa>
 80095b0:	4770      	bx	lr
 80095b2:	f803 1b01 	strb.w	r1, [r3], #1
 80095b6:	e7f9      	b.n	80095ac <memset+0x4>

080095b8 <__errno>:
 80095b8:	4b01      	ldr	r3, [pc, #4]	@ (80095c0 <__errno+0x8>)
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	20000040 	.word	0x20000040

080095c4 <__libc_init_array>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4d0d      	ldr	r5, [pc, #52]	@ (80095fc <__libc_init_array+0x38>)
 80095c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009600 <__libc_init_array+0x3c>)
 80095ca:	1b64      	subs	r4, r4, r5
 80095cc:	10a4      	asrs	r4, r4, #2
 80095ce:	2600      	movs	r6, #0
 80095d0:	42a6      	cmp	r6, r4
 80095d2:	d109      	bne.n	80095e8 <__libc_init_array+0x24>
 80095d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009604 <__libc_init_array+0x40>)
 80095d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009608 <__libc_init_array+0x44>)
 80095d8:	f000 f84a 	bl	8009670 <_init>
 80095dc:	1b64      	subs	r4, r4, r5
 80095de:	10a4      	asrs	r4, r4, #2
 80095e0:	2600      	movs	r6, #0
 80095e2:	42a6      	cmp	r6, r4
 80095e4:	d105      	bne.n	80095f2 <__libc_init_array+0x2e>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ec:	4798      	blx	r3
 80095ee:	3601      	adds	r6, #1
 80095f0:	e7ee      	b.n	80095d0 <__libc_init_array+0xc>
 80095f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f6:	4798      	blx	r3
 80095f8:	3601      	adds	r6, #1
 80095fa:	e7f2      	b.n	80095e2 <__libc_init_array+0x1e>
 80095fc:	08009764 	.word	0x08009764
 8009600:	08009764 	.word	0x08009764
 8009604:	08009764 	.word	0x08009764
 8009608:	08009768 	.word	0x08009768

0800960c <memcpy>:
 800960c:	440a      	add	r2, r1
 800960e:	4291      	cmp	r1, r2
 8009610:	f100 33ff 	add.w	r3, r0, #4294967295
 8009614:	d100      	bne.n	8009618 <memcpy+0xc>
 8009616:	4770      	bx	lr
 8009618:	b510      	push	{r4, lr}
 800961a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800961e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009622:	4291      	cmp	r1, r2
 8009624:	d1f9      	bne.n	800961a <memcpy+0xe>
 8009626:	bd10      	pop	{r4, pc}

08009628 <sqrt>:
 8009628:	b508      	push	{r3, lr}
 800962a:	ed2d 8b04 	vpush	{d8-d9}
 800962e:	eeb0 8b40 	vmov.f64	d8, d0
 8009632:	f000 f819 	bl	8009668 <__ieee754_sqrt>
 8009636:	eeb4 8b48 	vcmp.f64	d8, d8
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d60c      	bvs.n	800965a <sqrt+0x32>
 8009640:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8009660 <sqrt+0x38>
 8009644:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964c:	d505      	bpl.n	800965a <sqrt+0x32>
 800964e:	f7ff ffb3 	bl	80095b8 <__errno>
 8009652:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009656:	2321      	movs	r3, #33	@ 0x21
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	ecbd 8b04 	vpop	{d8-d9}
 800965e:	bd08      	pop	{r3, pc}
	...

08009668 <__ieee754_sqrt>:
 8009668:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800966c:	4770      	bx	lr
	...

08009670 <_init>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr

0800967c <_fini>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	bf00      	nop
 8009680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009682:	bc08      	pop	{r3}
 8009684:	469e      	mov	lr, r3
 8009686:	4770      	bx	lr
