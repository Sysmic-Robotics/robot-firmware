
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008828  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af8  08008af8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b00  08008b00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b00  08008b00  00018b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  2000007c  08008b84  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043a4  08008b84  000243a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4be  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb7  00000000  00000000  0003b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0003f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00040aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059a5  00000000  00000000  00042148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc97  00000000  00000000  00047aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001044a2  00000000  00000000  00064784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006678  00000000  00000000  00168c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a10 	.word	0x08008a10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08008a10 	.word	0x08008a10

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b09a      	sub	sp, #104	; 0x68
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f001 fd76 	bl	800203a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8e3 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fbab 	bl	8000cac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000556:	f000 fa0d 	bl	8000974 <MX_SPI1_Init>
  MX_I2C1_Init();
 800055a:	f000 f94b 	bl	80007f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800055e:	f000 f989 	bl	8000874 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000562:	f000 fa49 	bl	80009f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000566:	f000 fa9b 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800056a:	f000 faef 	bl	8000b4c <MX_TIM5_Init>
  MX_TIM8_Init();
 800056e:	f000 fb43 	bl	8000bf8 <MX_TIM8_Init>
  MX_I2C3_Init();
 8000572:	f000 f9bf 	bl	80008f4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	/* Define wheels angles in motor.h */
	kinematic[0][0] = sin(WHEEL_ANGlE_1); kinematic[0][1] = -cos(WHEEL_ANGlE_1); kinematic[0][2] = -ROBOT_RADIO;
 8000576:	4b55      	ldr	r3, [pc, #340]	; (80006cc <main+0x188>)
 8000578:	4a55      	ldr	r2, [pc, #340]	; (80006d0 <main+0x18c>)
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	4b53      	ldr	r3, [pc, #332]	; (80006cc <main+0x188>)
 800057e:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	4b51      	ldr	r3, [pc, #324]	; (80006cc <main+0x188>)
 8000586:	4a53      	ldr	r2, [pc, #332]	; (80006d4 <main+0x190>)
 8000588:	609a      	str	r2, [r3, #8]
	kinematic[1][0] = sin(WHEEL_ANGlE_2); kinematic[1][1] = -cos(WHEEL_ANGlE_2); kinematic[1][2] = -ROBOT_RADIO;
 800058a:	4b50      	ldr	r3, [pc, #320]	; (80006cc <main+0x188>)
 800058c:	4a52      	ldr	r2, [pc, #328]	; (80006d8 <main+0x194>)
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <main+0x188>)
 8000592:	4a52      	ldr	r2, [pc, #328]	; (80006dc <main+0x198>)
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <main+0x188>)
 8000598:	4a4e      	ldr	r2, [pc, #312]	; (80006d4 <main+0x190>)
 800059a:	615a      	str	r2, [r3, #20]
	kinematic[2][0] = sin(WHEEL_ANGlE_3); kinematic[2][1] = -cos(WHEEL_ANGlE_3); kinematic[2][2] = -ROBOT_RADIO;
 800059c:	4b4b      	ldr	r3, [pc, #300]	; (80006cc <main+0x188>)
 800059e:	4a50      	ldr	r2, [pc, #320]	; (80006e0 <main+0x19c>)
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <main+0x188>)
 80005a4:	4a4d      	ldr	r2, [pc, #308]	; (80006dc <main+0x198>)
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b48      	ldr	r3, [pc, #288]	; (80006cc <main+0x188>)
 80005aa:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <main+0x190>)
 80005ac:	621a      	str	r2, [r3, #32]
	kinematic[3][0] = sin(WHEEL_ANGlE_4); kinematic[3][1] = -cos(WHEEL_ANGlE_4); kinematic[3][2] = -ROBOT_RADIO;
 80005ae:	4b47      	ldr	r3, [pc, #284]	; (80006cc <main+0x188>)
 80005b0:	4a4c      	ldr	r2, [pc, #304]	; (80006e4 <main+0x1a0>)
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
 80005b4:	4b45      	ldr	r3, [pc, #276]	; (80006cc <main+0x188>)
 80005b6:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <main+0x188>)
 80005be:	4a45      	ldr	r2, [pc, #276]	; (80006d4 <main+0x190>)
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c

	for (uint8_t i = 0; i < 10; i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80005c8:	e016      	b.n	80005f8 <main+0xb4>
	{
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	4846      	ldr	r0, [pc, #280]	; (80006e8 <main+0x1a4>)
 80005d0:	f007 fb28 	bl	8007c24 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4843      	ldr	r0, [pc, #268]	; (80006e8 <main+0x1a4>)
 80005da:	f007 fb23 	bl	8007c24 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 80005de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e2:	4841      	ldr	r0, [pc, #260]	; (80006e8 <main+0x1a4>)
 80005e4:	f007 fb1e 	bl	8007c24 <Board_LedToggle>
		HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f001 fd53 	bl	8002094 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++)
 80005ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005f2:	3301      	adds	r3, #1
 80005f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80005f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d9e4      	bls.n	80005ca <main+0x86>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of kickQueue */
  osMessageQDef(kickQueue, 16, uint16_t);
 8000600:	4a3a      	ldr	r2, [pc, #232]	; (80006ec <main+0x1a8>)
 8000602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060a:	e883 0003 	stmia.w	r3, {r0, r1}
  kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 800060e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fff9 	bl	800560c <osMessageCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a34      	ldr	r2, [pc, #208]	; (80006f0 <main+0x1ac>)
 800061e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(nrf24Check, 16, uint16_t);
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <main+0x1a8>)
 8000622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062a:	e883 0003 	stmia.w	r3, {r0, r1}
  nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 800062e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f004 ffe9 	bl	800560c <osMessageCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <main+0x1b0>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of driveTask */
  osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <main+0x1b4>)
 8000642:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	6023      	str	r3, [r4, #0]
  driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8000650:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 ff9d 	bl	8005596 <osThreadCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a27      	ldr	r2, [pc, #156]	; (80006fc <main+0x1b8>)
 8000660:	6013      	str	r3, [r2, #0]

  /* definition and creation of radioTask */
  osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <main+0x1bc>)
 8000664:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	6023      	str	r3, [r4, #0]
  radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8000672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f004 ff8c 	bl	8005596 <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <main+0x1c0>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of kickTask */
  osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <main+0x1c4>)
 8000686:	f107 0418 	add.w	r4, r7, #24
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	6023      	str	r3, [r4, #0]
  kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 ff7b 	bl	8005596 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1a      	ldr	r2, [pc, #104]	; (800070c <main+0x1c8>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <main+0x1cc>)
 80006a8:	1d3c      	adds	r4, r7, #4
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	6023      	str	r3, [r4, #0]
  ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 ff6c 	bl	8005596 <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <main+0x1d0>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c4:	f004 ff50 	bl	8005568 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006c8:	e7fe      	b.n	80006c8 <main+0x184>
 80006ca:	bf00      	nop
 80006cc:	20000358 	.word	0x20000358
 80006d0:	3f5db3d7 	.word	0x3f5db3d7
 80006d4:	bda83e42 	.word	0xbda83e42
 80006d8:	3f441b7d 	.word	0x3f441b7d
 80006dc:	3f248dbb 	.word	0x3f248dbb
 80006e0:	bf441b7d 	.word	0xbf441b7d
 80006e4:	bf5db3d7 	.word	0xbf5db3d7
 80006e8:	40022000 	.word	0x40022000
 80006ec:	08008a60 	.word	0x08008a60
 80006f0:	20000334 	.word	0x20000334
 80006f4:	2000033c 	.word	0x2000033c
 80006f8:	08008a68 	.word	0x08008a68
 80006fc:	20000328 	.word	0x20000328
 8000700:	08008a7c 	.word	0x08008a7c
 8000704:	2000032c 	.word	0x2000032c
 8000708:	08008a90 	.word	0x08008a90
 800070c:	20000330 	.word	0x20000330
 8000710:	08008aa4 	.word	0x08008aa4
 8000714:	20000338 	.word	0x20000338

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f008 f946 	bl	80089b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <SystemClock_Config+0xd4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <SystemClock_Config+0xd4>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <SystemClock_Config+0xd8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <SystemClock_Config+0xd8>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000784:	23d8      	movs	r3, #216	; 0xd8
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fd47 	bl	800322c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007a4:	f001 f91a 	bl	80019dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a8:	f002 fcf0 	bl	800318c <HAL_PWREx_EnableOverDrive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b2:	f001 f913 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2107      	movs	r1, #7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 ffd7 	bl	8003788 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007e0:	f001 f8fc 	bl	80019dc <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	; 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C1_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C1_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C1_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_I2C1_Init+0x74>)
 8000830:	f001 ff2e 	bl	8002690 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083a:	f001 f8cf 	bl	80019dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_I2C1_Init+0x74>)
 8000842:	f002 fc0b 	bl	800305c <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f001 f8c6 	bl	80019dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2C1_Init+0x74>)
 8000854:	f002 fc4d 	bl	80030f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f001 f8bd 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000098 	.word	0x20000098
 800086c:	40005400 	.word	0x40005400
 8000870:	6000030d 	.word	0x6000030d

08000874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C2_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C2_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C2_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C2_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008b0:	f001 feee 	bl	8002690 <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f001 f88f 	bl	80019dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008c2:	f002 fbcb 	bl	800305c <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f001 f886 	bl	80019dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008d4:	f002 fc0d 	bl	80030f2 <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008de:	f001 f87d 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000ec 	.word	0x200000ec
 80008ec:	40005800 	.word	0x40005800
 80008f0:	6000030d 	.word	0x6000030d

080008f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_I2C3_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_I2C3_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_I2C3_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_I2C3_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_I2C3_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_I2C3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C3_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_I2C3_Init+0x74>)
 8000930:	f001 feae 	bl	8002690 <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800093a:	f001 f84f 	bl	80019dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_I2C3_Init+0x74>)
 8000942:	f002 fb8b 	bl	800305c <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800094c:	f001 f846 	bl	80019dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_I2C3_Init+0x74>)
 8000954:	f002 fbcd 	bl	80030f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800095e:	f001 f83d 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000140 	.word	0x20000140
 800096c:	40005c00 	.word	0x40005c00
 8000970:	6000030d 	.word	0x6000030d

08000974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_SPI1_Init+0x7c>)
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <MX_SPI1_Init+0x80>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_SPI1_Init+0x7c>)
 8000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_SPI1_Init+0x7c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_SPI1_Init+0x7c>)
 800098e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000992:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI1_Init+0x7c>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_SPI1_Init+0x7c>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009aa:	2218      	movs	r2, #24
 80009ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009d4:	f003 fd44 	bl	8004460 <HAL_SPI_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fffd 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 80009e2:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <MX_SPI1_Init+0x7c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ea:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000194 	.word	0x20000194
 80009f4:	40013000 	.word	0x40013000

080009f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2224      	movs	r2, #36	; 0x24
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f007 ffd6 	bl	80089b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a46:	2301      	movs	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a56:	2301      	movs	r3, #1
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a6a:	f004 fa19 	bl	8004ea0 <HAL_TIM_Encoder_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a74:	f000 ffb2 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a86:	f004 fc99 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a90:	f000 ffa4 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200001f8 	.word	0x200001f8

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2224      	movs	r2, #36	; 0x24
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 ff82 	bl	80089b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <MX_TIM3_Init+0xa8>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000afc:	2301      	movs	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000b10:	f004 f9c6 	bl	8004ea0 <HAL_TIM_Encoder_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b1a:	f000 ff5f 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_TIM3_Init+0xa4>)
 8000b2c:	f004 fc46 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b36:	f000 ff51 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000244 	.word	0x20000244
 8000b48:	40000400 	.word	0x40000400

08000b4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2224      	movs	r2, #36	; 0x24
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 ff2c 	bl	80089b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <MX_TIM5_Init+0xa8>)
 8000b6e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b90:	2303      	movs	r3, #3
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000bbc:	f004 f970 	bl	8004ea0 <HAL_TIM_Encoder_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000bc6:	f000 ff09 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM5_Init+0xa4>)
 8000bd8:	f004 fbf0 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000be2:	f000 fefb 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3730      	adds	r7, #48	; 0x30
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000290 	.word	0x20000290
 8000bf4:	40000c00 	.word	0x40000c00

08000bf8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2224      	movs	r2, #36	; 0x24
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f007 fed6 	bl	80089b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MX_TIM8_Init+0xb0>)
 8000c1a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c42:	2303      	movs	r3, #3
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c6e:	f004 f917 	bl	8004ea0 <HAL_TIM_Encoder_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c78:	f000 feb0 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM8_Init+0xac>)
 8000c8e:	f004 fb95 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000c98:	f000 fea0 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200002dc 	.word	0x200002dc
 8000ca8:	40010400 	.word	0x40010400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	4bb3      	ldr	r3, [pc, #716]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4ab2      	ldr	r2, [pc, #712]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4bb0      	ldr	r3, [pc, #704]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cda:	4bad      	ldr	r3, [pc, #692]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4aac      	ldr	r2, [pc, #688]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4baa      	ldr	r3, [pc, #680]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	4ba7      	ldr	r3, [pc, #668]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4aa6      	ldr	r2, [pc, #664]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4ba4      	ldr	r3, [pc, #656]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4ba1      	ldr	r3, [pc, #644]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4aa0      	ldr	r2, [pc, #640]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b9b      	ldr	r3, [pc, #620]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a9a      	ldr	r2, [pc, #616]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b98      	ldr	r3, [pc, #608]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b95      	ldr	r3, [pc, #596]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a94      	ldr	r2, [pc, #592]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b92      	ldr	r3, [pc, #584]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d52:	4b8f      	ldr	r3, [pc, #572]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a8e      	ldr	r2, [pc, #568]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a88      	ldr	r2, [pc, #544]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b86      	ldr	r3, [pc, #536]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d82:	4b83      	ldr	r3, [pc, #524]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a82      	ldr	r2, [pc, #520]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b80      	ldr	r3, [pc, #512]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a7c      	ldr	r2, [pc, #496]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b7a      	ldr	r3, [pc, #488]	; (8000f90 <MX_GPIO_Init+0x2e4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000db8:	4876      	ldr	r0, [pc, #472]	; (8000f94 <MX_GPIO_Init+0x2e8>)
 8000dba:	f001 fc35 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f640 0138 	movw	r1, #2104	; 0x838
 8000dc4:	4874      	ldr	r0, [pc, #464]	; (8000f98 <MX_GPIO_Init+0x2ec>)
 8000dc6:	f001 fc2f 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000dd0:	4872      	ldr	r0, [pc, #456]	; (8000f9c <MX_GPIO_Init+0x2f0>)
 8000dd2:	f001 fc29 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4870      	ldr	r0, [pc, #448]	; (8000fa0 <MX_GPIO_Init+0x2f4>)
 8000dde:	f001 fc23 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000de8:	486e      	ldr	r0, [pc, #440]	; (8000fa4 <MX_GPIO_Init+0x2f8>)
 8000dea:	f001 fc1d 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000df4:	486c      	ldr	r0, [pc, #432]	; (8000fa8 <MX_GPIO_Init+0x2fc>)
 8000df6:	f001 fc17 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	486b      	ldr	r0, [pc, #428]	; (8000fac <MX_GPIO_Init+0x300>)
 8000e00:	f001 fc12 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8000e0a:	4869      	ldr	r0, [pc, #420]	; (8000fb0 <MX_GPIO_Init+0x304>)
 8000e0c:	f001 fc0c 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	21c0      	movs	r1, #192	; 0xc0
 8000e14:	4867      	ldr	r0, [pc, #412]	; (8000fb4 <MX_GPIO_Init+0x308>)
 8000e16:	f001 fc07 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000e1a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4858      	ldr	r0, [pc, #352]	; (8000f94 <MX_GPIO_Init+0x2e8>)
 8000e34:	f001 fa34 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8000e38:	f640 0338 	movw	r3, #2104	; 0x838
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4851      	ldr	r0, [pc, #324]	; (8000f98 <MX_GPIO_Init+0x2ec>)
 8000e52:	f001 fa25 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e56:	2310      	movs	r3, #16
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e66:	4619      	mov	r1, r3
 8000e68:	4853      	ldr	r0, [pc, #332]	; (8000fb8 <MX_GPIO_Init+0x30c>)
 8000e6a:	f001 fa19 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4849      	ldr	r0, [pc, #292]	; (8000fa8 <MX_GPIO_Init+0x2fc>)
 8000e82:	f001 fa0d 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e86:	2304      	movs	r3, #4
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4841      	ldr	r0, [pc, #260]	; (8000fa0 <MX_GPIO_Init+0x2f4>)
 8000e9a:	f001 fa01 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4838      	ldr	r0, [pc, #224]	; (8000f94 <MX_GPIO_Init+0x2e8>)
 8000eb4:	f001 f9f4 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4834      	ldr	r0, [pc, #208]	; (8000f9c <MX_GPIO_Init+0x2f0>)
 8000ecc:	f001 f9e8 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ed0:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	482c      	ldr	r0, [pc, #176]	; (8000f9c <MX_GPIO_Init+0x2f0>)
 8000eea:	f001 f9d9 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <MX_GPIO_Init+0x2f4>)
 8000f08:	f001 f9ca 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f0c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f22:	4619      	mov	r1, r3
 8000f24:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <MX_GPIO_Init+0x2f8>)
 8000f26:	f001 f9bb 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <MX_GPIO_Init+0x2fc>)
 8000f44:	f001 f9ac 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <MX_GPIO_Init+0x300>)
 8000f60:	f001 f99e 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f64:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_GPIO_Init+0x304>)
 8000f7e:	f001 f98f 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f82:	23c0      	movs	r3, #192	; 0xc0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e016      	b.n	8000fbc <MX_GPIO_Init+0x310>
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40022000 	.word	0x40022000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40022400 	.word	0x40022400
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40022800 	.word	0x40022800
 8000fb8:	40021c00 	.word	0x40021c00
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_GPIO_Init+0x32c>)
 8000fca:	f001 f969 	bl	80022a0 <HAL_GPIO_Init>

}
 8000fce:	bf00      	nop
 8000fd0:	3740      	adds	r7, #64	; 0x40
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022800 	.word	0x40022800

08000fdc <setSpeed>:

/* USER CODE BEGIN 4 */
float v_vel[3];
void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8000fe8:	4bb1      	ldr	r3, [pc, #708]	; (80012b0 <setSpeed+0x2d4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fee:	4bb0      	ldr	r3, [pc, #704]	; (80012b0 <setSpeed+0x2d4>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da16      	bge.n	800102e <setSpeed+0x52>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3304      	adds	r3, #4
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001016:	4313      	orrs	r3, r2
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001020:	eeb1 7a67 	vneg.f32	s14, s15
 8001024:	eddf 6aa3 	vldr	s13, [pc, #652]	; 80012b4 <setSpeed+0x2d8>
 8001028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102c:	e013      	b.n	8001056 <setSpeed+0x7a>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3304      	adds	r3, #4
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001044:	4313      	orrs	r3, r2
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104e:	eddf 6a99 	vldr	s13, [pc, #612]	; 80012b4 <setSpeed+0x2d8>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	4b96      	ldr	r3, [pc, #600]	; (80012b0 <setSpeed+0x2d4>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3302      	adds	r3, #2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	da16      	bge.n	8001096 <setSpeed+0xba>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3304      	adds	r3, #4
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3302      	adds	r3, #2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107e:	4313      	orrs	r3, r2
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	eeb1 7a67 	vneg.f32	s14, s15
 800108c:	eddf 6a89 	vldr	s13, [pc, #548]	; 80012b4 <setSpeed+0x2d8>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	e013      	b.n	80010be <setSpeed+0xe2>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3304      	adds	r3, #4
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3302      	adds	r3, #2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	4313      	orrs	r3, r2
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80012b4 <setSpeed+0x2d8>
 80010ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <setSpeed+0x2d4>)
 80010c0:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3303      	adds	r3, #3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da16      	bge.n	80010fe <setSpeed+0x122>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3304      	adds	r3, #4
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	01db      	lsls	r3, r3, #7
 80010d8:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3303      	adds	r3, #3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e6:	4313      	orrs	r3, r2
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f0:	eeb1 7a67 	vneg.f32	s14, s15
 80010f4:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80012b4 <setSpeed+0x2d8>
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	e013      	b.n	8001126 <setSpeed+0x14a>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3304      	adds	r3, #4
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	01db      	lsls	r3, r3, #7
 8001106:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3303      	adds	r3, #3
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001114:	4313      	orrs	r3, r2
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	eddf 6a65 	vldr	s13, [pc, #404]	; 80012b4 <setSpeed+0x2d8>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <setSpeed+0x2d4>)
 8001128:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 800112c:	4b60      	ldr	r3, [pc, #384]	; (80012b0 <setSpeed+0x2d4>)
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	edc7 7a08 	vstr	s15, [r7, #32]
 800113e:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <setSpeed+0x2d4>)
 8001140:	ed93 7a01 	vldr	s14, [r3, #4]
 8001144:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 8001150:	edd7 7a08 	vldr	s15, [r7, #32]
 8001154:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001158:	edd7 7a07 	vldr	s15, [r7, #28]
 800115c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8001168:	edd7 7a06 	vldr	s15, [r7, #24]
 800116c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001170:	eeb0 0b47 	vmov.f64	d0, d7
 8001174:	f007 fc28 	bl	80089c8 <sqrt>
 8001178:	eeb0 7b40 	vmov.f64	d7, d0
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 8001184:	edd7 6a08 	vldr	s13, [r7, #32]
 8001188:	ed97 7a06 	vldr	s14, [r7, #24]
 800118c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001190:	edc7 7a05 	vstr	s15, [r7, #20]
 8001194:	edd7 6a07 	vldr	s13, [r7, #28]
 8001198:	ed97 7a06 	vldr	s14, [r7, #24]
 800119c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 80011a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80012b8 <setSpeed+0x2dc>
 80011ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	dd23      	ble.n	80011fe <setSpeed+0x222>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 80011b6:	4b41      	ldr	r3, [pc, #260]	; (80012bc <setSpeed+0x2e0>)
 80011b8:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 80011ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80011be:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c6:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 80011ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 80011da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011de:	edd7 7a08 	vldr	s15, [r7, #32]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <setSpeed+0x2d4>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 80011ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <setSpeed+0x2d4>)
 80011fa:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001204:	e04b      	b.n	800129e <setSpeed+0x2c2>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 800120c:	2300      	movs	r3, #0
 800120e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001212:	e020      	b.n	8001256 <setSpeed+0x27a>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8001214:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001218:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800121c:	4828      	ldr	r0, [pc, #160]	; (80012c0 <setSpeed+0x2e4>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	440b      	add	r3, r1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4403      	add	r3, r0
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <setSpeed+0x2d4>)
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 800124c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001250:	3301      	adds	r3, #1
 8001252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800125a:	2b02      	cmp	r3, #2
 800125c:	d9da      	bls.n	8001214 <setSpeed+0x238>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 800125e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 8001286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	4413      	add	r3, r2
 8001290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001292:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8001294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001298:	3301      	adds	r3, #1
 800129a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800129e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d9af      	bls.n	8001206 <setSpeed+0x22a>
	}
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200005ec 	.word	0x200005ec
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	3dcccccd 	.word	0x3dcccccd
 80012bc:	3dcccccd 	.word	0x3dcccccd
 80012c0:	20000358 	.word	0x20000358

080012c4 <getDribbler_speed>:

uint8_t getDribbler_speed(uint8_t *buffer)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	109b      	asrs	r3, r3, #2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	105b      	asrs	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <BallDetectorFunction>:

uint16_t ball_range;
uint16_t ball_accum;
uint8_t ball_meas_set[10];

void BallDetectorFunction(void const * argument) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  //uint32_t timeToWait = osKernelSysTick();
  VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8001314:	2229      	movs	r2, #41	; 0x29
 8001316:	4928      	ldr	r1, [pc, #160]	; (80013b8 <BallDetectorFunction+0xac>)
 8001318:	4828      	ldr	r0, [pc, #160]	; (80013bc <BallDetectorFunction+0xb0>)
 800131a:	f007 f9e6 	bl	80086ea <VL6180X_Init>
  ball_range = VL6180X_ReadRange(&range_sensor);
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <BallDetectorFunction+0xb0>)
 8001320:	f007 fae5 	bl	80088ee <VL6180X_ReadRange>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <BallDetectorFunction+0xb4>)
 800132a:	801a      	strh	r2, [r3, #0]
  memset(ball_meas_set, ball_range, 10);
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <BallDetectorFunction+0xb4>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	220a      	movs	r2, #10
 8001332:	4619      	mov	r1, r3
 8001334:	4823      	ldr	r0, [pc, #140]	; (80013c4 <BallDetectorFunction+0xb8>)
 8001336:	f007 fb3f 	bl	80089b8 <memset>

  for (;;) {
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <BallDetectorFunction+0xb0>)
 800133c:	f007 fad7 	bl	80088ee <VL6180X_ReadRange>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <BallDetectorFunction+0xb8>)
 8001346:	701a      	strb	r2, [r3, #0]
    ball_accum = ball_meas_set[0];
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <BallDetectorFunction+0xb8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <BallDetectorFunction+0xbc>)
 8001350:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 9; i > 0; i--) {
 8001352:	2309      	movs	r3, #9
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e013      	b.n	8001380 <BallDetectorFunction+0x74>
      ball_accum += ball_meas_set[i];
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <BallDetectorFunction+0xb8>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <BallDetectorFunction+0xbc>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4413      	add	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <BallDetectorFunction+0xbc>)
 800136a:	801a      	strh	r2, [r3, #0]
      ball_meas_set[i] = ball_meas_set[i - 1];
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4914      	ldr	r1, [pc, #80]	; (80013c4 <BallDetectorFunction+0xb8>)
 8001374:	5c89      	ldrb	r1, [r1, r2]
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <BallDetectorFunction+0xb8>)
 8001378:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 9; i > 0; i--) {
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3b01      	subs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e8      	bne.n	8001358 <BallDetectorFunction+0x4c>
    }
    ball_range = ball_accum / 10;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <BallDetectorFunction+0xbc>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <BallDetectorFunction+0xc0>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <BallDetectorFunction+0xb4>)
 8001396:	801a      	strh	r2, [r3, #0]
    if (ball_range < VL6180X_THRESHOLD) {
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <BallDetectorFunction+0xb4>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2b40      	cmp	r3, #64	; 0x40
 800139e:	d803      	bhi.n	80013a8 <BallDetectorFunction+0x9c>
      ball_posession = 0x01;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <BallDetectorFunction+0xc4>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e002      	b.n	80013ae <BallDetectorFunction+0xa2>
    }
    else ball_posession = 0x00;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <BallDetectorFunction+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f004 f918 	bl	80055e4 <osDelay>
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 80013b4:	e7c1      	b.n	800133a <BallDetectorFunction+0x2e>
 80013b6:	bf00      	nop
 80013b8:	20000140 	.word	0x20000140
 80013bc:	200005d8 	.word	0x200005d8
 80013c0:	200005f8 	.word	0x200005f8
 80013c4:	200005fc 	.word	0x200005fc
 80013c8:	200005fa 	.word	0x200005fa
 80013cc:	cccccccd 	.word	0xcccccccd
 80013d0:	200005e8 	.word	0x200005e8

080013d4 <DriveFunction>:
	* @param  argument: Not used 
	* @retval None
	*/
/* USER CODE END Header_DriveFunction */
void DriveFunction(void const * argument)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b098      	sub	sp, #96	; 0x60
 80013d8:	af06      	add	r7, sp, #24
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Init PID sampler */
	uint32_t timeToWait = osKernelSysTick();
 80013dc:	f004 f8cb 	bl	8005576 <osKernelSysTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
	/* Init robot_id */
	robot_id = Board_GetID();
 80013e4:	f006 fc2e 	bl	8007c44 <Board_GetID>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4bbd      	ldr	r3, [pc, #756]	; (80016e4 <DriveFunction+0x310>)
 80013ee:	801a      	strh	r2, [r3, #0]
	
	/* Init wheels motors DAC: 2.0[V] ref */
	MAX581x_Handler_t driveDAC;
	MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 80013f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013f4:	2202      	movs	r2, #2
 80013f6:	49bc      	ldr	r1, [pc, #752]	; (80016e8 <DriveFunction+0x314>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 faaf 	bl	800795c <MAX581x_Init>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 80013fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f006 faf7 	bl	80079fa <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 800140c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001410:	2200      	movs	r2, #0
 8001412:	2101      	movs	r1, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f006 faf0 	bl	80079fa <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 800141a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800141e:	2200      	movs	r2, #0
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f006 fae9 	bl	80079fa <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 8001428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800142c:	2200      	movs	r2, #0
 800142e:	2103      	movs	r1, #3
 8001430:	4618      	mov	r0, r3
 8001432:	f006 fae2 	bl	80079fa <MAX581x_Code>
	
	/* Init dribbler motor DAC: 2.0[V] ref */
	MAX581x_Handler_t dribblerDAC;
	MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	2202      	movs	r2, #2
 800143c:	49ab      	ldr	r1, [pc, #684]	; (80016ec <DriveFunction+0x318>)
 800143e:	4618      	mov	r0, r3
 8001440:	f006 fa8c 	bl	800795c <MAX581x_Init>
	MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f006 fad4 	bl	80079fa <MAX581x_Code>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001458:	48a5      	ldr	r0, [pc, #660]	; (80016f0 <DriveFunction+0x31c>)
 800145a:	f001 f8e5 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	48a3      	ldr	r0, [pc, #652]	; (80016f0 <DriveFunction+0x31c>)
 8001464:	f001 f8e0 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2140      	movs	r1, #64	; 0x40
 800146c:	48a0      	ldr	r0, [pc, #640]	; (80016f0 <DriveFunction+0x31c>)
 800146e:	f001 f8db 	bl	8002628 <HAL_GPIO_WritePin>
	
	/* Config motors GPIO and TIM */
	/* Motor 1 */
	motor[0].enablePin.GPIOx = GPIOA;
 8001472:	4ba0      	ldr	r3, [pc, #640]	; (80016f4 <DriveFunction+0x320>)
 8001474:	4aa0      	ldr	r2, [pc, #640]	; (80016f8 <DriveFunction+0x324>)
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
	motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 8001478:	4b9e      	ldr	r3, [pc, #632]	; (80016f4 <DriveFunction+0x320>)
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	motor[0].dirPin.GPIOx = GPIOA;
 8001482:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <DriveFunction+0x320>)
 8001484:	4a9c      	ldr	r2, [pc, #624]	; (80016f8 <DriveFunction+0x324>)
 8001486:	65da      	str	r2, [r3, #92]	; 0x5c
	motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 8001488:	4b9a      	ldr	r3, [pc, #616]	; (80016f4 <DriveFunction+0x320>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	motor[0].brakePin.GPIOx = GPIOA;
 8001492:	4b98      	ldr	r3, [pc, #608]	; (80016f4 <DriveFunction+0x320>)
 8001494:	4a98      	ldr	r2, [pc, #608]	; (80016f8 <DriveFunction+0x324>)
 8001496:	665a      	str	r2, [r3, #100]	; 0x64
	motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 8001498:	4b96      	ldr	r3, [pc, #600]	; (80016f4 <DriveFunction+0x320>)
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	
	motor[0].encoder.count = &TIM3->CNT;
 80014a2:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <DriveFunction+0x320>)
 80014a4:	4a95      	ldr	r2, [pc, #596]	; (80016fc <DriveFunction+0x328>)
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
	motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 80014a8:	4b95      	ldr	r3, [pc, #596]	; (8001700 <DriveFunction+0x32c>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80014b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014bc:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001704 <DriveFunction+0x330>
 80014c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c4:	4b8b      	ldr	r3, [pc, #556]	; (80016f4 <DriveFunction+0x320>)
 80014c6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 80014ca:	4b8a      	ldr	r3, [pc, #552]	; (80016f4 <DriveFunction+0x320>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <DriveFunction+0x320>)
 80014d4:	4a8c      	ldr	r2, [pc, #560]	; (8001708 <DriveFunction+0x334>)
 80014d6:	64da      	str	r2, [r3, #76]	; 0x4c
	TIM3->CR1 = TIM_CR1_CEN;
 80014d8:	4b89      	ldr	r3, [pc, #548]	; (8001700 <DriveFunction+0x32c>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
	
	/* Motor 2 */
	motor[1].enablePin.GPIOx = GPIOC;
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <DriveFunction+0x320>)
 80014e0:	4a8a      	ldr	r2, [pc, #552]	; (800170c <DriveFunction+0x338>)
 80014e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 80014e6:	4b83      	ldr	r3, [pc, #524]	; (80016f4 <DriveFunction+0x320>)
 80014e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ec:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	motor[1].dirPin.GPIOx = GPIOC;
 80014f0:	4b80      	ldr	r3, [pc, #512]	; (80016f4 <DriveFunction+0x320>)
 80014f2:	4a86      	ldr	r2, [pc, #536]	; (800170c <DriveFunction+0x338>)
 80014f4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <DriveFunction+0x320>)
 80014fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fe:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	motor[1].brakePin.GPIOx = GPIOD;
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <DriveFunction+0x320>)
 8001504:	4a82      	ldr	r2, [pc, #520]	; (8001710 <DriveFunction+0x33c>)
 8001506:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 800150a:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <DriveFunction+0x320>)
 800150c:	2201      	movs	r2, #1
 800150e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	
	motor[1].encoder.count = &TIM8->CNT;
 8001512:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <DriveFunction+0x320>)
 8001514:	4a7f      	ldr	r2, [pc, #508]	; (8001714 <DriveFunction+0x340>)
 8001516:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <DriveFunction+0x344>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001526:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001704 <DriveFunction+0x330>
 8001532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <DriveFunction+0x320>)
 8001538:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 800153c:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <DriveFunction+0x320>)
 800153e:	2201      	movs	r2, #1
 8001540:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8001544:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <DriveFunction+0x320>)
 8001546:	4a70      	ldr	r2, [pc, #448]	; (8001708 <DriveFunction+0x334>)
 8001548:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	TIM8->CR1 = TIM_CR1_CEN;
 800154c:	4b72      	ldr	r3, [pc, #456]	; (8001718 <DriveFunction+0x344>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
	
	/* Motor 3 */
	motor[2].enablePin.GPIOx = GPIOK;
 8001552:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <DriveFunction+0x320>)
 8001554:	4a71      	ldr	r2, [pc, #452]	; (800171c <DriveFunction+0x348>)
 8001556:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 800155a:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <DriveFunction+0x320>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	motor[2].dirPin.GPIOx = GPIOG;
 8001562:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <DriveFunction+0x320>)
 8001564:	4a6e      	ldr	r2, [pc, #440]	; (8001720 <DriveFunction+0x34c>)
 8001566:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 800156a:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <DriveFunction+0x320>)
 800156c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001570:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
	motor[2].brakePin.GPIOx = GPIOK;
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <DriveFunction+0x320>)
 8001576:	4a69      	ldr	r2, [pc, #420]	; (800171c <DriveFunction+0x348>)
 8001578:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 800157c:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <DriveFunction+0x320>)
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	
	motor[2].encoder.count = &TIM2->CNT;
 8001584:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <DriveFunction+0x320>)
 8001586:	4a67      	ldr	r2, [pc, #412]	; (8001724 <DriveFunction+0x350>)
 8001588:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 800158c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800159a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001704 <DriveFunction+0x330>
 80015a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <DriveFunction+0x320>)
 80015ac:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <DriveFunction+0x320>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80015b8:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <DriveFunction+0x320>)
 80015ba:	4a53      	ldr	r2, [pc, #332]	; (8001708 <DriveFunction+0x334>)
 80015bc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	TIM2->CR1 = TIM_CR1_CEN;
 80015c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
	
	/* Motor 4 */
	motor[3].enablePin.GPIOx = GPIOF;
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <DriveFunction+0x320>)
 80015ca:	4a57      	ldr	r2, [pc, #348]	; (8001728 <DriveFunction+0x354>)
 80015cc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <DriveFunction+0x320>)
 80015d2:	2220      	movs	r2, #32
 80015d4:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	motor[3].dirPin.GPIOx = GPIOF;
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <DriveFunction+0x320>)
 80015da:	4a53      	ldr	r2, [pc, #332]	; (8001728 <DriveFunction+0x354>)
 80015dc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 80015e0:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <DriveFunction+0x320>)
 80015e2:	2208      	movs	r2, #8
 80015e4:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	motor[3].brakePin.GPIOx = GPIOF;
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <DriveFunction+0x320>)
 80015ea:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <DriveFunction+0x354>)
 80015ec:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 80015f0:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <DriveFunction+0x320>)
 80015f2:	2210      	movs	r2, #16
 80015f4:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc

	motor[3].encoder.count = &TIM5->CNT;
 80015f8:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <DriveFunction+0x320>)
 80015fa:	4a4c      	ldr	r2, [pc, #304]	; (800172c <DriveFunction+0x358>)
 80015fc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <DriveFunction+0x35c>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800160c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001614:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001704 <DriveFunction+0x330>
 8001618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <DriveFunction+0x320>)
 800161e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
	motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <DriveFunction+0x320>)
 8001624:	2201      	movs	r2, #1
 8001626:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <DriveFunction+0x320>)
 800162c:	4a36      	ldr	r2, [pc, #216]	; (8001708 <DriveFunction+0x334>)
 800162e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	TIM5->CR1 = TIM_CR1_CEN;
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <DriveFunction+0x35c>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
	
	/* Config PID */
	PID_Params_t pidParams;
	pidParams.Kp = 12.0f;
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <DriveFunction+0x360>)
 800163a:	60fb      	str	r3, [r7, #12]
	pidParams.Ki = 4.5f;
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <DriveFunction+0x364>)
 800163e:	613b      	str	r3, [r7, #16]
	pidParams.Kd = 0.0f;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
	pidParams.outputMax = (float)(/*WHEEL_MAX_SPEED_RAD * 10.0f*/ 4095.0f);
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <DriveFunction+0x368>)
 8001648:	61bb      	str	r3, [r7, #24]
	pidParams.outputMin = (float)(/*-WHEEL_MAX_SPEED_RAD * 10.0f*/ -4095.0f);
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <DriveFunction+0x36c>)
 800164c:	61fb      	str	r3, [r7, #28]
	pidParams.integralMax = pidParams.outputMax / 5.0f;
 800164e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001652:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165a:	edc7 7a08 	vstr	s15, [r7, #32]
	pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 800165e:	4b39      	ldr	r3, [pc, #228]	; (8001744 <DriveFunction+0x370>)
 8001660:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enable motors and disable brake */
	for (uint8_t i = 0; i < 4; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001668:	e034      	b.n	80016d4 <DriveFunction+0x300>
	{
		Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 800166a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800166e:	4613      	mov	r3, r2
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <DriveFunction+0x320>)
 8001678:	4413      	add	r3, r2
 800167a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800167e:	2201      	movs	r2, #1
 8001680:	4618      	mov	r0, r3
 8001682:	f006 fb81 	bl	8007d88 <Motor_Init>
		Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 8001686:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800168a:	4613      	mov	r3, r2
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <DriveFunction+0x320>)
 8001694:	4413      	add	r3, r2
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f006 fc0d 	bl	8007eb8 <Motor_SetBrake>
		PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 800169e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80016a2:	4613      	mov	r3, r2
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <DriveFunction+0x320>)
 80016ac:	189d      	adds	r5, r3, r2
 80016ae:	2301      	movs	r3, #1
 80016b0:	9304      	str	r3, [sp, #16]
 80016b2:	466c      	mov	r4, sp
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c4:	4628      	mov	r0, r5
 80016c6:	f006 f9db 	bl	8007a80 <PID_Init>
	for (uint8_t i = 0; i < 4; i++)
 80016ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016ce:	3301      	adds	r3, #1
 80016d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80016d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d9c6      	bls.n	800166a <DriveFunction+0x296>

	//Motor_Enable(&motor[0], MOTOR_STATUS_ENABLE);
	/* Infinite loop */
	for(;;)
	{						
		for (uint8_t i = 0; i < 4; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80016e2:	e059      	b.n	8001798 <DriveFunction+0x3c4>
 80016e4:	20000578 	.word	0x20000578
 80016e8:	20000098 	.word	0x20000098
 80016ec:	200000ec 	.word	0x200000ec
 80016f0:	40022400 	.word	0x40022400
 80016f4:	20000388 	.word	0x20000388
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40000424 	.word	0x40000424
 8001700:	40000400 	.word	0x40000400
 8001704:	45000000 	.word	0x45000000
 8001708:	3f714639 	.word	0x3f714639
 800170c:	40020800 	.word	0x40020800
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40010424 	.word	0x40010424
 8001718:	40010400 	.word	0x40010400
 800171c:	40022800 	.word	0x40022800
 8001720:	40021800 	.word	0x40021800
 8001724:	40000024 	.word	0x40000024
 8001728:	40021400 	.word	0x40021400
 800172c:	40000c24 	.word	0x40000c24
 8001730:	40000c00 	.word	0x40000c00
 8001734:	41400000 	.word	0x41400000
 8001738:	40900000 	.word	0x40900000
 800173c:	457ff000 	.word	0x457ff000
 8001740:	c57ff000 	.word	0xc57ff000
 8001744:	3a83126f 	.word	0x3a83126f
		{
			/* Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine */
			Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 8001748:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800174c:	4613      	mov	r3, r2
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <DriveFunction+0x410>)
 8001756:	441a      	add	r2, r3
 8001758:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800175c:	4922      	ldr	r1, [pc, #136]	; (80017e8 <DriveFunction+0x414>)
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f006 fb2b 	bl	8007dcc <Motor_CLDrive>
			
			/* TODO: make dribbler files, variable speeds */
			MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <DriveFunction+0x418>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <DriveFunction+0x41c>)
 800177e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f006 f936 	bl	80079fa <MAX581x_Code>
		for (uint8_t i = 0; i < 4; i++)
 800178e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001792:	3301      	adds	r3, #1
 8001794:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001798:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800179c:	2b03      	cmp	r3, #3
 800179e:	d9d3      	bls.n	8001748 <DriveFunction+0x374>
		}

    if(ball_posession && kick_sel && kick_flag) {
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <DriveFunction+0x420>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <DriveFunction+0x3f2>
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <DriveFunction+0x424>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <DriveFunction+0x3f2>
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <DriveFunction+0x428>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <DriveFunction+0x3f2>
      osMessagePut(kickQueueHandle, 0, 0);
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <DriveFunction+0x42c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 ff35 	bl	8005630 <osMessagePut>
    }   
		
		osMessagePut(nrf24CheckHandle, 0, 0);
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <DriveFunction+0x430>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 ff2e 	bl	8005630 <osMessagePut>
		osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 80017d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 ffdc 	bl	8005798 <osDelayUntil>
		for (uint8_t i = 0; i < 4; i++)
 80017e0:	e77c      	b.n	80016dc <DriveFunction+0x308>
 80017e2:	bf00      	nop
 80017e4:	20000388 	.word	0x20000388
 80017e8:	20000348 	.word	0x20000348
 80017ec:	2000057a 	.word	0x2000057a
 80017f0:	08008ac0 	.word	0x08008ac0
 80017f4:	200005e8 	.word	0x200005e8
 80017f8:	2000057b 	.word	0x2000057b
 80017fc:	2000057c 	.word	0x2000057c
 8001800:	20000334 	.word	0x20000334
 8001804:	2000033c 	.word	0x2000033c

08001808 <RadioFunction>:
* @retval None
*/

/* USER CODE END Header_RadioFunction */
void RadioFunction(void const * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af02      	add	r7, sp, #8
 800180e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN RadioFunction */
  nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 8001810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <RadioFunction+0x10c>)
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <RadioFunction+0x10c>)
 8001820:	493d      	ldr	r1, [pc, #244]	; (8001918 <RadioFunction+0x110>)
 8001822:	483e      	ldr	r0, [pc, #248]	; (800191c <RadioFunction+0x114>)
 8001824:	f006 fbdb 	bl	8007fde <nRF24_HW_Init>
  nRF24_Init(&nrf_device);
 8001828:	483c      	ldr	r0, [pc, #240]	; (800191c <RadioFunction+0x114>)
 800182a:	f006 fc9b 	bl	8008164 <nRF24_Init>
  nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 800182e:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <RadioFunction+0x118>)
 8001830:	2100      	movs	r1, #0
 8001832:	483a      	ldr	r0, [pc, #232]	; (800191c <RadioFunction+0x114>)
 8001834:	f006 fd52 	bl	80082dc <nRF24_SetAddr>
  nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 8001838:	216a      	movs	r1, #106	; 0x6a
 800183a:	4838      	ldr	r0, [pc, #224]	; (800191c <RadioFunction+0x114>)
 800183c:	f006 fd3d 	bl	80082ba <nRF24_SetRFChannel>
  nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 8001840:	231e      	movs	r3, #30
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	4835      	ldr	r0, [pc, #212]	; (800191c <RadioFunction+0x114>)
 8001848:	f006 fdf6 	bl	8008438 <nRF24_SetRXPipe>
  nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 800184c:	2106      	movs	r1, #6
 800184e:	4833      	ldr	r0, [pc, #204]	; (800191c <RadioFunction+0x114>)
 8001850:	f006 fe4e 	bl	80084f0 <nRF24_DisableAA>
  nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 8001854:	2102      	movs	r1, #2
 8001856:	4831      	ldr	r0, [pc, #196]	; (800191c <RadioFunction+0x114>)
 8001858:	f006 fce9 	bl	800822e <nRF24_SetPowerMode>
  nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 800185c:	2101      	movs	r1, #1
 800185e:	482f      	ldr	r0, [pc, #188]	; (800191c <RadioFunction+0x114>)
 8001860:	f006 fd07 	bl	8008272 <nRF24_SetOperationalMode>
  nRF24_RX_ON(&nrf_device);
 8001864:	2101      	movs	r1, #1
 8001866:	482d      	ldr	r0, [pc, #180]	; (800191c <RadioFunction+0x114>)
 8001868:	f006 fb95 	bl	8007f96 <nRF24_CE_State>
	checkSPI = nRF24_Check();
	memset(rxAddr, 0xE7, 5);
	nRF24_SetAddr(0, rxAddr);
	*/
	
	memset(nrf_device.rx_data, 0, 30);
 800186c:	221e      	movs	r2, #30
 800186e:	2100      	movs	r1, #0
 8001870:	482c      	ldr	r0, [pc, #176]	; (8001924 <RadioFunction+0x11c>)
 8001872:	f007 f8a1 	bl	80089b8 <memset>
	/* Infinite loop */
	for(;;)
	{
		osMessageGet(nrf24CheckHandle, osWaitForever);
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <RadioFunction+0x120>)
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	463b      	mov	r3, r7
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	4618      	mov	r0, r3
 8001882:	f003 ff15 	bl	80056b0 <osMessageGet>
		status = nRF24_GetStatus(&nrf_device);
 8001886:	4825      	ldr	r0, [pc, #148]	; (800191c <RadioFunction+0x114>)
 8001888:	f006 fe5d 	bl	8008546 <nRF24_GetStatus>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <RadioFunction+0x124>)
 8001892:	701a      	strb	r2, [r3, #0]
		
		//if(nRF24_GetStatus_RXFIFO() == nRF24_STATUS_RXFIFO_DATA)
		if(status & nRF24_FLAG_RX_DR)
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <RadioFunction+0x124>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ea      	beq.n	8001876 <RadioFunction+0x6e>
		{
			nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 80018a0:	4a23      	ldr	r2, [pc, #140]	; (8001930 <RadioFunction+0x128>)
 80018a2:	4920      	ldr	r1, [pc, #128]	; (8001924 <RadioFunction+0x11c>)
 80018a4:	481d      	ldr	r0, [pc, #116]	; (800191c <RadioFunction+0x114>)
 80018a6:	f006 fe8d 	bl	80085c4 <nRF24_ReadPayload>
			nRF24_FlushRX(&nrf_device);
 80018aa:	481c      	ldr	r0, [pc, #112]	; (800191c <RadioFunction+0x114>)
 80018ac:	f006 fe65 	bl	800857a <nRF24_FlushRX>
			nRF24_ClearIRQFlags(&nrf_device);
 80018b0:	481a      	ldr	r0, [pc, #104]	; (800191c <RadioFunction+0x114>)
 80018b2:	f006 fe6f 	bl	8008594 <nRF24_ClearIRQFlags>
						
			/* Obtain speed from nrf24L01+ packet */
			setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <RadioFunction+0x12c>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <RadioFunction+0x11c>)
 80018c6:	4413      	add	r3, r2
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <RadioFunction+0x130>)
 80018ca:	491c      	ldr	r1, [pc, #112]	; (800193c <RadioFunction+0x134>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb85 	bl	8000fdc <setSpeed>
			dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <RadioFunction+0x12c>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	461a      	mov	r2, r3
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <RadioFunction+0x11c>)
 80018e2:	4413      	add	r3, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fced 	bl	80012c4 <getDribbler_speed>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <RadioFunction+0x138>)
 80018f0:	701a      	strb	r2, [r3, #0]
			kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);		
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <RadioFunction+0x12c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <RadioFunction+0x11c>)
 8001902:	4413      	add	r3, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fcef 	bl	80012e8 <getKickerStatus>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <RadioFunction+0x13c>)
 8001910:	701a      	strb	r2, [r3, #0]
		osMessageGet(nrf24CheckHandle, osWaitForever);
 8001912:	e7b0      	b.n	8001876 <RadioFunction+0x6e>
 8001914:	40021800 	.word	0x40021800
 8001918:	20000194 	.word	0x20000194
 800191c:	20000580 	.word	0x20000580
 8001920:	20000000 	.word	0x20000000
 8001924:	200005b6 	.word	0x200005b6
 8001928:	2000033c 	.word	0x2000033c
 800192c:	20000341 	.word	0x20000341
 8001930:	20000340 	.word	0x20000340
 8001934:	20000578 	.word	0x20000578
 8001938:	20000344 	.word	0x20000344
 800193c:	20000348 	.word	0x20000348
 8001940:	2000057a 	.word	0x2000057a
 8001944:	2000057b 	.word	0x2000057b

08001948 <KickFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KickFunction */
void KickFunction(void const * argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN KickFunction */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2110      	movs	r1, #16
 8001954:	4814      	ldr	r0, [pc, #80]	; (80019a8 <KickFunction+0x60>)
 8001956:	f000 fe67 	bl	8002628 <HAL_GPIO_WritePin>
    osDelay(4000);
 800195a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800195e:	f003 fe41 	bl	80055e4 <osDelay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2110      	movs	r1, #16
 8001966:	4810      	ldr	r0, [pc, #64]	; (80019a8 <KickFunction+0x60>)
 8001968:	f000 fe5e 	bl	8002628 <HAL_GPIO_WritePin>
    kick_flag = 0x01;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <KickFunction+0x64>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]

		osMessageGet(kickQueueHandle, osWaitForever);
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <KickFunction+0x68>)
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	463b      	mov	r3, r7
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fe97 	bl	80056b0 <osMessageGet>
		
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001988:	480a      	ldr	r0, [pc, #40]	; (80019b4 <KickFunction+0x6c>)
 800198a:	f000 fe4d 	bl	8002628 <HAL_GPIO_WritePin>
		osDelay(10);
 800198e:	200a      	movs	r0, #10
 8001990:	f003 fe28 	bl	80055e4 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <KickFunction+0x6c>)
 800199c:	f000 fe44 	bl	8002628 <HAL_GPIO_WritePin>
		kick_flag = 0x00;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <KickFunction+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 80019a6:	e7d3      	b.n	8001950 <KickFunction+0x8>
 80019a8:	40022400 	.word	0x40022400
 80019ac:	2000057c 	.word	0x2000057c
 80019b0:	20000334 	.word	0x20000334
 80019b4:	40021400 	.word	0x40021400

080019b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ca:	f000 fb43 	bl	8002054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010000 	.word	0x40010000

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	210f      	movs	r1, #15
 8001a26:	f06f 0001 	mvn.w	r0, #1
 8001a2a:	f000 fc0f 	bl	800224c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0b2      	sub	sp, #200	; 0xc8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	2290      	movs	r2, #144	; 0x90
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f006 ffab 	bl	80089b8 <memset>
  if(hi2c->Instance==I2C1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_I2C_MspInit+0x1c0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d13d      	bne.n	8001ae8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 f8c7 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a88:	f7ff ffa8 	bl	80019dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a5b      	ldr	r2, [pc, #364]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	2312      	movs	r3, #18
 8001aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001abc:	2304      	movs	r3, #4
 8001abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	484e      	ldr	r0, [pc, #312]	; (8001c04 <HAL_I2C_MspInit+0x1c8>)
 8001aca:	f000 fbe9 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ae6:	e085      	b.n	8001bf4 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_I2C_MspInit+0x1cc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d13d      	bne.n	8001b6e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 f884 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001b0e:	f7ff ff65 	bl	80019dc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	482f      	ldr	r0, [pc, #188]	; (8001c0c <HAL_I2C_MspInit+0x1d0>)
 8001b50:	f000 fba6 	bl	80022a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
}
 8001b6c:	e042      	b.n	8001bf4 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_I2C_MspInit+0x1d4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d13d      	bne.n	8001bf4 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 f841 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001b94:	f7ff ff22 	bl	80019dc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb8:	2312      	movs	r3, #18
 8001bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480f      	ldr	r0, [pc, #60]	; (8001c14 <HAL_I2C_MspInit+0x1d8>)
 8001bd8:	f000 fb62 	bl	80022a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001be6:	6413      	str	r3, [r2, #64]	; 0x40
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_I2C_MspInit+0x1c4>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	37c8      	adds	r7, #200	; 0xc8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40005800 	.word	0x40005800
 8001c0c:	40021400 	.word	0x40021400
 8001c10:	40005c00 	.word	0x40005c00
 8001c14:	40021c00 	.word	0x40021c00

08001c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_SPI_MspInit+0x7c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d127      	bne.n	8001c8a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_SPI_MspInit+0x80>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c6a:	23e0      	movs	r3, #224	; 0xe0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_SPI_MspInit+0x84>)
 8001c86:	f000 fb0b 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40013000 	.word	0x40013000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b090      	sub	sp, #64	; 0x40
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc0:	d128      	bne.n	8001d14 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a54      	ldr	r2, [pc, #336]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b52      	ldr	r3, [pc, #328]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d02:	2301      	movs	r3, #1
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4849      	ldr	r0, [pc, #292]	; (8001e34 <HAL_TIM_Encoder_MspInit+0x194>)
 8001d0e:	f000 fac7 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d12:	e089      	b.n	8001e28 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x198>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d128      	bne.n	8001d70 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a43      	ldr	r2, [pc, #268]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d66:	4619      	mov	r1, r3
 8001d68:	4834      	ldr	r0, [pc, #208]	; (8001e3c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001d6a:	f000 fa99 	bl	80022a0 <HAL_GPIO_Init>
}
 8001d6e:	e05b      	b.n	8001e28 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d129      	bne.n	8001dce <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481f      	ldr	r0, [pc, #124]	; (8001e44 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001dc8:	f000 fa6a 	bl	80022a0 <HAL_GPIO_Init>
}
 8001dcc:	e02c      	b.n	8001e28 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d127      	bne.n	8001e28 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	6453      	str	r3, [r2, #68]	; 0x44
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	4619      	mov	r1, r3
 8001e22:	480a      	ldr	r0, [pc, #40]	; (8001e4c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001e24:	f000 fa3c 	bl	80022a0 <HAL_GPIO_Init>
}
 8001e28:	bf00      	nop
 8001e2a:	3740      	adds	r7, #64	; 0x40
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40000c00 	.word	0x40000c00
 8001e44:	40021c00 	.word	0x40021c00
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_InitTick+0xd0>)
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_InitTick+0xd0>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_InitTick+0xd0>)
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e78:	f107 020c 	add.w	r2, r7, #12
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fe92 	bl	8003bac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e88:	f001 fe7c 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	4a23      	ldr	r2, [pc, #140]	; (8001f24 <HAL_InitTick+0xd4>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_InitTick+0xd8>)
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <HAL_InitTick+0xdc>)
 8001ea4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_InitTick+0xd8>)
 8001ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_InitTick+0xd8>)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_InitTick+0xd8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_InitTick+0xd8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_InitTick+0xd8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ec6:	4818      	ldr	r0, [pc, #96]	; (8001f28 <HAL_InitTick+0xd8>)
 8001ec8:	f002 ff10 	bl	8004cec <HAL_TIM_Base_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d11b      	bne.n	8001f12 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <HAL_InitTick+0xd8>)
 8001edc:	f002 ff68 	bl	8004db0 <HAL_TIM_Base_Start_IT>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d111      	bne.n	8001f12 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eee:	2019      	movs	r0, #25
 8001ef0:	f000 f9c8 	bl	8002284 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	d808      	bhi.n	8001f0c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001efa:	2200      	movs	r2, #0
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	2019      	movs	r0, #25
 8001f00:	f000 f9a4 	bl	800224c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_InitTick+0xe0>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e002      	b.n	8001f12 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	20000608 	.word	0x20000608
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	2000000c 	.word	0x2000000c

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f6e:	f003 f83d 	bl	8004fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000608 	.word	0x20000608

08001f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <SystemInit+0x5c>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <SystemInit+0x5c>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <SystemInit+0x60>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <SystemInit+0x60>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <SystemInit+0x60>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <SystemInit+0x60>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	490d      	ldr	r1, [pc, #52]	; (8001fdc <SystemInit+0x60>)
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <SystemInit+0x64>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <SystemInit+0x60>)
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <SystemInit+0x68>)
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <SystemInit+0x60>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <SystemInit+0x60>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <SystemInit+0x60>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SystemInit+0x5c>)
 8001fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fcc:	609a      	str	r2, [r3, #8]
#endif
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	fef6ffff 	.word	0xfef6ffff
 8001fe4:	24003010 	.word	0x24003010

08001fe8 <Reset_Handler>:
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0x12>
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <LoopFillZerobss+0x1a>)
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <LoopFillZerobss+0x1e>)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:
 8001ff6:	58d4      	ldr	r4, [r2, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:
 8001ffc:	18c4      	adds	r4, r0, r3
 8001ffe:	428c      	cmp	r4, r1
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LoopFillZerobss+0x22>)
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <LoopFillZerobss+0x26>)
 8002006:	2300      	movs	r3, #0
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:
 800200e:	42a2      	cmp	r2, r4
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>
 8002012:	f7ff ffb3 	bl	8001f7c <SystemInit>
 8002016:	f006 fc9d 	bl	8008954 <__libc_init_array>
 800201a:	f7fe fa93 	bl	8000544 <main>
 800201e:	4770      	bx	lr
 8002020:	20080000 	.word	0x20080000
 8002024:	20000000 	.word	0x20000000
 8002028:	2000007c 	.word	0x2000007c
 800202c:	08008b08 	.word	0x08008b08
 8002030:	2000007c 	.word	0x2000007c
 8002034:	200043a4 	.word	0x200043a4

08002038 <ADC_IRQHandler>:
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>

0800203a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 f8f9 	bl	8002236 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff ff03 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204a:	f7ff fccf 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x20>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x24>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_IncTick+0x24>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000010 	.word	0x20000010
 8002078:	20000654 	.word	0x20000654

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000654 	.word	0x20000654

08002094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff ffee 	bl	800207c <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d005      	beq.n	80020ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_Delay+0x44>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ba:	bf00      	nop
 80020bc:	f7ff ffde 	bl	800207c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d8f7      	bhi.n	80020bc <HAL_Delay+0x28>
  {
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000010 	.word	0x20000010

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <__NVIC_SetPriorityGrouping+0x40>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	4313      	orrs	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x40>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	05fa0000 	.word	0x05fa0000

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff4c 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225e:	f7ff ff61 	bl	8002124 <__NVIC_GetPriorityGrouping>
 8002262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7ff ffb1 	bl	80021d0 <NVIC_EncodePriority>
 800226e:	4602      	mov	r2, r0
 8002270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff80 	bl	800217c <__NVIC_SetPriority>
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff54 	bl	8002140 <__NVIC_EnableIRQ>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e175      	b.n	80025ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8164 	bne.w	80025a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d005      	beq.n	80022f6 <HAL_GPIO_Init+0x56>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d130      	bne.n	8002358 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0201 	and.w	r2, r3, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b03      	cmp	r3, #3
 8002362:	d017      	beq.n	8002394 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d123      	bne.n	80023e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80be 	beq.w	80025a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_GPIO_Init+0x324>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002442:	4a61      	ldr	r2, [pc, #388]	; (80025c8 <HAL_GPIO_Init+0x328>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_GPIO_Init+0x32c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d037      	beq.n	80024de <HAL_GPIO_Init+0x23e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a57      	ldr	r2, [pc, #348]	; (80025d0 <HAL_GPIO_Init+0x330>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_GPIO_Init+0x23a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a56      	ldr	r2, [pc, #344]	; (80025d4 <HAL_GPIO_Init+0x334>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02b      	beq.n	80024d6 <HAL_GPIO_Init+0x236>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a55      	ldr	r2, [pc, #340]	; (80025d8 <HAL_GPIO_Init+0x338>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d025      	beq.n	80024d2 <HAL_GPIO_Init+0x232>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a54      	ldr	r2, [pc, #336]	; (80025dc <HAL_GPIO_Init+0x33c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01f      	beq.n	80024ce <HAL_GPIO_Init+0x22e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a53      	ldr	r2, [pc, #332]	; (80025e0 <HAL_GPIO_Init+0x340>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x22a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_GPIO_Init+0x344>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a51      	ldr	r2, [pc, #324]	; (80025e8 <HAL_GPIO_Init+0x348>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x222>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a50      	ldr	r2, [pc, #320]	; (80025ec <HAL_GPIO_Init+0x34c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x21e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <HAL_GPIO_Init+0x350>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x21a>
 80024b6:	2309      	movs	r3, #9
 80024b8:	e012      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ba:	230a      	movs	r3, #10
 80024bc:	e010      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024be:	2308      	movs	r3, #8
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	; (80025c8 <HAL_GPIO_Init+0x328>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <HAL_GPIO_Init+0x354>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <HAL_GPIO_Init+0x354>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_GPIO_Init+0x354>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_GPIO_Init+0x354>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae86 	bls.w	80022c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40022400 	.word	0x40022400
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e001      	b.n	800261a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	041a      	lsls	r2, r3, #16
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43d9      	mvns	r1, r3
 8002678:	887b      	ldrh	r3, [r7, #2]
 800267a:	400b      	ands	r3, r1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	619a      	str	r2, [r3, #24]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff f9c0 	bl	8001a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e006      	b.n	8002718 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002716:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d104      	bne.n	800272a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002728:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_I2C_Init+0x11c>)
 8002736:	430b      	orrs	r3, r1
 8002738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69d9      	ldr	r1, [r3, #28]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	02008000 	.word	0x02008000

080027b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	461a      	mov	r2, r3
 80027bc:	460b      	mov	r3, r1
 80027be:	817b      	strh	r3, [r7, #10]
 80027c0:	4613      	mov	r3, r2
 80027c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	f040 80da 	bne.w	8002986 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_I2C_Master_Transmit+0x30>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0d3      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1d8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027e8:	f7ff fc48 	bl	800207c <HAL_GetTick>
 80027ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2319      	movs	r3, #25
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f9e6 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0be      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2221      	movs	r2, #33	; 0x21
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2210      	movs	r2, #16
 8002816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	893a      	ldrh	r2, [r7, #8]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d90e      	bls.n	800285a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	b2da      	uxtb	r2, r3
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	4b51      	ldr	r3, [pc, #324]	; (8002990 <HAL_I2C_Master_Transmit+0x1e0>)
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fbd0 	bl	8002ff8 <I2C_TransferConfig>
 8002858:	e06c      	b.n	8002934 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_I2C_Master_Transmit+0x1e0>)
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fbbf 	bl	8002ff8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800287a:	e05b      	b.n	8002934 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	6a39      	ldr	r1, [r7, #32]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f9e3 	bl	8002c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e07b      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d034      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x184>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d130      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f975 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e04d      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d90e      	bls.n	8002914 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	2300      	movs	r3, #0
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fb73 	bl	8002ff8 <I2C_TransferConfig>
 8002912:	e00f      	b.n	8002934 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	b2da      	uxtb	r2, r3
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fb62 	bl	8002ff8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d19e      	bne.n	800287c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	6a39      	ldr	r1, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9c2 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e01a      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2220      	movs	r2, #32
 8002958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_I2C_Master_Transmit+0x1e4>)
 8002966:	400b      	ands	r3, r1
 8002968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	80002000 	.word	0x80002000
 8002994:	fe00e800 	.word	0xfe00e800

08002998 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	460b      	mov	r3, r1
 80029a6:	817b      	strh	r3, [r7, #10]
 80029a8:	4613      	mov	r3, r2
 80029aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	f040 80db 	bne.w	8002b70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_I2C_Master_Receive+0x30>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e0d4      	b.n	8002b72 <HAL_I2C_Master_Receive+0x1da>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029d0:	f7ff fb54 	bl	800207c <HAL_GetTick>
 80029d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2319      	movs	r3, #25
 80029dc:	2201      	movs	r2, #1
 80029de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8f2 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0bf      	b.n	8002b72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2222      	movs	r2, #34	; 0x22
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	893a      	ldrh	r2, [r7, #8]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2bff      	cmp	r3, #255	; 0xff
 8002a22:	d90e      	bls.n	8002a42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	8979      	ldrh	r1, [r7, #10]
 8002a32:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <HAL_I2C_Master_Receive+0x1e4>)
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fadc 	bl	8002ff8 <I2C_TransferConfig>
 8002a40:	e06d      	b.n	8002b1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_I2C_Master_Receive+0x1e4>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 facb 	bl	8002ff8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a62:	e05c      	b.n	8002b1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6a39      	ldr	r1, [r7, #32]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f96b 	bl	8002d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e07c      	b.n	8002b72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d034      	beq.n	8002b1e <HAL_I2C_Master_Receive+0x186>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d130      	bne.n	8002b1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f880 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e04d      	b.n	8002b72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2bff      	cmp	r3, #255	; 0xff
 8002ade:	d90e      	bls.n	8002afe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22ff      	movs	r2, #255	; 0xff
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa7e 	bl	8002ff8 <I2C_TransferConfig>
 8002afc:	e00f      	b.n	8002b1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	2300      	movs	r3, #0
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa6d 	bl	8002ff8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d19d      	bne.n	8002a64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6a39      	ldr	r1, [r7, #32]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8cd 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e01a      	b.n	8002b72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2220      	movs	r2, #32
 8002b42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_I2C_Master_Receive+0x1e8>)
 8002b50:	400b      	ands	r3, r1
 8002b52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	80002400 	.word	0x80002400
 8002b80:	fe00e800 	.word	0xfe00e800

08002b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d103      	bne.n	8002ba2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d007      	beq.n	8002bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	619a      	str	r2, [r3, #24]
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bdc:	e022      	b.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d01e      	beq.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7ff fa49 	bl	800207c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d113      	bne.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00f      	b.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d0cd      	beq.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c58:	e02c      	b.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f8ea 	bl	8002e38 <I2C_IsErrorOccurred>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e02a      	b.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d01e      	beq.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7ff fa01 	bl	800207c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d113      	bne.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d1cb      	bne.n	8002c5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd8:	e028      	b.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f8aa 	bl	8002e38 <I2C_IsErrorOccurred>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e026      	b.n	8002d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7ff f9c5 	bl	800207c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d113      	bne.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e007      	b.n	8002d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d1cf      	bne.n	8002cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d50:	e064      	b.n	8002e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f86e 	bl	8002e38 <I2C_IsErrorOccurred>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e062      	b.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d138      	bne.n	8002de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d105      	bne.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e04e      	b.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d107      	bne.n	8002dac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2210      	movs	r2, #16
 8002da2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2204      	movs	r2, #4
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
 8002daa:	e002      	b.n	8002db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e022      	b.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7ff f949 	bl	800207c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e007      	b.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d193      	bne.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	fe00e800 	.word	0xfe00e800

08002e38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d068      	beq.n	8002f36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e6c:	e049      	b.n	8002f02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d045      	beq.n	8002f02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7ff f901 	bl	800207c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_IsErrorOccurred+0x54>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d13a      	bne.n	8002f02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d121      	bne.n	8002ef4 <I2C_IsErrorOccurred+0xbc>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb6:	d01d      	beq.n	8002ef4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d01a      	beq.n	8002ef4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ecc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ece:	f7ff f8d5 	bl	800207c <HAL_GetTick>
 8002ed2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed4:	e00e      	b.n	8002ef4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ed6:	f7ff f8d1 	bl	800207c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b19      	cmp	r3, #25
 8002ee2:	d907      	bls.n	8002ef4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f043 0320 	orr.w	r3, r3, #32
 8002eea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ef2:	e006      	b.n	8002f02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d1e9      	bne.n	8002ed6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d003      	beq.n	8002f18 <I2C_IsErrorOccurred+0xe0>
 8002f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0aa      	beq.n	8002e6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2220      	movs	r2, #32
 8002f26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00b      	beq.n	8002fa4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01c      	beq.n	8002fe6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fde9 	bl	8002b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <I2C_IsErrorOccurred+0x1bc>)
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	fe00e800 	.word	0xfe00e800

08002ff8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	4613      	mov	r3, r2
 8003008:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003010:	7a7b      	ldrb	r3, [r7, #9]
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003018:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	4313      	orrs	r3, r2
 8003022:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003026:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	0d5b      	lsrs	r3, r3, #21
 8003032:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <I2C_TransferConfig+0x60>)
 8003038:	430b      	orrs	r3, r1
 800303a:	43db      	mvns	r3, r3
 800303c:	ea02 0103 	and.w	r1, r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	03ff63ff 	.word	0x03ff63ff

0800305c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	d138      	bne.n	80030e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800307c:	2302      	movs	r3, #2
 800307e:	e032      	b.n	80030e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d139      	bne.n	800317c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003112:	2302      	movs	r3, #2
 8003114:	e033      	b.n	800317e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2224      	movs	r2, #36	; 0x24
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_PWREx_EnableOverDrive+0x98>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_PWREx_EnableOverDrive+0x98>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ba:	f7fe ff5f 	bl	800207c <HAL_GetTick>
 80031be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031c0:	e009      	b.n	80031d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031c2:	f7fe ff5b 	bl	800207c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d0:	d901      	bls.n	80031d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e022      	b.n	800321c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d1ee      	bne.n	80031c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f0:	f7fe ff44 	bl	800207c <HAL_GetTick>
 80031f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031f6:	e009      	b.n	800320c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031f8:	f7fe ff40 	bl	800207c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003206:	d901      	bls.n	800320c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e007      	b.n	800321c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_PWREx_EnableOverDrive+0x9c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003218:	d1ee      	bne.n	80031f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	40007000 	.word	0x40007000

0800322c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e29b      	b.n	800377a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8087 	beq.w	800335e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003250:	4b96      	ldr	r3, [pc, #600]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b04      	cmp	r3, #4
 800325a:	d00c      	beq.n	8003276 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325c:	4b93      	ldr	r3, [pc, #588]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d112      	bne.n	800328e <HAL_RCC_OscConfig+0x62>
 8003268:	4b90      	ldr	r3, [pc, #576]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003274:	d10b      	bne.n	800328e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003276:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d06c      	beq.n	800335c <HAL_RCC_OscConfig+0x130>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d168      	bne.n	800335c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e275      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x7a>
 8003298:	4b84      	ldr	r3, [pc, #528]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a83      	ldr	r2, [pc, #524]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e02e      	b.n	8003304 <HAL_RCC_OscConfig+0xd8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x9c>
 80032ae:	4b7f      	ldr	r3, [pc, #508]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7e      	ldr	r2, [pc, #504]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7b      	ldr	r2, [pc, #492]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e01d      	b.n	8003304 <HAL_RCC_OscConfig+0xd8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0xc0>
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a75      	ldr	r2, [pc, #468]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b73      	ldr	r3, [pc, #460]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a72      	ldr	r2, [pc, #456]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0xd8>
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6e      	ldr	r2, [pc, #440]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b6c      	ldr	r3, [pc, #432]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a6b      	ldr	r2, [pc, #428]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe feb6 	bl	800207c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe feb2 	bl	800207c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e229      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0xe8>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fea2 	bl	800207c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7fe fe9e 	bl	800207c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e215      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	4b57      	ldr	r3, [pc, #348]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x110>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d069      	beq.n	800343e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336a:	4b50      	ldr	r3, [pc, #320]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11c      	bne.n	80033bc <HAL_RCC_OscConfig+0x190>
 8003382:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d116      	bne.n	80033bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x17a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1e9      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	493d      	ldr	r1, [pc, #244]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	e040      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c4:	4b39      	ldr	r3, [pc, #228]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a38      	ldr	r2, [pc, #224]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fe54 	bl	800207c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe fe50 	bl	800207c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1c7      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4929      	ldr	r1, [pc, #164]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fe30 	bl	800207c <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003420:	f7fe fe2c 	bl	800207c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1a3      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d038      	beq.n	80034bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d019      	beq.n	8003486 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fe fe0d 	bl	800207c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003466:	f7fe fe09 	bl	800207c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e180      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x23a>
 8003484:	e01a      	b.n	80034bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_RCC_OscConfig+0x280>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fe fdf3 	bl	800207c <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349a:	f7fe fdef 	bl	800207c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d903      	bls.n	80034b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e166      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
 80034ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	4b92      	ldr	r3, [pc, #584]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ee      	bne.n	800349a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a4 	beq.w	8003612 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a88      	ldr	r2, [pc, #544]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b86      	ldr	r3, [pc, #536]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	4b83      	ldr	r3, [pc, #524]	; (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034fe:	4b80      	ldr	r3, [pc, #512]	; (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7f      	ldr	r2, [pc, #508]	; (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe fdb7 	bl	800207c <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe fdb3 	bl	800207c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	; 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e12a      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003524:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x31a>
 8003538:	4b70      	ldr	r3, [pc, #448]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a6f      	ldr	r2, [pc, #444]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e02d      	b.n	80035a2 <HAL_RCC_OscConfig+0x376>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x33c>
 800354e:	4b6b      	ldr	r3, [pc, #428]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a6a      	ldr	r2, [pc, #424]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b68      	ldr	r3, [pc, #416]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a67      	ldr	r2, [pc, #412]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	e01c      	b.n	80035a2 <HAL_RCC_OscConfig+0x376>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x35e>
 8003570:	4b62      	ldr	r3, [pc, #392]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a61      	ldr	r2, [pc, #388]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
 800357c:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	e00b      	b.n	80035a2 <HAL_RCC_OscConfig+0x376>
 800358a:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d015      	beq.n	80035d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7fe fd67 	bl	800207c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fd63 	bl	800207c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0d8      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ee      	beq.n	80035b2 <HAL_RCC_OscConfig+0x386>
 80035d4:	e014      	b.n	8003600 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fe fd51 	bl	800207c <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe fd4d 	bl	800207c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0c2      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80ae 	beq.w	8003778 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d06d      	beq.n	8003704 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d14b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fd1e 	bl	800207c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe fd1a 	bl	800207c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e091      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	041b      	lsls	r3, r3, #16
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	071b      	lsls	r3, r3, #28
 800368e:	491b      	ldr	r1, [pc, #108]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 800369a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fcec 	bl	800207c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fce8 	bl	800207c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e05f      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x47c>
 80036c6:	e057      	b.n	8003778 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fcd2 	bl	800207c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe fcce 	bl	800207c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e045      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x4b0>
 80036fa:	e03d      	b.n	8003778 <HAL_RCC_OscConfig+0x54c>
 80036fc:	40023800 	.word	0x40023800
 8003700:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_RCC_OscConfig+0x558>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d030      	beq.n	8003774 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d129      	bne.n	8003774 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d122      	bne.n	8003774 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800373a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800373c:	4293      	cmp	r3, r2
 800373e:	d119      	bne.n	8003774 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	3b01      	subs	r3, #1
 800374e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d10f      	bne.n	8003774 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0d0      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d910      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 020f 	bic.w	r2, r3, #15
 80037b6:	4965      	ldr	r1, [pc, #404]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800380a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d040      	beq.n	80038ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d115      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e073      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4936      	ldr	r1, [pc, #216]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fe fbfe 	bl	800207c <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe fbfa 	bl	800207c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e053      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d210      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 020f 	bic.w	r2, r3, #15
 80038c2:	4922      	ldr	r1, [pc, #136]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f821 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	; (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1d4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fa88 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	08008ad0 	.word	0x08008ad0
 8003958:	20000008 	.word	0x20000008
 800395c:	2000000c 	.word	0x2000000c

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b094      	sub	sp, #80	; 0x50
 8003966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	647b      	str	r3, [r7, #68]	; 0x44
 800396c:	2300      	movs	r3, #0
 800396e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003970:	2300      	movs	r3, #0
 8003972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003978:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d00d      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003984:	2b08      	cmp	r3, #8
 8003986:	f200 80e1 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x34>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x3a>
 8003992:	e0db      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003998:	e0db      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399a:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800399e:	e0d8      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039aa:	4b6d      	ldr	r3, [pc, #436]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d063      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b6:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	2200      	movs	r2, #0
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ca:	2300      	movs	r3, #0
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
 80039ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039d2:	4622      	mov	r2, r4
 80039d4:	462b      	mov	r3, r5
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	0159      	lsls	r1, r3, #5
 80039e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e4:	0150      	lsls	r0, r2, #5
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4621      	mov	r1, r4
 80039ec:	1a51      	subs	r1, r2, r1
 80039ee:	6139      	str	r1, [r7, #16]
 80039f0:	4629      	mov	r1, r5
 80039f2:	eb63 0301 	sbc.w	r3, r3, r1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a04:	4659      	mov	r1, fp
 8003a06:	018b      	lsls	r3, r1, #6
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a0e:	4651      	mov	r1, sl
 8003a10:	018a      	lsls	r2, r1, #6
 8003a12:	4651      	mov	r1, sl
 8003a14:	ebb2 0801 	subs.w	r8, r2, r1
 8003a18:	4659      	mov	r1, fp
 8003a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a32:	4690      	mov	r8, r2
 8003a34:	4699      	mov	r9, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	eb18 0303 	adds.w	r3, r8, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	462b      	mov	r3, r5
 8003a40:	eb49 0303 	adc.w	r3, r9, r3
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a52:	4629      	mov	r1, r5
 8003a54:	024b      	lsls	r3, r1, #9
 8003a56:	4621      	mov	r1, r4
 8003a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	024a      	lsls	r2, r1, #9
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	2200      	movs	r2, #0
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a70:	f7fc fbe6 	bl	8000240 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7c:	e058      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7e:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	2200      	movs	r2, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	4611      	mov	r1, r2
 8003a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	0159      	lsls	r1, r3, #5
 8003aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aaa:	0150      	lsls	r0, r2, #5
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	00eb      	lsls	r3, r5, #3
 8003ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae6:	00e2      	lsls	r2, r4, #3
 8003ae8:	4614      	mov	r4, r2
 8003aea:	461d      	mov	r5, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	18e3      	adds	r3, r4, r3
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	464b      	mov	r3, r9
 8003af4:	eb45 0303 	adc.w	r3, r5, r3
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b06:	4629      	mov	r1, r5
 8003b08:	028b      	lsls	r3, r1, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b10:	4621      	mov	r1, r4
 8003b12:	028a      	lsls	r2, r1, #10
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	61fa      	str	r2, [r7, #28]
 8003b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b24:	f7fc fb8c 	bl	8000240 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3750      	adds	r7, #80	; 0x50
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	007a1200 	.word	0x007a1200

08003b6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0b5b      	lsrs	r3, r3, #13
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08008ae0 	.word	0x08008ae0

08003bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	220f      	movs	r2, #15
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_RCC_GetClockConfig+0x60>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40023c00 	.word	0x40023c00

08003c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d012      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c38:	4b69      	ldr	r3, [pc, #420]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a68      	ldr	r2, [pc, #416]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c42:	6093      	str	r3, [r2, #8]
 8003c44:	4b66      	ldr	r3, [pc, #408]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	4964      	ldr	r1, [pc, #400]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d017      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6a:	4b5d      	ldr	r3, [pc, #372]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	4959      	ldr	r1, [pc, #356]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c88:	d101      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d017      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	494a      	ldr	r1, [pc, #296]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 808b 	beq.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b3a      	ldr	r3, [pc, #232]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	4a39      	ldr	r2, [pc, #228]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8003d00:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d0c:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a34      	ldr	r2, [pc, #208]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fe f9b0 	bl	800207c <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fe f9ac 	bl	800207c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e38f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d32:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d035      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d02e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d114      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe f974 	bl	800207c <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	e00a      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fe f970 	bl	800207c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e351      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ee      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc6:	d111      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	4901      	ldr	r1, [pc, #4]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
 8003dde:	e00b      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40007000 	.word	0x40007000
 8003de8:	0ffffcff 	.word	0x0ffffcff
 8003dec:	4bac      	ldr	r3, [pc, #688]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4aab      	ldr	r2, [pc, #684]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003df6:	6093      	str	r3, [r2, #8]
 8003df8:	4ba9      	ldr	r3, [pc, #676]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	49a6      	ldr	r1, [pc, #664]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e16:	4ba2      	ldr	r3, [pc, #648]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1c:	4aa0      	ldr	r2, [pc, #640]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e26:	4b9e      	ldr	r3, [pc, #632]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	499b      	ldr	r1, [pc, #620]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e44:	4b96      	ldr	r3, [pc, #600]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e52:	4993      	ldr	r1, [pc, #588]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e66:	4b8e      	ldr	r3, [pc, #568]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e74:	498a      	ldr	r1, [pc, #552]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e88:	4b85      	ldr	r3, [pc, #532]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e96:	4982      	ldr	r1, [pc, #520]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4979      	ldr	r1, [pc, #484]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ecc:	4b74      	ldr	r3, [pc, #464]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	4971      	ldr	r1, [pc, #452]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eee:	4b6c      	ldr	r3, [pc, #432]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f023 020c 	bic.w	r2, r3, #12
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efc:	4968      	ldr	r1, [pc, #416]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f10:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	4960      	ldr	r1, [pc, #384]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f32:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	4957      	ldr	r1, [pc, #348]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f54:	4b52      	ldr	r3, [pc, #328]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	494f      	ldr	r1, [pc, #316]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f76:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	4946      	ldr	r1, [pc, #280]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f98:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	493e      	ldr	r1, [pc, #248]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	4935      	ldr	r1, [pc, #212]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	492d      	ldr	r1, [pc, #180]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d011      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	4924      	ldr	r1, [pc, #144]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401c:	d101      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404c:	4914      	ldr	r1, [pc, #80]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004070:	490b      	ldr	r1, [pc, #44]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	4902      	ldr	r1, [pc, #8]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040b0:	4b8a      	ldr	r3, [pc, #552]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	4986      	ldr	r1, [pc, #536]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040d4:	4b81      	ldr	r3, [pc, #516]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e4:	497d      	ldr	r1, [pc, #500]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d006      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80d6 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004100:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a75      	ldr	r2, [pc, #468]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410c:	f7fd ffb6 	bl	800207c <HAL_GetTick>
 8004110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004114:	f7fd ffb2 	bl	800207c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e195      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004126:	4b6d      	ldr	r3, [pc, #436]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d021      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11d      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004146:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004154:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	0e1b      	lsrs	r3, r3, #24
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	019a      	lsls	r2, r3, #6
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	4958      	ldr	r1, [pc, #352]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02e      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ac:	d129      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041ae:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c2:	0f1b      	lsrs	r3, r3, #28
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	019a      	lsls	r2, r3, #6
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	493e      	ldr	r1, [pc, #248]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041ea:	4b3c      	ldr	r3, [pc, #240]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f0:	f023 021f 	bic.w	r2, r3, #31
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	3b01      	subs	r3, #1
 80041fa:	4938      	ldr	r1, [pc, #224]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01d      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004214:	0e1b      	lsrs	r3, r3, #24
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800421c:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004222:	0f1b      	lsrs	r3, r3, #28
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	019a      	lsls	r2, r3, #6
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	061b      	lsls	r3, r3, #24
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	071b      	lsls	r3, r3, #28
 8004242:	4926      	ldr	r1, [pc, #152]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d011      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	019a      	lsls	r2, r3, #6
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	491a      	ldr	r1, [pc, #104]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004280:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004286:	f7fd fef9 	bl	800207c <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800428e:	f7fd fef5 	bl	800207c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b64      	cmp	r3, #100	; 0x64
 800429a:	d901      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e0d8      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 80ce 	bne.w	8004450 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a08      	ldr	r2, [pc, #32]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fd fedc 	bl	800207c <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042c8:	f7fd fed8 	bl	800207c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d904      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0bb      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042e0:	4b5e      	ldr	r3, [pc, #376]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ec:	d0ec      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02e      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d12a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004324:	4b4d      	ldr	r3, [pc, #308]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	0f1b      	lsrs	r3, r3, #28
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	019a      	lsls	r2, r3, #6
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	071b      	lsls	r3, r3, #28
 800434a:	4944      	ldr	r1, [pc, #272]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004352:	4b42      	ldr	r3, [pc, #264]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	493d      	ldr	r1, [pc, #244]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d022      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004380:	d11d      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	0e1b      	lsrs	r3, r3, #24
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	0f1b      	lsrs	r3, r3, #28
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	019a      	lsls	r2, r3, #6
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	4929      	ldr	r1, [pc, #164]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d028      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	0e1b      	lsrs	r3, r3, #24
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	019a      	lsls	r2, r3, #6
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	071b      	lsls	r3, r3, #28
 80043fe:	4917      	ldr	r1, [pc, #92]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4911      	ldr	r1, [pc, #68]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0e      	ldr	r2, [pc, #56]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004428:	f7fd fe28 	bl	800207c <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004430:	f7fd fe24 	bl	800207c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e007      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444e:	d1ef      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800

08004460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e09d      	b.n	80045ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004482:	d009      	beq.n	8004498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
 800448a:	e005      	b.n	8004498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fbb0 	bl	8001c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044d8:	d902      	bls.n	80044e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e002      	b.n	80044e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044ee:	d007      	beq.n	8004500 <HAL_SPI_Init+0xa0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f8:	d002      	beq.n	8004500 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	ea42 0103 	orr.w	r1, r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	f003 0204 	and.w	r2, r3, #4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800457c:	ea42 0103 	orr.w	r1, r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b08a      	sub	sp, #40	; 0x28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045c4:	2301      	movs	r3, #1
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x26>
 80045d8:	2302      	movs	r3, #2
 80045da:	e1fb      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x41e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e4:	f7fd fd4a 	bl	800207c <HAL_GetTick>
 80045e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004600:	7efb      	ldrb	r3, [r7, #27]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d00e      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x6e>
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460c:	d106      	bne.n	800461c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <HAL_SPI_TransmitReceive+0x66>
 8004616:	7efb      	ldrb	r3, [r7, #27]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d003      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800461c:	2302      	movs	r3, #2
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004622:	e1cd      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x80>
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800463c:	e1c0      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b04      	cmp	r3, #4
 8004648:	d003      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2205      	movs	r2, #5
 800464e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	887a      	ldrh	r2, [r7, #2]
 8004662:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	887a      	ldrh	r2, [r7, #2]
 800466a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	887a      	ldrh	r2, [r7, #2]
 8004678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	887a      	ldrh	r2, [r7, #2]
 800467e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004694:	d802      	bhi.n	800469c <HAL_SPI_TransmitReceive+0xe6>
 8004696:	8a3b      	ldrh	r3, [r7, #16]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d908      	bls.n	80046ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e007      	b.n	80046be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d007      	beq.n	80046dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e4:	d97c      	bls.n	80047e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x13e>
 80046ee:	8a7b      	ldrh	r3, [r7, #18]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d169      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	881a      	ldrh	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004718:	e056      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11b      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x1aa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x1aa>
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	2b01      	cmp	r3, #1
 8004736:	d113      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	881a      	ldrh	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	1c9a      	adds	r2, r3, #2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d11c      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x1f2>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	b292      	uxth	r2, r2
 8004786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047a4:	2301      	movs	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047a8:	f7fd fc68 	bl	800207c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d807      	bhi.n	80047c8 <HAL_SPI_TransmitReceive+0x212>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d003      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047c6:	e0fb      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1a3      	bne.n	800471a <HAL_SPI_TransmitReceive+0x164>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d19d      	bne.n	800471a <HAL_SPI_TransmitReceive+0x164>
 80047de:	e0df      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_SPI_TransmitReceive+0x23a>
 80047e8:	8a7b      	ldrh	r3, [r7, #18]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f040 80cb 	bne.w	8004986 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d912      	bls.n	8004820 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	881a      	ldrh	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	1c9a      	adds	r2, r3, #2
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b02      	subs	r3, #2
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800481e:	e0b2      	b.n	8004986 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004846:	e09e      	b.n	8004986 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d134      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x30a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02f      	beq.n	80048c0 <HAL_SPI_TransmitReceive+0x30a>
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b01      	cmp	r3, #1
 8004864:	d12c      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d912      	bls.n	8004896 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b02      	subs	r3, #2
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004894:	e012      	b.n	80048bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d148      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x3aa>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d042      	beq.n	8004960 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d923      	bls.n	800492e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	b292      	uxth	r2, r2
 80048f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b02      	subs	r3, #2
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d81f      	bhi.n	800495c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	e016      	b.n	800495c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f103 020c 	add.w	r2, r3, #12
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800495c:	2301      	movs	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004960:	f7fd fb8c 	bl	800207c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	429a      	cmp	r2, r3
 800496e:	d803      	bhi.n	8004978 <HAL_SPI_TransmitReceive+0x3c2>
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d102      	bne.n	800497e <HAL_SPI_TransmitReceive+0x3c8>
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004984:	e01c      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	f47f af5b 	bne.w	8004848 <HAL_SPI_TransmitReceive+0x292>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f47f af54 	bne.w	8004848 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f937 	bl	8004c18 <SPI_EndRxTxTransaction>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d006      	beq.n	80049be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	661a      	str	r2, [r3, #96]	; 0x60
 80049bc:	e000      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80049be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049ec:	f7fd fb46 	bl	800207c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049fc:	f7fd fb3e 	bl	800207c <HAL_GetTick>
 8004a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	015b      	lsls	r3, r3, #5
 8004a08:	0d1b      	lsrs	r3, r3, #20
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a12:	e054      	b.n	8004abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d050      	beq.n	8004abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a1c:	f7fd fb2e 	bl	800207c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d902      	bls.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d13d      	bne.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4a:	d111      	bne.n	8004a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a54:	d004      	beq.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d107      	bne.n	8004a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a78:	d10f      	bne.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e017      	b.n	8004ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d19b      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000008 	.word	0x20000008

08004aec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004afe:	f7fd fabd 	bl	800207c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b0e:	f7fd fab5 	bl	800207c <HAL_GetTick>
 8004b12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b1c:	4b3d      	ldr	r3, [pc, #244]	; (8004c14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00da      	lsls	r2, r3, #3
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	0d1b      	lsrs	r3, r3, #20
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b34:	e060      	b.n	8004bf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b3c:	d107      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d050      	beq.n	8004bf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b56:	f7fd fa91 	bl	800207c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d902      	bls.n	8004b6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d13d      	bne.n	8004be8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b84:	d111      	bne.n	8004baa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8e:	d004      	beq.n	8004b9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d107      	bne.n	8004baa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	d10f      	bne.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e010      	b.n	8004c0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d196      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000008 	.word	0x20000008

08004c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff ff5b 	bl	8004aec <SPI_WaitFifoStateUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e046      	b.n	8004cda <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <SPI_EndRxTxTransaction+0xcc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <SPI_EndRxTxTransaction+0xd0>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0d5b      	lsrs	r3, r3, #21
 8004c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d112      	bne.n	8004c92 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff feb0 	bl	80049dc <SPI_WaitFlagStateUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e023      	b.n	8004cda <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca8:	2b80      	cmp	r3, #128	; 0x80
 8004caa:	d0f2      	beq.n	8004c92 <SPI_EndRxTxTransaction+0x7a>
 8004cac:	e000      	b.n	8004cb0 <SPI_EndRxTxTransaction+0x98>
        break;
 8004cae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff ff15 	bl	8004aec <SPI_WaitFifoStateUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e000      	b.n	8004cda <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000008 	.word	0x20000008
 8004ce8:	165e9f81 	.word	0x165e9f81

08004cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e049      	b.n	8004d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f841 	bl	8004d9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 faa6 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e054      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d01d      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d115      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_TIM_Base_Start_IT+0xec>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d015      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d011      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40001800 	.word	0x40001800
 8004e9c:	00010007 	.word	0x00010007

08004ea0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e08f      	b.n	8004fd4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fc fee9 	bl	8001ca0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <HAL_TIM_Encoder_Init+0x13c>)
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 f9c3 	bl	800527c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <HAL_TIM_Encoder_Init+0x140>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_TIM_Encoder_Init+0x144>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <HAL_TIM_Encoder_Init+0x148>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	011a      	lsls	r2, r3, #4
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	031b      	lsls	r3, r3, #12
 8004f60:	4313      	orrs	r3, r2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	4313      	orrs	r3, r2
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	fffebff8 	.word	0xfffebff8
 8004fe0:	fffffcfc 	.word	0xfffffcfc
 8004fe4:	fffff3f3 	.word	0xfffff3f3
 8004fe8:	ffff0f0f 	.word	0xffff0f0f

08004fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0202 	mvn.w	r2, #2
 8005018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f905 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8f7 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f908 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0204 	mvn.w	r2, #4
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8db 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8cd 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f8de 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0208 	mvn.w	r2, #8
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8b1 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8a3 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8b4 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0210 	mvn.w	r2, #16
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2208      	movs	r2, #8
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f887 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f879 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f88a 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10e      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0201 	mvn.w	r2, #1
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc fc24 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9a8 	bl	80054ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051aa:	d10e      	bne.n	80051ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	d107      	bne.n	80051ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f99b 	bl	8005500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d10e      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d107      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f838 	bl	8005266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b20      	cmp	r3, #32
 8005202:	d10e      	bne.n	8005222 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b20      	cmp	r3, #32
 8005210:	d107      	bne.n	8005222 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0220 	mvn.w	r2, #32
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f95b 	bl	80054d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3a      	ldr	r2, [pc, #232]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <TIM_Base_SetConfig+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d027      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d023      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <TIM_Base_SetConfig+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <TIM_Base_SetConfig+0x130>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	615a      	str	r2, [r3, #20]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40001800 	.word	0x40001800
 80053b4:	40001c00 	.word	0x40001c00
 80053b8:	40002000 	.word	0x40002000

080053bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e06d      	b.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a30      	ldr	r2, [pc, #192]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800540e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a20      	ldr	r2, [pc, #128]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d01d      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10c      	bne.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40001800 	.word	0x40001800

080054d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005526:	2b84      	cmp	r3, #132	; 0x84
 8005528:	d005      	beq.n	8005536 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800552a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	3303      	adds	r3, #3
 8005534:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554a:	f3ef 8305 	mrs	r3, IPSR
 800554e:	607b      	str	r3, [r7, #4]
  return(result);
 8005550:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800556c:	f001 f8b6 	bl	80066dc <vTaskStartScheduler>
  
  return osOK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	bd80      	pop	{r7, pc}

08005576 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800557a:	f7ff ffe3 	bl	8005544 <inHandlerMode>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005584:	f001 f9b2 	bl	80068ec <xTaskGetTickCountFromISR>
 8005588:	4603      	mov	r3, r0
 800558a:	e002      	b.n	8005592 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800558c:	f001 f99e 	bl	80068cc <xTaskGetTickCount>
 8005590:	4603      	mov	r3, r0
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	bd80      	pop	{r7, pc}

08005596 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005598:	b087      	sub	sp, #28
 800559a:	af02      	add	r7, sp, #8
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685c      	ldr	r4, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ac:	b29e      	uxth	r6, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff ffad 	bl	8005514 <makeFreeRtosPriority>
 80055ba:	4602      	mov	r2, r0
 80055bc:	f107 030c 	add.w	r3, r7, #12
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	9200      	str	r2, [sp, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	4632      	mov	r2, r6
 80055c8:	4629      	mov	r1, r5
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 fe98 	bl	8006300 <xTaskCreate>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d001      	beq.n	80055da <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80055da:	68fb      	ldr	r3, [r7, #12]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <osDelay+0x16>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	e000      	b.n	80055fc <osDelay+0x18>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f837 	bl	8006670 <vTaskDelay>
  
  return osOK;
 8005602:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	4619      	mov	r1, r3
 8005622:	f000 f9ed 	bl	8005a00 <xQueueGenericCreate>
 8005626:	4603      	mov	r3, r0
#endif
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <osMessagePut+0x1e>
    ticks = 1;
 800564a:	2301      	movs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800564e:	f7ff ff79 	bl	8005544 <inHandlerMode>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d018      	beq.n	800568a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005658:	f107 0210 	add.w	r2, r7, #16
 800565c:	f107 0108 	add.w	r1, r7, #8
 8005660:	2300      	movs	r3, #0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fb30 	bl	8005cc8 <xQueueGenericSendFromISR>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <osMessagePut+0x42>
      return osErrorOS;
 800566e:	23ff      	movs	r3, #255	; 0xff
 8005670:	e018      	b.n	80056a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d014      	beq.n	80056a2 <osMessagePut+0x72>
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <osMessagePut+0x7c>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	e00b      	b.n	80056a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800568a:	f107 0108 	add.w	r1, r7, #8
 800568e:	2300      	movs	r3, #0
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fa12 	bl	8005abc <xQueueGenericSend>
 8005698:	4603      	mov	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d001      	beq.n	80056a2 <osMessagePut+0x72>
      return osErrorOS;
 800569e:	23ff      	movs	r3, #255	; 0xff
 80056a0:	e000      	b.n	80056a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b08b      	sub	sp, #44	; 0x2c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	617b      	str	r3, [r7, #20]
    return event;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	461c      	mov	r4, r3
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056de:	e054      	b.n	800578a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d103      	bne.n	80056f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
 80056f6:	e009      	b.n	800570c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d006      	beq.n	800570c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <osMessageGet+0x5c>
      ticks = 1;
 8005708:	2301      	movs	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800570c:	f7ff ff1a 	bl	8005544 <inHandlerMode>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01c      	beq.n	8005750 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005716:	f107 0220 	add.w	r2, r7, #32
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	68b8      	ldr	r0, [r7, #8]
 8005724:	f000 fc56 	bl	8005fd4 <xQueueReceiveFromISR>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d102      	bne.n	8005734 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800572e:	2310      	movs	r3, #16
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e001      	b.n	8005738 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01d      	beq.n	800577a <osMessageGet+0xca>
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <osMessageGet+0xe4>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	e014      	b.n	800577a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	3304      	adds	r3, #4
 8005756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005758:	4619      	mov	r1, r3
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f000 fb54 	bl	8005e08 <xQueueReceive>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d102      	bne.n	800576c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005766:	2310      	movs	r3, #16
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e006      	b.n	800577a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <osMessageGet+0xc6>
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <osMessageGet+0xc8>
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	461c      	mov	r4, r3
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	372c      	adds	r7, #44	; 0x2c
 800578e:	46bd      	mov	sp, r7
 8005790:	bd90      	pop	{r4, r7, pc}
 8005792:	bf00      	nop
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <osDelayUntil+0x18>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	e000      	b.n	80057b2 <osDelayUntil+0x1a>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fed7 	bl	8006568 <vTaskDelayUntil>
  
  return osOK;
 80057ba:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0208 	add.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 0208 	add.w	r2, r3, #8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f103 0208 	add.w	r2, r3, #8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d103      	bne.n	8005886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e00c      	b.n	80058a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3308      	adds	r3, #8
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e002      	b.n	8005894 <vListInsert+0x2e>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d2f6      	bcs.n	800588e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6892      	ldr	r2, [r2, #8]
 80058ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6852      	ldr	r2, [r2, #4]
 80058f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d103      	bne.n	800590c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	b672      	cpsid	i
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	b662      	cpsie	i
 8005954:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800595a:	f001 fcd7 	bl	800730c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	3b01      	subs	r3, #1
 800598c:	68f9      	ldr	r1, [r7, #12]
 800598e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	22ff      	movs	r2, #255	; 0xff
 800599e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	22ff      	movs	r2, #255	; 0xff
 80059a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d114      	bne.n	80059da <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3310      	adds	r3, #16
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 f8e5 	bl	8006b8c <xTaskRemoveFromEventList>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d012      	beq.n	80059ee <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <xQueueGenericReset+0xd0>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	e009      	b.n	80059ee <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3310      	adds	r3, #16
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fef0 	bl	80057c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3324      	adds	r3, #36	; 0x24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff feeb 	bl	80057c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ee:	f001 fcc1 	bl	8007374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059f2:	2301      	movs	r3, #1
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10c      	bne.n	8005a2e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	b672      	cpsid	i
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	b662      	cpsie	i
 8005a28:	613b      	str	r3, [r7, #16]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e004      	b.n	8005a44 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	3348      	adds	r3, #72	; 0x48
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 fd8b 	bl	8007564 <pvPortMalloc>
 8005a4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3348      	adds	r3, #72	; 0x48
 8005a5e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a60:	79fa      	ldrb	r2, [r7, #7]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4613      	mov	r3, r2
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f805 	bl	8005a7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a72:	69bb      	ldr	r3, [r7, #24]
	}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3720      	adds	r7, #32
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005aaa:	2101      	movs	r1, #1
 8005aac:	69b8      	ldr	r0, [r7, #24]
 8005aae:	f7ff ff3d 	bl	800592c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	; 0x38
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10c      	bne.n	8005af2 <xQueueGenericSend+0x36>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	b672      	cpsid	i
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	b662      	cpsie	i
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005aee:	bf00      	nop
 8005af0:	e7fe      	b.n	8005af0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <xQueueGenericSend+0x44>
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <xQueueGenericSend+0x48>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <xQueueGenericSend+0x4a>
 8005b04:	2300      	movs	r3, #0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <xQueueGenericSend+0x68>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	b672      	cpsid	i
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	b662      	cpsie	i
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSend+0x76>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericSend+0x7a>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericSend+0x7c>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10c      	bne.n	8005b56 <xQueueGenericSend+0x9a>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	b672      	cpsid	i
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	b662      	cpsie	i
 8005b50:	623b      	str	r3, [r7, #32]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b56:	f001 f9bb 	bl	8006ed0 <xTaskGetSchedulerState>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <xQueueGenericSend+0xaa>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <xQueueGenericSend+0xae>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <xQueueGenericSend+0xb0>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10c      	bne.n	8005b8a <xQueueGenericSend+0xce>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	b672      	cpsid	i
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	b662      	cpsie	i
 8005b84:	61fb      	str	r3, [r7, #28]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b8a:	f001 fbbf 	bl	800730c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <xQueueGenericSend+0xe4>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d129      	bne.n	8005bf4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba6:	f000 fa9b 	bl	80060e0 <prvCopyDataToQueue>
 8005baa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	3324      	adds	r3, #36	; 0x24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 ffe7 	bl	8006b8c <xTaskRemoveFromEventList>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <xQueueGenericSend+0x208>)
 8005bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	e00a      	b.n	8005bec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bdc:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <xQueueGenericSend+0x208>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bec:	f001 fbc2 	bl	8007374 <vPortExitCritical>
				return pdPASS;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e063      	b.n	8005cbc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bfa:	f001 fbbb 	bl	8007374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e05c      	b.n	8005cbc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c08:	f107 0314 	add.w	r3, r7, #20
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f821 	bl	8006c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c16:	f001 fbad 	bl	8007374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c1a:	f000 fdab 	bl	8006774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c1e:	f001 fb75 	bl	800730c <vPortEnterCritical>
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c28:	b25b      	sxtb	r3, r3
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d103      	bne.n	8005c38 <xQueueGenericSend+0x17c>
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d103      	bne.n	8005c4e <xQueueGenericSend+0x192>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c4e:	f001 fb91 	bl	8007374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c52:	1d3a      	adds	r2, r7, #4
 8005c54:	f107 0314 	add.w	r3, r7, #20
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 f810 	bl	8006c80 <xTaskCheckForTimeOut>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d124      	bne.n	8005cb0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c68:	f000 fb32 	bl	80062d0 <prvIsQueueFull>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d018      	beq.n	8005ca4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	3310      	adds	r3, #16
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 ff60 	bl	8006b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c82:	f000 fabd 	bl	8006200 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c86:	f000 fd83 	bl	8006790 <xTaskResumeAll>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f47f af7c 	bne.w	8005b8a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <xQueueGenericSend+0x208>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	e772      	b.n	8005b8a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca6:	f000 faab 	bl	8006200 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005caa:	f000 fd71 	bl	8006790 <xTaskResumeAll>
 8005cae:	e76c      	b.n	8005b8a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb2:	f000 faa5 	bl	8006200 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb6:	f000 fd6b 	bl	8006790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3738      	adds	r7, #56	; 0x38
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10c      	bne.n	8005cfa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	b672      	cpsid	i
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	b662      	cpsie	i
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <xQueueGenericSendFromISR+0x40>
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <xQueueGenericSendFromISR+0x44>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <xQueueGenericSendFromISR+0x46>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	b672      	cpsid	i
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	b662      	cpsie	i
 8005d26:	623b      	str	r3, [r7, #32]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d103      	bne.n	8005d3a <xQueueGenericSendFromISR+0x72>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <xQueueGenericSendFromISR+0x76>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueGenericSendFromISR+0x78>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10c      	bne.n	8005d5e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	61fb      	str	r3, [r7, #28]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d5e:	f001 fbbd 	bl	80074dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d62:	f3ef 8211 	mrs	r2, BASEPRI
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	b672      	cpsid	i
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	b662      	cpsie	i
 8005d7a:	61ba      	str	r2, [r7, #24]
 8005d7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <xQueueGenericSendFromISR+0xcc>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d12c      	bne.n	8005dee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005da4:	f000 f99c 	bl	80060e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005da8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d112      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	3324      	adds	r3, #36	; 0x24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fee4 	bl	8006b8c <xTaskRemoveFromEventList>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00e      	beq.n	8005de8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e007      	b.n	8005de8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	b25a      	sxtb	r2, r3
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005de8:	2301      	movs	r3, #1
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005dec:	e001      	b.n	8005df2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3738      	adds	r7, #56	; 0x38
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <xQueueReceive+0x34>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	623b      	str	r3, [r7, #32]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <xQueueReceive+0x42>
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <xQueueReceive+0x46>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <xQueueReceive+0x48>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10c      	bne.n	8005e6e <xQueueReceive+0x66>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	b672      	cpsid	i
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	b662      	cpsie	i
 8005e68:	61fb      	str	r3, [r7, #28]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e6e:	f001 f82f 	bl	8006ed0 <xTaskGetSchedulerState>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <xQueueReceive+0x76>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <xQueueReceive+0x7a>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <xQueueReceive+0x7c>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10c      	bne.n	8005ea2 <xQueueReceive+0x9a>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	b672      	cpsid	i
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	b662      	cpsie	i
 8005e9c:	61bb      	str	r3, [r7, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ea2:	f001 fa33 	bl	800730c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01f      	beq.n	8005ef2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb6:	f000 f97d 	bl	80061b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00f      	beq.n	8005eea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	3310      	adds	r3, #16
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fe5c 	bl	8006b8c <xTaskRemoveFromEventList>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005eda:	4b3d      	ldr	r3, [pc, #244]	; (8005fd0 <xQueueReceive+0x1c8>)
 8005edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005eea:	f001 fa43 	bl	8007374 <vPortExitCritical>
				return pdPASS;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e069      	b.n	8005fc6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d103      	bne.n	8005f00 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ef8:	f001 fa3c 	bl	8007374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e062      	b.n	8005fc6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f06:	f107 0310 	add.w	r3, r7, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fea2 	bl	8006c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f14:	f001 fa2e 	bl	8007374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f18:	f000 fc2c 	bl	8006774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f1c:	f001 f9f6 	bl	800730c <vPortEnterCritical>
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d103      	bne.n	8005f36 <xQueueReceive+0x12e>
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d103      	bne.n	8005f4c <xQueueReceive+0x144>
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f4c:	f001 fa12 	bl	8007374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f50:	1d3a      	adds	r2, r7, #4
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fe91 	bl	8006c80 <xTaskCheckForTimeOut>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d123      	bne.n	8005fac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f66:	f000 f99d 	bl	80062a4 <prvIsQueueEmpty>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d017      	beq.n	8005fa0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	3324      	adds	r3, #36	; 0x24
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fde1 	bl	8006b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f80:	f000 f93e 	bl	8006200 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f84:	f000 fc04 	bl	8006790 <xTaskResumeAll>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d189      	bne.n	8005ea2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <xQueueReceive+0x1c8>)
 8005f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	e780      	b.n	8005ea2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa2:	f000 f92d 	bl	8006200 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fa6:	f000 fbf3 	bl	8006790 <xTaskResumeAll>
 8005faa:	e77a      	b.n	8005ea2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fae:	f000 f927 	bl	8006200 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fb2:	f000 fbed 	bl	8006790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	f000 f974 	bl	80062a4 <prvIsQueueEmpty>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f43f af6f 	beq.w	8005ea2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3730      	adds	r7, #48	; 0x30
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	e000ed04 	.word	0xe000ed04

08005fd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	; 0x38
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10c      	bne.n	8006004 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	b672      	cpsid	i
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	b662      	cpsie	i
 8005ffe:	623b      	str	r3, [r7, #32]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <xQueueReceiveFromISR+0x3e>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueReceiveFromISR+0x42>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueReceiveFromISR+0x44>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10c      	bne.n	8006036 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	b672      	cpsid	i
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	b662      	cpsie	i
 8006030:	61fb      	str	r3, [r7, #28]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006036:	f001 fa51 	bl	80074dc <vPortValidateInterruptPriority>
	__asm volatile
 800603a:	f3ef 8211 	mrs	r2, BASEPRI
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	b672      	cpsid	i
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	b662      	cpsie	i
 8006052:	61ba      	str	r2, [r7, #24]
 8006054:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006056:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d02f      	beq.n	80060c6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800606c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006074:	f000 f89e 	bl	80061b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	1e5a      	subs	r2, r3, #1
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d112      	bne.n	80060b0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	3310      	adds	r3, #16
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fd78 	bl	8006b8c <xTaskRemoveFromEventList>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00e      	beq.n	80060c0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e007      	b.n	80060c0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060b4:	3301      	adds	r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	b25a      	sxtb	r2, r3
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060c0:	2301      	movs	r3, #1
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
 80060c4:	e001      	b.n	80060ca <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f383 8811 	msr	BASEPRI, r3
}
 80060d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3738      	adds	r7, #56	; 0x38
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d14d      	bne.n	80061a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fefe 	bl	8006f0c <xTaskPriorityDisinherit>
 8006110:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	e043      	b.n	80061a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d119      	bne.n	8006154 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6858      	ldr	r0, [r3, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	461a      	mov	r2, r3
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	f002 fc36 	bl	800899c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	441a      	add	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d32b      	bcc.n	80061a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	e026      	b.n	80061a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68d8      	ldr	r0, [r3, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	461a      	mov	r2, r3
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	f002 fc1c 	bl	800899c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	425b      	negs	r3, r3
 800616e:	441a      	add	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d207      	bcs.n	8006190 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	425b      	negs	r3, r3
 800618a:	441a      	add	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d105      	bne.n	80061a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3b01      	subs	r3, #1
 80061a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061aa:	697b      	ldr	r3, [r7, #20]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d018      	beq.n	80061f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	441a      	add	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d303      	bcc.n	80061e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68d9      	ldr	r1, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	461a      	mov	r2, r3
 80061f2:	6838      	ldr	r0, [r7, #0]
 80061f4:	f002 fbd2 	bl	800899c <memcpy>
	}
}
 80061f8:	bf00      	nop
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006208:	f001 f880 	bl	800730c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006212:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006214:	e011      	b.n	800623a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d012      	beq.n	8006244 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3324      	adds	r3, #36	; 0x24
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fcb2 	bl	8006b8c <xTaskRemoveFromEventList>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800622e:	f000 fd8d 	bl	8006d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	3b01      	subs	r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dce9      	bgt.n	8006216 <prvUnlockQueue+0x16>
 8006242:	e000      	b.n	8006246 <prvUnlockQueue+0x46>
					break;
 8006244:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	22ff      	movs	r2, #255	; 0xff
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800624e:	f001 f891 	bl	8007374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006252:	f001 f85b 	bl	800730c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800625c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800625e:	e011      	b.n	8006284 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3310      	adds	r3, #16
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fc8d 	bl	8006b8c <xTaskRemoveFromEventList>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006278:	f000 fd68 	bl	8006d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	3b01      	subs	r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006284:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006288:	2b00      	cmp	r3, #0
 800628a:	dce9      	bgt.n	8006260 <prvUnlockQueue+0x60>
 800628c:	e000      	b.n	8006290 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800628e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	22ff      	movs	r2, #255	; 0xff
 8006294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006298:	f001 f86c 	bl	8007374 <vPortExitCritical>
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062ac:	f001 f82e 	bl	800730c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062b8:	2301      	movs	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e001      	b.n	80062c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062c2:	f001 f857 	bl	8007374 <vPortExitCritical>

	return xReturn;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d8:	f001 f818 	bl	800730c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d102      	bne.n	80062ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e001      	b.n	80062f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062f2:	f001 f83f 	bl	8007374 <vPortExitCritical>

	return xReturn;
 80062f6:	68fb      	ldr	r3, [r7, #12]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08c      	sub	sp, #48	; 0x30
 8006304:	af04      	add	r7, sp, #16
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	4613      	mov	r3, r2
 800630e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f925 	bl	8007564 <pvPortMalloc>
 800631a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006322:	2054      	movs	r0, #84	; 0x54
 8006324:	f001 f91e 	bl	8007564 <pvPortMalloc>
 8006328:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
 8006336:	e005      	b.n	8006344 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006338:	6978      	ldr	r0, [r7, #20]
 800633a:	f001 f9dd 	bl	80076f8 <vPortFree>
 800633e:	e001      	b.n	8006344 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d013      	beq.n	8006372 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800634a:	88fa      	ldrh	r2, [r7, #6]
 800634c:	2300      	movs	r3, #0
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f80e 	bl	8006382 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006366:	69f8      	ldr	r0, [r7, #28]
 8006368:	f000 f894 	bl	8006494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800636c:	2301      	movs	r3, #1
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	e002      	b.n	8006378 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006378:	69bb      	ldr	r3, [r7, #24]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b088      	sub	sp, #32
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800639a:	440b      	add	r3, r1
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f023 0307 	bic.w	r3, r3, #7
 80063a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <prvInitialiseNewTask+0x4c>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	b672      	cpsid	i
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	b662      	cpsie	i
 80063c8:	617b      	str	r3, [r7, #20]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01f      	beq.n	8006414 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e012      	b.n	8006400 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	7819      	ldrb	r1, [r3, #0]
 80063e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	3334      	adds	r3, #52	; 0x34
 80063ea:	460a      	mov	r2, r1
 80063ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3301      	adds	r3, #1
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b0f      	cmp	r3, #15
 8006404:	d9e9      	bls.n	80063da <prvInitialiseNewTask+0x58>
 8006406:	e000      	b.n	800640a <prvInitialiseNewTask+0x88>
			{
				break;
 8006408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006412:	e003      	b.n	800641c <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	2b06      	cmp	r3, #6
 8006420:	d901      	bls.n	8006426 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006422:	2306      	movs	r3, #6
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2200      	movs	r2, #0
 8006436:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff f9e1 	bl	8005804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	3318      	adds	r3, #24
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f9dc 	bl	8005804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	f1c3 0207 	rsb	r2, r3, #7
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	2200      	movs	r2, #0
 8006466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	69b8      	ldr	r0, [r7, #24]
 8006476:	f000 fe39 	bl	80070ec <pxPortInitialiseStack>
 800647a:	4602      	mov	r2, r0
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800648c:	bf00      	nop
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800649c:	f000 ff36 	bl	800730c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064a0:	4b2a      	ldr	r3, [pc, #168]	; (800654c <prvAddNewTaskToReadyList+0xb8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	4a29      	ldr	r2, [pc, #164]	; (800654c <prvAddNewTaskToReadyList+0xb8>)
 80064a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064aa:	4b29      	ldr	r3, [pc, #164]	; (8006550 <prvAddNewTaskToReadyList+0xbc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064b2:	4a27      	ldr	r2, [pc, #156]	; (8006550 <prvAddNewTaskToReadyList+0xbc>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <prvAddNewTaskToReadyList+0xb8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d110      	bne.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064c0:	f000 fc68 	bl	8006d94 <prvInitialiseTaskLists>
 80064c4:	e00d      	b.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064c6:	4b23      	ldr	r3, [pc, #140]	; (8006554 <prvAddNewTaskToReadyList+0xc0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ce:	4b20      	ldr	r3, [pc, #128]	; (8006550 <prvAddNewTaskToReadyList+0xbc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d802      	bhi.n	80064e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064dc:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <prvAddNewTaskToReadyList+0xbc>)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <prvAddNewTaskToReadyList+0xc4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <prvAddNewTaskToReadyList+0xc4>)
 80064ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	2201      	movs	r2, #1
 80064f2:	409a      	lsls	r2, r3
 80064f4:	4b19      	ldr	r3, [pc, #100]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <prvAddNewTaskToReadyList+0xc8>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4a15      	ldr	r2, [pc, #84]	; (8006560 <prvAddNewTaskToReadyList+0xcc>)
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7ff f982 	bl	800581e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800651a:	f000 ff2b 	bl	8007374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800651e:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <prvAddNewTaskToReadyList+0xc0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <prvAddNewTaskToReadyList+0xbc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d207      	bcs.n	8006544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <prvAddNewTaskToReadyList+0xd0>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000758 	.word	0x20000758
 8006550:	20000658 	.word	0x20000658
 8006554:	20000764 	.word	0x20000764
 8006558:	20000774 	.word	0x20000774
 800655c:	20000760 	.word	0x20000760
 8006560:	2000065c 	.word	0x2000065c
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10c      	bne.n	8006596 <vTaskDelayUntil+0x2e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	b672      	cpsid	i
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	b662      	cpsie	i
 8006590:	617b      	str	r3, [r7, #20]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10c      	bne.n	80065b6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	b672      	cpsid	i
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	b662      	cpsie	i
 80065b0:	613b      	str	r3, [r7, #16]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <vTaskDelayUntil+0xfc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00c      	beq.n	80065d8 <vTaskDelayUntil+0x70>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	b672      	cpsid	i
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	b662      	cpsie	i
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 80065d8:	f000 f8cc 	bl	8006774 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80065dc:	4b22      	ldr	r3, [pc, #136]	; (8006668 <vTaskDelayUntil+0x100>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d20b      	bcs.n	800660e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d211      	bcs.n	8006624 <vTaskDelayUntil+0xbc>
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	429a      	cmp	r2, r3
 8006606:	d90d      	bls.n	8006624 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
 800660c:	e00a      	b.n	8006624 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	429a      	cmp	r2, r3
 8006616:	d303      	bcc.n	8006620 <vTaskDelayUntil+0xb8>
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	429a      	cmp	r2, r3
 800661e:	d901      	bls.n	8006624 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8006620:	2301      	movs	r3, #1
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d006      	beq.n	800663e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fcf1 	bl	8007020 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800663e:	f000 f8a7 	bl	8006790 <xTaskResumeAll>
 8006642:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d107      	bne.n	800665a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800664a:	4b08      	ldr	r3, [pc, #32]	; (800666c <vTaskDelayUntil+0x104>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800665a:	bf00      	nop
 800665c:	3728      	adds	r7, #40	; 0x28
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000780 	.word	0x20000780
 8006668:	2000075c 	.word	0x2000075c
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d019      	beq.n	80066b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <vTaskDelay+0x64>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <vTaskDelay+0x34>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	b672      	cpsid	i
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	b662      	cpsie	i
 800669e:	60bb      	str	r3, [r7, #8]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80066a4:	f000 f866 	bl	8006774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066a8:	2100      	movs	r1, #0
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fcb8 	bl	8007020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066b0:	f000 f86e 	bl	8006790 <xTaskResumeAll>
 80066b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d107      	bne.n	80066cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <vTaskDelay+0x68>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000780 	.word	0x20000780
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <vTaskStartScheduler+0x80>)
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	491c      	ldr	r1, [pc, #112]	; (8006760 <vTaskStartScheduler+0x84>)
 80066f0:	481c      	ldr	r0, [pc, #112]	; (8006764 <vTaskStartScheduler+0x88>)
 80066f2:	f7ff fe05 	bl	8006300 <xTaskCreate>
 80066f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d118      	bne.n	8006730 <vTaskStartScheduler+0x54>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	b672      	cpsid	i
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	b662      	cpsie	i
 8006712:	60bb      	str	r3, [r7, #8]
}
 8006714:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006716:	4b14      	ldr	r3, [pc, #80]	; (8006768 <vTaskStartScheduler+0x8c>)
 8006718:	f04f 32ff 	mov.w	r2, #4294967295
 800671c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <vTaskStartScheduler+0x90>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <vTaskStartScheduler+0x94>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800672a:	f000 fd71 	bl	8007210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800672e:	e010      	b.n	8006752 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d10c      	bne.n	8006752 <vTaskStartScheduler+0x76>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	b672      	cpsid	i
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	b662      	cpsie	i
 800674c:	607b      	str	r3, [r7, #4]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <vTaskStartScheduler+0x74>
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	2000077c 	.word	0x2000077c
 8006760:	08008ab8 	.word	0x08008ab8
 8006764:	08006d65 	.word	0x08006d65
 8006768:	20000778 	.word	0x20000778
 800676c:	20000764 	.word	0x20000764
 8006770:	2000075c 	.word	0x2000075c

08006774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <vTaskSuspendAll+0x18>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	4a03      	ldr	r2, [pc, #12]	; (800678c <vTaskSuspendAll+0x18>)
 8006780:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006782:	bf00      	nop
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20000780 	.word	0x20000780

08006790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800679e:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <xTaskResumeAll+0x118>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <xTaskResumeAll+0x30>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	b672      	cpsid	i
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	b662      	cpsie	i
 80067ba:	603b      	str	r3, [r7, #0]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067c0:	f000 fda4 	bl	800730c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067c4:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <xTaskResumeAll+0x118>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	4a37      	ldr	r2, [pc, #220]	; (80068a8 <xTaskResumeAll+0x118>)
 80067cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ce:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <xTaskResumeAll+0x118>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d161      	bne.n	800689a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067d6:	4b35      	ldr	r3, [pc, #212]	; (80068ac <xTaskResumeAll+0x11c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d05d      	beq.n	800689a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067de:	e02e      	b.n	800683e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e0:	4b33      	ldr	r3, [pc, #204]	; (80068b0 <xTaskResumeAll+0x120>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3318      	adds	r3, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff f873 	bl	80058d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff f86e 	bl	80058d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <xTaskResumeAll+0x124>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <xTaskResumeAll+0x124>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <xTaskResumeAll+0x128>)
 800681c:	441a      	add	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7fe fffa 	bl	800581e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682e:	4b23      	ldr	r3, [pc, #140]	; (80068bc <xTaskResumeAll+0x12c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	429a      	cmp	r2, r3
 8006836:	d302      	bcc.n	800683e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006838:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <xTaskResumeAll+0x130>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <xTaskResumeAll+0x120>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1cc      	bne.n	80067e0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800684c:	f000 fb20 	bl	8006e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006850:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <xTaskResumeAll+0x134>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800685c:	f000 f858 	bl	8006910 <xTaskIncrementTick>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <xTaskResumeAll+0x130>)
 8006868:	2201      	movs	r2, #1
 800686a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3b01      	subs	r3, #1
 8006870:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1f1      	bne.n	800685c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006878:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <xTaskResumeAll+0x134>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <xTaskResumeAll+0x130>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006886:	2301      	movs	r3, #1
 8006888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <xTaskResumeAll+0x138>)
 800688c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f000 fd6b 	bl	8007374 <vPortExitCritical>

	return xAlreadyYielded;
 800689e:	68bb      	ldr	r3, [r7, #8]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000780 	.word	0x20000780
 80068ac:	20000758 	.word	0x20000758
 80068b0:	20000718 	.word	0x20000718
 80068b4:	20000760 	.word	0x20000760
 80068b8:	2000065c 	.word	0x2000065c
 80068bc:	20000658 	.word	0x20000658
 80068c0:	2000076c 	.word	0x2000076c
 80068c4:	20000768 	.word	0x20000768
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <xTaskGetTickCount+0x1c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068d8:	687b      	ldr	r3, [r7, #4]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	2000075c 	.word	0x2000075c

080068ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068f2:	f000 fdf3 	bl	80074dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80068f6:	2300      	movs	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80068fa:	4b04      	ldr	r3, [pc, #16]	; (800690c <xTaskGetTickCountFromISR+0x20>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006900:	683b      	ldr	r3, [r7, #0]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000075c 	.word	0x2000075c

08006910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800691a:	4b4f      	ldr	r3, [pc, #316]	; (8006a58 <xTaskIncrementTick+0x148>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 808a 	bne.w	8006a38 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006924:	4b4d      	ldr	r3, [pc, #308]	; (8006a5c <xTaskIncrementTick+0x14c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800692c:	4a4b      	ldr	r2, [pc, #300]	; (8006a5c <xTaskIncrementTick+0x14c>)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d122      	bne.n	800697e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006938:	4b49      	ldr	r3, [pc, #292]	; (8006a60 <xTaskIncrementTick+0x150>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	b672      	cpsid	i
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	b662      	cpsie	i
 8006956:	603b      	str	r3, [r7, #0]
}
 8006958:	bf00      	nop
 800695a:	e7fe      	b.n	800695a <xTaskIncrementTick+0x4a>
 800695c:	4b40      	ldr	r3, [pc, #256]	; (8006a60 <xTaskIncrementTick+0x150>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	4b40      	ldr	r3, [pc, #256]	; (8006a64 <xTaskIncrementTick+0x154>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a3e      	ldr	r2, [pc, #248]	; (8006a60 <xTaskIncrementTick+0x150>)
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4a3e      	ldr	r2, [pc, #248]	; (8006a64 <xTaskIncrementTick+0x154>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <xTaskIncrementTick+0x158>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	4a3c      	ldr	r2, [pc, #240]	; (8006a68 <xTaskIncrementTick+0x158>)
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	f000 fa89 	bl	8006e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800697e:	4b3b      	ldr	r3, [pc, #236]	; (8006a6c <xTaskIncrementTick+0x15c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	d348      	bcc.n	8006a1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <xTaskIncrementTick+0x150>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006992:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <xTaskIncrementTick+0x15c>)
 8006994:	f04f 32ff 	mov.w	r2, #4294967295
 8006998:	601a      	str	r2, [r3, #0]
					break;
 800699a:	e03e      	b.n	8006a1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699c:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <xTaskIncrementTick+0x150>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d203      	bcs.n	80069bc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069b4:	4a2d      	ldr	r2, [pc, #180]	; (8006a6c <xTaskIncrementTick+0x15c>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069ba:	e02e      	b.n	8006a1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe ff89 	bl	80058d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3318      	adds	r3, #24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe ff80 	bl	80058d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	2201      	movs	r2, #1
 80069de:	409a      	lsls	r2, r3
 80069e0:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <xTaskIncrementTick+0x160>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <xTaskIncrementTick+0x160>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <xTaskIncrementTick+0x164>)
 80069f8:	441a      	add	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7fe ff0c 	bl	800581e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <xTaskIncrementTick+0x168>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3b9      	bcc.n	8006988 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a18:	e7b6      	b.n	8006988 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <xTaskIncrementTick+0x168>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4914      	ldr	r1, [pc, #80]	; (8006a74 <xTaskIncrementTick+0x164>)
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d907      	bls.n	8006a42 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006a32:	2301      	movs	r3, #1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e004      	b.n	8006a42 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <xTaskIncrementTick+0x16c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <xTaskIncrementTick+0x16c>)
 8006a40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <xTaskIncrementTick+0x170>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a4e:	697b      	ldr	r3, [r7, #20]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000780 	.word	0x20000780
 8006a5c:	2000075c 	.word	0x2000075c
 8006a60:	20000710 	.word	0x20000710
 8006a64:	20000714 	.word	0x20000714
 8006a68:	20000770 	.word	0x20000770
 8006a6c:	20000778 	.word	0x20000778
 8006a70:	20000760 	.word	0x20000760
 8006a74:	2000065c 	.word	0x2000065c
 8006a78:	20000658 	.word	0x20000658
 8006a7c:	20000768 	.word	0x20000768
 8006a80:	2000076c 	.word	0x2000076c

08006a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a8a:	4b28      	ldr	r3, [pc, #160]	; (8006b2c <vTaskSwitchContext+0xa8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a92:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <vTaskSwitchContext+0xac>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a98:	e041      	b.n	8006b1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a9a:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <vTaskSwitchContext+0xac>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <vTaskSwitchContext+0xb0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	f1c3 031f 	rsb	r3, r3, #31
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	4920      	ldr	r1, [pc, #128]	; (8006b38 <vTaskSwitchContext+0xb4>)
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <vTaskSwitchContext+0x60>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	b672      	cpsid	i
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	b662      	cpsie	i
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <vTaskSwitchContext+0x5e>
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <vTaskSwitchContext+0xb4>)
 8006af0:	4413      	add	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	605a      	str	r2, [r3, #4]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3308      	adds	r3, #8
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d104      	bne.n	8006b14 <vTaskSwitchContext+0x90>
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	605a      	str	r2, [r3, #4]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <vTaskSwitchContext+0xb8>)
 8006b1c:	6013      	str	r3, [r2, #0]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000780 	.word	0x20000780
 8006b30:	2000076c 	.word	0x2000076c
 8006b34:	20000760 	.word	0x20000760
 8006b38:	2000065c 	.word	0x2000065c
 8006b3c:	20000658 	.word	0x20000658

08006b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10c      	bne.n	8006b6a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	b672      	cpsid	i
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	b662      	cpsie	i
 8006b64:	60fb      	str	r3, [r7, #12]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <vTaskPlaceOnEventList+0x48>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3318      	adds	r3, #24
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fe fe77 	bl	8005866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b78:	2101      	movs	r1, #1
 8006b7a:	6838      	ldr	r0, [r7, #0]
 8006b7c:	f000 fa50 	bl	8007020 <prvAddCurrentTaskToDelayedList>
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000658 	.word	0x20000658

08006b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10c      	bne.n	8006bbc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	b672      	cpsid	i
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	b662      	cpsie	i
 8006bb6:	60fb      	str	r3, [r7, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3318      	adds	r3, #24
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fe89 	bl	80058d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <xTaskRemoveFromEventList+0xb0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11c      	bne.n	8006c08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fe80 	bl	80058d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	2201      	movs	r2, #1
 8006bde:	409a      	lsls	r2, r3
 8006be0:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <xTaskRemoveFromEventList+0xb4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <xTaskRemoveFromEventList+0xb4>)
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <xTaskRemoveFromEventList+0xb8>)
 8006bf8:	441a      	add	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f7fe fe0c 	bl	800581e <vListInsertEnd>
 8006c06:	e005      	b.n	8006c14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	480e      	ldr	r0, [pc, #56]	; (8006c48 <xTaskRemoveFromEventList+0xbc>)
 8006c10:	f7fe fe05 	bl	800581e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <xTaskRemoveFromEventList+0xc0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d905      	bls.n	8006c2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c26:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <xTaskRemoveFromEventList+0xc4>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e001      	b.n	8006c32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c32:	697b      	ldr	r3, [r7, #20]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000780 	.word	0x20000780
 8006c40:	20000760 	.word	0x20000760
 8006c44:	2000065c 	.word	0x2000065c
 8006c48:	20000718 	.word	0x20000718
 8006c4c:	20000658 	.word	0x20000658
 8006c50:	2000076c 	.word	0x2000076c

08006c54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <vTaskInternalSetTimeOutState+0x24>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <vTaskInternalSetTimeOutState+0x28>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	605a      	str	r2, [r3, #4]
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	20000770 	.word	0x20000770
 8006c7c:	2000075c 	.word	0x2000075c

08006c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10c      	bne.n	8006caa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	b672      	cpsid	i
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	b662      	cpsie	i
 8006ca4:	613b      	str	r3, [r7, #16]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10c      	bne.n	8006cca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	60fb      	str	r3, [r7, #12]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006cca:	f000 fb1f 	bl	800730c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cce:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <xTaskCheckForTimeOut+0xc4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d102      	bne.n	8006cee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	e023      	b.n	8006d36 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <xTaskCheckForTimeOut+0xc8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d007      	beq.n	8006d0a <xTaskCheckForTimeOut+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d302      	bcc.n	8006d0a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e015      	b.n	8006d36 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d20b      	bcs.n	8006d2c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1ad2      	subs	r2, r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff97 	bl	8006c54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	e004      	b.n	8006d36 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d36:	f000 fb1d 	bl	8007374 <vPortExitCritical>

	return xReturn;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	2000075c 	.word	0x2000075c
 8006d48:	20000770 	.word	0x20000770

08006d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d50:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <vTaskMissedYield+0x14>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	2000076c 	.word	0x2000076c

08006d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d6c:	f000 f852 	bl	8006e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <prvIdleTask+0x28>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d9f9      	bls.n	8006d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <prvIdleTask+0x2c>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d88:	e7f0      	b.n	8006d6c <prvIdleTask+0x8>
 8006d8a:	bf00      	nop
 8006d8c:	2000065c 	.word	0x2000065c
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	e00c      	b.n	8006dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4a12      	ldr	r2, [pc, #72]	; (8006df4 <prvInitialiseTaskLists+0x60>)
 8006dac:	4413      	add	r3, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fd08 	bl	80057c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3301      	adds	r3, #1
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b06      	cmp	r3, #6
 8006dbe:	d9ef      	bls.n	8006da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dc0:	480d      	ldr	r0, [pc, #52]	; (8006df8 <prvInitialiseTaskLists+0x64>)
 8006dc2:	f7fe fcff 	bl	80057c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dc6:	480d      	ldr	r0, [pc, #52]	; (8006dfc <prvInitialiseTaskLists+0x68>)
 8006dc8:	f7fe fcfc 	bl	80057c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dcc:	480c      	ldr	r0, [pc, #48]	; (8006e00 <prvInitialiseTaskLists+0x6c>)
 8006dce:	f7fe fcf9 	bl	80057c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dd2:	480c      	ldr	r0, [pc, #48]	; (8006e04 <prvInitialiseTaskLists+0x70>)
 8006dd4:	f7fe fcf6 	bl	80057c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dd8:	480b      	ldr	r0, [pc, #44]	; (8006e08 <prvInitialiseTaskLists+0x74>)
 8006dda:	f7fe fcf3 	bl	80057c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <prvInitialiseTaskLists+0x78>)
 8006de0:	4a05      	ldr	r2, [pc, #20]	; (8006df8 <prvInitialiseTaskLists+0x64>)
 8006de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006de4:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <prvInitialiseTaskLists+0x7c>)
 8006de6:	4a05      	ldr	r2, [pc, #20]	; (8006dfc <prvInitialiseTaskLists+0x68>)
 8006de8:	601a      	str	r2, [r3, #0]
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	2000065c 	.word	0x2000065c
 8006df8:	200006e8 	.word	0x200006e8
 8006dfc:	200006fc 	.word	0x200006fc
 8006e00:	20000718 	.word	0x20000718
 8006e04:	2000072c 	.word	0x2000072c
 8006e08:	20000744 	.word	0x20000744
 8006e0c:	20000710 	.word	0x20000710
 8006e10:	20000714 	.word	0x20000714

08006e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e1a:	e019      	b.n	8006e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e1c:	f000 fa76 	bl	800730c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e20:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <prvCheckTasksWaitingTermination+0x50>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fd53 	bl	80058d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <prvCheckTasksWaitingTermination+0x54>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	4a0b      	ldr	r2, [pc, #44]	; (8006e68 <prvCheckTasksWaitingTermination+0x54>)
 8006e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <prvCheckTasksWaitingTermination+0x58>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <prvCheckTasksWaitingTermination+0x58>)
 8006e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e46:	f000 fa95 	bl	8007374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f810 	bl	8006e70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <prvCheckTasksWaitingTermination+0x58>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e1      	bne.n	8006e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	2000072c 	.word	0x2000072c
 8006e68:	20000758 	.word	0x20000758
 8006e6c:	20000740 	.word	0x20000740

08006e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fc3b 	bl	80076f8 <vPortFree>
			vPortFree( pxTCB );
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc38 	bl	80076f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvResetNextTaskUnblockTime+0x38>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <prvResetNextTaskUnblockTime+0x3c>)
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ea8:	e008      	b.n	8006ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eaa:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <prvResetNextTaskUnblockTime+0x38>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <prvResetNextTaskUnblockTime+0x3c>)
 8006eba:	6013      	str	r3, [r2, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000710 	.word	0x20000710
 8006ecc:	20000778 	.word	0x20000778

08006ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <xTaskGetSchedulerState+0x34>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e008      	b.n	8006ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <xTaskGetSchedulerState+0x38>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006eec:	2302      	movs	r3, #2
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e001      	b.n	8006ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ef6:	687b      	ldr	r3, [r7, #4]
	}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000764 	.word	0x20000764
 8006f08:	20000780 	.word	0x20000780

08006f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d072      	beq.n	8007008 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f22:	4b3c      	ldr	r3, [pc, #240]	; (8007014 <xTaskPriorityDisinherit+0x108>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d00c      	beq.n	8006f46 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	b672      	cpsid	i
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	b662      	cpsie	i
 8006f40:	60fb      	str	r3, [r7, #12]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10c      	bne.n	8006f68 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	b672      	cpsid	i
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	b662      	cpsie	i
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d044      	beq.n	8007008 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d140      	bne.n	8007008 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fca4 	bl	80058d8 <uxListRemove>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d115      	bne.n	8006fc2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	491f      	ldr	r1, [pc, #124]	; (8007018 <xTaskPriorityDisinherit+0x10c>)
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xTaskPriorityDisinherit+0xb6>
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43da      	mvns	r2, r3
 8006fb8:	4b18      	ldr	r3, [pc, #96]	; (800701c <xTaskPriorityDisinherit+0x110>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	4a17      	ldr	r2, [pc, #92]	; (800701c <xTaskPriorityDisinherit+0x110>)
 8006fc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f1c3 0207 	rsb	r2, r3, #7
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	2201      	movs	r2, #1
 8006fdc:	409a      	lsls	r2, r3
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <xTaskPriorityDisinherit+0x110>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	4a0d      	ldr	r2, [pc, #52]	; (800701c <xTaskPriorityDisinherit+0x110>)
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a08      	ldr	r2, [pc, #32]	; (8007018 <xTaskPriorityDisinherit+0x10c>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f7fe fc0d 	bl	800581e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007008:	697b      	ldr	r3, [r7, #20]
	}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000658 	.word	0x20000658
 8007018:	2000065c 	.word	0x2000065c
 800701c:	20000760 	.word	0x20000760

08007020 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800702a:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007030:	4b28      	ldr	r3, [pc, #160]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3304      	adds	r3, #4
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fc4e 	bl	80058d8 <uxListRemove>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007042:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	2201      	movs	r2, #1
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43da      	mvns	r2, r3
 8007050:	4b21      	ldr	r3, [pc, #132]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4013      	ands	r3, r2
 8007056:	4a20      	ldr	r2, [pc, #128]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007058:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d10a      	bne.n	8007078 <prvAddCurrentTaskToDelayedList+0x58>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	481a      	ldr	r0, [pc, #104]	; (80070dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007072:	f7fe fbd4 	bl	800581e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007076:	e026      	b.n	80070c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007080:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d209      	bcs.n	80070a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7fe fbe2 	bl	8005866 <vListInsert>
}
 80070a2:	e010      	b.n	80070c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7fe fbd8 	bl	8005866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d202      	bcs.n	80070c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070c0:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6013      	str	r3, [r2, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	2000075c 	.word	0x2000075c
 80070d4:	20000658 	.word	0x20000658
 80070d8:	20000760 	.word	0x20000760
 80070dc:	20000744 	.word	0x20000744
 80070e0:	20000714 	.word	0x20000714
 80070e4:	20000710 	.word	0x20000710
 80070e8:	20000778 	.word	0x20000778

080070ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3b04      	subs	r3, #4
 80070fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b04      	subs	r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f023 0201 	bic.w	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3b04      	subs	r3, #4
 800711a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800711c:	4a0c      	ldr	r2, [pc, #48]	; (8007150 <pxPortInitialiseStack+0x64>)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3b14      	subs	r3, #20
 8007126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3b04      	subs	r3, #4
 8007132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f06f 0202 	mvn.w	r2, #2
 800713a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3b20      	subs	r3, #32
 8007140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	08007155 	.word	0x08007155

08007154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800715e:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <prvTaskExitError+0x5c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d00c      	beq.n	8007182 <prvTaskExitError+0x2e>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	b672      	cpsid	i
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	b662      	cpsie	i
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <prvTaskExitError+0x2c>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	b672      	cpsid	i
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	b662      	cpsie	i
 8007196:	60bb      	str	r3, [r7, #8]
}
 8007198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800719a:	bf00      	nop
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0fc      	beq.n	800719c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	20000014 	.word	0x20000014
	...

080071c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071c0:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <pxCurrentTCBConst2>)
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	6808      	ldr	r0, [r1, #0]
 80071c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	f380 8809 	msr	PSP, r0
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	4770      	bx	lr
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst2>:
 80071e0:	20000658 	.word	0x20000658
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071e8:	4808      	ldr	r0, [pc, #32]	; (800720c <prvPortStartFirstTask+0x24>)
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	f380 8808 	msr	MSP, r0
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8814 	msr	CONTROL, r0
 80071fa:	b662      	cpsie	i
 80071fc:	b661      	cpsie	f
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	df00      	svc	0
 8007208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800720a:	bf00      	nop
 800720c:	e000ed08 	.word	0xe000ed08

08007210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007216:	4b37      	ldr	r3, [pc, #220]	; (80072f4 <xPortStartScheduler+0xe4>)
 8007218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	22ff      	movs	r2, #255	; 0xff
 8007226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007238:	b2da      	uxtb	r2, r3
 800723a:	4b2f      	ldr	r3, [pc, #188]	; (80072f8 <xPortStartScheduler+0xe8>)
 800723c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800723e:	4b2f      	ldr	r3, [pc, #188]	; (80072fc <xPortStartScheduler+0xec>)
 8007240:	2207      	movs	r2, #7
 8007242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007244:	e009      	b.n	800725a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007246:	4b2d      	ldr	r3, [pc, #180]	; (80072fc <xPortStartScheduler+0xec>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3b01      	subs	r3, #1
 800724c:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <xPortStartScheduler+0xec>)
 800724e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d0ef      	beq.n	8007246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007266:	4b25      	ldr	r3, [pc, #148]	; (80072fc <xPortStartScheduler+0xec>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1c3 0307 	rsb	r3, r3, #7
 800726e:	2b04      	cmp	r3, #4
 8007270:	d00c      	beq.n	800728c <xPortStartScheduler+0x7c>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	b672      	cpsid	i
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	b662      	cpsie	i
 8007286:	60bb      	str	r3, [r7, #8]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800728c:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <xPortStartScheduler+0xec>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <xPortStartScheduler+0xec>)
 8007294:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007296:	4b19      	ldr	r3, [pc, #100]	; (80072fc <xPortStartScheduler+0xec>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <xPortStartScheduler+0xec>)
 80072a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072aa:	4b15      	ldr	r3, [pc, #84]	; (8007300 <xPortStartScheduler+0xf0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a14      	ldr	r2, [pc, #80]	; (8007300 <xPortStartScheduler+0xf0>)
 80072b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <xPortStartScheduler+0xf0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <xPortStartScheduler+0xf0>)
 80072bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072c2:	f000 f8dd 	bl	8007480 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <xPortStartScheduler+0xf4>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072cc:	f000 f8fc 	bl	80074c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072d0:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <xPortStartScheduler+0xf8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <xPortStartScheduler+0xf8>)
 80072d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072dc:	f7ff ff84 	bl	80071e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072e0:	f7ff fbd0 	bl	8006a84 <vTaskSwitchContext>
	prvTaskExitError();
 80072e4:	f7ff ff36 	bl	8007154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	e000e400 	.word	0xe000e400
 80072f8:	20000784 	.word	0x20000784
 80072fc:	20000788 	.word	0x20000788
 8007300:	e000ed20 	.word	0xe000ed20
 8007304:	20000014 	.word	0x20000014
 8007308:	e000ef34 	.word	0xe000ef34

0800730c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	b672      	cpsid	i
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	b662      	cpsie	i
 8007326:	607b      	str	r3, [r7, #4]
}
 8007328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800732a:	4b10      	ldr	r3, [pc, #64]	; (800736c <vPortEnterCritical+0x60>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3301      	adds	r3, #1
 8007330:	4a0e      	ldr	r2, [pc, #56]	; (800736c <vPortEnterCritical+0x60>)
 8007332:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007334:	4b0d      	ldr	r3, [pc, #52]	; (800736c <vPortEnterCritical+0x60>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d111      	bne.n	8007360 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <vPortEnterCritical+0x64>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00c      	beq.n	8007360 <vPortEnterCritical+0x54>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	b672      	cpsid	i
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	b662      	cpsie	i
 800735a:	603b      	str	r3, [r7, #0]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <vPortEnterCritical+0x52>
	}
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	20000014 	.word	0x20000014
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <vPortExitCritical+0x54>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10c      	bne.n	800739c <vPortExitCritical+0x28>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	b672      	cpsid	i
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	b662      	cpsie	i
 8007396:	607b      	str	r3, [r7, #4]
}
 8007398:	bf00      	nop
 800739a:	e7fe      	b.n	800739a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <vPortExitCritical+0x54>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <vPortExitCritical+0x54>)
 80073a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073a6:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <vPortExitCritical+0x54>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <vPortExitCritical+0x46>
 80073ae:	2300      	movs	r3, #0
 80073b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f383 8811 	msr	BASEPRI, r3
}
 80073b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000014 	.word	0x20000014
 80073cc:	00000000 	.word	0x00000000

080073d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073d0:	f3ef 8009 	mrs	r0, PSP
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	4b15      	ldr	r3, [pc, #84]	; (8007430 <pxCurrentTCBConst>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	f01e 0f10 	tst.w	lr, #16
 80073e0:	bf08      	it	eq
 80073e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	6010      	str	r0, [r2, #0]
 80073ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073f4:	b672      	cpsid	i
 80073f6:	f380 8811 	msr	BASEPRI, r0
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	b662      	cpsie	i
 8007404:	f7ff fb3e 	bl	8006a84 <vTaskSwitchContext>
 8007408:	f04f 0000 	mov.w	r0, #0
 800740c:	f380 8811 	msr	BASEPRI, r0
 8007410:	bc09      	pop	{r0, r3}
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	f01e 0f10 	tst.w	lr, #16
 800741e:	bf08      	it	eq
 8007420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007424:	f380 8809 	msr	PSP, r0
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop

08007430 <pxCurrentTCBConst>:
 8007430:	20000658 	.word	0x20000658
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	b672      	cpsid	i
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	b662      	cpsie	i
 8007452:	607b      	str	r3, [r7, #4]
}
 8007454:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007456:	f7ff fa5b 	bl	8006910 <xTaskIncrementTick>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <SysTick_Handler+0x44>)
 8007462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	2300      	movs	r3, #0
 800746a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	f383 8811 	msr	BASEPRI, r3
}
 8007472:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	e000ed04 	.word	0xe000ed04

08007480 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <vPortSetupTimerInterrupt+0x34>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <vPortSetupTimerInterrupt+0x38>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <vPortSetupTimerInterrupt+0x3c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <vPortSetupTimerInterrupt+0x40>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	099b      	lsrs	r3, r3, #6
 800749c:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <vPortSetupTimerInterrupt+0x44>)
 800749e:	3b01      	subs	r3, #1
 80074a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074a2:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <vPortSetupTimerInterrupt+0x34>)
 80074a4:	2207      	movs	r2, #7
 80074a6:	601a      	str	r2, [r3, #0]
}
 80074a8:	bf00      	nop
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	e000e010 	.word	0xe000e010
 80074b8:	e000e018 	.word	0xe000e018
 80074bc:	20000008 	.word	0x20000008
 80074c0:	10624dd3 	.word	0x10624dd3
 80074c4:	e000e014 	.word	0xe000e014

080074c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074d8 <vPortEnableVFP+0x10>
 80074cc:	6801      	ldr	r1, [r0, #0]
 80074ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074d2:	6001      	str	r1, [r0, #0]
 80074d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074d6:	bf00      	nop
 80074d8:	e000ed88 	.word	0xe000ed88

080074dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074e2:	f3ef 8305 	mrs	r3, IPSR
 80074e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b0f      	cmp	r3, #15
 80074ec:	d916      	bls.n	800751c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ee:	4a19      	ldr	r2, [pc, #100]	; (8007554 <vPortValidateInterruptPriority+0x78>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074f8:	4b17      	ldr	r3, [pc, #92]	; (8007558 <vPortValidateInterruptPriority+0x7c>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	7afa      	ldrb	r2, [r7, #11]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d20c      	bcs.n	800751c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	b672      	cpsid	i
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	b662      	cpsie	i
 8007516:	607b      	str	r3, [r7, #4]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <vPortValidateInterruptPriority+0x80>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007524:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <vPortValidateInterruptPriority+0x84>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d90c      	bls.n	8007546 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	b672      	cpsid	i
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	b662      	cpsie	i
 8007540:	603b      	str	r3, [r7, #0]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <vPortValidateInterruptPriority+0x68>
	}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	e000e3f0 	.word	0xe000e3f0
 8007558:	20000784 	.word	0x20000784
 800755c:	e000ed0c 	.word	0xe000ed0c
 8007560:	20000788 	.word	0x20000788

08007564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08a      	sub	sp, #40	; 0x28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007570:	f7ff f900 	bl	8006774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007574:	4b5b      	ldr	r3, [pc, #364]	; (80076e4 <pvPortMalloc+0x180>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800757c:	f000 f91a 	bl	80077b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007580:	4b59      	ldr	r3, [pc, #356]	; (80076e8 <pvPortMalloc+0x184>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 8092 	bne.w	80076b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01f      	beq.n	80075d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007594:	2208      	movs	r2, #8
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f023 0307 	bic.w	r3, r3, #7
 80075ac:	3308      	adds	r3, #8
 80075ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <pvPortMalloc+0x70>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	b672      	cpsid	i
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	b662      	cpsie	i
 80075ce:	617b      	str	r3, [r7, #20]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d06b      	beq.n	80076b2 <pvPortMalloc+0x14e>
 80075da:	4b44      	ldr	r3, [pc, #272]	; (80076ec <pvPortMalloc+0x188>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d866      	bhi.n	80076b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075e4:	4b42      	ldr	r3, [pc, #264]	; (80076f0 <pvPortMalloc+0x18c>)
 80075e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075e8:	4b41      	ldr	r3, [pc, #260]	; (80076f0 <pvPortMalloc+0x18c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075ee:	e004      	b.n	80075fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d903      	bls.n	800760c <pvPortMalloc+0xa8>
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f1      	bne.n	80075f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800760c:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <pvPortMalloc+0x180>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007612:	429a      	cmp	r2, r3
 8007614:	d04d      	beq.n	80076b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2208      	movs	r2, #8
 800761c:	4413      	add	r3, r2
 800761e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	2308      	movs	r3, #8
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	429a      	cmp	r2, r3
 8007636:	d921      	bls.n	800767c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00c      	beq.n	8007664 <pvPortMalloc+0x100>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	b672      	cpsid	i
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	b662      	cpsie	i
 800765e:	613b      	str	r3, [r7, #16]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	1ad2      	subs	r2, r2, r3
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007676:	69b8      	ldr	r0, [r7, #24]
 8007678:	f000 f8fe 	bl	8007878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800767c:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <pvPortMalloc+0x188>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	4a19      	ldr	r2, [pc, #100]	; (80076ec <pvPortMalloc+0x188>)
 8007688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800768a:	4b18      	ldr	r3, [pc, #96]	; (80076ec <pvPortMalloc+0x188>)
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <pvPortMalloc+0x190>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d203      	bcs.n	800769e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <pvPortMalloc+0x188>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <pvPortMalloc+0x190>)
 800769c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <pvPortMalloc+0x184>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076b2:	f7ff f86d 	bl	8006790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00c      	beq.n	80076da <pvPortMalloc+0x176>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	b672      	cpsid	i
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	b662      	cpsie	i
 80076d4:	60fb      	str	r3, [r7, #12]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <pvPortMalloc+0x174>
	return pvReturn;
 80076da:	69fb      	ldr	r3, [r7, #28]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3728      	adds	r7, #40	; 0x28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20004394 	.word	0x20004394
 80076e8:	200043a0 	.word	0x200043a0
 80076ec:	20004398 	.word	0x20004398
 80076f0:	2000438c 	.word	0x2000438c
 80076f4:	2000439c 	.word	0x2000439c

080076f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d04c      	beq.n	80077a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800770a:	2308      	movs	r3, #8
 800770c:	425b      	negs	r3, r3
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4413      	add	r3, r2
 8007712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	4b23      	ldr	r3, [pc, #140]	; (80077ac <vPortFree+0xb4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4013      	ands	r3, r2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10c      	bne.n	8007740 <vPortFree+0x48>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	b672      	cpsid	i
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	b662      	cpsie	i
 800773a:	60fb      	str	r3, [r7, #12]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00c      	beq.n	8007762 <vPortFree+0x6a>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	b672      	cpsid	i
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	b662      	cpsie	i
 800775c:	60bb      	str	r3, [r7, #8]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	4b11      	ldr	r3, [pc, #68]	; (80077ac <vPortFree+0xb4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d019      	beq.n	80077a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d115      	bne.n	80077a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <vPortFree+0xb4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	43db      	mvns	r3, r3
 8007782:	401a      	ands	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007788:	f7fe fff4 	bl	8006774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <vPortFree+0xb8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4413      	add	r3, r2
 8007796:	4a06      	ldr	r2, [pc, #24]	; (80077b0 <vPortFree+0xb8>)
 8007798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f000 f86c 	bl	8007878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80077a0:	f7fe fff6 	bl	8006790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077a4:	bf00      	nop
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200043a0 	.word	0x200043a0
 80077b0:	20004398 	.word	0x20004398

080077b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077c0:	4b27      	ldr	r3, [pc, #156]	; (8007860 <prvHeapInit+0xac>)
 80077c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3307      	adds	r3, #7
 80077d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <prvHeapInit+0xac>)
 80077e4:	4413      	add	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077ec:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <prvHeapInit+0xb0>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <prvHeapInit+0xb0>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007800:	2208      	movs	r2, #8
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a15      	ldr	r2, [pc, #84]	; (8007868 <prvHeapInit+0xb4>)
 8007814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007816:	4b14      	ldr	r3, [pc, #80]	; (8007868 <prvHeapInit+0xb4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <prvHeapInit+0xb4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <prvHeapInit+0xb4>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <prvHeapInit+0xb8>)
 8007842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <prvHeapInit+0xbc>)
 800784a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <prvHeapInit+0xc0>)
 800784e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	2000078c 	.word	0x2000078c
 8007864:	2000438c 	.word	0x2000438c
 8007868:	20004394 	.word	0x20004394
 800786c:	2000439c 	.word	0x2000439c
 8007870:	20004398 	.word	0x20004398
 8007874:	200043a0 	.word	0x200043a0

08007878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007880:	4b28      	ldr	r3, [pc, #160]	; (8007924 <prvInsertBlockIntoFreeList+0xac>)
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e002      	b.n	800788c <prvInsertBlockIntoFreeList+0x14>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d8f7      	bhi.n	8007886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d108      	bne.n	80078ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d118      	bne.n	8007900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d00d      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e008      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e003      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d002      	beq.n	8007916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2000438c 	.word	0x2000438c
 8007928:	20004394 	.word	0x20004394

0800792c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	b299      	uxth	r1, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1d5a      	adds	r2, r3, #5
 8007948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	2303      	movs	r3, #3
 8007950:	f7fa ff2e 	bl	80027b0 <HAL_I2C_Master_Transmit>
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8007970:	220f      	movs	r2, #15
 8007972:	2141      	movs	r1, #65	; 0x41
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f80c 	bl	8007992 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	b2db      	uxtb	r3, r3
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f81f 	bl	80079c8 <MAX581x_Reference>
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
 800799e:	4613      	mov	r3, r2
 80079a0:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	78ba      	ldrb	r2, [r7, #2]
 80079b2:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff ffb6 	bl	800792c <MAX581x_WriteCommand>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff9d 	bl	800792c <MAX581x_WriteCommand>
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
 8007a06:	4613      	mov	r3, r2
 8007a08:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8007a10:	883b      	ldrh	r3, [r7, #0]
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 8007a1c:	883b      	ldrh	r3, [r7, #0]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f023 030f 	bic.w	r3, r3, #15
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ff7d 	bl	800792c <MAX581x_WriteCommand>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
 8007a46:	4613      	mov	r3, r2
 8007a48:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8007a56:	883b      	ldrh	r3, [r7, #0]
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 8007a62:	883b      	ldrh	r3, [r7, #0]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f023 030f 	bic.w	r3, r3, #15
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ff5a 	bl	800792c <MAX581x_WriteCommand>
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8007a80:	b084      	sub	sp, #16
 8007a82:	b4b0      	push	{r4, r5, r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	f107 001c 	add.w	r0, r7, #28
 8007a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	461d      	mov	r5, r3
 8007a96:	f107 041c 	add.w	r4, r7, #28
 8007a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a9e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007aa2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid->error = 0;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lastMeasure = 0;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->integral = 0;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->enable = enable;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ad6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bcb0      	pop	{r4, r5, r7}
 8007ae2:	b004      	add	sp, #16
 8007ae4:	4770      	bx	lr

08007ae6 <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b087      	sub	sp, #28
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	ed87 0a02 	vstr	s0, [r7, #8]
 8007af2:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d006      	beq.n	8007b0e <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	629a      	str	r2, [r3, #40]	; 0x28
		pid->output = reference;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
		return;
 8007b0c:	e085      	b.n	8007c1a <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	ed93 7a07 	vldr	s14, [r3, #28]
 8007b1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	edd3 6a08 	vldr	s13, [r3, #32]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	if (pid->integral > pid->params.integralMax)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5c:	dd04      	ble.n	8007b68 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b66:	e014      	b.n	8007b92 <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b74:	eef1 7a67 	vneg.f32	s15, s15
 8007b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	d507      	bpl.n	8007b92 <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b88:	eef1 7a67 	vneg.f32	s15, s15
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007b98:	ed97 7a01 	vldr	s14, [r7, #4]
 8007b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ba0:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	ed93 7a08 	vldr	s14, [r3, #32]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	edd3 7a00 	vldr	s15, [r3]
 8007bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8007bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8007bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (pid->output > pid->params.outputMax)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	edd3 7a03 	vldr	s15, [r3, #12]
 8007be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bea:	dd04      	ble.n	8007bf6 <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bf4:	e00e      	b.n	8007c14 <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	d503      	bpl.n	8007c14 <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	625a      	str	r2, [r3, #36]	; 0x24
	}

	pid->lastMeasure = measure;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8007c30:	887b      	ldrh	r3, [r7, #2]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7fa fd10 	bl	800265a <HAL_GPIO_TogglePin>
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <Board_GetID>:

uint16_t Board_GetID()
{
 8007c44:	b598      	push	{r3, r4, r7, lr}
 8007c46:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8007c48:	2102      	movs	r1, #2
 8007c4a:	481b      	ldr	r0, [pc, #108]	; (8007cb8 <Board_GetID+0x74>)
 8007c4c:	f7fa fcd4 	bl	80025f8 <HAL_GPIO_ReadPin>
 8007c50:	4603      	mov	r3, r0
 8007c52:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8007c54:	2101      	movs	r1, #1
 8007c56:	4818      	ldr	r0, [pc, #96]	; (8007cb8 <Board_GetID+0x74>)
 8007c58:	f7fa fcce 	bl	80025f8 <HAL_GPIO_ReadPin>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	005b      	lsls	r3, r3, #1
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	4323      	orrs	r3, r4
 8007c64:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8007c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c6a:	4814      	ldr	r0, [pc, #80]	; (8007cbc <Board_GetID+0x78>)
 8007c6c:	f7fa fcc4 	bl	80025f8 <HAL_GPIO_ReadPin>
 8007c70:	4603      	mov	r3, r0
 8007c72:	009b      	lsls	r3, r3, #2
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8007c74:	b21b      	sxth	r3, r3
 8007c76:	4323      	orrs	r3, r4
 8007c78:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	4810      	ldr	r0, [pc, #64]	; (8007cc0 <Board_GetID+0x7c>)
 8007c7e:	f7fa fcbb 	bl	80025f8 <HAL_GPIO_ReadPin>
 8007c82:	4603      	mov	r3, r0
 8007c84:	00db      	lsls	r3, r3, #3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	4323      	orrs	r3, r4
 8007c8a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 8007c8c:	2110      	movs	r1, #16
 8007c8e:	480d      	ldr	r0, [pc, #52]	; (8007cc4 <Board_GetID+0x80>)
 8007c90:	f7fa fcb2 	bl	80025f8 <HAL_GPIO_ReadPin>
 8007c94:	4603      	mov	r3, r0
 8007c96:	011b      	lsls	r3, r3, #4
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8007c98:	b21b      	sxth	r3, r3
 8007c9a:	4323      	orrs	r3, r4
 8007c9c:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 8007c9e:	2110      	movs	r1, #16
 8007ca0:	4809      	ldr	r0, [pc, #36]	; (8007cc8 <Board_GetID+0x84>)
 8007ca2:	f7fa fca9 	bl	80025f8 <HAL_GPIO_ReadPin>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	015b      	lsls	r3, r3, #5
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 8007caa:	b21b      	sxth	r3, r3
 8007cac:	4323      	orrs	r3, r4
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	b29b      	uxth	r3, r3
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	bd98      	pop	{r3, r4, r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40022400 	.word	0x40022400
 8007cbc:	40022000 	.word	0x40022000
 8007cc0:	40020400 	.word	0x40020400
 8007cc4:	40020800 	.word	0x40020800
 8007cc8:	40021c00 	.word	0x40021c00
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d002      	beq.n	8007cea <Encoder_Update+0x1a>
		return 0;
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	e03a      	b.n	8007d60 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 8007cf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cfe:	eef0 7ae7 	vabs.f32	s15, s15
 8007d02:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0e:	d502      	bpl.n	8007d16 <Encoder_Update+0x46>
 8007d10:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007d80 <Encoder_Update+0xb0>
 8007d14:	e005      	b.n	8007d22 <Encoder_Update+0x52>
 8007d16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d22:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 8007d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007d32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007d36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007d3a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8007d78 <Encoder_Update+0xa8>
 8007d3e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8007d42:	edd7 7a00 	vldr	s15, [r7]
 8007d46:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007d84 <Encoder_Update+0xb4>
 8007d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d4e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007d52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007d56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007d5a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
}
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eeb0 0a67 	vmov.f32	s0, s15
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	f3af 8000 	nop.w
 8007d78:	54442d18 	.word	0x54442d18
 8007d7c:	400921fb 	.word	0x400921fb
 8007d80:	00000000 	.word	0x00000000
 8007d84:	46000000 	.word	0x46000000

08007d88 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
 8007d94:	4613      	mov	r3, r2
 8007d96:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	78ba      	ldrb	r2, [r7, #2]
 8007d9c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	motorDevice->outputID = motorID;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	motorDevice->refSpeed = 0;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	671a      	str	r2, [r3, #112]	; 0x70
	motorDevice->measSpeed = 0;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	675a      	str	r2, [r3, #116]	; 0x74
	Motor_Enable(motorDevice, enable);
 8007db8:	78bb      	ldrb	r3, [r7, #2]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f857 	bl	8007e70 <Motor_Enable>
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed * WHEEL_GEAR_RATIO * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 8007dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dde:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007de6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8007e6c <Motor_CLDrive+0xa0>
 8007dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007e00:	eeb0 0a67 	vmov.f32	s0, s15
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7ff ff63 	bl	8007cd0 <Encoder_Update>
 8007e0a:	eef0 7a40 	vmov.f32	s15, s0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8007e22:	eef0 0a47 	vmov.f32	s1, s14
 8007e26:	eeb0 0a67 	vmov.f32	s0, s15
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	f7ff fe5b 	bl	8007ae6 <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007e36:	eef0 7ae7 	vabs.f32	s15, s15
 8007e3a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e46:	d503      	bpl.n	8007e50 <Motor_CLDrive+0x84>
		motorDevice->pid.output = 0.0;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007e56:	eeb0 0a67 	vmov.f32	s0, s15
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f84b 	bl	8007ef8 <Motor_SetVoltage>
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	3cdd82fd 	.word	0x3cdd82fd

08007e70 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e94:	2200      	movs	r2, #0
 8007e96:	4619      	mov	r1, r3
 8007e98:	f7fa fbc6 	bl	8002628 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 8007e9c:	e008      	b.n	8007eb0 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f7fa fbbc 	bl	8002628 <HAL_GPIO_WritePin>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d109      	bne.n	8007ede <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f7fa fba6 	bl	8002628 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 8007edc:	e008      	b.n	8007ef0 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ee8:	2201      	movs	r2, #1
 8007eea:	4619      	mov	r1, r3
 8007eec:	f7fa fb9c 	bl	8002628 <HAL_GPIO_WritePin>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8007f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f12:	db1d      	blt.n	8007f50 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4619      	mov	r1, r3
 8007f22:	f7fa fb81 	bl	8002628 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8007f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f2e:	ee17 3a90 	vmov	r3, s15
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8007f46:	461a      	mov	r2, r3
 8007f48:	68b8      	ldr	r0, [r7, #8]
 8007f4a:	f7ff fd76 	bl	8007a3a <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 8007f4e:	e01e      	b.n	8007f8e <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f7fa fb63 	bl	8002628 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8007f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f66:	eef0 7ae7 	vabs.f32	s15, s15
 8007f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6e:	ee17 3a90 	vmov	r3, s15
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8007f86:	461a      	mov	r2, r3
 8007f88:	68b8      	ldr	r0, [r7, #8]
 8007f8a:	f7ff fd56 	bl	8007a3a <MAX581x_CodeLoad>
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6898      	ldr	r0, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	8a5b      	ldrh	r3, [r3, #18]
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4619      	mov	r1, r3
 8007fae:	f7fa fb3b 	bl	8002628 <HAL_GPIO_WritePin>
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6858      	ldr	r0, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8a1b      	ldrh	r3, [r3, #16]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7fa fb29 	bl	8002628 <HAL_GPIO_WritePin>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	887a      	ldrh	r2, [r7, #2]
 8007ffc:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8bba      	ldrh	r2, [r7, #28]
 8008008:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 800800a:	2101      	movs	r1, #1
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ffd4 	bl	8007fba <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8008012:	2100      	movs	r1, #0
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff ffbe 	bl	8007f96 <nRF24_CE_State>
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af02      	add	r7, sp, #8
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	f107 020f 	add.w	r2, r7, #15
 8008036:	1cf9      	adds	r1, r7, #3
 8008038:	f242 7310 	movw	r3, #10000	; 0x2710
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	2301      	movs	r3, #1
 8008040:	f7fc fab9 	bl	80045b6 <HAL_SPI_TransmitReceive>
  return rxData;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800805a:	2100      	movs	r1, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff ffac 	bl	8007fba <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	b2db      	uxtb	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff ffd8 	bl	8008022 <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008072:	21ff      	movs	r1, #255	; 0xff
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ffd4 	bl	8008022 <nRF24_LL_RW>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 800807e:	2101      	movs	r1, #1
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff ff9a 	bl	8007fba <nRF24_CSN_State>

  return value;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
 800809c:	4613      	mov	r3, r2
 800809e:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 80080a0:	2100      	movs	r1, #0
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff ff89 	bl	8007fba <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	2b1f      	cmp	r3, #31
 80080ac:	d812      	bhi.n	80080d4 <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80080ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	b25b      	sxtb	r3, r3
 80080b8:	f043 0320 	orr.w	r3, r3, #32
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff ffad 	bl	8008022 <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 80080c8:	78bb      	ldrb	r3, [r7, #2]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ffa8 	bl	8008022 <nRF24_LL_RW>
 80080d2:	e015      	b.n	8008100 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ffa2 	bl	8008022 <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	2be1      	cmp	r3, #225	; 0xe1
 80080e2:	d00d      	beq.n	8008100 <nRF24_WriteReg+0x70>
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	2be2      	cmp	r3, #226	; 0xe2
 80080e8:	d00a      	beq.n	8008100 <nRF24_WriteReg+0x70>
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	2be3      	cmp	r3, #227	; 0xe3
 80080ee:	d007      	beq.n	8008100 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	2bff      	cmp	r3, #255	; 0xff
 80080f4:	d004      	beq.n	8008100 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 80080f6:	78bb      	ldrb	r3, [r7, #2]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff ff91 	bl	8008022 <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008100:	2101      	movs	r1, #1
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff59 	bl	8007fba <nRF24_CSN_State>
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	461a      	mov	r2, r3
 800811c:	460b      	mov	r3, r1
 800811e:	72fb      	strb	r3, [r7, #11]
 8008120:	4613      	mov	r3, r2
 8008122:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008124:	2100      	movs	r1, #0
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f7ff ff47 	bl	8007fba <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	4619      	mov	r1, r3
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff ff76 	bl	8008022 <nRF24_LL_RW>
  while (count--)
 8008136:	e008      	b.n	800814a <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008138:	687c      	ldr	r4, [r7, #4]
 800813a:	1c63      	adds	r3, r4, #1
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	21ff      	movs	r1, #255	; 0xff
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff ff6e 	bl	8008022 <nRF24_LL_RW>
 8008146:	4603      	mov	r3, r0
 8008148:	7023      	strb	r3, [r4, #0]
  while (count--)
 800814a:	7abb      	ldrb	r3, [r7, #10]
 800814c:	1e5a      	subs	r2, r3, #1
 800814e:	72ba      	strb	r2, [r7, #10]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f1      	bne.n	8008138 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008154:	2101      	movs	r1, #1
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff ff2f 	bl	8007fba <nRF24_CSN_State>
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}

08008164 <nRF24_Init>:
    nRF24_LL_RW(device, *pBuf++);
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
}

void nRF24_Init(nRF24_Handler_t *device) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 800816c:	2208      	movs	r2, #8
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff8d 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8008176:	223f      	movs	r2, #63	; 0x3f
 8008178:	2101      	movs	r1, #1
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff ff88 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8008180:	2203      	movs	r2, #3
 8008182:	2102      	movs	r1, #2
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff ff83 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 800818a:	2203      	movs	r2, #3
 800818c:	2103      	movs	r1, #3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff ff7e 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8008194:	2203      	movs	r2, #3
 8008196:	2104      	movs	r1, #4
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ff79 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 800819e:	2202      	movs	r2, #2
 80081a0:	2105      	movs	r1, #5
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff ff74 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 80081a8:	220e      	movs	r2, #14
 80081aa:	2106      	movs	r1, #6
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff ff6f 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 80081b2:	2200      	movs	r2, #0
 80081b4:	2107      	movs	r1, #7
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff ff6a 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 80081bc:	2200      	movs	r2, #0
 80081be:	2111      	movs	r1, #17
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff ff65 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 80081c6:	2200      	movs	r2, #0
 80081c8:	2112      	movs	r1, #18
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff ff60 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 80081d0:	2200      	movs	r2, #0
 80081d2:	2113      	movs	r1, #19
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ff5b 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 80081da:	2200      	movs	r2, #0
 80081dc:	2114      	movs	r1, #20
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff ff56 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 80081e4:	2200      	movs	r2, #0
 80081e6:	2115      	movs	r1, #21
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ff51 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 80081ee:	2200      	movs	r2, #0
 80081f0:	2116      	movs	r1, #22
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff ff4c 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 80081f8:	2200      	movs	r2, #0
 80081fa:	211c      	movs	r1, #28
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff ff47 	bl	8008090 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8008202:	2200      	movs	r2, #0
 8008204:	211d      	movs	r1, #29
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff ff42 	bl	8008090 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9b4 	bl	800857a <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9a4 	bl	8008560 <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9bb 	bl	8008594 <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 800821e:	2101      	movs	r1, #1
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff feca 	bl	8007fba <nRF24_CSN_State>
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800823a:	2100      	movs	r1, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff ff06 	bl	800804e <nRF24_ReadReg>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d104      	bne.n	8008256 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	f043 0302 	orr.w	r3, r3, #2
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	e003      	b.n	800825e <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	f023 0302 	bic.w	r3, r3, #2
 800825c:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	461a      	mov	r2, r3
 8008262:	2100      	movs	r1, #0
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ff13 	bl	8008090 <nRF24_WriteReg>
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff fee4 	bl	800804e <nRF24_ReadReg>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8008292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	b25a      	sxtb	r2, r3
 800829c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b25b      	sxtb	r3, r3
 80082a4:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	461a      	mov	r2, r3
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff feef 	bl	8008090 <nRF24_WriteReg>
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	461a      	mov	r2, r3
 80082ca:	2105      	movs	r1, #5
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff fedf 	bl	8008090 <nRF24_WriteReg>
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	460b      	mov	r3, r1
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	f200 809c 	bhi.w	800842a <nRF24_SetAddr+0x14e>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <nRF24_SetAddr+0x1c>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008315 	.word	0x08008315
 80082fc:	0800836b 	.word	0x0800836b
 8008300:	080083c1 	.word	0x080083c1
 8008304:	080083c1 	.word	0x080083c1
 8008308:	080083c1 	.word	0x080083c1
 800830c:	080083c1 	.word	0x080083c1
 8008310:	080083d5 	.word	0x080083d5
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008314:	2103      	movs	r1, #3
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff fe99 	bl	800804e <nRF24_ReadReg>
 800831c:	4603      	mov	r3, r0
 800831e:	3301      	adds	r3, #1
 8008320:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 800832a:	2100      	movs	r1, #0
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff fe44 	bl	8007fba <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	4a3f      	ldr	r2, [pc, #252]	; (8008434 <nRF24_SetAddr+0x158>)
 8008336:	5cd3      	ldrb	r3, [r2, r3]
 8008338:	f043 0320 	orr.w	r3, r3, #32
 800833c:	b2db      	uxtb	r3, r3
 800833e:	4619      	mov	r1, r3
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fe6e 	bl	8008022 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1e5a      	subs	r2, r3, #1
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4619      	mov	r1, r3
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fe66 	bl	8008022 <nRF24_LL_RW>
      } while (addr_width--);
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	1e5a      	subs	r2, r3, #1
 800835a:	75fa      	strb	r2, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f2      	bne.n	8008346 <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008360:	2101      	movs	r1, #1
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7ff fe29 	bl	8007fba <nRF24_CSN_State>
      break;
 8008368:	e060      	b.n	800842c <nRF24_SetAddr+0x150>
    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 800836a:	2103      	movs	r1, #3
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff fe6e 	bl	800804e <nRF24_ReadReg>
 8008372:	4603      	mov	r3, r0
 8008374:	3301      	adds	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008380:	2100      	movs	r1, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff fe19 	bl	8007fba <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	4a2a      	ldr	r2, [pc, #168]	; (8008434 <nRF24_SetAddr+0x158>)
 800838c:	5cd3      	ldrb	r3, [r2, r3]
 800838e:	f043 0320 	orr.w	r3, r3, #32
 8008392:	b2db      	uxtb	r3, r3
 8008394:	4619      	mov	r1, r3
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff fe43 	bl	8008022 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1e5a      	subs	r2, r3, #1
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	4619      	mov	r1, r3
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff fe3b 	bl	8008022 <nRF24_LL_RW>
      } while (addr_width--);
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	1e5a      	subs	r2, r3, #1
 80083b0:	75fa      	strb	r2, [r7, #23]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f2      	bne.n	800839c <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 80083b6:	2101      	movs	r1, #1
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7ff fdfe 	bl	8007fba <nRF24_CSN_State>
      break;
 80083be:	e035      	b.n	800842c <nRF24_SetAddr+0x150>
    case nRF24_PIPE2:
    case nRF24_PIPE3:
    case nRF24_PIPE4:
    case nRF24_PIPE5:
      /* Write address LSBbyte (only first byte from the addr buffer) */
      nRF24_WriteReg(device, nRF24_ADDR_REGS[pipe], *addr);
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	4a1c      	ldr	r2, [pc, #112]	; (8008434 <nRF24_SetAddr+0x158>)
 80083c4:	5cd1      	ldrb	r1, [r2, r3]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff fe5f 	bl	8008090 <nRF24_WriteReg>
      break;
 80083d2:	e02b      	b.n	800842c <nRF24_SetAddr+0x150>
    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 80083d4:	2103      	movs	r1, #3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff fe39 	bl	800804e <nRF24_ReadReg>
 80083dc:	4603      	mov	r3, r0
 80083de:	3301      	adds	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	4413      	add	r3, r2
 80083e8:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 80083ea:	2100      	movs	r1, #0
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fde4 	bl	8007fba <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	4a0f      	ldr	r2, [pc, #60]	; (8008434 <nRF24_SetAddr+0x158>)
 80083f6:	5cd3      	ldrb	r3, [r2, r3]
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7ff fe0e 	bl	8008022 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff fe06 	bl	8008022 <nRF24_LL_RW>
      } while (addr_width--);
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	1e5a      	subs	r2, r3, #1
 800841a:	75fa      	strb	r2, [r7, #23]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f2      	bne.n	8008406 <nRF24_SetAddr+0x12a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008420:	2101      	movs	r1, #1
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fdc9 	bl	8007fba <nRF24_CSN_State>
      break;
 8008428:	e000      	b.n	800842c <nRF24_SetAddr+0x150>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 800842a:	bf00      	nop
  }
}
 800842c:	bf00      	nop
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	08008af0 	.word	0x08008af0

08008438 <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	4608      	mov	r0, r1
 8008442:	4611      	mov	r1, r2
 8008444:	461a      	mov	r2, r3
 8008446:	4603      	mov	r3, r0
 8008448:	70fb      	strb	r3, [r7, #3]
 800844a:	460b      	mov	r3, r1
 800844c:	70bb      	strb	r3, [r7, #2]
 800844e:	4613      	mov	r3, r2
 8008450:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8008452:	2102      	movs	r1, #2
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff fdfa 	bl	800804e <nRF24_ReadReg>
 800845a:	4603      	mov	r3, r0
 800845c:	b25a      	sxtb	r2, r3
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	2101      	movs	r1, #1
 8008462:	fa01 f303 	lsl.w	r3, r1, r3
 8008466:	b25b      	sxtb	r3, r3
 8008468:	4313      	orrs	r3, r2
 800846a:	b25b      	sxtb	r3, r3
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008472:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	461a      	mov	r2, r3
 8008478:	2102      	movs	r1, #2
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7ff fe08 	bl	8008090 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	4a1a      	ldr	r2, [pc, #104]	; (80084ec <nRF24_SetRXPipe+0xb4>)
 8008484:	5cd1      	ldrb	r1, [r2, r3]
 8008486:	787b      	ldrb	r3, [r7, #1]
 8008488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800848c:	b2db      	uxtb	r3, r3
 800848e:	461a      	mov	r2, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fdfd 	bl	8008090 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8008496:	2101      	movs	r1, #1
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff fdd8 	bl	800804e <nRF24_ReadReg>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 80084a2:	78bb      	ldrb	r3, [r7, #2]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10a      	bne.n	80084be <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	2201      	movs	r2, #1
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	b25a      	sxtb	r2, r3
 80084b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	b25b      	sxtb	r3, r3
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	e00b      	b.n	80084d6 <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	2201      	movs	r2, #1
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	b25a      	sxtb	r2, r3
 80084cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084d0:	4013      	ands	r3, r2
 80084d2:	b25b      	sxtb	r3, r3
 80084d4:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	461a      	mov	r2, r3
 80084da:	2101      	movs	r1, #1
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff fdd7 	bl	8008090 <nRF24_WriteReg>
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	08008ae8 	.word	0x08008ae8

080084f0 <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d905      	bls.n	800850e <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 8008502:	2200      	movs	r2, #0
 8008504:	2101      	movs	r1, #1
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fdc2 	bl	8008090 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 800850c:	e017      	b.n	800853e <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800850e:	2101      	movs	r1, #1
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fd9c 	bl	800804e <nRF24_ReadReg>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	2201      	movs	r2, #1
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	b25b      	sxtb	r3, r3
 8008524:	43db      	mvns	r3, r3
 8008526:	b25a      	sxtb	r2, r3
 8008528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800852c:	4013      	ands	r3, r2
 800852e:	b25b      	sxtb	r3, r3
 8008530:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	461a      	mov	r2, r3
 8008536:	2101      	movs	r1, #1
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff fda9 	bl	8008090 <nRF24_WriteReg>
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 800854e:	2107      	movs	r1, #7
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fd7c 	bl	800804e <nRF24_ReadReg>
 8008556:	4603      	mov	r3, r0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8008568:	22ff      	movs	r2, #255	; 0xff
 800856a:	21e1      	movs	r1, #225	; 0xe1
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff fd8f 	bl	8008090 <nRF24_WriteReg>
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8008582:	22ff      	movs	r2, #255	; 0xff
 8008584:	21e2      	movs	r1, #226	; 0xe2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fd82 	bl	8008090 <nRF24_WriteReg>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800859c:	2107      	movs	r1, #7
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fd55 	bl	800804e <nRF24_ReadReg>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80085ae:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	461a      	mov	r2, r3
 80085b4:	2107      	movs	r1, #7
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff fd6a 	bl	8008090 <nRF24_WriteReg>
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <nRF24_ReadPayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80085d0:	2107      	movs	r1, #7
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff fd3b 	bl	800804e <nRF24_ReadReg>
 80085d8:	4603      	mov	r3, r0
 80085da:	105b      	asrs	r3, r3, #1
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d817      	bhi.n	800861a <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	4a0f      	ldr	r2, [pc, #60]	; (800862c <nRF24_ReadPayload+0x68>)
 80085ee:	5cd3      	ldrb	r3, [r2, r3]
 80085f0:	4619      	mov	r1, r3
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7ff fd2b 	bl	800804e <nRF24_ReadReg>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d006      	beq.n	8008616 <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	2161      	movs	r1, #97	; 0x61
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff fd7d 	bl	8008110 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	e003      	b.n	8008622 <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 8008620:	23ff      	movs	r3, #255	; 0xff
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	08008ae8 	.word	0x08008ae8

08008630 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af02      	add	r7, sp, #8
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800863c:	887b      	ldrh	r3, [r7, #2]
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	b29b      	uxth	r3, r3
 8008642:	b2da      	uxtb	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 8008648:	887b      	ldrh	r3, [r7, #2]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	791b      	ldrb	r3, [r3, #4]
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	b299      	uxth	r1, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f103 0209 	add.w	r2, r3, #9
 8008666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2302      	movs	r3, #2
 800866e:	f7fa f89f 	bl	80027b0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	b299      	uxth	r1, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	1d5a      	adds	r2, r3, #5
 800867e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	2301      	movs	r3, #1
 8008686:	f7fa f987 	bl	8002998 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	795b      	ldrb	r3, [r3, #5]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af02      	add	r7, sp, #8
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	807b      	strh	r3, [r7, #2]
 80086a2:	4613      	mov	r3, r2
 80086a4:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 80086a6:	887b      	ldrh	r3, [r7, #2]
 80086a8:	0a1b      	lsrs	r3, r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 80086b2:	887b      	ldrh	r3, [r7, #2]
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	791b      	ldrb	r3, [r3, #4]
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	787a      	ldrb	r2, [r7, #1]
 80086c6:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	b299      	uxth	r1, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f103 0209 	add.w	r2, r3, #9
 80086d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	2303      	movs	r3, #3
 80086de:	f7fa f867 	bl	80027b0 <HAL_I2C_Master_Transmit>
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	79fa      	ldrb	r2, [r7, #7]
 8008702:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8008704:	2100      	movs	r1, #0
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff ff92 	bl	8008630 <VL6180X_Read8>
 800870c:	4603      	mov	r3, r0
 800870e:	2bb4      	cmp	r3, #180	; 0xb4
 8008710:	d001      	beq.n	8008716 <VL6180X_Init+0x2c>
    return false;
 8008712:	2300      	movs	r3, #0
 8008714:	e011      	b.n	800873a <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 8008716:	2116      	movs	r1, #22
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff ff89 	bl	8008630 <VL6180X_Read8>
 800871e:	4603      	mov	r3, r0
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f80a 	bl	8008742 <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800872e:	2200      	movs	r2, #0
 8008730:	2116      	movs	r1, #22
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff ffaf 	bl	8008696 <VL6180X_Write8>
  }

  return true;
 8008738:	2301      	movs	r3, #1
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 800874a:	2201      	movs	r2, #1
 800874c:	f240 2107 	movw	r1, #519	; 0x207
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ffa0 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 8008756:	2201      	movs	r2, #1
 8008758:	f44f 7102 	mov.w	r1, #520	; 0x208
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ff9a 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 8008762:	2200      	movs	r2, #0
 8008764:	2196      	movs	r1, #150	; 0x96
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff ff95 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 800876c:	22fd      	movs	r2, #253	; 0xfd
 800876e:	2197      	movs	r1, #151	; 0x97
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ff90 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 8008776:	2200      	movs	r2, #0
 8008778:	21e3      	movs	r1, #227	; 0xe3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff ff8b 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 8008780:	2204      	movs	r2, #4
 8008782:	21e4      	movs	r1, #228	; 0xe4
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff ff86 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 800878a:	2202      	movs	r2, #2
 800878c:	21e5      	movs	r1, #229	; 0xe5
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff ff81 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 8008794:	2201      	movs	r2, #1
 8008796:	21e6      	movs	r1, #230	; 0xe6
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ff7c 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 800879e:	2203      	movs	r2, #3
 80087a0:	21e7      	movs	r1, #231	; 0xe7
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff ff77 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 80087a8:	2202      	movs	r2, #2
 80087aa:	21f5      	movs	r1, #245	; 0xf5
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff ff72 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 80087b2:	2205      	movs	r2, #5
 80087b4:	21d9      	movs	r1, #217	; 0xd9
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff ff6d 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 80087bc:	22ce      	movs	r2, #206	; 0xce
 80087be:	21db      	movs	r1, #219	; 0xdb
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ff68 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 80087c6:	2203      	movs	r2, #3
 80087c8:	21dc      	movs	r1, #220	; 0xdc
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ff63 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 80087d0:	22f8      	movs	r2, #248	; 0xf8
 80087d2:	21dd      	movs	r1, #221	; 0xdd
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ff5e 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 80087da:	2200      	movs	r2, #0
 80087dc:	219f      	movs	r1, #159	; 0x9f
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff ff59 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 80087e4:	223c      	movs	r2, #60	; 0x3c
 80087e6:	21a3      	movs	r1, #163	; 0xa3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff ff54 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 80087ee:	2200      	movs	r2, #0
 80087f0:	21b7      	movs	r1, #183	; 0xb7
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff ff4f 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 80087f8:	223c      	movs	r2, #60	; 0x3c
 80087fa:	21bb      	movs	r1, #187	; 0xbb
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff ff4a 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 8008802:	2209      	movs	r2, #9
 8008804:	21b2      	movs	r1, #178	; 0xb2
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7ff ff45 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800880c:	2209      	movs	r2, #9
 800880e:	21ca      	movs	r1, #202	; 0xca
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff40 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 8008816:	2201      	movs	r2, #1
 8008818:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ff3a 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 8008822:	2217      	movs	r2, #23
 8008824:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff34 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800882e:	2200      	movs	r2, #0
 8008830:	f240 11ad 	movw	r1, #429	; 0x1ad
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff ff2e 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800883a:	2205      	movs	r2, #5
 800883c:	21ff      	movs	r1, #255	; 0xff
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff ff29 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 8008844:	2205      	movs	r2, #5
 8008846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff23 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 8008850:	2205      	movs	r2, #5
 8008852:	f240 1199 	movw	r1, #409	; 0x199
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff ff1d 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800885c:	221b      	movs	r2, #27
 800885e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff ff17 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 8008868:	223e      	movs	r2, #62	; 0x3e
 800886a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff ff11 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 8008874:	221f      	movs	r2, #31
 8008876:	f240 11a7 	movw	r1, #423	; 0x1a7
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7ff ff0b 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 8008880:	2200      	movs	r2, #0
 8008882:	2130      	movs	r1, #48	; 0x30
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ff06 	bl	8008696 <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 800888a:	2210      	movs	r2, #16
 800888c:	2111      	movs	r1, #17
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff ff01 	bl	8008696 <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 8008894:	2230      	movs	r2, #48	; 0x30
 8008896:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff fefb 	bl	8008696 <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 80088a0:	2246      	movs	r2, #70	; 0x46
 80088a2:	213f      	movs	r1, #63	; 0x3f
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff fef6 	bl	8008696 <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 80088aa:	22ff      	movs	r2, #255	; 0xff
 80088ac:	2131      	movs	r1, #49	; 0x31
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fef1 	bl	8008696 <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 80088b4:	2263      	movs	r2, #99	; 0x63
 80088b6:	2141      	movs	r1, #65	; 0x41
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff feec 	bl	8008696 <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 80088be:	2201      	movs	r2, #1
 80088c0:	212e      	movs	r1, #46	; 0x2e
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff fee7 	bl	8008696 <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 80088c8:	2209      	movs	r2, #9
 80088ca:	211b      	movs	r1, #27
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fee2 	bl	8008696 <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 80088d2:	2231      	movs	r2, #49	; 0x31
 80088d4:	213e      	movs	r1, #62	; 0x3e
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fedd 	bl	8008696 <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 80088dc:	2224      	movs	r2, #36	; 0x24
 80088de:	2114      	movs	r1, #20
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fed8 	bl	8008696 <VL6180X_Write8>
                        // Ready threshold event'
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 80088f6:	bf00      	nop
 80088f8:	214d      	movs	r1, #77	; 0x4d
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff fe98 	bl	8008630 <VL6180X_Read8>
 8008900:	4603      	mov	r3, r0
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f6      	beq.n	80088f8 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800890a:	2201      	movs	r2, #1
 800890c:	2118      	movs	r1, #24
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fec1 	bl	8008696 <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 8008914:	bf00      	nop
 8008916:	214f      	movs	r1, #79	; 0x4f
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff fe89 	bl	8008630 <VL6180X_Read8>
 800891e:	4603      	mov	r3, r0
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f6      	beq.n	8008916 <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 8008928:	2162      	movs	r1, #98	; 0x62
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fe80 	bl	8008630 <VL6180X_Read8>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8008934:	2207      	movs	r2, #7
 8008936:	2115      	movs	r1, #21
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff feac 	bl	8008696 <VL6180X_Write8>

  return range;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <__errno>:
 8008948:	4b01      	ldr	r3, [pc, #4]	; (8008950 <__errno+0x8>)
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20000018 	.word	0x20000018

08008954 <__libc_init_array>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4d0d      	ldr	r5, [pc, #52]	; (800898c <__libc_init_array+0x38>)
 8008958:	4c0d      	ldr	r4, [pc, #52]	; (8008990 <__libc_init_array+0x3c>)
 800895a:	1b64      	subs	r4, r4, r5
 800895c:	10a4      	asrs	r4, r4, #2
 800895e:	2600      	movs	r6, #0
 8008960:	42a6      	cmp	r6, r4
 8008962:	d109      	bne.n	8008978 <__libc_init_array+0x24>
 8008964:	4d0b      	ldr	r5, [pc, #44]	; (8008994 <__libc_init_array+0x40>)
 8008966:	4c0c      	ldr	r4, [pc, #48]	; (8008998 <__libc_init_array+0x44>)
 8008968:	f000 f852 	bl	8008a10 <_init>
 800896c:	1b64      	subs	r4, r4, r5
 800896e:	10a4      	asrs	r4, r4, #2
 8008970:	2600      	movs	r6, #0
 8008972:	42a6      	cmp	r6, r4
 8008974:	d105      	bne.n	8008982 <__libc_init_array+0x2e>
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	f855 3b04 	ldr.w	r3, [r5], #4
 800897c:	4798      	blx	r3
 800897e:	3601      	adds	r6, #1
 8008980:	e7ee      	b.n	8008960 <__libc_init_array+0xc>
 8008982:	f855 3b04 	ldr.w	r3, [r5], #4
 8008986:	4798      	blx	r3
 8008988:	3601      	adds	r6, #1
 800898a:	e7f2      	b.n	8008972 <__libc_init_array+0x1e>
 800898c:	08008b00 	.word	0x08008b00
 8008990:	08008b00 	.word	0x08008b00
 8008994:	08008b00 	.word	0x08008b00
 8008998:	08008b04 	.word	0x08008b04

0800899c <memcpy>:
 800899c:	440a      	add	r2, r1
 800899e:	4291      	cmp	r1, r2
 80089a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a4:	d100      	bne.n	80089a8 <memcpy+0xc>
 80089a6:	4770      	bx	lr
 80089a8:	b510      	push	{r4, lr}
 80089aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b2:	4291      	cmp	r1, r2
 80089b4:	d1f9      	bne.n	80089aa <memcpy+0xe>
 80089b6:	bd10      	pop	{r4, pc}

080089b8 <memset>:
 80089b8:	4402      	add	r2, r0
 80089ba:	4603      	mov	r3, r0
 80089bc:	4293      	cmp	r3, r2
 80089be:	d100      	bne.n	80089c2 <memset+0xa>
 80089c0:	4770      	bx	lr
 80089c2:	f803 1b01 	strb.w	r1, [r3], #1
 80089c6:	e7f9      	b.n	80089bc <memset+0x4>

080089c8 <sqrt>:
 80089c8:	b508      	push	{r3, lr}
 80089ca:	ed2d 8b04 	vpush	{d8-d9}
 80089ce:	eeb0 8b40 	vmov.f64	d8, d0
 80089d2:	f000 f819 	bl	8008a08 <__ieee754_sqrt>
 80089d6:	eeb4 8b48 	vcmp.f64	d8, d8
 80089da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089de:	d60c      	bvs.n	80089fa <sqrt+0x32>
 80089e0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8008a00 <sqrt+0x38>
 80089e4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80089e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ec:	d505      	bpl.n	80089fa <sqrt+0x32>
 80089ee:	f7ff ffab 	bl	8008948 <__errno>
 80089f2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80089f6:	2321      	movs	r3, #33	; 0x21
 80089f8:	6003      	str	r3, [r0, #0]
 80089fa:	ecbd 8b04 	vpop	{d8-d9}
 80089fe:	bd08      	pop	{r3, pc}
	...

08008a08 <__ieee754_sqrt>:
 8008a08:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8008a0c:	4770      	bx	lr
	...

08008a10 <_init>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr

08008a1c <_fini>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	bf00      	nop
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr
