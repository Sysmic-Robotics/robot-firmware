
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009468  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009740  08009740  0000b090  2**0
                  CONTENTS
  4 .ARM          00000008  08009740  08009740  0000a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009748  08009748  0000b090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  0000a748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0000a74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009750  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004474  20000090  080097e0  0000b090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004504  080097e0  0000b504  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2bf  00000000  00000000  0000b0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e50  00000000  00000000  0002537d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  000291d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130a  00000000  00000000  0002aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ee  00000000  00000000  0002bd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df89  00000000  00000000  00031470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104079  00000000  00000000  0004f3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006874  00000000  00000000  001534b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00159d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	08009650 	.word	0x08009650

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	08009650 	.word	0x08009650

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b09a      	sub	sp, #104	@ 0x68
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 fea6 	bl	8002286 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f8f1 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 fbb9 	bl	8000cb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000542:	f000 fa1b 	bl	800097c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000546:	f000 f959 	bl	80007fc <MX_I2C1_Init>
  MX_I2C2_Init();
 800054a:	f000 f997 	bl	800087c <MX_I2C2_Init>
  MX_TIM2_Init();
 800054e:	f000 fa57 	bl	8000a00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 faa9 	bl	8000aa8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000556:	f000 fafd 	bl	8000b54 <MX_TIM5_Init>
  MX_TIM8_Init();
 800055a:	f000 fb51 	bl	8000c00 <MX_TIM8_Init>
  MX_I2C3_Init();
 800055e:	f000 f9cd 	bl	80008fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	/* Define wheels angles in motor.h */
	kinematic[0][0] = sin(WHEEL_ANGlE_1); kinematic[0][1] = -cos(WHEEL_ANGlE_1); kinematic[0][2] = -ROBOT_RADIO;
 8000562:	4b5a      	ldr	r3, [pc, #360]	@ (80006cc <main+0x19c>)
 8000564:	4a5a      	ldr	r2, [pc, #360]	@ (80006d0 <main+0x1a0>)
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <main+0x19c>)
 800056a:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	4b56      	ldr	r3, [pc, #344]	@ (80006cc <main+0x19c>)
 8000572:	4a58      	ldr	r2, [pc, #352]	@ (80006d4 <main+0x1a4>)
 8000574:	609a      	str	r2, [r3, #8]
	kinematic[1][0] = sin(WHEEL_ANGlE_2); kinematic[1][1] = -cos(WHEEL_ANGlE_2); kinematic[1][2] = -ROBOT_RADIO;
 8000576:	4b55      	ldr	r3, [pc, #340]	@ (80006cc <main+0x19c>)
 8000578:	4a57      	ldr	r2, [pc, #348]	@ (80006d8 <main+0x1a8>)
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <main+0x19c>)
 800057e:	4a57      	ldr	r2, [pc, #348]	@ (80006dc <main+0x1ac>)
 8000580:	611a      	str	r2, [r3, #16]
 8000582:	4b52      	ldr	r3, [pc, #328]	@ (80006cc <main+0x19c>)
 8000584:	4a53      	ldr	r2, [pc, #332]	@ (80006d4 <main+0x1a4>)
 8000586:	615a      	str	r2, [r3, #20]
	kinematic[2][0] = sin(WHEEL_ANGlE_3); kinematic[2][1] = -cos(WHEEL_ANGlE_3); kinematic[2][2] = -ROBOT_RADIO;
 8000588:	4b50      	ldr	r3, [pc, #320]	@ (80006cc <main+0x19c>)
 800058a:	4a55      	ldr	r2, [pc, #340]	@ (80006e0 <main+0x1b0>)
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b4f      	ldr	r3, [pc, #316]	@ (80006cc <main+0x19c>)
 8000590:	4a52      	ldr	r2, [pc, #328]	@ (80006dc <main+0x1ac>)
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	4b4d      	ldr	r3, [pc, #308]	@ (80006cc <main+0x19c>)
 8000596:	4a4f      	ldr	r2, [pc, #316]	@ (80006d4 <main+0x1a4>)
 8000598:	621a      	str	r2, [r3, #32]
	kinematic[3][0] = sin(WHEEL_ANGlE_4); kinematic[3][1] = -cos(WHEEL_ANGlE_4); kinematic[3][2] = -ROBOT_RADIO;
 800059a:	4b4c      	ldr	r3, [pc, #304]	@ (80006cc <main+0x19c>)
 800059c:	4a51      	ldr	r2, [pc, #324]	@ (80006e4 <main+0x1b4>)
 800059e:	625a      	str	r2, [r3, #36]	@ 0x24
 80005a0:	4b4a      	ldr	r3, [pc, #296]	@ (80006cc <main+0x19c>)
 80005a2:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80005a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a8:	4b48      	ldr	r3, [pc, #288]	@ (80006cc <main+0x19c>)
 80005aa:	4a4a      	ldr	r2, [pc, #296]	@ (80006d4 <main+0x1a4>)
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c

	for (uint8_t i = 0; i < 10; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80005b4:	e016      	b.n	80005e4 <main+0xb4>
	{
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 80005b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ba:	484b      	ldr	r0, [pc, #300]	@ (80006e8 <main+0x1b8>)
 80005bc:	f008 f83a 	bl	8008634 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 80005c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c4:	4848      	ldr	r0, [pc, #288]	@ (80006e8 <main+0x1b8>)
 80005c6:	f008 f835 	bl	8008634 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 80005ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ce:	4846      	ldr	r0, [pc, #280]	@ (80006e8 <main+0x1b8>)
 80005d0:	f008 f830 	bl	8008634 <Board_LedToggle>
		HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	@ 0x64
 80005d6:	f001 fe83 	bl	80022e0 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++)
 80005da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80005de:	3301      	adds	r3, #1
 80005e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80005e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	d9e4      	bls.n	80005b6 <main+0x86>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of kickFlag */
  osMutexDef(kickFlag);
 80005ec:	2300      	movs	r3, #0
 80005ee:	663b      	str	r3, [r7, #96]	@ 0x60
  kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 80005f0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 f92f 	bl	8005858 <osMutexCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <main+0x1bc>)
 80005fe:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of kickQueue */
  osMessageQDef(kickQueue, 1, uint16_t);
 8000600:	4a3b      	ldr	r2, [pc, #236]	@ (80006f0 <main+0x1c0>)
 8000602:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060a:	e883 0003 	stmia.w	r3, {r0, r1}
  kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 800060e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 f9af 	bl	8005978 <osMessageCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a35      	ldr	r2, [pc, #212]	@ (80006f4 <main+0x1c4>)
 800061e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(nrf24Check, 16, uint16_t);
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <main+0x1c8>)
 8000622:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062a:	e883 0003 	stmia.w	r3, {r0, r1}
  nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 800062e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f005 f99f 	bl	8005978 <osMessageCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a2f      	ldr	r2, [pc, #188]	@ (80006fc <main+0x1cc>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of driveTask */
  osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <main+0x1d0>)
 8000642:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	6023      	str	r3, [r4, #0]
  driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8000650:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 f8c3 	bl	80057e2 <osThreadCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <main+0x1d4>)
 8000660:	6013      	str	r3, [r2, #0]

  /* definition and creation of radioTask */
  osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8000662:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <main+0x1d8>)
 8000664:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	6023      	str	r3, [r4, #0]
  radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8000672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f005 f8b2 	bl	80057e2 <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <main+0x1dc>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of kickTask */
  osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <main+0x1e0>)
 8000686:	f107 0414 	add.w	r4, r7, #20
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	6023      	str	r3, [r4, #0]
  kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 f8a1 	bl	80057e2 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <main+0x1e4>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <main+0x1e8>)
 80006a8:	463c      	mov	r4, r7
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	6023      	str	r3, [r4, #0]
  ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 80006b4:	463b      	mov	r3, r7
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 f892 	bl	80057e2 <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <main+0x1ec>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c4:	f005 f876 	bl	80057b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <main+0x198>
 80006cc:	20000374 	.word	0x20000374
 80006d0:	3f5db3d7 	.word	0x3f5db3d7
 80006d4:	bda83e42 	.word	0xbda83e42
 80006d8:	3f441b7d 	.word	0x3f441b7d
 80006dc:	3f248dbb 	.word	0x3f248dbb
 80006e0:	bf441b7d 	.word	0xbf441b7d
 80006e4:	bf5db3d7 	.word	0xbf5db3d7
 80006e8:	40022000 	.word	0x40022000
 80006ec:	2000034c 	.word	0x2000034c
 80006f0:	08009668 	.word	0x08009668
 80006f4:	20000348 	.word	0x20000348
 80006f8:	08009670 	.word	0x08009670
 80006fc:	20000354 	.word	0x20000354
 8000700:	08009684 	.word	0x08009684
 8000704:	2000033c 	.word	0x2000033c
 8000708:	080096a4 	.word	0x080096a4
 800070c:	20000340 	.word	0x20000340
 8000710:	080096c4 	.word	0x080096c4
 8000714:	20000344 	.word	0x20000344
 8000718:	080096ec 	.word	0x080096ec
 800071c:	20000350 	.word	0x20000350

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	@ 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f008 ff2a 	bl	8009588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a2a      	ldr	r2, [pc, #168]	@ (80007f4 <SystemClock_Config+0xd4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <SystemClock_Config+0xd8>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800078c:	23d8      	movs	r3, #216	@ 0xd8
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fe69 	bl	8003478 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007ac:	f001 fa38 	bl	8001c20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b0:	f002 fe12 	bl	80033d8 <HAL_PWREx_EnableOverDrive>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ba:	f001 fa31 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2107      	movs	r1, #7
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 f8f9 	bl	80039d4 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007e8:	f001 fa1a 	bl	8001c20 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	@ 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000838:	f002 f850 	bl	80028dc <HAL_I2C_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000842:	f001 f9ed 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x74>)
 800084a:	f002 fd2d 	bl	80032a8 <HAL_I2CEx_ConfigAnalogFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f001 f9e4 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C1_Init+0x74>)
 800085c:	f002 fd6f 	bl	800333e <HAL_I2CEx_ConfigDigitalFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f001 f9db 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000ac 	.word	0x200000ac
 8000874:	40005400 	.word	0x40005400
 8000878:	6000030d 	.word	0x6000030d

0800087c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <MX_I2C2_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <MX_I2C2_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8000886:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_I2C2_Init+0x74>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <MX_I2C2_Init+0x7c>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_I2C2_Init+0x74>)
 8000894:	2201      	movs	r2, #1
 8000896:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008b8:	f002 f810 	bl	80028dc <HAL_I2C_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008c2:	f001 f9ad 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008ca:	f002 fced 	bl	80032a8 <HAL_I2CEx_ConfigAnalogFilter>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f001 f9a4 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_I2C2_Init+0x74>)
 80008dc:	f002 fd2f 	bl	800333e <HAL_I2CEx_ConfigDigitalFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f001 f99b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000100 	.word	0x20000100
 80008f4:	40005800 	.word	0x40005800
 80008f8:	6000030d 	.word	0x6000030d

080008fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <MX_I2C3_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <MX_I2C3_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_I2C3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_I2C3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_I2C3_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <MX_I2C3_Init+0x74>)
 8000938:	f001 ffd0 	bl	80028dc <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000942:	f001 f96d 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <MX_I2C3_Init+0x74>)
 800094a:	f002 fcad 	bl	80032a8 <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000954:	f001 f964 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_I2C3_Init+0x74>)
 800095c:	f002 fcef 	bl	800333e <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000966:	f001 f95b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000154 	.word	0x20000154
 8000974:	40005c00 	.word	0x40005c00
 8000978:	6000030d 	.word	0x6000030d

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000982:	4a1e      	ldr	r2, [pc, #120]	@ (80009fc <MX_SPI1_Init+0x80>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000988:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 8000996:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800099a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009b2:	2218      	movs	r2, #24
 80009b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009d6:	2208      	movs	r2, #8
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009da:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009dc:	f003 fe66 	bl	80046ac <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f001 f91b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 80009ea:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <MX_SPI1_Init+0x7c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009f2:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001a8 	.word	0x200001a8
 80009fc:	40013000 	.word	0x40013000

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2224      	movs	r2, #36	@ 0x24
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fdba 	bl	8009588 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a72:	f004 fb3b 	bl	80050ec <HAL_TIM_Encoder_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a7c:	f001 f8d0 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a8e:	f004 fdbb 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a98:	f001 f8c2 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	@ 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000020c 	.word	0x2000020c

08000aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2224      	movs	r2, #36	@ 0x24
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 fd66 	bl	8009588 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <MX_TIM3_Init+0xa8>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aec:	2303      	movs	r3, #3
 8000aee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000b18:	f004 fae8 	bl	80050ec <HAL_TIM_Encoder_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b22:	f001 f87d 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <MX_TIM3_Init+0xa4>)
 8000b34:	f004 fd68 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b3e:	f001 f86f 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	@ 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000258 	.word	0x20000258
 8000b50:	40000400 	.word	0x40000400

08000b54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2224      	movs	r2, #36	@ 0x24
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 fd10 	bl	8009588 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <MX_TIM5_Init+0xa8>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000bc4:	f004 fa92 	bl	80050ec <HAL_TIM_Encoder_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000bce:	f001 f827 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_TIM5_Init+0xa4>)
 8000be0:	f004 fd12 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000bea:	f001 f819 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	@ 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002a4 	.word	0x200002a4
 8000bfc:	40000c00 	.word	0x40000c00

08000c00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	@ 0x30
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2224      	movs	r2, #36	@ 0x24
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fcba 	bl	8009588 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c20:	4a23      	ldr	r2, [pc, #140]	@ (8000cb0 <MX_TIM8_Init+0xb0>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c76:	f004 fa39 	bl	80050ec <HAL_TIM_Encoder_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c80:	f000 ffce 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_TIM8_Init+0xac>)
 8000c96:	f004 fcb7 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ca0:	f000 ffbe 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	@ 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200002f0 	.word	0x200002f0
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	@ 0x40
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4bb3      	ldr	r3, [pc, #716]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4ab2      	ldr	r2, [pc, #712]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4bb0      	ldr	r3, [pc, #704]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	4bad      	ldr	r3, [pc, #692]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4aac      	ldr	r2, [pc, #688]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4baa      	ldr	r3, [pc, #680]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	4ba7      	ldr	r3, [pc, #668]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4aa6      	ldr	r2, [pc, #664]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4ba4      	ldr	r3, [pc, #656]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0e:	623b      	str	r3, [r7, #32]
 8000d10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4ba1      	ldr	r3, [pc, #644]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4aa0      	ldr	r2, [pc, #640]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b9b      	ldr	r3, [pc, #620]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a9a      	ldr	r2, [pc, #616]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b98      	ldr	r3, [pc, #608]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b95      	ldr	r3, [pc, #596]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a94      	ldr	r2, [pc, #592]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b92      	ldr	r3, [pc, #584]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a8e      	ldr	r2, [pc, #568]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b8c      	ldr	r3, [pc, #560]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b89      	ldr	r3, [pc, #548]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a88      	ldr	r2, [pc, #544]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b86      	ldr	r3, [pc, #536]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	4b83      	ldr	r3, [pc, #524]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a82      	ldr	r2, [pc, #520]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b80      	ldr	r3, [pc, #512]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000da2:	4b7d      	ldr	r3, [pc, #500]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a7c      	ldr	r2, [pc, #496]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000da8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b7a      	ldr	r3, [pc, #488]	@ (8000f98 <MX_GPIO_Init+0x2e4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000dc0:	4876      	ldr	r0, [pc, #472]	@ (8000f9c <MX_GPIO_Init+0x2e8>)
 8000dc2:	f001 fd57 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f640 0138 	movw	r1, #2104	@ 0x838
 8000dcc:	4874      	ldr	r0, [pc, #464]	@ (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000dce:	f001 fd51 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8000dd8:	4872      	ldr	r0, [pc, #456]	@ (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000dda:	f001 fd4b 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de4:	4870      	ldr	r0, [pc, #448]	@ (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000de6:	f001 fd45 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000df0:	486e      	ldr	r0, [pc, #440]	@ (8000fac <MX_GPIO_Init+0x2f8>)
 8000df2:	f001 fd3f 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000dfc:	486c      	ldr	r0, [pc, #432]	@ (8000fb0 <MX_GPIO_Init+0x2fc>)
 8000dfe:	f001 fd39 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2101      	movs	r1, #1
 8000e06:	486b      	ldr	r0, [pc, #428]	@ (8000fb4 <MX_GPIO_Init+0x300>)
 8000e08:	f001 fd34 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8000e12:	4869      	ldr	r0, [pc, #420]	@ (8000fb8 <MX_GPIO_Init+0x304>)
 8000e14:	f001 fd2e 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	21c0      	movs	r1, #192	@ 0xc0
 8000e1c:	4867      	ldr	r0, [pc, #412]	@ (8000fbc <MX_GPIO_Init+0x308>)
 8000e1e:	f001 fd29 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000e22:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4858      	ldr	r0, [pc, #352]	@ (8000f9c <MX_GPIO_Init+0x2e8>)
 8000e3c:	f001 fb56 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8000e40:	f640 0338 	movw	r3, #2104	@ 0x838
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4851      	ldr	r0, [pc, #324]	@ (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000e5a:	f001 fb47 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4853      	ldr	r0, [pc, #332]	@ (8000fc0 <MX_GPIO_Init+0x30c>)
 8000e72:	f001 fb3b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e76:	2310      	movs	r3, #16
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e86:	4619      	mov	r1, r3
 8000e88:	4849      	ldr	r0, [pc, #292]	@ (8000fb0 <MX_GPIO_Init+0x2fc>)
 8000e8a:	f001 fb2f 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4841      	ldr	r0, [pc, #260]	@ (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000ea2:	f001 fb23 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4838      	ldr	r0, [pc, #224]	@ (8000f9c <MX_GPIO_Init+0x2e8>)
 8000ebc:	f001 fb16 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4834      	ldr	r0, [pc, #208]	@ (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000ed4:	f001 fb0a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ed8:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482c      	ldr	r0, [pc, #176]	@ (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000ef2:	f001 fafb 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4826      	ldr	r0, [pc, #152]	@ (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000f10:	f001 faec 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f14:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481f      	ldr	r0, [pc, #124]	@ (8000fac <MX_GPIO_Init+0x2f8>)
 8000f2e:	f001 fadd 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4819      	ldr	r0, [pc, #100]	@ (8000fb0 <MX_GPIO_Init+0x2fc>)
 8000f4c:	f001 face 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f64:	4619      	mov	r1, r3
 8000f66:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <MX_GPIO_Init+0x300>)
 8000f68:	f001 fac0 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f6c:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <MX_GPIO_Init+0x304>)
 8000f86:	f001 fab1 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f8a:	23c0      	movs	r3, #192	@ 0xc0
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e016      	b.n	8000fc4 <MX_GPIO_Init+0x310>
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40022400 	.word	0x40022400
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40022800 	.word	0x40022800
 8000fc0:	40021c00 	.word	0x40021c00
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <MX_GPIO_Init+0x32c>)
 8000fd2:	f001 fa8b 	bl	80024ec <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3740      	adds	r7, #64	@ 0x40
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022800 	.word	0x40022800

08000fe4 <updateBuffer>:

/* USER CODE BEGIN 4 */

// Function to fill the txBuffer with motor speeds
void updateBuffer(uint8_t *buffer) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

	// Fill buffer with zeros if necessary
	memset(&buffer[0], 0, 32);
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f008 fac9 	bl	8009588 <memset>

    // Copy the motor speeds to the txBuffer
    memcpy(&buffer[0], &motor[0].measSpeed, sizeof(float));
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <updateBuffer+0x70>)
 8000ff8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
    memcpy(&buffer[4], '\n',1);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	2201      	movs	r2, #1
 8001004:	210a      	movs	r1, #10
 8001006:	4618      	mov	r0, r3
 8001008:	f008 faf0 	bl	80095ec <memcpy>
    memcpy(&buffer[5], &motor[1].measSpeed, sizeof(float));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3305      	adds	r3, #5
 8001010:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <updateBuffer+0x70>)
 8001012:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 8001016:	601a      	str	r2, [r3, #0]
    memcpy(&buffer[9], '\n',1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3309      	adds	r3, #9
 800101c:	2201      	movs	r2, #1
 800101e:	210a      	movs	r1, #10
 8001020:	4618      	mov	r0, r3
 8001022:	f008 fae3 	bl	80095ec <memcpy>
    memcpy(&buffer[10], &motor[2].measSpeed, sizeof(float));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	330a      	adds	r3, #10
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <updateBuffer+0x70>)
 800102c:	f8d2 216c 	ldr.w	r2, [r2, #364]	@ 0x16c
 8001030:	601a      	str	r2, [r3, #0]
    memcpy(&buffer[14], '\n',1);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330e      	adds	r3, #14
 8001036:	2201      	movs	r2, #1
 8001038:	210a      	movs	r1, #10
 800103a:	4618      	mov	r0, r3
 800103c:	f008 fad6 	bl	80095ec <memcpy>
    memcpy(&buffer[15], &motor[3].measSpeed, sizeof(float));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	330f      	adds	r3, #15
 8001044:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <updateBuffer+0x70>)
 8001046:	f8d2 21e8 	ldr.w	r2, [r2, #488]	@ 0x1e8
 800104a:	601a      	str	r2, [r3, #0]



}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003a4 	.word	0x200003a4

08001058 <nRF24_TxPacket>:


void nRF24_TxPacket(nRF24_Handler_t *device, uint8_t* Buf, uint32_t Len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106a:	4822      	ldr	r0, [pc, #136]	@ (80010f4 <nRF24_TxPacket+0x9c>)
 800106c:	f001 fc02 	bl	8002874 <HAL_GPIO_WritePin>

	for(uint32_t i = 0; i < Len; i++)	{
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e00c      	b.n	8001090 <nRF24_TxPacket+0x38>
		device->tx_data[i] = *Buf++;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	7819      	ldrb	r1, [r3, #0]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4413      	add	r3, r2
 8001084:	3316      	adds	r3, #22
 8001086:	460a      	mov	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < Len; i++)	{
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3ee      	bcc.n	8001076 <nRF24_TxPacket+0x1e>
	}


	nRF24_WritePayload(device, device->tx_data, Len);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3316      	adds	r3, #22
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f008 f89d 	bl	80091e2 <nRF24_WritePayload>
	nRF24_CE_State(device, GPIO_PIN_SET);
 80010a8:	2101      	movs	r1, #1
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f007 fc7b 	bl	80089a6 <nRF24_CE_State>

	while(!(status & (nRF24_FLAG_TX_DS)))	{
 80010b0:	e006      	b.n	80010c0 <nRF24_TxPacket+0x68>
		status = nRF24_GetStatus(device);
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f008 f819 	bl	80090ea <nRF24_GetStatus>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <nRF24_TxPacket+0xa0>)
 80010be:	701a      	strb	r2, [r3, #0]
	while(!(status & (nRF24_FLAG_TX_DS)))	{
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <nRF24_TxPacket+0xa0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f2      	beq.n	80010b2 <nRF24_TxPacket+0x5a>
	}

	nRF24_ClearIRQFlagsTx(device);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f008 f858 	bl	8009182 <nRF24_ClearIRQFlagsTx>
	nRF24_FlushTX(device);
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f008 f823 	bl	800911e <nRF24_FlushTX>

	nRF24_CE_State(device, GPIO_PIN_RESET);
 80010d8:	2100      	movs	r1, #0
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f007 fc63 	bl	80089a6 <nRF24_CE_State>

	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e6:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <nRF24_TxPacket+0x9c>)
 80010e8:	f001 fbc4 	bl	8002874 <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40022000 	.word	0x40022000
 80010f8:	2000035b 	.word	0x2000035b

080010fc <setSpeed>:
//}


float v_vel[3];
void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8001108:	4bb1      	ldr	r3, [pc, #708]	@ (80013d0 <setSpeed+0x2d4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800110e:	4bb0      	ldr	r3, [pc, #704]	@ (80013d0 <setSpeed+0x2d4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b25b      	sxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	da16      	bge.n	800114e <setSpeed+0x52>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3304      	adds	r3, #4
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001136:	4313      	orrs	r3, r2
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	eeb1 7a67 	vneg.f32	s14, s15
 8001144:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80013d4 <setSpeed+0x2d8>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	e013      	b.n	8001176 <setSpeed+0x7a>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001164:	4313      	orrs	r3, r2
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116e:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80013d4 <setSpeed+0x2d8>
 8001172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001176:	4b96      	ldr	r3, [pc, #600]	@ (80013d0 <setSpeed+0x2d4>)
 8001178:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3302      	adds	r3, #2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	da16      	bge.n	80011b6 <setSpeed+0xba>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3304      	adds	r3, #4
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3302      	adds	r3, #2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800119e:	4313      	orrs	r3, r2
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a8:	eeb1 7a67 	vneg.f32	s14, s15
 80011ac:	eddf 6a89 	vldr	s13, [pc, #548]	@ 80013d4 <setSpeed+0x2d8>
 80011b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b4:	e013      	b.n	80011de <setSpeed+0xe2>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	f403 72c0 	and.w	r2, r3, #384	@ 0x180
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3302      	adds	r3, #2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011cc:	4313      	orrs	r3, r2
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80013d4 <setSpeed+0x2d8>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	4b7c      	ldr	r3, [pc, #496]	@ (80013d0 <setSpeed+0x2d4>)
 80011e0:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3303      	adds	r3, #3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da16      	bge.n	800121e <setSpeed+0x122>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3304      	adds	r3, #4
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	01db      	lsls	r3, r3, #7
 80011f8:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3303      	adds	r3, #3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001206:	4313      	orrs	r3, r2
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	eeb1 7a67 	vneg.f32	s14, s15
 8001214:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80013d4 <setSpeed+0x2d8>
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	e013      	b.n	8001246 <setSpeed+0x14a>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	01db      	lsls	r3, r3, #7
 8001226:	f403 62f0 	and.w	r2, r3, #1920	@ 0x780
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3303      	adds	r3, #3
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001234:	4313      	orrs	r3, r2
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123e:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80013d4 <setSpeed+0x2d8>
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001246:	4b62      	ldr	r3, [pc, #392]	@ (80013d0 <setSpeed+0x2d4>)
 8001248:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <setSpeed+0x2d4>)
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125a:	edc7 7a08 	vstr	s15, [r7, #32]
 800125e:	4b5c      	ldr	r3, [pc, #368]	@ (80013d0 <setSpeed+0x2d4>)
 8001260:	ed93 7a01 	vldr	s14, [r3, #4]
 8001264:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 8001270:	edd7 7a08 	vldr	s15, [r7, #32]
 8001274:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001278:	edd7 7a07 	vldr	s15, [r7, #28]
 800127c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8001288:	edd7 7a06 	vldr	s15, [r7, #24]
 800128c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001290:	eeb0 0b47 	vmov.f64	d0, d7
 8001294:	f008 f9b8 	bl	8009608 <sqrt>
 8001298:	eeb0 7b40 	vmov.f64	d7, d0
 800129c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a0:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 80012a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80012a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80012ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b0:	edc7 7a05 	vstr	s15, [r7, #20]
 80012b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80012b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80012bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c0:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 80012c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80013d8 <setSpeed+0x2dc>
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd23      	ble.n	800131e <setSpeed+0x222>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 80012d6:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <setSpeed+0x2e0>)
 80012d8:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 80012da:	ed97 7a05 	vldr	s14, [r7, #20]
 80012de:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 80012ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80012ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 80012fa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	4b32      	ldr	r3, [pc, #200]	@ (80013d0 <setSpeed+0x2d4>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 800130c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001310:	edd7 7a07 	vldr	s15, [r7, #28]
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <setSpeed+0x2d4>)
 800131a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001324:	e04b      	b.n	80013be <setSpeed+0x2c2>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30
		for (uint8_t j = 0; j < 3; j++)
 800132c:	2300      	movs	r3, #0
 800132e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001332:	e020      	b.n	8001376 <setSpeed+0x27a>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8001334:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001338:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800133c:	4828      	ldr	r0, [pc, #160]	@ (80013e0 <setSpeed+0x2e4>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	440b      	add	r3, r1
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4403      	add	r3, r0
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001352:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <setSpeed+0x2d4>)
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		for (uint8_t j = 0; j < 3; j++)
 800136c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001370:	3301      	adds	r3, #1
 8001372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001376:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800137a:	2b02      	cmp	r3, #2
 800137c:	d9da      	bls.n	8001334 <setSpeed+0x238>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 800137e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	bfcc      	ite	gt
 800138c:	2301      	movgt	r3, #1
 800138e:	2300      	movle	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4619      	mov	r1, r3
 800139a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 80013a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013b2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 80013b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013b8:	3301      	adds	r3, #1
 80013ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80013be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d9af      	bls.n	8001326 <setSpeed+0x22a>
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3738      	adds	r7, #56	@ 0x38
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000608 	.word	0x20000608
 80013d4:	42c80000 	.word	0x42c80000
 80013d8:	3dcccccd 	.word	0x3dcccccd
 80013dc:	3dcccccd 	.word	0x3dcccccd
 80013e0:	20000374 	.word	0x20000374

080013e4 <getDribbler_speed>:

uint8_t getDribbler_speed(uint8_t *buffer)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	109b      	asrs	r3, r3, #2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	105b      	asrs	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <BallDetectorFunction>:

uint16_t ball_range;
uint16_t ball_accum;
uint8_t ball_meas_set[10];

void BallDetectorFunction(void const * argument) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  //uint32_t timeToWait = osKernelSysTick();
  VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8001434:	2229      	movs	r2, #41	@ 0x29
 8001436:	4928      	ldr	r1, [pc, #160]	@ (80014d8 <BallDetectorFunction+0xac>)
 8001438:	4828      	ldr	r0, [pc, #160]	@ (80014dc <BallDetectorFunction+0xb0>)
 800143a:	f007 ff76 	bl	800932a <VL6180X_Init>
  ball_range = VL6180X_ReadRange(&range_sensor);
 800143e:	4827      	ldr	r0, [pc, #156]	@ (80014dc <BallDetectorFunction+0xb0>)
 8001440:	f008 f875 	bl	800952e <VL6180X_ReadRange>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <BallDetectorFunction+0xb4>)
 800144a:	801a      	strh	r2, [r3, #0]
  memset(ball_meas_set, ball_range, 10);
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <BallDetectorFunction+0xb4>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	220a      	movs	r2, #10
 8001452:	4619      	mov	r1, r3
 8001454:	4823      	ldr	r0, [pc, #140]	@ (80014e4 <BallDetectorFunction+0xb8>)
 8001456:	f008 f897 	bl	8009588 <memset>

  for (;;) {
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 800145a:	4820      	ldr	r0, [pc, #128]	@ (80014dc <BallDetectorFunction+0xb0>)
 800145c:	f008 f867 	bl	800952e <VL6180X_ReadRange>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <BallDetectorFunction+0xb8>)
 8001466:	701a      	strb	r2, [r3, #0]
    ball_accum = ball_meas_set[0];
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <BallDetectorFunction+0xb8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <BallDetectorFunction+0xbc>)
 8001470:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 9; i > 0; i--) {
 8001472:	2309      	movs	r3, #9
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e013      	b.n	80014a0 <BallDetectorFunction+0x74>
      ball_accum += ball_meas_set[i];
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	4a1a      	ldr	r2, [pc, #104]	@ (80014e4 <BallDetectorFunction+0xb8>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	461a      	mov	r2, r3
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <BallDetectorFunction+0xbc>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4413      	add	r3, r2
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <BallDetectorFunction+0xbc>)
 800148a:	801a      	strh	r2, [r3, #0]
      ball_meas_set[i] = ball_meas_set[i - 1];
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4914      	ldr	r1, [pc, #80]	@ (80014e4 <BallDetectorFunction+0xb8>)
 8001494:	5c89      	ldrb	r1, [r1, r2]
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <BallDetectorFunction+0xb8>)
 8001498:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 9; i > 0; i--) {
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3b01      	subs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e8      	bne.n	8001478 <BallDetectorFunction+0x4c>
    }
    ball_range = ball_accum / 10;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <BallDetectorFunction+0xbc>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	4a10      	ldr	r2, [pc, #64]	@ (80014ec <BallDetectorFunction+0xc0>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <BallDetectorFunction+0xb4>)
 80014b6:	801a      	strh	r2, [r3, #0]
    if (ball_range < VL6180X_THRESHOLD) {
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <BallDetectorFunction+0xb4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	2b40      	cmp	r3, #64	@ 0x40
 80014be:	d803      	bhi.n	80014c8 <BallDetectorFunction+0x9c>
      ball_posession = 0x01;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <BallDetectorFunction+0xc4>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e002      	b.n	80014ce <BallDetectorFunction+0xa2>
    }
    else ball_posession = 0x00;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <BallDetectorFunction+0xc4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f004 f9ae 	bl	8005830 <osDelay>
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 80014d4:	e7c1      	b.n	800145a <BallDetectorFunction+0x2e>
 80014d6:	bf00      	nop
 80014d8:	20000154 	.word	0x20000154
 80014dc:	200005f4 	.word	0x200005f4
 80014e0:	20000614 	.word	0x20000614
 80014e4:	20000618 	.word	0x20000618
 80014e8:	20000616 	.word	0x20000616
 80014ec:	cccccccd 	.word	0xcccccccd
 80014f0:	20000604 	.word	0x20000604

080014f4 <DriveFunction>:
	*/

osEvent kick_event;
/* USER CODE END Header_DriveFunction */
void DriveFunction(void const * argument)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b098      	sub	sp, #96	@ 0x60
 80014f8:	af06      	add	r7, sp, #24
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Init PID sampler */
	uint32_t timeToWait = osKernelSysTick();
 80014fc:	f004 f961 	bl	80057c2 <osKernelSysTick>
 8001500:	4603      	mov	r3, r0
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Init robot_id */
	robot_id = Board_GetID();
 8001504:	f007 f8a6 	bl	8008654 <Board_GetID>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4bbd      	ldr	r3, [pc, #756]	@ (8001804 <DriveFunction+0x310>)
 800150e:	801a      	strh	r2, [r3, #0]
	
	/* Init wheels motors DAC: 2.0[V] ref */
	MAX581x_Handler_t driveDAC;
	MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 8001510:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001514:	2202      	movs	r2, #2
 8001516:	49bc      	ldr	r1, [pc, #752]	@ (8001808 <DriveFunction+0x314>)
 8001518:	4618      	mov	r0, r3
 800151a:	f006 ff27 	bl	800836c <MAX581x_Init>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 800151e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f006 ff6f 	bl	800840a <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 800152c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f006 ff68 	bl	800840a <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 800153a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800153e:	2200      	movs	r2, #0
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f006 ff61 	bl	800840a <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 8001548:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800154c:	2200      	movs	r2, #0
 800154e:	2103      	movs	r1, #3
 8001550:	4618      	mov	r0, r3
 8001552:	f006 ff5a 	bl	800840a <MAX581x_Code>
	
	/* Init dribbler motor DAC: 2.0[V] ref */
	MAX581x_Handler_t dribblerDAC;
	MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	2202      	movs	r2, #2
 800155c:	49ab      	ldr	r1, [pc, #684]	@ (800180c <DriveFunction+0x318>)
 800155e:	4618      	mov	r0, r3
 8001560:	f006 ff04 	bl	800836c <MAX581x_Init>
	MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 8001564:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f006 ff4c 	bl	800840a <MAX581x_Code>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001578:	48a5      	ldr	r0, [pc, #660]	@ (8001810 <DriveFunction+0x31c>)
 800157a:	f001 f97b 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	48a3      	ldr	r0, [pc, #652]	@ (8001810 <DriveFunction+0x31c>)
 8001584:	f001 f976 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2140      	movs	r1, #64	@ 0x40
 800158c:	48a0      	ldr	r0, [pc, #640]	@ (8001810 <DriveFunction+0x31c>)
 800158e:	f001 f971 	bl	8002874 <HAL_GPIO_WritePin>
	
	/* Config motors GPIO and TIM */
	/* Motor 1 */
	motor[0].enablePin.GPIOx = GPIOA;
 8001592:	4ba0      	ldr	r3, [pc, #640]	@ (8001814 <DriveFunction+0x320>)
 8001594:	4aa0      	ldr	r2, [pc, #640]	@ (8001818 <DriveFunction+0x324>)
 8001596:	655a      	str	r2, [r3, #84]	@ 0x54
	motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 8001598:	4b9e      	ldr	r3, [pc, #632]	@ (8001814 <DriveFunction+0x320>)
 800159a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	motor[0].dirPin.GPIOx = GPIOA;
 80015a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001814 <DriveFunction+0x320>)
 80015a4:	4a9c      	ldr	r2, [pc, #624]	@ (8001818 <DriveFunction+0x324>)
 80015a6:	65da      	str	r2, [r3, #92]	@ 0x5c
	motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 80015a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001814 <DriveFunction+0x320>)
 80015aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	motor[0].brakePin.GPIOx = GPIOA;
 80015b2:	4b98      	ldr	r3, [pc, #608]	@ (8001814 <DriveFunction+0x320>)
 80015b4:	4a98      	ldr	r2, [pc, #608]	@ (8001818 <DriveFunction+0x324>)
 80015b6:	665a      	str	r2, [r3, #100]	@ 0x64
	motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 80015b8:	4b96      	ldr	r3, [pc, #600]	@ (8001814 <DriveFunction+0x320>)
 80015ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	
	motor[0].encoder.count = &TIM3->CNT;
 80015c2:	4b94      	ldr	r3, [pc, #592]	@ (8001814 <DriveFunction+0x320>)
 80015c4:	4a95      	ldr	r2, [pc, #596]	@ (800181c <DriveFunction+0x328>)
 80015c6:	641a      	str	r2, [r3, #64]	@ 0x40
	motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 80015c8:	4b95      	ldr	r3, [pc, #596]	@ (8001820 <DriveFunction+0x32c>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80015d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015dc:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001824 <DriveFunction+0x330>
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	4b8b      	ldr	r3, [pc, #556]	@ (8001814 <DriveFunction+0x320>)
 80015e6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 80015ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001814 <DriveFunction+0x320>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <DriveFunction+0x320>)
 80015f4:	4a8c      	ldr	r2, [pc, #560]	@ (8001828 <DriveFunction+0x334>)
 80015f6:	64da      	str	r2, [r3, #76]	@ 0x4c
	TIM3->CR1 = TIM_CR1_CEN;
 80015f8:	4b89      	ldr	r3, [pc, #548]	@ (8001820 <DriveFunction+0x32c>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
	
	/* Motor 2 */
	motor[1].enablePin.GPIOx = GPIOC;
 80015fe:	4b85      	ldr	r3, [pc, #532]	@ (8001814 <DriveFunction+0x320>)
 8001600:	4a8a      	ldr	r2, [pc, #552]	@ (800182c <DriveFunction+0x338>)
 8001602:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 8001606:	4b83      	ldr	r3, [pc, #524]	@ (8001814 <DriveFunction+0x320>)
 8001608:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800160c:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
	motor[1].dirPin.GPIOx = GPIOC;
 8001610:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <DriveFunction+0x320>)
 8001612:	4a86      	ldr	r2, [pc, #536]	@ (800182c <DriveFunction+0x338>)
 8001614:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8001618:	4b7e      	ldr	r3, [pc, #504]	@ (8001814 <DriveFunction+0x320>)
 800161a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800161e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
	motor[1].brakePin.GPIOx = GPIOD;
 8001622:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <DriveFunction+0x320>)
 8001624:	4a82      	ldr	r2, [pc, #520]	@ (8001830 <DriveFunction+0x33c>)
 8001626:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 800162a:	4b7a      	ldr	r3, [pc, #488]	@ (8001814 <DriveFunction+0x320>)
 800162c:	2201      	movs	r2, #1
 800162e:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
	
	motor[1].encoder.count = &TIM8->CNT;
 8001632:	4b78      	ldr	r3, [pc, #480]	@ (8001814 <DriveFunction+0x320>)
 8001634:	4a7f      	ldr	r2, [pc, #508]	@ (8001834 <DriveFunction+0x340>)
 8001636:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 800163a:	4b7f      	ldr	r3, [pc, #508]	@ (8001838 <DriveFunction+0x344>)
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001646:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001824 <DriveFunction+0x330>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <DriveFunction+0x320>)
 8001658:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
	motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 800165c:	4b6d      	ldr	r3, [pc, #436]	@ (8001814 <DriveFunction+0x320>)
 800165e:	2201      	movs	r2, #1
 8001660:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
	motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8001664:	4b6b      	ldr	r3, [pc, #428]	@ (8001814 <DriveFunction+0x320>)
 8001666:	4a70      	ldr	r2, [pc, #448]	@ (8001828 <DriveFunction+0x334>)
 8001668:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	TIM8->CR1 = TIM_CR1_CEN;
 800166c:	4b72      	ldr	r3, [pc, #456]	@ (8001838 <DriveFunction+0x344>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
	
	/* Motor 3 */
	motor[2].enablePin.GPIOx = GPIOK;
 8001672:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <DriveFunction+0x320>)
 8001674:	4a71      	ldr	r2, [pc, #452]	@ (800183c <DriveFunction+0x348>)
 8001676:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 800167a:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <DriveFunction+0x320>)
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
	motor[2].dirPin.GPIOx = GPIOG;
 8001682:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <DriveFunction+0x320>)
 8001684:	4a6e      	ldr	r2, [pc, #440]	@ (8001840 <DriveFunction+0x34c>)
 8001686:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 800168a:	4b62      	ldr	r3, [pc, #392]	@ (8001814 <DriveFunction+0x320>)
 800168c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001690:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
	motor[2].brakePin.GPIOx = GPIOK;
 8001694:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <DriveFunction+0x320>)
 8001696:	4a69      	ldr	r2, [pc, #420]	@ (800183c <DriveFunction+0x348>)
 8001698:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 800169c:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <DriveFunction+0x320>)
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	
	motor[2].encoder.count = &TIM2->CNT;
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <DriveFunction+0x320>)
 80016a6:	4a67      	ldr	r2, [pc, #412]	@ (8001844 <DriveFunction+0x350>)
 80016a8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 80016ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016ba:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80016be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c2:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001824 <DriveFunction+0x330>
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <DriveFunction+0x320>)
 80016cc:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
	motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 80016d0:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <DriveFunction+0x320>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80016d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <DriveFunction+0x320>)
 80016da:	4a53      	ldr	r2, [pc, #332]	@ (8001828 <DriveFunction+0x334>)
 80016dc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	TIM2->CR1 = TIM_CR1_CEN;
 80016e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
	
	/* Motor 4 */
	motor[3].enablePin.GPIOx = GPIOF;
 80016e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <DriveFunction+0x320>)
 80016ea:	4a57      	ldr	r2, [pc, #348]	@ (8001848 <DriveFunction+0x354>)
 80016ec:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
	motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <DriveFunction+0x320>)
 80016f2:	2220      	movs	r2, #32
 80016f4:	f8a3 21cc 	strh.w	r2, [r3, #460]	@ 0x1cc
	motor[3].dirPin.GPIOx = GPIOF;
 80016f8:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <DriveFunction+0x320>)
 80016fa:	4a53      	ldr	r2, [pc, #332]	@ (8001848 <DriveFunction+0x354>)
 80016fc:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 8001700:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <DriveFunction+0x320>)
 8001702:	2208      	movs	r2, #8
 8001704:	f8a3 21d4 	strh.w	r2, [r3, #468]	@ 0x1d4
	motor[3].brakePin.GPIOx = GPIOF;
 8001708:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <DriveFunction+0x320>)
 800170a:	4a4f      	ldr	r2, [pc, #316]	@ (8001848 <DriveFunction+0x354>)
 800170c:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
	motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 8001710:	4b40      	ldr	r3, [pc, #256]	@ (8001814 <DriveFunction+0x320>)
 8001712:	2210      	movs	r2, #16
 8001714:	f8a3 21dc 	strh.w	r2, [r3, #476]	@ 0x1dc

	motor[3].encoder.count = &TIM5->CNT;
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <DriveFunction+0x320>)
 800171a:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <DriveFunction+0x358>)
 800171c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
	motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <DriveFunction+0x35c>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800172c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001734:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001824 <DriveFunction+0x330>
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <DriveFunction+0x320>)
 800173e:	edc3 7a6e 	vstr	s15, [r3, #440]	@ 0x1b8
	motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 8001742:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <DriveFunction+0x320>)
 8001744:	2201      	movs	r2, #1
 8001746:	f883 21c4 	strb.w	r2, [r3, #452]	@ 0x1c4
	motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 800174a:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <DriveFunction+0x320>)
 800174c:	4a36      	ldr	r2, [pc, #216]	@ (8001828 <DriveFunction+0x334>)
 800174e:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
	TIM5->CR1 = TIM_CR1_CEN;
 8001752:	4b3f      	ldr	r3, [pc, #252]	@ (8001850 <DriveFunction+0x35c>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
	
	/* Config PID */
	PID_Params_t pidParams;
	pidParams.Kp = 12.0f;
 8001758:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <DriveFunction+0x360>)
 800175a:	60fb      	str	r3, [r7, #12]
	pidParams.Ki = 4.5f;
 800175c:	4b3e      	ldr	r3, [pc, #248]	@ (8001858 <DriveFunction+0x364>)
 800175e:	613b      	str	r3, [r7, #16]
	pidParams.Kd = 0.0f;
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
	pidParams.outputMax = (float)(/*WHEEL_MAX_SPEED_RAD * 10.0f*/ 4095.0f);
 8001766:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <DriveFunction+0x368>)
 8001768:	61bb      	str	r3, [r7, #24]
	pidParams.outputMin = (float)(/*-WHEEL_MAX_SPEED_RAD * 10.0f*/ -4095.0f);
 800176a:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <DriveFunction+0x36c>)
 800176c:	61fb      	str	r3, [r7, #28]
	pidParams.integralMax = pidParams.outputMax / 5.0f;
 800176e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001772:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	edc7 7a08 	vstr	s15, [r7, #32]
	pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 800177e:	4b39      	ldr	r3, [pc, #228]	@ (8001864 <DriveFunction+0x370>)
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24


	/* Enable motors and disable brake */
	for (uint8_t i = 0; i < 4; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001788:	e034      	b.n	80017f4 <DriveFunction+0x300>
	{
		Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 800178a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800178e:	4613      	mov	r3, r2
 8001790:	015b      	lsls	r3, r3, #5
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <DriveFunction+0x320>)
 8001798:	4413      	add	r3, r2
 800179a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800179e:	2201      	movs	r2, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 fff9 	bl	8008798 <Motor_Init>
		Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 80017a6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80017aa:	4613      	mov	r3, r2
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4a18      	ldr	r2, [pc, #96]	@ (8001814 <DriveFunction+0x320>)
 80017b4:	4413      	add	r3, r2
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 f885 	bl	80088c8 <Motor_SetBrake>
		PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 80017be:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80017c2:	4613      	mov	r3, r2
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <DriveFunction+0x320>)
 80017cc:	189d      	adds	r5, r3, r2
 80017ce:	2301      	movs	r3, #1
 80017d0:	9304      	str	r3, [sp, #16]
 80017d2:	466c      	mov	r4, sp
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e4:	4628      	mov	r0, r5
 80017e6:	f006 fe53 	bl	8008490 <PID_Init>
	for (uint8_t i = 0; i < 4; i++)
 80017ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017ee:	3301      	adds	r3, #1
 80017f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80017f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d9c6      	bls.n	800178a <DriveFunction+0x296>

	//Motor_Enable(&motor[0], MOTOR_STATUS_ENABLE);
	/* Infinite loop */
	for(;;)
	{						
		for (uint8_t i = 0; i < 4; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001802:	e059      	b.n	80018b8 <DriveFunction+0x3c4>
 8001804:	20000358 	.word	0x20000358
 8001808:	200000ac 	.word	0x200000ac
 800180c:	20000100 	.word	0x20000100
 8001810:	40022400 	.word	0x40022400
 8001814:	200003a4 	.word	0x200003a4
 8001818:	40020000 	.word	0x40020000
 800181c:	40000424 	.word	0x40000424
 8001820:	40000400 	.word	0x40000400
 8001824:	45000000 	.word	0x45000000
 8001828:	3f714639 	.word	0x3f714639
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40010424 	.word	0x40010424
 8001838:	40010400 	.word	0x40010400
 800183c:	40022800 	.word	0x40022800
 8001840:	40021800 	.word	0x40021800
 8001844:	40000024 	.word	0x40000024
 8001848:	40021400 	.word	0x40021400
 800184c:	40000c24 	.word	0x40000c24
 8001850:	40000c00 	.word	0x40000c00
 8001854:	41400000 	.word	0x41400000
 8001858:	40900000 	.word	0x40900000
 800185c:	457ff000 	.word	0x457ff000
 8001860:	c57ff000 	.word	0xc57ff000
 8001864:	3a83126f 	.word	0x3a83126f
		{
			/* Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine */
			Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 8001868:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800186c:	4613      	mov	r3, r2
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <DriveFunction+0x42c>)
 8001876:	441a      	add	r2, r3
 8001878:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800187c:	4929      	ldr	r1, [pc, #164]	@ (8001924 <DriveFunction+0x430>)
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f006 ffa3 	bl	80087dc <Motor_CLDrive>
			
			/* TODO: make dribbler files, variable speeds */
			MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <DriveFunction+0x434>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b23      	ldr	r3, [pc, #140]	@ (800192c <DriveFunction+0x438>)
 800189e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80018a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 fdae 	bl	800840a <MAX581x_Code>
		for (uint8_t i = 0; i < 4; i++)
 80018ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018b2:	3301      	adds	r3, #1
 80018b4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80018b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d9d3      	bls.n	8001868 <DriveFunction+0x374>
		}

    if(ball_posession && kick_sel && kick_flag == KICKER_CHARGED) {
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <DriveFunction+0x43c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01d      	beq.n	8001904 <DriveFunction+0x410>
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <DriveFunction+0x440>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d019      	beq.n	8001904 <DriveFunction+0x410>
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <DriveFunction+0x444>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d115      	bne.n	8001904 <DriveFunction+0x410>
      osMutexWait(kickFlagHandle, osWaitForever);
 80018d8:	4b18      	ldr	r3, [pc, #96]	@ (800193c <DriveFunction+0x448>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 ffc5 	bl	8005870 <osMutexWait>
      kick_flag = KICKER_START;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <DriveFunction+0x444>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
      osMutexRelease(kickFlagHandle);
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <DriveFunction+0x448>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f80b 	bl	800590c <osMutexRelease>
      osMessagePut(kickQueueHandle, 0, 0);
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <DriveFunction+0x44c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 f84c 	bl	800599c <osMessagePut>
    }   
		
		osMessagePut(nrf24CheckHandle, 0, 0);
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <DriveFunction+0x450>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f004 f845 	bl	800599c <osMessagePut>
		osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 8001912:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001916:	2101      	movs	r1, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f8f3 	bl	8005b04 <osDelayUntil>
		for (uint8_t i = 0; i < 4; i++)
 800191e:	e76d      	b.n	80017fc <DriveFunction+0x308>
 8001920:	200003a4 	.word	0x200003a4
 8001924:	20000364 	.word	0x20000364
 8001928:	20000594 	.word	0x20000594
 800192c:	08009708 	.word	0x08009708
 8001930:	20000604 	.word	0x20000604
 8001934:	20000595 	.word	0x20000595
 8001938:	20000596 	.word	0x20000596
 800193c:	2000034c 	.word	0x2000034c
 8001940:	20000348 	.word	0x20000348
 8001944:	20000354 	.word	0x20000354

08001948 <RadioFunction>:
* @param argument: Not used
* @retval None
*/

/* USER CODE END Header_RadioFunction */
void RadioFunction(void const * argument) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af02      	add	r7, sp, #8
 800194e:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN RadioFunction */


	nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 8001950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <RadioFunction+0x1ac>)
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800195e:	4a65      	ldr	r2, [pc, #404]	@ (8001af4 <RadioFunction+0x1ac>)
 8001960:	4965      	ldr	r1, [pc, #404]	@ (8001af8 <RadioFunction+0x1b0>)
 8001962:	4866      	ldr	r0, [pc, #408]	@ (8001afc <RadioFunction+0x1b4>)
 8001964:	f007 f843 	bl	80089ee <nRF24_HW_Init>
	nRF24_Init(&nrf_device);
 8001968:	4864      	ldr	r0, [pc, #400]	@ (8001afc <RadioFunction+0x1b4>)
 800196a:	f007 f92c 	bl	8008bc6 <nRF24_Init>

	// Configurar dirección y canal de RF
	nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 800196e:	4a64      	ldr	r2, [pc, #400]	@ (8001b00 <RadioFunction+0x1b8>)
 8001970:	2100      	movs	r1, #0
 8001972:	4862      	ldr	r0, [pc, #392]	@ (8001afc <RadioFunction+0x1b4>)
 8001974:	f007 f9e2 	bl	8008d3c <nRF24_SetAddr>
	nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 8001978:	216a      	movs	r1, #106	@ 0x6a
 800197a:	4860      	ldr	r0, [pc, #384]	@ (8001afc <RadioFunction+0x1b4>)
 800197c:	f007 f9ce 	bl	8008d1c <nRF24_SetRFChannel>
	nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 8001980:	231e      	movs	r3, #30
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	485d      	ldr	r0, [pc, #372]	@ (8001afc <RadioFunction+0x1b4>)
 8001988:	f007 fb28 	bl	8008fdc <nRF24_SetRXPipe>

	// Encender y configurar en modo RX
	nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 800198c:	2102      	movs	r1, #2
 800198e:	485b      	ldr	r0, [pc, #364]	@ (8001afc <RadioFunction+0x1b4>)
 8001990:	f007 f97e 	bl	8008c90 <nRF24_SetPowerMode>
	nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 8001994:	2101      	movs	r1, #1
 8001996:	4859      	ldr	r0, [pc, #356]	@ (8001afc <RadioFunction+0x1b4>)
 8001998:	f007 f99c 	bl	8008cd4 <nRF24_SetOperationalMode>
	nRF24_RX_ON(&nrf_device);
 800199c:	2101      	movs	r1, #1
 800199e:	4857      	ldr	r0, [pc, #348]	@ (8001afc <RadioFunction+0x1b4>)
 80019a0:	f007 f801 	bl	80089a6 <nRF24_CE_State>
	
	memset(nrf_device.rx_data, 0, 32);
 80019a4:	2220      	movs	r2, #32
 80019a6:	2100      	movs	r1, #0
 80019a8:	4856      	ldr	r0, [pc, #344]	@ (8001b04 <RadioFunction+0x1bc>)
 80019aa:	f007 fded 	bl	8009588 <memset>

	// Configurar el canal de transmisión una vez al inicio
	nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 80019ae:	2106      	movs	r1, #6
 80019b0:	4852      	ldr	r0, [pc, #328]	@ (8001afc <RadioFunction+0x1b4>)
 80019b2:	f007 fb6f 	bl	8009094 <nRF24_DisableAA>
	//robot pipe
	tx_node_addr[4]=Board_GetID();
 80019b6:	f006 fe4d 	bl	8008654 <Board_GetID>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b52      	ldr	r3, [pc, #328]	@ (8001b08 <RadioFunction+0x1c0>)
 80019c0:	711a      	strb	r2, [r3, #4]
	nRF24_SetAddr(&nrf_device, nRF24_PIPETX, tx_node_addr);
 80019c2:	4a51      	ldr	r2, [pc, #324]	@ (8001b08 <RadioFunction+0x1c0>)
 80019c4:	2106      	movs	r1, #6
 80019c6:	484d      	ldr	r0, [pc, #308]	@ (8001afc <RadioFunction+0x1b4>)
 80019c8:	f007 f9b8 	bl	8008d3c <nRF24_SetAddr>
	config = nRF24_GetConfig(&nrf_device);
 80019cc:	484b      	ldr	r0, [pc, #300]	@ (8001afc <RadioFunction+0x1b4>)
 80019ce:	f007 fb99 	bl	8009104 <nRF24_GetConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b0c <RadioFunction+0x1c4>)
 80019d8:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for(;;) {
	osMessageGet(nrf24CheckHandle, osWaitForever);
 80019da:	4b4d      	ldr	r3, [pc, #308]	@ (8001b10 <RadioFunction+0x1c8>)
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	463b      	mov	r3, r7
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 f819 	bl	8005a1c <osMessageGet>
	status = nRF24_GetStatus(&nrf_device);
 80019ea:	4844      	ldr	r0, [pc, #272]	@ (8001afc <RadioFunction+0x1b4>)
 80019ec:	f007 fb7d 	bl	80090ea <nRF24_GetStatus>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <RadioFunction+0x1cc>)
 80019f6:	701a      	strb	r2, [r3, #0]
	config = nRF24_GetConfig(&nrf_device);
 80019f8:	4840      	ldr	r0, [pc, #256]	@ (8001afc <RadioFunction+0x1b4>)
 80019fa:	f007 fb83 	bl	8009104 <nRF24_GetConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b42      	ldr	r3, [pc, #264]	@ (8001b0c <RadioFunction+0x1c4>)
 8001a04:	701a      	strb	r2, [r3, #0]


	if (status & nRF24_FLAG_RX_DR) {
 8001a06:	4b43      	ldr	r3, [pc, #268]	@ (8001b14 <RadioFunction+0x1cc>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0e3      	beq.n	80019da <RadioFunction+0x92>
		nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 8001a12:	4a41      	ldr	r2, [pc, #260]	@ (8001b18 <RadioFunction+0x1d0>)
 8001a14:	493b      	ldr	r1, [pc, #236]	@ (8001b04 <RadioFunction+0x1bc>)
 8001a16:	4839      	ldr	r0, [pc, #228]	@ (8001afc <RadioFunction+0x1b4>)
 8001a18:	f007 fbf4 	bl	8009204 <nRF24_ReadPayload>
		nRF24_FlushRX(&nrf_device);
 8001a1c:	4837      	ldr	r0, [pc, #220]	@ (8001afc <RadioFunction+0x1b4>)
 8001a1e:	f007 fb8b 	bl	8009138 <nRF24_FlushRX>
		nRF24_ClearIRQFlagsRx(&nrf_device);
 8001a22:	4836      	ldr	r0, [pc, #216]	@ (8001afc <RadioFunction+0x1b4>)
 8001a24:	f007 fbc5 	bl	80091b2 <nRF24_ClearIRQFlagsRx>

		// Procesar datos recibidos
		setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 8001a28:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <RadioFunction+0x1d4>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <RadioFunction+0x1bc>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a39      	ldr	r2, [pc, #228]	@ (8001b20 <RadioFunction+0x1d8>)
 8001a3c:	4939      	ldr	r1, [pc, #228]	@ (8001b24 <RadioFunction+0x1dc>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb5c 	bl	80010fc <setSpeed>
		dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 8001a44:	4b35      	ldr	r3, [pc, #212]	@ (8001b1c <RadioFunction+0x1d4>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <RadioFunction+0x1bc>)
 8001a54:	4413      	add	r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fcc4 	bl	80013e4 <getDribbler_speed>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <RadioFunction+0x1e0>)
 8001a62:	701a      	strb	r2, [r3, #0]
		kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <RadioFunction+0x1d4>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <RadioFunction+0x1bc>)
 8001a74:	4413      	add	r3, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fcc6 	bl	8001408 <getKickerStatus>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <RadioFunction+0x1e4>)
 8001a82:	701a      	strb	r2, [r3, #0]
		//memcpy(txBuffer, nrf_device.rx_data, sizeof(nrf_device.rx_data));
		//txBuffer[31] = '\n';
		//txBuffer[30] = Board_GetID();

		//Actualiza informacion del buffer tx motor[i].measSpeed
		updateBuffer(txBuffer);
 8001a84:	482a      	ldr	r0, [pc, #168]	@ (8001b30 <RadioFunction+0x1e8>)
 8001a86:	f7ff faad 	bl	8000fe4 <updateBuffer>


		// Cambiar a modo TX y enviar datos

		nRF24_RX_OFF(&nrf_device);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	481b      	ldr	r0, [pc, #108]	@ (8001afc <RadioFunction+0x1b4>)
 8001a8e:	f006 ff8a 	bl	80089a6 <nRF24_CE_State>
		nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_TX);
 8001a92:	2100      	movs	r1, #0
 8001a94:	4819      	ldr	r0, [pc, #100]	@ (8001afc <RadioFunction+0x1b4>)
 8001a96:	f007 f91d 	bl	8008cd4 <nRF24_SetOperationalMode>
		//osDelay(40); // Pequeña demora para asegurar que termine de configurarse, evita mandar paquetes erroneos

		while((config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001a9a:	e006      	b.n	8001aaa <RadioFunction+0x162>
				config = nRF24_GetConfig(&nrf_device);
 8001a9c:	4817      	ldr	r0, [pc, #92]	@ (8001afc <RadioFunction+0x1b4>)
 8001a9e:	f007 fb31 	bl	8009104 <nRF24_GetConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <RadioFunction+0x1c4>)
 8001aa8:	701a      	strb	r2, [r3, #0]
		while((config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <RadioFunction+0x1c4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f2      	bne.n	8001a9c <RadioFunction+0x154>
		}

		nRF24_TxPacket(&nrf_device, txBuffer, 32);
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	491d      	ldr	r1, [pc, #116]	@ (8001b30 <RadioFunction+0x1e8>)
 8001aba:	4810      	ldr	r0, [pc, #64]	@ (8001afc <RadioFunction+0x1b4>)
 8001abc:	f7ff facc 	bl	8001058 <nRF24_TxPacket>

		// Volver a modo RX

		nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	480e      	ldr	r0, [pc, #56]	@ (8001afc <RadioFunction+0x1b4>)
 8001ac4:	f007 f906 	bl	8008cd4 <nRF24_SetOperationalMode>
		while(!(config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001ac8:	e006      	b.n	8001ad8 <RadioFunction+0x190>
					config = nRF24_GetConfig(&nrf_device);
 8001aca:	480c      	ldr	r0, [pc, #48]	@ (8001afc <RadioFunction+0x1b4>)
 8001acc:	f007 fb1a 	bl	8009104 <nRF24_GetConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <RadioFunction+0x1c4>)
 8001ad6:	701a      	strb	r2, [r3, #0]
		while(!(config & (nRF24_CONFIG_PRIM_RX)))	{//waits for prim_rx to be 0
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <RadioFunction+0x1c4>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f2      	beq.n	8001aca <RadioFunction+0x182>
			}

		nRF24_RX_ON(&nrf_device);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <RadioFunction+0x1b4>)
 8001ae8:	f006 ff5d 	bl	80089a6 <nRF24_CE_State>
		nRF24_ClearIRQFlags(&nrf_device);
 8001aec:	4803      	ldr	r0, [pc, #12]	@ (8001afc <RadioFunction+0x1b4>)
 8001aee:	f007 fb30 	bl	8009152 <nRF24_ClearIRQFlags>
	osMessageGet(nrf24CheckHandle, osWaitForever);
 8001af2:	e772      	b.n	80019da <RadioFunction+0x92>
 8001af4:	40021800 	.word	0x40021800
 8001af8:	200001a8 	.word	0x200001a8
 8001afc:	2000059c 	.word	0x2000059c
 8001b00:	20000028 	.word	0x20000028
 8001b04:	200005d2 	.word	0x200005d2
 8001b08:	20000020 	.word	0x20000020
 8001b0c:	2000035c 	.word	0x2000035c
 8001b10:	20000354 	.word	0x20000354
 8001b14:	2000035b 	.word	0x2000035b
 8001b18:	2000035a 	.word	0x2000035a
 8001b1c:	20000358 	.word	0x20000358
 8001b20:	20000360 	.word	0x20000360
 8001b24:	20000364 	.word	0x20000364
 8001b28:	20000594 	.word	0x20000594
 8001b2c:	20000595 	.word	0x20000595
 8001b30:	20000000 	.word	0x20000000

08001b34 <KickFunction>:
* @retval None
*/
osEvent kicker_side;
/* USER CODE END Header_KickFunction */
void KickFunction(void const * argument)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN KickFunction */
  /* Infinite loop */
  for(;;)
  {

    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2110      	movs	r1, #16
 8001b40:	4827      	ldr	r0, [pc, #156]	@ (8001be0 <KickFunction+0xac>)
 8001b42:	f000 fe97 	bl	8002874 <HAL_GPIO_WritePin>
    osDelay(4000);
 8001b46:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001b4a:	f003 fe71 	bl	8005830 <osDelay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	4823      	ldr	r0, [pc, #140]	@ (8001be0 <KickFunction+0xac>)
 8001b54:	f000 fe8e 	bl	8002874 <HAL_GPIO_WritePin>

    osMutexWait(kickFlagHandle, osWaitForever);
 8001b58:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <KickFunction+0xb0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fe85 	bl	8005870 <osMutexWait>
    kick_flag = KICKER_CHARGED;
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <KickFunction+0xb4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
    osMutexRelease(kickFlagHandle);
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <KickFunction+0xb0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fecb 	bl	800590c <osMutexRelease>

		kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <KickFunction+0xb8>)
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	4c1d      	ldr	r4, [pc, #116]	@ (8001bf0 <KickFunction+0xbc>)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 ff4a 	bl	8005a1c <osMessageGet>
 8001b88:	463b      	mov	r3, r7
 8001b8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b98:	4816      	ldr	r0, [pc, #88]	@ (8001bf4 <KickFunction+0xc0>)
 8001b9a:	f000 fe6b 	bl	8002874 <HAL_GPIO_WritePin>
		osDelay(10);
 8001b9e:	200a      	movs	r0, #10
 8001ba0:	f003 fe46 	bl	8005830 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001baa:	4812      	ldr	r0, [pc, #72]	@ (8001bf4 <KickFunction+0xc0>)
 8001bac:	f000 fe62 	bl	8002874 <HAL_GPIO_WritePin>

		osMutexWait(kickFlagHandle, osWaitForever);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <KickFunction+0xb0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fe59 	bl	8005870 <osMutexWait>
    kick_flag = KICKER_DISCHARGED;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <KickFunction+0xb4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    osMutexRelease(kickFlagHandle);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <KickFunction+0xb0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fe9f 	bl	800590c <osMutexRelease>

		kick_count++;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <KickFunction+0xc4>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <KickFunction+0xc4>)
 8001bd8:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8001bda:	bf00      	nop
 8001bdc:	e7ae      	b.n	8001b3c <KickFunction+0x8>
 8001bde:	bf00      	nop
 8001be0:	40022400 	.word	0x40022400
 8001be4:	2000034c 	.word	0x2000034c
 8001be8:	20000596 	.word	0x20000596
 8001bec:	20000348 	.word	0x20000348
 8001bf0:	20000624 	.word	0x20000624
 8001bf4:	40021400 	.word	0x40021400
 8001bf8:	20000598 	.word	0x20000598

08001bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c0e:	f000 fb47 	bl	80022a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40010000 	.word	0x40010000

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <HAL_MspInit+0x4c>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_MspInit+0x4c>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	210f      	movs	r1, #15
 8001c6a:	f06f 0001 	mvn.w	r0, #1
 8001c6e:	f000 fc13 	bl	8002498 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0b2      	sub	sp, #200	@ 0xc8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9c:	2290      	movs	r2, #144	@ 0x90
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fc71 	bl	8009588 <memset>
  if(hi2c->Instance==I2C1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a65      	ldr	r2, [pc, #404]	@ (8001e40 <HAL_I2C_MspInit+0x1c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d13d      	bne.n	8001d2c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 f8cb 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ccc:	f7ff ffa8 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	4a5b      	ldr	r2, [pc, #364]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cdc:	4b59      	ldr	r3, [pc, #356]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce8:	23c0      	movs	r3, #192	@ 0xc0
 8001cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d00:	2304      	movs	r3, #4
 8001d02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484e      	ldr	r0, [pc, #312]	@ (8001e48 <HAL_I2C_MspInit+0x1c8>)
 8001d0e:	f000 fbed 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d12:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a4b      	ldr	r2, [pc, #300]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b49      	ldr	r3, [pc, #292]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d2a:	e085      	b.n	8001e38 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a46      	ldr	r2, [pc, #280]	@ (8001e4c <HAL_I2C_MspInit+0x1cc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d13d      	bne.n	8001db2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 f888 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001d52:	f7ff ff65 	bl	8001c20 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d56:	4b3b      	ldr	r3, [pc, #236]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d5c:	f043 0320 	orr.w	r3, r3, #32
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d74:	2312      	movs	r3, #18
 8001d76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d86:	2304      	movs	r3, #4
 8001d88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d8c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001d90:	4619      	mov	r1, r3
 8001d92:	482f      	ldr	r0, [pc, #188]	@ (8001e50 <HAL_I2C_MspInit+0x1d0>)
 8001d94:	f000 fbaa 	bl	80024ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d98:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	4a29      	ldr	r2, [pc, #164]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da4:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
}
 8001db0:	e042      	b.n	8001e38 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a27      	ldr	r2, [pc, #156]	@ (8001e54 <HAL_I2C_MspInit+0x1d4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d13d      	bne.n	8001e38 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 f845 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001dd8:	f7ff ff22 	bl	8001c20 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	4a18      	ldr	r2, [pc, #96]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001df4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e14:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480f      	ldr	r0, [pc, #60]	@ (8001e58 <HAL_I2C_MspInit+0x1d8>)
 8001e1c:	f000 fb66 	bl	80024ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001e26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_I2C_MspInit+0x1c4>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	37c8      	adds	r7, #200	@ 0xc8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40005400 	.word	0x40005400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	40021400 	.word	0x40021400
 8001e54:	40005c00 	.word	0x40005c00
 8001e58:	40021c00 	.word	0x40021c00

08001e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_SPI_MspInit+0x7c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d127      	bne.n	8001ece <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_SPI_MspInit+0x80>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a16      	ldr	r2, [pc, #88]	@ (8001edc <HAL_SPI_MspInit+0x80>)
 8001e84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_SPI_MspInit+0x80>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_SPI_MspInit+0x80>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <HAL_SPI_MspInit+0x80>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_SPI_MspInit+0x80>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eae:	23e0      	movs	r3, #224	@ 0xe0
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_SPI_MspInit+0x84>)
 8001eca:	f000 fb0f 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	@ 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40013000 	.word	0x40013000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b090      	sub	sp, #64	@ 0x40
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d128      	bne.n	8001f58 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f06:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b58      	ldr	r3, [pc, #352]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b55      	ldr	r3, [pc, #340]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a54      	ldr	r2, [pc, #336]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b52      	ldr	r3, [pc, #328]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f36:	2303      	movs	r3, #3
 8001f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4849      	ldr	r0, [pc, #292]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x194>)
 8001f52:	f000 facb 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f56:	e089      	b.n	800206c <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a47      	ldr	r2, [pc, #284]	@ (800207c <HAL_TIM_Encoder_MspInit+0x198>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f62:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a43      	ldr	r2, [pc, #268]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b3b      	ldr	r3, [pc, #236]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f92:	23c0      	movs	r3, #192	@ 0xc0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001faa:	4619      	mov	r1, r3
 8001fac:	4834      	ldr	r0, [pc, #208]	@ (8002080 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001fae:	f000 fa9d 	bl	80024ec <HAL_GPIO_Init>
}
 8001fb2:	e05b      	b.n	800206c <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a32      	ldr	r2, [pc, #200]	@ (8002084 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d129      	bne.n	8002012 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a26      	ldr	r2, [pc, #152]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002000:	2302      	movs	r3, #2
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	481f      	ldr	r0, [pc, #124]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x1a4>)
 800200c:	f000 fa6e 	bl	80024ec <HAL_GPIO_Init>
}
 8002010:	e02c      	b.n	800206c <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1d      	ldr	r2, [pc, #116]	@ (800208c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d127      	bne.n	800206c <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	6453      	str	r3, [r2, #68]	@ 0x44
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x190>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800204c:	2360      	movs	r3, #96	@ 0x60
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800205c:	2303      	movs	r3, #3
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002064:	4619      	mov	r1, r3
 8002066:	480a      	ldr	r0, [pc, #40]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8002068:	f000 fa40 	bl	80024ec <HAL_GPIO_Init>
}
 800206c:	bf00      	nop
 800206e:	3740      	adds	r7, #64	@ 0x40
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40000400 	.word	0x40000400
 8002080:	40020800 	.word	0x40020800
 8002084:	40000c00 	.word	0x40000c00
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40010400 	.word	0x40010400
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	@ 0x30
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_InitTick+0xd0>)
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <HAL_InitTick+0xd0>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <HAL_InitTick+0xd0>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020bc:	f107 020c 	add.w	r2, r7, #12
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 fe96 	bl	8003df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80020cc:	f001 fe80 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 80020d0:	4603      	mov	r3, r0
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d8:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <HAL_InitTick+0xd4>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9b      	lsrs	r3, r3, #18
 80020e0:	3b01      	subs	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <HAL_InitTick+0xd8>)
 80020e6:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <HAL_InitTick+0xdc>)
 80020e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020ea:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_InitTick+0xd8>)
 80020ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020f2:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <HAL_InitTick+0xd8>)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <HAL_InitTick+0xd8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_InitTick+0xd8>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_InitTick+0xd8>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800210a:	4818      	ldr	r0, [pc, #96]	@ (800216c <HAL_InitTick+0xd8>)
 800210c:	f002 ff14 	bl	8004f38 <HAL_TIM_Base_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11b      	bne.n	8002156 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800211e:	4813      	ldr	r0, [pc, #76]	@ (800216c <HAL_InitTick+0xd8>)
 8002120:	f002 ff6c 	bl	8004ffc <HAL_TIM_Base_Start_IT>
 8002124:	4603      	mov	r3, r0
 8002126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800212a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002132:	2019      	movs	r0, #25
 8002134:	f000 f9cc 	bl	80024d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	d808      	bhi.n	8002150 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800213e:	2200      	movs	r2, #0
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	2019      	movs	r0, #25
 8002144:	f000 f9a8 	bl	8002498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002148:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <HAL_InitTick+0xe0>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e002      	b.n	8002156 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002156:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800215a:	4618      	mov	r0, r3
 800215c:	3730      	adds	r7, #48	@ 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	431bde83 	.word	0x431bde83
 800216c:	20000630 	.word	0x20000630
 8002170:	40010000 	.word	0x40010000
 8002174:	20000034 	.word	0x20000034

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218a:	bf00      	nop
 800218c:	e7fd      	b.n	800218a <HardFault_Handler+0x4>

0800218e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002192:	bf00      	nop
 8002194:	e7fd      	b.n	8002192 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	bf00      	nop
 800219c:	e7fd      	b.n	800219a <BusFault_Handler+0x4>

0800219e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a2:	bf00      	nop
 80021a4:	e7fd      	b.n	80021a2 <UsageFault_Handler+0x4>

080021a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b8:	4802      	ldr	r0, [pc, #8]	@ (80021c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021ba:	f003 f83d 	bl	8005238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000630 	.word	0x20000630

080021c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <SystemInit+0x5c>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <SystemInit+0x5c>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <SystemInit+0x60>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <SystemInit+0x60>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <SystemInit+0x60>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <SystemInit+0x60>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <SystemInit+0x60>)
 80021f4:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <SystemInit+0x64>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <SystemInit+0x60>)
 80021fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <SystemInit+0x68>)
 80021fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <SystemInit+0x60>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a08      	ldr	r2, [pc, #32]	@ (8002228 <SystemInit+0x60>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <SystemInit+0x60>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002212:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <SystemInit+0x5c>)
 8002214:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002218:	609a      	str	r2, [r3, #8]
#endif
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	40023800 	.word	0x40023800
 800222c:	fef6ffff 	.word	0xfef6ffff
 8002230:	24003010 	.word	0x24003010

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800226c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002238:	480d      	ldr	r0, [pc, #52]	@ (8002270 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800223a:	490e      	ldr	r1, [pc, #56]	@ (8002274 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800223c:	4a0e      	ldr	r2, [pc, #56]	@ (8002278 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0b      	ldr	r2, [pc, #44]	@ (800227c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002250:	4c0b      	ldr	r4, [pc, #44]	@ (8002280 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800225e:	f7ff ffb3 	bl	80021c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002262:	f007 f99f 	bl	80095a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7fe f963 	bl	8000530 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002278:	08009750 	.word	0x08009750
  ldr r2, =_sbss
 800227c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002280:	20004504 	.word	0x20004504

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>

08002286 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228a:	2003      	movs	r0, #3
 800228c:	f000 f8f9 	bl	8002482 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff feff 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002296:	f7ff fccb 	bl	8001c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000038 	.word	0x20000038
 80022c4:	2000067c 	.word	0x2000067c

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	2000067c 	.word	0x2000067c

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_Delay+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffde 	bl	80022c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000038 	.word	0x20000038

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <__NVIC_SetPriorityGrouping+0x40>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	4313      	orrs	r3, r2
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <__NVIC_SetPriorityGrouping+0x40>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00
 800236c:	05fa0000 	.word	0x05fa0000

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	@ (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	@ (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	@ (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff4c 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024aa:	f7ff ff61 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	6978      	ldr	r0, [r7, #20]
 80024b6:	f7ff ffb1 	bl	800241c <NVIC_EncodePriority>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff80 	bl	80023c8 <__NVIC_SetPriority>
}
 80024c8:	bf00      	nop
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff54 	bl	800238c <__NVIC_EnableIRQ>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e175      	b.n	80027f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8164 	bne.w	80027f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x56>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80be 	beq.w	80027f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <HAL_GPIO_Init+0x324>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a65      	ldr	r2, [pc, #404]	@ (8002810 <HAL_GPIO_Init+0x324>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b63      	ldr	r3, [pc, #396]	@ (8002810 <HAL_GPIO_Init+0x324>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800268e:	4a61      	ldr	r2, [pc, #388]	@ (8002814 <HAL_GPIO_Init+0x328>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	@ (8002818 <HAL_GPIO_Init+0x32c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d037      	beq.n	800272a <HAL_GPIO_Init+0x23e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a57      	ldr	r2, [pc, #348]	@ (800281c <HAL_GPIO_Init+0x330>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_GPIO_Init+0x23a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_GPIO_Init+0x334>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x236>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a55      	ldr	r2, [pc, #340]	@ (8002824 <HAL_GPIO_Init+0x338>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x232>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a54      	ldr	r2, [pc, #336]	@ (8002828 <HAL_GPIO_Init+0x33c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x22e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a53      	ldr	r2, [pc, #332]	@ (800282c <HAL_GPIO_Init+0x340>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x22a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_GPIO_Init+0x344>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a51      	ldr	r2, [pc, #324]	@ (8002834 <HAL_GPIO_Init+0x348>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a50      	ldr	r2, [pc, #320]	@ (8002838 <HAL_GPIO_Init+0x34c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4f      	ldr	r2, [pc, #316]	@ (800283c <HAL_GPIO_Init+0x350>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x21a>
 8002702:	2309      	movs	r3, #9
 8002704:	e012      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002706:	230a      	movs	r3, #10
 8002708:	e010      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270a:	2308      	movs	r3, #8
 800270c:	e00e      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270e:	2307      	movs	r3, #7
 8002710:	e00c      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002712:	2306      	movs	r3, #6
 8002714:	e00a      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002716:	2305      	movs	r3, #5
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271a:	2304      	movs	r3, #4
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x240>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800273c:	4935      	ldr	r1, [pc, #212]	@ (8002814 <HAL_GPIO_Init+0x328>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_GPIO_Init+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b32      	ldr	r3, [pc, #200]	@ (8002840 <HAL_GPIO_Init+0x354>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a29      	ldr	r2, [pc, #164]	@ (8002840 <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279e:	4b28      	ldr	r3, [pc, #160]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f ae86 	bls.w	800250c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40013800 	.word	0x40013800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40021400 	.word	0x40021400
 8002830:	40021800 	.word	0x40021800
 8002834:	40021c00 	.word	0x40021c00
 8002838:	40022000 	.word	0x40022000
 800283c:	40022400 	.word	0x40022400
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b8:	887a      	ldrh	r2, [r7, #2]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	400b      	ands	r3, r1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e07f      	b.n	80029ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff f9bc 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800292c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800293c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e006      	b.n	8002964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d104      	bne.n	8002976 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <HAL_I2C_Init+0x11c>)
 8002982:	430b      	orrs	r3, r1
 8002984:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002994:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69d9      	ldr	r1, [r3, #28]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	02008000 	.word	0x02008000

080029fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	f040 80da 	bne.w	8002bd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0x30>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0d3      	b.n	8002bd4 <HAL_I2C_Master_Transmit+0x1d8>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a34:	f7ff fc48 	bl	80022c8 <HAL_GetTick>
 8002a38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2319      	movs	r3, #25
 8002a40:	2201      	movs	r2, #1
 8002a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f9e6 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0be      	b.n	8002bd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2221      	movs	r2, #33	@ 0x21
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2210      	movs	r2, #16
 8002a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	893a      	ldrh	r2, [r7, #8]
 8002a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2bff      	cmp	r3, #255	@ 0xff
 8002a86:	d90e      	bls.n	8002aa6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	22ff      	movs	r2, #255	@ 0xff
 8002a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	4b51      	ldr	r3, [pc, #324]	@ (8002bdc <HAL_I2C_Master_Transmit+0x1e0>)
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fbd0 	bl	8003244 <I2C_TransferConfig>
 8002aa4:	e06c      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	8979      	ldrh	r1, [r7, #10]
 8002ab8:	4b48      	ldr	r3, [pc, #288]	@ (8002bdc <HAL_I2C_Master_Transmit+0x1e0>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fbbf 	bl	8003244 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ac6:	e05b      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	6a39      	ldr	r1, [r7, #32]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f9e3 	bl	8002e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e07b      	b.n	8002bd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d034      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x184>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d130      	bne.n	8002b80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f975 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e04d      	b.n	8002bd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2bff      	cmp	r3, #255	@ 0xff
 8002b40:	d90e      	bls.n	8002b60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22ff      	movs	r2, #255	@ 0xff
 8002b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	8979      	ldrh	r1, [r7, #10]
 8002b50:	2300      	movs	r3, #0
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fb73 	bl	8003244 <I2C_TransferConfig>
 8002b5e:	e00f      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fb62 	bl	8003244 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d19e      	bne.n	8002ac8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9c2 	bl	8002f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e01a      	b.n	8002bd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	80002000 	.word	0x80002000
 8002be0:	fe00e800 	.word	0xfe00e800

08002be4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	f040 80db 	bne.w	8002dbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2C_Master_Receive+0x30>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0d4      	b.n	8002dbe <HAL_I2C_Master_Receive+0x1da>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c1c:	f7ff fb54 	bl	80022c8 <HAL_GetTick>
 8002c20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2319      	movs	r3, #25
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f8f2 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0bf      	b.n	8002dbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2222      	movs	r2, #34	@ 0x22
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2bff      	cmp	r3, #255	@ 0xff
 8002c6e:	d90e      	bls.n	8002c8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	22ff      	movs	r2, #255	@ 0xff
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	4b52      	ldr	r3, [pc, #328]	@ (8002dc8 <HAL_I2C_Master_Receive+0x1e4>)
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fadc 	bl	8003244 <I2C_TransferConfig>
 8002c8c:	e06d      	b.n	8002d6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	4b49      	ldr	r3, [pc, #292]	@ (8002dc8 <HAL_I2C_Master_Receive+0x1e4>)
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 facb 	bl	8003244 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002cae:	e05c      	b.n	8002d6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	6a39      	ldr	r1, [r7, #32]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f96b 	bl	8002f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e07c      	b.n	8002dbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d034      	beq.n	8002d6a <HAL_I2C_Master_Receive+0x186>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d130      	bne.n	8002d6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f880 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e04d      	b.n	8002dbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2bff      	cmp	r3, #255	@ 0xff
 8002d2a:	d90e      	bls.n	8002d4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	22ff      	movs	r2, #255	@ 0xff
 8002d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	8979      	ldrh	r1, [r7, #10]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fa7e 	bl	8003244 <I2C_TransferConfig>
 8002d48:	e00f      	b.n	8002d6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	8979      	ldrh	r1, [r7, #10]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa6d 	bl	8003244 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d19d      	bne.n	8002cb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6a39      	ldr	r1, [r7, #32]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f8cd 	bl	8002f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e01a      	b.n	8002dbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_I2C_Master_Receive+0x1e8>)
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	80002400 	.word	0x80002400
 8002dcc:	fe00e800 	.word	0xfe00e800

08002dd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d103      	bne.n	8002dee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d007      	beq.n	8002e0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	619a      	str	r2, [r3, #24]
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e022      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d01e      	beq.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7ff fa49 	bl	80022c8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d113      	bne.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e00f      	b.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d0cd      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea4:	e02c      	b.n	8002f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f8ea 	bl	8003084 <I2C_IsErrorOccurred>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e02a      	b.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d01e      	beq.n	8002f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7ff fa01 	bl	80022c8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d113      	bne.n	8002f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e007      	b.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d1cb      	bne.n	8002ea6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f24:	e028      	b.n	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f8aa 	bl	8003084 <I2C_IsErrorOccurred>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e026      	b.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7ff f9c5 	bl	80022c8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d113      	bne.n	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d1cf      	bne.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f9c:	e064      	b.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f86e 	bl	8003084 <I2C_IsErrorOccurred>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e062      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d138      	bne.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d105      	bne.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e04e      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d107      	bne.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2210      	movs	r2, #16
 8002fee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ff6:	e002      	b.n	8002ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2220      	movs	r2, #32
 8003004:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003012:	400b      	ands	r3, r1
 8003014:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e022      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7ff f949 	bl	80022c8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d193      	bne.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	fe00e800 	.word	0xfe00e800

08003084 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d068      	beq.n	8003182 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2210      	movs	r2, #16
 80030b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030b8:	e049      	b.n	800314e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d045      	beq.n	800314e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7ff f901 	bl	80022c8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_IsErrorOccurred+0x54>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d13a      	bne.n	800314e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fa:	d121      	bne.n	8003140 <I2C_IsErrorOccurred+0xbc>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003102:	d01d      	beq.n	8003140 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d01a      	beq.n	8003140 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003118:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800311a:	f7ff f8d5 	bl	80022c8 <HAL_GetTick>
 800311e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003120:	e00e      	b.n	8003140 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003122:	f7ff f8d1 	bl	80022c8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b19      	cmp	r3, #25
 800312e:	d907      	bls.n	8003140 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f043 0320 	orr.w	r3, r3, #32
 8003136:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800313e:	e006      	b.n	800314e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b20      	cmp	r3, #32
 800314c:	d1e9      	bne.n	8003122 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b20      	cmp	r3, #32
 800315a:	d003      	beq.n	8003164 <I2C_IsErrorOccurred+0xe0>
 800315c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0aa      	beq.n	80030ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2220      	movs	r2, #32
 8003172:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01c      	beq.n	8003232 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fde9 	bl	8002dd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <I2C_IsErrorOccurred+0x1bc>)
 800320a:	400b      	ands	r3, r1
 800320c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003236:	4618      	mov	r0, r3
 8003238:	3728      	adds	r7, #40	@ 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	4613      	mov	r3, r2
 8003254:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800325c:	7a7b      	ldrb	r3, [r7, #9]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003264:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	4313      	orrs	r3, r2
 800326e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003272:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	0d5b      	lsrs	r3, r3, #21
 800327e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003282:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <I2C_TransferConfig+0x60>)
 8003284:	430b      	orrs	r3, r1
 8003286:	43db      	mvns	r3, r3
 8003288:	ea02 0103 	and.w	r1, r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	03ff63ff 	.word	0x03ff63ff

080032a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d138      	bne.n	8003330 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e032      	b.n	8003332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b20      	cmp	r3, #32
 8003352:	d139      	bne.n	80033c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800335e:	2302      	movs	r3, #2
 8003360:	e033      	b.n	80033ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2224      	movs	r2, #36	@ 0x24
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003390:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <HAL_PWREx_EnableOverDrive+0x98>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	4a22      	ldr	r2, [pc, #136]	@ (8003470 <HAL_PWREx_EnableOverDrive+0x98>)
 80033e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ee:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003406:	f7fe ff5f 	bl	80022c8 <HAL_GetTick>
 800340a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800340c:	e009      	b.n	8003422 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800340e:	f7fe ff5b 	bl	80022c8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800341c:	d901      	bls.n	8003422 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e022      	b.n	8003468 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003422:	4b14      	ldr	r3, [pc, #80]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342e:	d1ee      	bne.n	800340e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003430:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800343c:	f7fe ff44 	bl	80022c8 <HAL_GetTick>
 8003440:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003442:	e009      	b.n	8003458 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003444:	f7fe ff40 	bl	80022c8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003452:	d901      	bls.n	8003458 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e007      	b.n	8003468 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003464:	d1ee      	bne.n	8003444 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000

08003478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e29b      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8087 	beq.w	80035aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	4b96      	ldr	r3, [pc, #600]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d00c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a8:	4b93      	ldr	r3, [pc, #588]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d112      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
 80034b4:	4b90      	ldr	r3, [pc, #576]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c0:	d10b      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	4b8d      	ldr	r3, [pc, #564]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d06c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x130>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d168      	bne.n	80035a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e275      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x7a>
 80034e4:	4b84      	ldr	r3, [pc, #528]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a83      	ldr	r2, [pc, #524]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e02e      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x9c>
 80034fa:	4b7f      	ldr	r3, [pc, #508]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7e      	ldr	r2, [pc, #504]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b7c      	ldr	r3, [pc, #496]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a7b      	ldr	r2, [pc, #492]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800350c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e01d      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0xc0>
 800351e:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a72      	ldr	r2, [pc, #456]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 8003538:	4b6f      	ldr	r3, [pc, #444]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a6b      	ldr	r2, [pc, #428]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe feb6 	bl	80022c8 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe feb2 	bl	80022c8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	@ 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e229      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b61      	ldr	r3, [pc, #388]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fea2 	bl	80022c8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fe9e 	bl	80022c8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	@ 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e215      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	4b57      	ldr	r3, [pc, #348]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x110>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d069      	beq.n	800368a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b6:	4b50      	ldr	r3, [pc, #320]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b4d      	ldr	r3, [pc, #308]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11c      	bne.n	8003608 <HAL_RCC_OscConfig+0x190>
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1e9      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	493d      	ldr	r1, [pc, #244]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e040      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a38      	ldr	r2, [pc, #224]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fe54 	bl	80022c8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7fe fe50 	bl	80022c8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1c7      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4929      	ldr	r1, [pc, #164]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
 8003656:	e018      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fe30 	bl	80022c8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fe fe2c 	bl	80022c8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1a3      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d038      	beq.n	8003708 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	4a15      	ldr	r2, [pc, #84]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fe0d 	bl	80022c8 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b2:	f7fe fe09 	bl	80022c8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e180      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x23a>
 80036d0:	e01a      	b.n	8003708 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	4a08      	ldr	r2, [pc, #32]	@ (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fe fdf3 	bl	80022c8 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fe fdef 	bl	80022c8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d903      	bls.n	80036fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e166      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
 80036f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	4b92      	ldr	r3, [pc, #584]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a4 	beq.w	800385e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003716:	4b8c      	ldr	r3, [pc, #560]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	4b89      	ldr	r3, [pc, #548]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	4a88      	ldr	r2, [pc, #544]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	@ 0x40
 800372e:	4b86      	ldr	r3, [pc, #536]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373e:	4b83      	ldr	r3, [pc, #524]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800374a:	4b80      	ldr	r3, [pc, #512]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7f      	ldr	r2, [pc, #508]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7fe fdb7 	bl	80022c8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fe fdb3 	bl	80022c8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	@ 0x64
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e12a      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003770:	4b76      	ldr	r3, [pc, #472]	@ (800394c <HAL_RCC_OscConfig+0x4d4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x31a>
 8003784:	4b70      	ldr	r3, [pc, #448]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	4a6f      	ldr	r2, [pc, #444]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003790:	e02d      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x33c>
 800379a:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	4a6a      	ldr	r2, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a6:	4b68      	ldr	r3, [pc, #416]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	4a67      	ldr	r2, [pc, #412]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b2:	e01c      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x35e>
 80037bc:	4b62      	ldr	r3, [pc, #392]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	4a61      	ldr	r2, [pc, #388]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 80037d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a5b      	ldr	r2, [pc, #364]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e2:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	4a58      	ldr	r2, [pc, #352]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe fd67 	bl	80022c8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe fd63 	bl	80022c8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0d8      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b4c      	ldr	r3, [pc, #304]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCC_OscConfig+0x386>
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fe fd51 	bl	80022c8 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe fd4d 	bl	80022c8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0c2      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003840:	4b41      	ldr	r3, [pc, #260]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b3d      	ldr	r3, [pc, #244]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	4a3c      	ldr	r2, [pc, #240]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80ae 	beq.w	80039c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003868:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d06d      	beq.n	8003950 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d14b      	bne.n	8003914 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b32      	ldr	r3, [pc, #200]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe fd1e 	bl	80022c8 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe fd1a 	bl	80022c8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e091      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	3b01      	subs	r3, #1
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	071b      	lsls	r3, r3, #28
 80038da:	491b      	ldr	r1, [pc, #108]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fcec 	bl	80022c8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fce8 	bl	80022c8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e05f      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x47c>
 8003912:	e057      	b.n	80039c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fcd2 	bl	80022c8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe fcce 	bl	80022c8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e045      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x4b0>
 8003946:	e03d      	b.n	80039c4 <HAL_RCC_OscConfig+0x54c>
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003950:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <HAL_RCC_OscConfig+0x558>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d030      	beq.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d129      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d122      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d119      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d10f      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0d0      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d910      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 020f 	bic.w	r2, r3, #15
 8003a02:	4965      	ldr	r1, [pc, #404]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d040      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e073      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06b      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4936      	ldr	r1, [pc, #216]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fbfe 	bl	80022c8 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fe fbfa 	bl	80022c8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e053      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b27      	ldr	r3, [pc, #156]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d210      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 020f 	bic.w	r2, r3, #15
 8003b0e:	4922      	ldr	r1, [pc, #136]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1d4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fa84 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08009718 	.word	0x08009718
 8003ba4:	20000030 	.word	0x20000030
 8003ba8:	20000034 	.word	0x20000034

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b094      	sub	sp, #80	@ 0x50
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc4:	4b79      	ldr	r3, [pc, #484]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00d      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f200 80e1 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bde:	e0db      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b73      	ldr	r3, [pc, #460]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be4:	e0db      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b73      	ldr	r3, [pc, #460]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bea:	e0d8      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b6f      	ldr	r3, [pc, #444]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c16:	2300      	movs	r3, #0
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c30:	0150      	lsls	r0, r2, #5
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4621      	mov	r1, r4
 8003c38:	1a51      	subs	r1, r2, r1
 8003c3a:	6139      	str	r1, [r7, #16]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c50:	4659      	mov	r1, fp
 8003c52:	018b      	lsls	r3, r1, #6
 8003c54:	4651      	mov	r1, sl
 8003c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	018a      	lsls	r2, r1, #6
 8003c5e:	4651      	mov	r1, sl
 8003c60:	ebb2 0801 	subs.w	r8, r2, r1
 8003c64:	4659      	mov	r1, fp
 8003c66:	eb63 0901 	sbc.w	r9, r3, r1
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7e:	4690      	mov	r8, r2
 8003c80:	4699      	mov	r9, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	eb18 0303 	adds.w	r3, r8, r3
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	eb49 0303 	adc.w	r3, r9, r3
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	024b      	lsls	r3, r1, #9
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca8:	4621      	mov	r1, r4
 8003caa:	024a      	lsls	r2, r1, #9
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cbc:	f7fc fac0 	bl	8000240 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc8:	e058      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b38      	ldr	r3, [pc, #224]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0159      	lsls	r1, r3, #5
 8003cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf6:	0150      	lsls	r0, r2, #5
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d02:	4649      	mov	r1, r9
 8003d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d20:	eb63 050b 	sbc.w	r5, r3, fp
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	00eb      	lsls	r3, r5, #3
 8003d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d32:	00e2      	lsls	r2, r4, #3
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	4643      	mov	r3, r8
 8003d3a:	18e3      	adds	r3, r4, r3
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	464b      	mov	r3, r9
 8003d40:	eb45 0303 	adc.w	r3, r5, r3
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d52:	4629      	mov	r1, r5
 8003d54:	028b      	lsls	r3, r1, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	028a      	lsls	r2, r1, #10
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d66:	2200      	movs	r2, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	61fa      	str	r2, [r7, #28]
 8003d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d70:	f7fc fa66 	bl	8000240 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3750      	adds	r7, #80	@ 0x50
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000030 	.word	0x20000030

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08009728 	.word	0x08009728

08003df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	220f      	movs	r2, #15
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e08:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0203 	and.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e14:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e3a:	4b07      	ldr	r3, [pc, #28]	@ (8003e58 <HAL_RCC_GetClockConfig+0x60>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40023c00 	.word	0x40023c00

08003e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d012      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e84:	4b69      	ldr	r3, [pc, #420]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a68      	ldr	r2, [pc, #416]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	4b66      	ldr	r3, [pc, #408]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	4964      	ldr	r1, [pc, #400]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	4959      	ldr	r1, [pc, #356]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	494a      	ldr	r1, [pc, #296]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f10:	d101      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 808b 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f40:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	4a39      	ldr	r2, [pc, #228]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4c:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f58:	4b35      	ldr	r3, [pc, #212]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a34      	ldr	r2, [pc, #208]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fe f9b0 	bl	80022c8 <HAL_GetTick>
 8003f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6c:	f7fe f9ac 	bl	80022c8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e38f      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8a:	4b28      	ldr	r3, [pc, #160]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d035      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d02e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa8:	4b20      	ldr	r3, [pc, #128]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fca:	4a18      	ldr	r2, [pc, #96]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fd0:	4b16      	ldr	r3, [pc, #88]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d114      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f974 	bl	80022c8 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fe f970 	bl	80022c8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e351      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ee      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004012:	d111      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004022:	400b      	ands	r3, r1
 8004024:	4901      	ldr	r1, [pc, #4]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
 800402a:	e00b      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800402c:	40023800 	.word	0x40023800
 8004030:	40007000 	.word	0x40007000
 8004034:	0ffffcff 	.word	0x0ffffcff
 8004038:	4bac      	ldr	r3, [pc, #688]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4aab      	ldr	r2, [pc, #684]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004042:	6093      	str	r3, [r2, #8]
 8004044:	4ba9      	ldr	r3, [pc, #676]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	49a6      	ldr	r1, [pc, #664]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	4313      	orrs	r3, r2
 8004054:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004062:	4ba2      	ldr	r3, [pc, #648]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004068:	4aa0      	ldr	r2, [pc, #640]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800406e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004072:	4b9e      	ldr	r3, [pc, #632]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	499b      	ldr	r1, [pc, #620]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004090:	4b96      	ldr	r3, [pc, #600]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800409e:	4993      	ldr	r1, [pc, #588]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b2:	4b8e      	ldr	r3, [pc, #568]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c0:	498a      	ldr	r1, [pc, #552]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d4:	4b85      	ldr	r3, [pc, #532]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e2:	4982      	ldr	r1, [pc, #520]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040f6:	4b7d      	ldr	r3, [pc, #500]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	4979      	ldr	r1, [pc, #484]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004118:	4b74      	ldr	r3, [pc, #464]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	4971      	ldr	r1, [pc, #452]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800413a:	4b6c      	ldr	r3, [pc, #432]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004140:	f023 020c 	bic.w	r2, r3, #12
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004148:	4968      	ldr	r1, [pc, #416]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800415c:	4b63      	ldr	r3, [pc, #396]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416a:	4960      	ldr	r1, [pc, #384]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004184:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	4957      	ldr	r1, [pc, #348]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a0:	4b52      	ldr	r3, [pc, #328]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	494f      	ldr	r1, [pc, #316]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041c2:	4b4a      	ldr	r3, [pc, #296]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d0:	4946      	ldr	r1, [pc, #280]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041e4:	4b41      	ldr	r3, [pc, #260]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	493e      	ldr	r1, [pc, #248]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004206:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	4935      	ldr	r1, [pc, #212]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004228:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004236:	492d      	ldr	r1, [pc, #180]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d011      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004250:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004258:	4924      	ldr	r1, [pc, #144]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004268:	d101      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800428a:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004290:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004298:	4914      	ldr	r1, [pc, #80]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042ac:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042bc:	490b      	ldr	r1, [pc, #44]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042d0:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e0:	4902      	ldr	r1, [pc, #8]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004302:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	4986      	ldr	r1, [pc, #536]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004320:	4b81      	ldr	r3, [pc, #516]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004326:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004330:	497d      	ldr	r1, [pc, #500]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d006      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80d6 	beq.w	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800434c:	4b76      	ldr	r3, [pc, #472]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a75      	ldr	r2, [pc, #468]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fd ffb6 	bl	80022c8 <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004360:	f7fd ffb2 	bl	80022c8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e195      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004372:	4b6d      	ldr	r3, [pc, #436]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d021      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d11d      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004392:	4b65      	ldr	r3, [pc, #404]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043a0:	4b61      	ldr	r3, [pc, #388]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a6:	0e1b      	lsrs	r3, r3, #24
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	019a      	lsls	r2, r3, #6
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	4958      	ldr	r1, [pc, #352]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f8:	d129      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004408:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440e:	0f1b      	lsrs	r3, r3, #28
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	019a      	lsls	r2, r3, #6
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	061b      	lsls	r3, r3, #24
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	071b      	lsls	r3, r3, #28
 800442e:	493e      	ldr	r1, [pc, #248]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004436:	4b3c      	ldr	r3, [pc, #240]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800443c:	f023 021f 	bic.w	r2, r3, #31
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	3b01      	subs	r3, #1
 8004446:	4938      	ldr	r1, [pc, #224]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01d      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800445a:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004468:	4b2f      	ldr	r3, [pc, #188]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800446e:	0f1b      	lsrs	r3, r3, #28
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	019a      	lsls	r2, r3, #6
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	431a      	orrs	r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	4926      	ldr	r1, [pc, #152]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d011      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	019a      	lsls	r2, r3, #6
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	491a      	ldr	r1, [pc, #104]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044c6:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d2:	f7fd fef9 	bl	80022c8 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044da:	f7fd fef5 	bl	80022c8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	@ 0x64
 80044e6:	d901      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0d8      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	f040 80ce 	bne.w	800469c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004500:	4b09      	ldr	r3, [pc, #36]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd fedc 	bl	80022c8 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004512:	e00b      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004514:	f7fd fed8 	bl	80022c8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d904      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0bb      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800452c:	4b5e      	ldr	r3, [pc, #376]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004538:	d0ec      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004556:	2b00      	cmp	r3, #0
 8004558:	d02e      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d12a      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004562:	4b51      	ldr	r3, [pc, #324]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004570:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004576:	0f1b      	lsrs	r3, r3, #28
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	019a      	lsls	r2, r3, #6
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	061b      	lsls	r3, r3, #24
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	071b      	lsls	r3, r3, #28
 8004596:	4944      	ldr	r1, [pc, #272]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800459e:	4b42      	ldr	r3, [pc, #264]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	493d      	ldr	r1, [pc, #244]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045cc:	d11d      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ce:	4b36      	ldr	r3, [pc, #216]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	0e1b      	lsrs	r3, r3, #24
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045dc:	4b32      	ldr	r3, [pc, #200]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4929      	ldr	r1, [pc, #164]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d028      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	0e1b      	lsrs	r3, r3, #24
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004624:	4b20      	ldr	r3, [pc, #128]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	019a      	lsls	r2, r3, #6
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	041b      	lsls	r3, r3, #16
 800463c:	431a      	orrs	r2, r3
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	061b      	lsls	r3, r3, #24
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	071b      	lsls	r3, r3, #28
 800464a:	4917      	ldr	r1, [pc, #92]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004652:	4b15      	ldr	r3, [pc, #84]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	4911      	ldr	r1, [pc, #68]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004668:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0e      	ldr	r2, [pc, #56]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004674:	f7fd fe28 	bl	80022c8 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800467c:	f7fd fe24 	bl	80022c8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	@ 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e007      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800469a:	d1ef      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e09d      	b.n	80047fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ce:	d009      	beq.n	80046e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	61da      	str	r2, [r3, #28]
 80046d6:	e005      	b.n	80046e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd fbac 	bl	8001e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004724:	d902      	bls.n	800472c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e002      	b.n	8004732 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800472c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004730:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800473a:	d007      	beq.n	800474c <HAL_SPI_Init+0xa0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004744:	d002      	beq.n	800474c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	ea42 0103 	orr.w	r1, r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	f003 0204 	and.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047c8:	ea42 0103 	orr.w	r1, r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b08a      	sub	sp, #40	@ 0x28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x26>
 8004824:	2302      	movs	r3, #2
 8004826:	e1fb      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x41e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004830:	f7fd fd4a 	bl	80022c8 <HAL_GetTick>
 8004834:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800483c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004844:	887b      	ldrh	r3, [r7, #2]
 8004846:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800484c:	7efb      	ldrb	r3, [r7, #27]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d00e      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x6e>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004858:	d106      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x66>
 8004862:	7efb      	ldrb	r3, [r7, #27]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d003      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004868:	2302      	movs	r3, #2
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800486e:	e1cd      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x80>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x80>
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004888:	e1c0      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2205      	movs	r2, #5
 800489a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	887a      	ldrh	r2, [r7, #2]
 80048ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	887a      	ldrh	r2, [r7, #2]
 80048b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	887a      	ldrh	r2, [r7, #2]
 80048c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	887a      	ldrh	r2, [r7, #2]
 80048ca:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048e0:	d802      	bhi.n	80048e8 <HAL_SPI_TransmitReceive+0xe6>
 80048e2:	8a3b      	ldrh	r3, [r7, #16]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d908      	bls.n	80048fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	e007      	b.n	800490a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004914:	2b40      	cmp	r3, #64	@ 0x40
 8004916:	d007      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004930:	d97c      	bls.n	8004a2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x13e>
 800493a:	8a7b      	ldrh	r3, [r7, #18]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d169      	bne.n	8004a14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004964:	e056      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d11b      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x1aa>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x1aa>
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	2b01      	cmp	r3, #1
 8004982:	d113      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d11c      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x1f2>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	b292      	uxth	r2, r2
 80049d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	1c9a      	adds	r2, r3, #2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f0:	2301      	movs	r3, #1
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049f4:	f7fd fc68 	bl	80022c8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d807      	bhi.n	8004a14 <HAL_SPI_TransmitReceive+0x212>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d003      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004a12:	e0fb      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1a3      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x164>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d19d      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x164>
 8004a2a:	e0df      	b.n	8004bec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x23a>
 8004a34:	8a7b      	ldrh	r3, [r7, #18]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	f040 80cb 	bne.w	8004bd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d912      	bls.n	8004a6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	881a      	ldrh	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	1c9a      	adds	r2, r3, #2
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b02      	subs	r3, #2
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a6a:	e0b2      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	7812      	ldrb	r2, [r2, #0]
 8004a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a92:	e09e      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d134      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x30a>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02f      	beq.n	8004b0c <HAL_SPI_TransmitReceive+0x30a>
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d12c      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d912      	bls.n	8004ae2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b02      	subs	r3, #2
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ae0:	e012      	b.n	8004b08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d148      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x3aa>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d042      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d923      	bls.n	8004b7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	1c9a      	adds	r2, r3, #2
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b02      	subs	r3, #2
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d81f      	bhi.n	8004ba8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	e016      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f103 020c 	add.w	r2, r3, #12
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bac:	f7fd fb8c 	bl	80022c8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d803      	bhi.n	8004bc4 <HAL_SPI_TransmitReceive+0x3c2>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x3c8>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8004bd0:	e01c      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f af5b 	bne.w	8004a94 <HAL_SPI_TransmitReceive+0x292>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f47f af54 	bne.w	8004a94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f937 	bl	8004e64 <SPI_EndRxTxTransaction>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c08:	e000      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	@ 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c38:	f7fd fb46 	bl	80022c8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c48:	f7fd fb3e 	bl	80022c8 <HAL_GetTick>
 8004c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c4e:	4b39      	ldr	r3, [pc, #228]	@ (8004d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	0d1b      	lsrs	r3, r3, #20
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c5e:	e054      	b.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d050      	beq.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c68:	f7fd fb2e 	bl	80022c8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d902      	bls.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d13d      	bne.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c96:	d111      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca0:	d004      	beq.n	8004cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004caa:	d107      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc4:	d10f      	bne.n	8004ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e017      	b.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	bf0c      	ite	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d19b      	bne.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000030 	.word	0x20000030

08004d38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	@ 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d4a:	f7fd fabd 	bl	80022c8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	4413      	add	r3, r2
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d5a:	f7fd fab5 	bl	80022c8 <HAL_GetTick>
 8004d5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d68:	4b3d      	ldr	r3, [pc, #244]	@ (8004e60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	00da      	lsls	r2, r3, #3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	0d1b      	lsrs	r3, r3, #20
 8004d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d80:	e060      	b.n	8004e44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d88:	d107      	bne.n	8004d9a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d050      	beq.n	8004e44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004da2:	f7fd fa91 	bl	80022c8 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d902      	bls.n	8004db8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d13d      	bne.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd0:	d111      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dda:	d004      	beq.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de4:	d107      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfe:	d10f      	bne.n	8004e20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e010      	b.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d196      	bne.n	8004d82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3728      	adds	r7, #40	@ 0x28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000030 	.word	0x20000030

08004e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff ff5b 	bl	8004d38 <SPI_WaitFifoStateUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e046      	b.n	8004f26 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e98:	4b25      	ldr	r3, [pc, #148]	@ (8004f30 <SPI_EndRxTxTransaction+0xcc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	@ (8004f34 <SPI_EndRxTxTransaction+0xd0>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	0d5b      	lsrs	r3, r3, #21
 8004ea4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb6:	d112      	bne.n	8004ede <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2180      	movs	r1, #128	@ 0x80
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff feb0 	bl	8004c28 <SPI_WaitFlagStateUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e023      	b.n	8004f26 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef4:	2b80      	cmp	r3, #128	@ 0x80
 8004ef6:	d0f2      	beq.n	8004ede <SPI_EndRxTxTransaction+0x7a>
 8004ef8:	e000      	b.n	8004efc <SPI_EndRxTxTransaction+0x98>
        break;
 8004efa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff ff15 	bl	8004d38 <SPI_WaitFifoStateUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e000      	b.n	8004f26 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000030 	.word	0x20000030
 8004f34:	165e9f81 	.word	0x165e9f81

08004f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e049      	b.n	8004fde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f841 	bl	8004fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 faa6 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e054      	b.n	80050be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a26      	ldr	r2, [pc, #152]	@ (80050cc <HAL_TIM_Base_Start_IT+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d022      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503e:	d01d      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a22      	ldr	r2, [pc, #136]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a21      	ldr	r2, [pc, #132]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <HAL_TIM_Base_Start_IT+0xe0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d115      	bne.n	80050a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xec>)
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b06      	cmp	r3, #6
 800508c:	d015      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0xbe>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005094:	d011      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	e008      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e000      	b.n	80050bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40001800 	.word	0x40001800
 80050e8:	00010007 	.word	0x00010007

080050ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e08f      	b.n	8005220 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fc fee5 	bl	8001ee4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b3e      	ldr	r3, [pc, #248]	@ (8005228 <HAL_TIM_Encoder_Init+0x13c>)
 800512e:	400b      	ands	r3, r1
 8005130:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 f9c3 	bl	80054c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4b31      	ldr	r3, [pc, #196]	@ (800522c <HAL_TIM_Encoder_Init+0x140>)
 8005168:	4013      	ands	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	4313      	orrs	r3, r2
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_TIM_Encoder_Init+0x144>)
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4b2a      	ldr	r3, [pc, #168]	@ (8005234 <HAL_TIM_Encoder_Init+0x148>)
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	4313      	orrs	r3, r2
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	011a      	lsls	r2, r3, #4
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	031b      	lsls	r3, r3, #12
 80051ac:	4313      	orrs	r3, r2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	4313      	orrs	r3, r2
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	fffebff8 	.word	0xfffebff8
 800522c:	fffffcfc 	.word	0xfffffcfc
 8005230:	fffff3f3 	.word	0xfffff3f3
 8005234:	ffff0f0f 	.word	0xffff0f0f

08005238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0202 	mvn.w	r2, #2
 8005264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f905 	bl	800548a <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8f7 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f908 	bl	800549e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0204 	mvn.w	r2, #4
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8db 	bl	800548a <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8cd 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8de 	bl	800549e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0208 	mvn.w	r2, #8
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2204      	movs	r2, #4
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8b1 	bl	800548a <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f8a3 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8b4 	bl	800549e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b10      	cmp	r3, #16
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0210 	mvn.w	r2, #16
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2208      	movs	r2, #8
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f887 	bl	800548a <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f879 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f88a 	bl	800549e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0201 	mvn.w	r2, #1
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fc20 	bl	8001bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b80      	cmp	r3, #128	@ 0x80
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d4:	2b80      	cmp	r3, #128	@ 0x80
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9a8 	bl	8005738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f6:	d10e      	bne.n	8005416 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d107      	bne.n	8005416 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800540e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f99b 	bl	800574c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b40      	cmp	r3, #64	@ 0x40
 8005422:	d10e      	bne.n	8005442 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b40      	cmp	r3, #64	@ 0x40
 8005430:	d107      	bne.n	8005442 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800543a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f838 	bl	80054b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b20      	cmp	r3, #32
 800544e:	d10e      	bne.n	800546e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b20      	cmp	r3, #32
 800545c:	d107      	bne.n	800546e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0220 	mvn.w	r2, #32
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f95b 	bl	8005724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a40      	ldr	r2, [pc, #256]	@ (80055dc <TIM_Base_SetConfig+0x114>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3d      	ldr	r2, [pc, #244]	@ (80055e0 <TIM_Base_SetConfig+0x118>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3c      	ldr	r2, [pc, #240]	@ (80055e4 <TIM_Base_SetConfig+0x11c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3b      	ldr	r2, [pc, #236]	@ (80055e8 <TIM_Base_SetConfig+0x120>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3a      	ldr	r2, [pc, #232]	@ (80055ec <TIM_Base_SetConfig+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2f      	ldr	r2, [pc, #188]	@ (80055dc <TIM_Base_SetConfig+0x114>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005528:	d027      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a2c      	ldr	r2, [pc, #176]	@ (80055e0 <TIM_Base_SetConfig+0x118>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d023      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2b      	ldr	r2, [pc, #172]	@ (80055e4 <TIM_Base_SetConfig+0x11c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2a      	ldr	r2, [pc, #168]	@ (80055e8 <TIM_Base_SetConfig+0x120>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a29      	ldr	r2, [pc, #164]	@ (80055ec <TIM_Base_SetConfig+0x124>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d017      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a28      	ldr	r2, [pc, #160]	@ (80055f0 <TIM_Base_SetConfig+0x128>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a27      	ldr	r2, [pc, #156]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <TIM_Base_SetConfig+0x130>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a25      	ldr	r2, [pc, #148]	@ (80055fc <TIM_Base_SetConfig+0x134>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a24      	ldr	r2, [pc, #144]	@ (8005600 <TIM_Base_SetConfig+0x138>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a23      	ldr	r2, [pc, #140]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a0a      	ldr	r2, [pc, #40]	@ (80055dc <TIM_Base_SetConfig+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_Base_SetConfig+0xf8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a0c      	ldr	r2, [pc, #48]	@ (80055ec <TIM_Base_SetConfig+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40010400 	.word	0x40010400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800
 80055fc:	40001800 	.word	0x40001800
 8005600:	40001c00 	.word	0x40001c00
 8005604:	40002000 	.word	0x40002000

08005608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800561c:	2302      	movs	r3, #2
 800561e:	e06d      	b.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a30      	ldr	r2, [pc, #192]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2f      	ldr	r2, [pc, #188]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800565a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a20      	ldr	r2, [pc, #128]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005692:	d01d      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1d      	ldr	r2, [pc, #116]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a15      	ldr	r2, [pc, #84]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	@ (800571c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a15      	ldr	r2, [pc, #84]	@ (8005720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10c      	bne.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40014000 	.word	0x40014000
 8005720:	40001800 	.word	0x40001800

08005724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800576e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005772:	2b84      	cmp	r3, #132	@ 0x84
 8005774:	d005      	beq.n	8005782 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005776:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	3303      	adds	r3, #3
 8005780:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005796:	f3ef 8305 	mrs	r3, IPSR
 800579a:	607b      	str	r3, [r7, #4]
  return(result);
 800579c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057b8:	f001 fb54 	bl	8006e64 <vTaskStartScheduler>
  
  return osOK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80057c6:	f7ff ffe3 	bl	8005790 <inHandlerMode>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80057d0:	f001 fc52 	bl	8007078 <xTaskGetTickCountFromISR>
 80057d4:	4603      	mov	r3, r0
 80057d6:	e002      	b.n	80057de <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80057d8:	f001 fc3e 	bl	8007058 <xTaskGetTickCount>
 80057dc:	4603      	mov	r3, r0
  }
}
 80057de:	4618      	mov	r0, r3
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af02      	add	r7, sp, #8
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685c      	ldr	r4, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057f8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff ffad 	bl	8005760 <makeFreeRtosPriority>
 8005806:	4602      	mov	r2, r0
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	9200      	str	r2, [sp, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	4632      	mov	r2, r6
 8005814:	4629      	mov	r1, r5
 8005816:	4620      	mov	r0, r4
 8005818:	f001 f930 	bl	8006a7c <xTaskCreate>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d001      	beq.n	8005826 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005830 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <osDelay+0x16>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	e000      	b.n	8005848 <osDelay+0x18>
 8005846:	2301      	movs	r3, #1
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fad3 	bl	8006df4 <vTaskDelay>
  
  return osOK;
 800584e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005860:	2001      	movs	r0, #1
 8005862:	f000 fafd 	bl	8005e60 <xQueueCreateMutex>
 8005866:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <osMutexWait+0x18>
    return osErrorParameter;
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	e03a      	b.n	80058fe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d103      	bne.n	800589c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	e009      	b.n	80058b0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d006      	beq.n	80058b0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <osMutexWait+0x40>
      ticks = 1;
 80058ac:	2301      	movs	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80058b0:	f7ff ff6e 	bl	8005790 <inHandlerMode>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d017      	beq.n	80058ea <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	461a      	mov	r2, r3
 80058c0:	2100      	movs	r1, #0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 ff2a 	bl	800671c <xQueueReceiveFromISR>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <osMutexWait+0x62>
      return osErrorOS;
 80058ce:	23ff      	movs	r3, #255	@ 0xff
 80058d0:	e015      	b.n	80058fe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d011      	beq.n	80058fc <osMutexWait+0x8c>
 80058d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <osMutexWait+0x98>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	e008      	b.n	80058fc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fdfd 	bl	80064ec <xQueueSemaphoreTake>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <osMutexWait+0x8c>
    return osErrorOS;
 80058f8:	23ff      	movs	r3, #255	@ 0xff
 80058fa:	e000      	b.n	80058fe <osMutexWait+0x8e>
  }
  
  return osOK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800591c:	f7ff ff38 	bl	8005790 <inHandlerMode>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005926:	f107 0308 	add.w	r3, r7, #8
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc5c 	bl	80061ea <xQueueGiveFromISR>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d001      	beq.n	800593c <osMutexRelease+0x30>
      return osErrorOS;
 8005938:	23ff      	movs	r3, #255	@ 0xff
 800593a:	e017      	b.n	800596c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d013      	beq.n	800596a <osMutexRelease+0x5e>
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <osMutexRelease+0x68>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	e00a      	b.n	800596a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	2100      	movs	r1, #0
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa98 	bl	8005e90 <xQueueGenericSend>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d001      	beq.n	800596a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005966:	23ff      	movs	r3, #255	@ 0xff
 8005968:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	4619      	mov	r1, r3
 800598e:	f000 f9ef 	bl	8005d70 <xQueueGenericCreate>
 8005992:	4603      	mov	r3, r0
#endif
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <osMessagePut+0x1e>
    ticks = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80059ba:	f7ff fee9 	bl	8005790 <inHandlerMode>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d018      	beq.n	80059f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80059c4:	f107 0210 	add.w	r2, r7, #16
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	2300      	movs	r3, #0
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fb68 	bl	80060a4 <xQueueGenericSendFromISR>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d001      	beq.n	80059de <osMessagePut+0x42>
      return osErrorOS;
 80059da:	23ff      	movs	r3, #255	@ 0xff
 80059dc:	e018      	b.n	8005a10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d014      	beq.n	8005a0e <osMessagePut+0x72>
 80059e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <osMessagePut+0x7c>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	e00b      	b.n	8005a0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80059f6:	f107 0108 	add.w	r1, r7, #8
 80059fa:	2300      	movs	r3, #0
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fa46 	bl	8005e90 <xQueueGenericSend>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d001      	beq.n	8005a0e <osMessagePut+0x72>
      return osErrorOS;
 8005a0a:	23ff      	movs	r3, #255	@ 0xff
 8005a0c:	e000      	b.n	8005a10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b08b      	sub	sp, #44	@ 0x2c
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005a36:	2380      	movs	r3, #128	@ 0x80
 8005a38:	617b      	str	r3, [r7, #20]
    return event;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	461c      	mov	r4, r3
 8005a3e:	f107 0314 	add.w	r3, r7, #20
 8005a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a4a:	e054      	b.n	8005af6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d103      	bne.n	8005a64 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a62:	e009      	b.n	8005a78 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d006      	beq.n	8005a78 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <osMessageGet+0x5c>
      ticks = 1;
 8005a74:	2301      	movs	r3, #1
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005a78:	f7ff fe8a 	bl	8005790 <inHandlerMode>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01c      	beq.n	8005abc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005a82:	f107 0220 	add.w	r2, r7, #32
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	68b8      	ldr	r0, [r7, #8]
 8005a90:	f000 fe44 	bl	800671c <xQueueReceiveFromISR>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d102      	bne.n	8005aa0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e001      	b.n	8005aa4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01d      	beq.n	8005ae6 <osMessageGet+0xca>
 8005aaa:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <osMessageGet+0xe4>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	e014      	b.n	8005ae6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005abc:	f107 0314 	add.w	r3, r7, #20
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f000 fc28 	bl	800631c <xQueueReceive>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d102      	bne.n	8005ad8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e006      	b.n	8005ae6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <osMessageGet+0xc6>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e000      	b.n	8005ae4 <osMessageGet+0xc8>
 8005ae2:	2340      	movs	r3, #64	@ 0x40
 8005ae4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	461c      	mov	r4, r3
 8005aea:	f107 0314 	add.w	r3, r7, #20
 8005aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	372c      	adds	r7, #44	@ 0x2c
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd90      	pop	{r4, r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <osDelayUntil+0x18>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	e000      	b.n	8005b1e <osDelayUntil+0x1a>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 f8e1 	bl	8006ce8 <vTaskDelayUntil>
  
  return osOK;
 8005b26:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f103 0208 	add.w	r2, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f04f 32ff 	mov.w	r2, #4294967295
 8005b48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f103 0208 	add.w	r2, r3, #8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f103 0208 	add.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d103      	bne.n	8005bf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e00c      	b.n	8005c0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e002      	b.n	8005c00 <vListInsert+0x2e>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d2f6      	bcs.n	8005bfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6892      	ldr	r2, [r2, #8]
 8005c5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6852      	ldr	r2, [r2, #4]
 8005c64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d103      	bne.n	8005c78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	b672      	cpsid	i
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	b662      	cpsie	i
 8005cc0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005cc8:	f002 f820 	bl	8007d0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	441a      	add	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	22ff      	movs	r2, #255	@ 0xff
 8005d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	22ff      	movs	r2, #255	@ 0xff
 8005d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d114      	bne.n	8005d48 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01a      	beq.n	8005d5c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3310      	adds	r3, #16
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 faf8 	bl	8007320 <xTaskRemoveFromEventList>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d012      	beq.n	8005d5c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <xQueueGenericReset+0xd4>)
 8005d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	e009      	b.n	8005d5c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3310      	adds	r3, #16
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff feef 	bl	8005b30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3324      	adds	r3, #36	@ 0x24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff feea 	bl	8005b30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d5c:	f002 f80c 	bl	8007d78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d60:	2301      	movs	r3, #1
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10d      	bne.n	8005da0 <xQueueGenericCreate+0x30>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	b672      	cpsid	i
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	b662      	cpsie	i
 8005d98:	613b      	str	r3, [r7, #16]
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e004      	b.n	8005db6 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3348      	adds	r3, #72	@ 0x48
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f002 f8d4 	bl	8007f68 <pvPortMalloc>
 8005dc0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00d      	beq.n	8005de4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3348      	adds	r3, #72	@ 0x48
 8005dd0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dd2:	79fa      	ldrb	r2, [r7, #7]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f805 	bl	8005dee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005de4:	69bb      	ldr	r3, [r7, #24]
	}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e002      	b.n	8005e10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f7ff ff3a 	bl	8005c98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f81c 	bl	8005e90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6939      	ldr	r1, [r7, #16]
 8005e78:	6978      	ldr	r0, [r7, #20]
 8005e7a:	f7ff ff79 	bl	8005d70 <xQueueGenericCreate>
 8005e7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ffd3 	bl	8005e2c <prvInitialiseMutex>

		return xNewQueue;
 8005e86:	68fb      	ldr	r3, [r7, #12]
	}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	@ 0x38
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10d      	bne.n	8005ec8 <xQueueGenericSend+0x38>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	b672      	cpsid	i
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	b662      	cpsie	i
 8005ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <xQueueGenericSend+0x46>
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <xQueueGenericSend+0x4a>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <xQueueGenericSend+0x4c>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10d      	bne.n	8005efc <xQueueGenericSend+0x6c>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	b672      	cpsid	i
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	b662      	cpsie	i
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSend+0x7a>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSend+0x7e>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSend+0x80>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <xQueueGenericSend+0xa0>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	b672      	cpsid	i
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	b662      	cpsie	i
 8005f28:	623b      	str	r3, [r7, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f30:	f001 fb9c 	bl	800766c <xTaskGetSchedulerState>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <xQueueGenericSend+0xb0>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <xQueueGenericSend+0xb4>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <xQueueGenericSend+0xb6>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10d      	bne.n	8005f66 <xQueueGenericSend+0xd6>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	b672      	cpsid	i
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	b662      	cpsie	i
 8005f5e:	61fb      	str	r3, [r7, #28]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f66:	f001 fed1 	bl	8007d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <xQueueGenericSend+0xec>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d129      	bne.n	8005fd0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f82:	f000 fc6b 	bl	800685c <prvCopyDataToQueue>
 8005f86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d010      	beq.n	8005fb2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	3324      	adds	r3, #36	@ 0x24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f9c3 	bl	8007320 <xTaskRemoveFromEventList>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d013      	beq.n	8005fc8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80060a0 <xQueueGenericSend+0x210>)
 8005fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	e00a      	b.n	8005fc8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fb8:	4b39      	ldr	r3, [pc, #228]	@ (80060a0 <xQueueGenericSend+0x210>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fc8:	f001 fed6 	bl	8007d78 <vPortExitCritical>
				return pdPASS;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e063      	b.n	8006098 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fd6:	f001 fecf 	bl	8007d78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e05c      	b.n	8006098 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fe4:	f107 0314 	add.w	r3, r7, #20
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f9ff 	bl	80073ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ff2:	f001 fec1 	bl	8007d78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ff6:	f000 ff81 	bl	8006efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ffa:	f001 fe87 	bl	8007d0c <vPortEnterCritical>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006004:	b25b      	sxtb	r3, r3
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d103      	bne.n	8006014 <xQueueGenericSend+0x184>
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800601a:	b25b      	sxtb	r3, r3
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d103      	bne.n	800602a <xQueueGenericSend+0x19a>
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800602a:	f001 fea5 	bl	8007d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800602e:	1d3a      	adds	r2, r7, #4
 8006030:	f107 0314 	add.w	r3, r7, #20
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f001 f9ee 	bl	8007418 <xTaskCheckForTimeOut>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d124      	bne.n	800608c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006042:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006044:	f000 fd02 	bl	8006a4c <prvIsQueueFull>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d018      	beq.n	8006080 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	3310      	adds	r3, #16
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f93a 	bl	80072d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800605c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800605e:	f000 fc8d 	bl	800697c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006062:	f000 ff59 	bl	8006f18 <xTaskResumeAll>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	f47f af7c 	bne.w	8005f66 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800606e:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <xQueueGenericSend+0x210>)
 8006070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	e772      	b.n	8005f66 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006082:	f000 fc7b 	bl	800697c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006086:	f000 ff47 	bl	8006f18 <xTaskResumeAll>
 800608a:	e76c      	b.n	8005f66 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800608c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800608e:	f000 fc75 	bl	800697c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006092:	f000 ff41 	bl	8006f18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006096:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006098:	4618      	mov	r0, r3
 800609a:	3738      	adds	r7, #56	@ 0x38
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08e      	sub	sp, #56	@ 0x38
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10d      	bne.n	80060d8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c0:	b672      	cpsid	i
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	b662      	cpsie	i
 80060d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d103      	bne.n	80060e6 <xQueueGenericSendFromISR+0x42>
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <xQueueGenericSendFromISR+0x46>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <xQueueGenericSendFromISR+0x48>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10d      	bne.n	800610c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	b672      	cpsid	i
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	b662      	cpsie	i
 8006104:	623b      	str	r3, [r7, #32]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d103      	bne.n	800611a <xQueueGenericSendFromISR+0x76>
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <xQueueGenericSendFromISR+0x7a>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGenericSendFromISR+0x7c>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10d      	bne.n	8006140 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	b672      	cpsid	i
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	b662      	cpsie	i
 8006138:	61fb      	str	r3, [r7, #28]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006140:	f001 fecc 	bl	8007edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006144:	f3ef 8211 	mrs	r2, BASEPRI
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	61ba      	str	r2, [r7, #24]
 800615e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006160:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006162:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616c:	429a      	cmp	r2, r3
 800616e:	d302      	bcc.n	8006176 <xQueueGenericSendFromISR+0xd2>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d12c      	bne.n	80061d0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800617c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006186:	f000 fb69 	bl	800685c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800618a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d112      	bne.n	80061ba <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d016      	beq.n	80061ca <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	3324      	adds	r3, #36	@ 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 f8bd 	bl	8007320 <xTaskRemoveFromEventList>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e007      	b.n	80061ca <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061be:	3301      	adds	r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	b25a      	sxtb	r2, r3
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061ca:	2301      	movs	r3, #1
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80061ce:	e001      	b.n	80061d4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3738      	adds	r7, #56	@ 0x38
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08e      	sub	sp, #56	@ 0x38
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <xQueueGiveFromISR+0x30>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	b672      	cpsid	i
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	b662      	cpsie	i
 8006212:	623b      	str	r3, [r7, #32]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <xQueueGiveFromISR+0x54>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	b672      	cpsid	i
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	b662      	cpsie	i
 8006236:	61fb      	str	r3, [r7, #28]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <xQueueGiveFromISR+0x64>
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <xQueueGiveFromISR+0x68>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <xQueueGiveFromISR+0x6a>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10d      	bne.n	8006274 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	61bb      	str	r3, [r7, #24]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006274:	f001 fe32 	bl	8007edc <vPortValidateInterruptPriority>
	__asm volatile
 8006278:	f3ef 8211 	mrs	r2, BASEPRI
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	b672      	cpsid	i
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	b662      	cpsie	i
 8006290:	617a      	str	r2, [r7, #20]
 8006292:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006294:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d22b      	bcs.n	8006300 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d112      	bne.n	80062ea <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	3324      	adds	r3, #36	@ 0x24
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f825 	bl	8007320 <xTaskRemoveFromEventList>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00e      	beq.n	80062fa <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e007      	b.n	80062fa <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ee:	3301      	adds	r3, #1
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	b25a      	sxtb	r2, r3
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062fa:	2301      	movs	r3, #1
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fe:	e001      	b.n	8006304 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006300:	2300      	movs	r3, #0
 8006302:	637b      	str	r3, [r7, #52]	@ 0x34
 8006304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006306:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f383 8811 	msr	BASEPRI, r3
}
 800630e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006312:	4618      	mov	r0, r3
 8006314:	3738      	adds	r7, #56	@ 0x38
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08c      	sub	sp, #48	@ 0x30
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006328:	2300      	movs	r3, #0
 800632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10d      	bne.n	8006352 <xQueueReceive+0x36>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	b672      	cpsid	i
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	b662      	cpsie	i
 800634a:	623b      	str	r3, [r7, #32]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <xQueueReceive+0x44>
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <xQueueReceive+0x48>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <xQueueReceive+0x4a>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <xQueueReceive+0x6a>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	b672      	cpsid	i
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	b662      	cpsie	i
 800637e:	61fb      	str	r3, [r7, #28]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006386:	f001 f971 	bl	800766c <xTaskGetSchedulerState>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <xQueueReceive+0x7a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <xQueueReceive+0x7e>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <xQueueReceive+0x80>
 800639a:	2300      	movs	r3, #0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10d      	bne.n	80063bc <xQueueReceive+0xa0>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	b672      	cpsid	i
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	b662      	cpsie	i
 80063b4:	61bb      	str	r3, [r7, #24]
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063bc:	f001 fca6 	bl	8007d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01f      	beq.n	800640c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063d0:	f000 faae 	bl	8006930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00f      	beq.n	8006404 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	3310      	adds	r3, #16
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 ff99 	bl	8007320 <xTaskRemoveFromEventList>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063f4:	4b3c      	ldr	r3, [pc, #240]	@ (80064e8 <xQueueReceive+0x1cc>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006404:	f001 fcb8 	bl	8007d78 <vPortExitCritical>
				return pdPASS;
 8006408:	2301      	movs	r3, #1
 800640a:	e069      	b.n	80064e0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d103      	bne.n	800641a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006412:	f001 fcb1 	bl	8007d78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006416:	2300      	movs	r3, #0
 8006418:	e062      	b.n	80064e0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006420:	f107 0310 	add.w	r3, r7, #16
 8006424:	4618      	mov	r0, r3
 8006426:	f000 ffe1 	bl	80073ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800642a:	2301      	movs	r3, #1
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800642e:	f001 fca3 	bl	8007d78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006432:	f000 fd63 	bl	8006efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006436:	f001 fc69 	bl	8007d0c <vPortEnterCritical>
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006440:	b25b      	sxtb	r3, r3
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d103      	bne.n	8006450 <xQueueReceive+0x134>
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006456:	b25b      	sxtb	r3, r3
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d103      	bne.n	8006466 <xQueueReceive+0x14a>
 800645e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006466:	f001 fc87 	bl	8007d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800646a:	1d3a      	adds	r2, r7, #4
 800646c:	f107 0310 	add.w	r3, r7, #16
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f000 ffd0 	bl	8007418 <xTaskCheckForTimeOut>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d123      	bne.n	80064c6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800647e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006480:	f000 face 	bl	8006a20 <prvIsQueueEmpty>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d017      	beq.n	80064ba <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	3324      	adds	r3, #36	@ 0x24
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f000 ff1c 	bl	80072d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800649a:	f000 fa6f 	bl	800697c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800649e:	f000 fd3b 	bl	8006f18 <xTaskResumeAll>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d189      	bne.n	80063bc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80064a8:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <xQueueReceive+0x1cc>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	e780      	b.n	80063bc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064bc:	f000 fa5e 	bl	800697c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064c0:	f000 fd2a 	bl	8006f18 <xTaskResumeAll>
 80064c4:	e77a      	b.n	80063bc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c8:	f000 fa58 	bl	800697c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064cc:	f000 fd24 	bl	8006f18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d2:	f000 faa5 	bl	8006a20 <prvIsQueueEmpty>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f43f af6f 	beq.w	80063bc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3730      	adds	r7, #48	@ 0x30
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08e      	sub	sp, #56	@ 0x38
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064fe:	2300      	movs	r3, #0
 8006500:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10d      	bne.n	8006524 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	b672      	cpsid	i
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	b662      	cpsie	i
 800651c:	623b      	str	r3, [r7, #32]
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	b672      	cpsid	i
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	b662      	cpsie	i
 8006540:	61fb      	str	r3, [r7, #28]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006548:	f001 f890 	bl	800766c <xTaskGetSchedulerState>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <xQueueSemaphoreTake+0x6c>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <xQueueSemaphoreTake+0x70>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <xQueueSemaphoreTake+0x72>
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006566:	b672      	cpsid	i
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	b662      	cpsie	i
 8006576:	61bb      	str	r3, [r7, #24]
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e7fd      	b.n	800657a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800657e:	f001 fbc5 	bl	8007d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d024      	beq.n	80065d8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006590:	1e5a      	subs	r2, r3, #1
 8006592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006594:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800659e:	f001 fa2f 	bl	8007a00 <pvTaskIncrementMutexHeldCount>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00f      	beq.n	80065d0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	3310      	adds	r3, #16
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 feb3 	bl	8007320 <xTaskRemoveFromEventList>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065c0:	4b55      	ldr	r3, [pc, #340]	@ (8006718 <xQueueSemaphoreTake+0x22c>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065d0:	f001 fbd2 	bl	8007d78 <vPortExitCritical>
				return pdPASS;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e09a      	b.n	800670e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d114      	bne.n	8006608 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	b672      	cpsid	i
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	b662      	cpsie	i
 80065f8:	617b      	str	r3, [r7, #20]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006600:	f001 fbba 	bl	8007d78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006604:	2300      	movs	r3, #0
 8006606:	e082      	b.n	800670e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4618      	mov	r0, r3
 8006614:	f000 feea 	bl	80073ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800661c:	f001 fbac 	bl	8007d78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006620:	f000 fc6c 	bl	8006efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006624:	f001 fb72 	bl	8007d0c <vPortEnterCritical>
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800662e:	b25b      	sxtb	r3, r3
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d103      	bne.n	800663e <xQueueSemaphoreTake+0x152>
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800663e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006644:	b25b      	sxtb	r3, r3
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d103      	bne.n	8006654 <xQueueSemaphoreTake+0x168>
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006654:	f001 fb90 	bl	8007d78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006658:	463a      	mov	r2, r7
 800665a:	f107 030c 	add.w	r3, r7, #12
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fed9 	bl	8007418 <xTaskCheckForTimeOut>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d132      	bne.n	80066d2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800666c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800666e:	f000 f9d7 	bl	8006a20 <prvIsQueueEmpty>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d026      	beq.n	80066c6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006680:	f001 fb44 	bl	8007d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f80d 	bl	80076a8 <xTaskPriorityInherit>
 800668e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006690:	f001 fb72 	bl	8007d78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	3324      	adds	r3, #36	@ 0x24
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fe17 	bl	80072d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066a4:	f000 f96a 	bl	800697c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066a8:	f000 fc36 	bl	8006f18 <xTaskResumeAll>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f47f af65 	bne.w	800657e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80066b4:	4b18      	ldr	r3, [pc, #96]	@ (8006718 <xQueueSemaphoreTake+0x22c>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	e75b      	b.n	800657e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066c8:	f000 f958 	bl	800697c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066cc:	f000 fc24 	bl	8006f18 <xTaskResumeAll>
 80066d0:	e755      	b.n	800657e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066d4:	f000 f952 	bl	800697c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066d8:	f000 fc1e 	bl	8006f18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066de:	f000 f99f 	bl	8006a20 <prvIsQueueEmpty>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f43f af4a 	beq.w	800657e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80066f0:	f001 fb0c 	bl	8007d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80066f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066f6:	f000 f899 	bl	800682c <prvGetDisinheritPriorityAfterTimeout>
 80066fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80066fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006702:	4618      	mov	r0, r3
 8006704:	f001 f8dc 	bl	80078c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006708:	f001 fb36 	bl	8007d78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800670c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800670e:	4618      	mov	r0, r3
 8006710:	3738      	adds	r7, #56	@ 0x38
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08e      	sub	sp, #56	@ 0x38
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800672c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10d      	bne.n	800674e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	b672      	cpsid	i
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	b662      	cpsie	i
 8006746:	623b      	str	r3, [r7, #32]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <xQueueReceiveFromISR+0x40>
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <xQueueReceiveFromISR+0x44>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <xQueueReceiveFromISR+0x46>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	b672      	cpsid	i
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	b662      	cpsie	i
 800677a:	61fb      	str	r3, [r7, #28]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006782:	f001 fbab 	bl	8007edc <vPortValidateInterruptPriority>
	__asm volatile
 8006786:	f3ef 8211 	mrs	r2, BASEPRI
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	b672      	cpsid	i
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	b662      	cpsie	i
 800679e:	61ba      	str	r2, [r7, #24]
 80067a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02f      	beq.n	8006812 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067c0:	f000 f8b6 	bl	8006930 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d112      	bne.n	80067fc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	3310      	adds	r3, #16
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fd9c 	bl	8007320 <xTaskRemoveFromEventList>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e007      	b.n	800680c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80067fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006800:	3301      	adds	r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	b25a      	sxtb	r2, r3
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800680c:	2301      	movs	r3, #1
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	e001      	b.n	8006816 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	613b      	str	r3, [r7, #16]
	__asm volatile
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f383 8811 	msr	BASEPRI, r3
}
 8006820:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006824:	4618      	mov	r0, r3
 8006826:	3738      	adds	r7, #56	@ 0x38
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d006      	beq.n	800684a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1c3 0307 	rsb	r3, r3, #7
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e001      	b.n	800684e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800684e:	68fb      	ldr	r3, [r7, #12]
	}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d14d      	bne.n	800691e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 ff8e 	bl	80077a8 <xTaskPriorityDisinherit>
 800688c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
 8006894:	e043      	b.n	800691e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d119      	bne.n	80068d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6858      	ldr	r0, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a4:	461a      	mov	r2, r3
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	f002 fea0 	bl	80095ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d32b      	bcc.n	800691e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e026      	b.n	800691e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68d8      	ldr	r0, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d8:	461a      	mov	r2, r3
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	f002 fe86 	bl	80095ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	425b      	negs	r3, r3
 80068ea:	441a      	add	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d207      	bcs.n	800690c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006904:	425b      	negs	r3, r3
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d105      	bne.n	800691e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	3b01      	subs	r3, #1
 800691c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006926:	697b      	ldr	r3, [r7, #20]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d018      	beq.n	8006974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	441a      	add	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	d303      	bcc.n	8006964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68d9      	ldr	r1, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	461a      	mov	r2, r3
 800696e:	6838      	ldr	r0, [r7, #0]
 8006970:	f002 fe3c 	bl	80095ec <memcpy>
	}
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006984:	f001 f9c2 	bl	8007d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800698e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006990:	e011      	b.n	80069b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	d012      	beq.n	80069c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	@ 0x24
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fcbe 	bl	8007320 <xTaskRemoveFromEventList>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069aa:	f000 fd9d 	bl	80074e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dce9      	bgt.n	8006992 <prvUnlockQueue+0x16>
 80069be:	e000      	b.n	80069c2 <prvUnlockQueue+0x46>
					break;
 80069c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	22ff      	movs	r2, #255	@ 0xff
 80069c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069ca:	f001 f9d5 	bl	8007d78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ce:	f001 f99d 	bl	8007d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069da:	e011      	b.n	8006a00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d012      	beq.n	8006a0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3310      	adds	r3, #16
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fc99 	bl	8007320 <xTaskRemoveFromEventList>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069f4:	f000 fd78 	bl	80074e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dce9      	bgt.n	80069dc <prvUnlockQueue+0x60>
 8006a08:	e000      	b.n	8006a0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	22ff      	movs	r2, #255	@ 0xff
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a14:	f001 f9b0 	bl	8007d78 <vPortExitCritical>
}
 8006a18:	bf00      	nop
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a28:	f001 f970 	bl	8007d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d102      	bne.n	8006a3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e001      	b.n	8006a3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f001 f99b 	bl	8007d78 <vPortExitCritical>

	return xReturn;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a54:	f001 f95a 	bl	8007d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d102      	bne.n	8006a6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e001      	b.n	8006a6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a6e:	f001 f983 	bl	8007d78 <vPortExitCritical>

	return xReturn;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	@ 0x30
 8006a80:	af04      	add	r7, sp, #16
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fa69 	bl	8007f68 <pvPortMalloc>
 8006a96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00e      	beq.n	8006abc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a9e:	2054      	movs	r0, #84	@ 0x54
 8006aa0:	f001 fa62 	bl	8007f68 <pvPortMalloc>
 8006aa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ab2:	e005      	b.n	8006ac0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ab4:	6978      	ldr	r0, [r7, #20]
 8006ab6:	f001 fb25 	bl	8008104 <vPortFree>
 8006aba:	e001      	b.n	8006ac0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d013      	beq.n	8006aee <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9303      	str	r3, [sp, #12]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	9302      	str	r3, [sp, #8]
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f80e 	bl	8006afe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ae2:	69f8      	ldr	r0, [r7, #28]
 8006ae4:	f000 f896 	bl	8006c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	e002      	b.n	8006af4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006af4:	69bb      	ldr	r3, [r7, #24]
	}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b088      	sub	sp, #32
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006b16:	440b      	add	r3, r1
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	f023 0307 	bic.w	r3, r3, #7
 8006b24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00d      	beq.n	8006b4c <prvInitialiseNewTask+0x4e>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	b672      	cpsid	i
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	b662      	cpsie	i
 8006b44:	617b      	str	r3, [r7, #20]
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01f      	beq.n	8006b92 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	e012      	b.n	8006b7e <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	7819      	ldrb	r1, [r3, #0]
 8006b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	3334      	adds	r3, #52	@ 0x34
 8006b68:	460a      	mov	r2, r1
 8006b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b0f      	cmp	r3, #15
 8006b82:	d9e9      	bls.n	8006b58 <prvInitialiseNewTask+0x5a>
 8006b84:	e000      	b.n	8006b88 <prvInitialiseNewTask+0x8a>
			{
				break;
 8006b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b90:	e003      	b.n	8006b9a <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9c:	2b06      	cmp	r3, #6
 8006b9e:	d901      	bls.n	8006ba4 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ba0:	2306      	movs	r3, #6
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bae:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe ffd8 	bl	8005b70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe ffd3 	bl	8005b70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	f1c3 0207 	rsb	r2, r3, #7
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	2200      	movs	r2, #0
 8006be4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	68f9      	ldr	r1, [r7, #12]
 8006bf2:	69b8      	ldr	r0, [r7, #24]
 8006bf4:	f000 ff7e 	bl	8007af4 <pxPortInitialiseStack>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c1c:	f001 f876 	bl	8007d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c20:	4b2a      	ldr	r3, [pc, #168]	@ (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	4a29      	ldr	r2, [pc, #164]	@ (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c2a:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c32:	4a27      	ldr	r2, [pc, #156]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c38:	4b24      	ldr	r3, [pc, #144]	@ (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c40:	f000 fc76 	bl	8007530 <prvInitialiseTaskLists>
 8006c44:	e00d      	b.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c46:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c4e:	4b20      	ldr	r3, [pc, #128]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d802      	bhi.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c62:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <prvAddNewTaskToReadyList+0xc8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <prvAddNewTaskToReadyList+0xc8>)
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ce0 <prvAddNewTaskToReadyList+0xcc>)
 8006c8c:	441a      	add	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7fe ff78 	bl	8005b8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9a:	f001 f86d 	bl	8007d78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d207      	bcs.n	8006cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <prvAddNewTaskToReadyList+0xd0>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000780 	.word	0x20000780
 8006cd0:	20000680 	.word	0x20000680
 8006cd4:	2000078c 	.word	0x2000078c
 8006cd8:	2000079c 	.word	0x2000079c
 8006cdc:	20000788 	.word	0x20000788
 8006ce0:	20000684 	.word	0x20000684
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	@ 0x28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10d      	bne.n	8006d18 <vTaskDelayUntil+0x30>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	b672      	cpsid	i
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	b662      	cpsie	i
 8006d10:	617b      	str	r3, [r7, #20]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10d      	bne.n	8006d3a <vTaskDelayUntil+0x52>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d22:	b672      	cpsid	i
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	b662      	cpsie	i
 8006d32:	613b      	str	r3, [r7, #16]
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	e7fd      	b.n	8006d36 <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8006de8 <vTaskDelayUntil+0x100>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00d      	beq.n	8006d5e <vTaskDelayUntil+0x76>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	b672      	cpsid	i
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	b662      	cpsie	i
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8006d5e:	f000 f8cd 	bl	8006efc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006d62:	4b22      	ldr	r3, [pc, #136]	@ (8006dec <vTaskDelayUntil+0x104>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a3a      	ldr	r2, [r7, #32]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d20b      	bcs.n	8006d94 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d211      	bcs.n	8006daa <vTaskDelayUntil+0xc2>
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d90d      	bls.n	8006daa <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d92:	e00a      	b.n	8006daa <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d303      	bcc.n	8006da6 <vTaskDelayUntil+0xbe>
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d901      	bls.n	8006daa <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006da6:	2301      	movs	r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fe32 	bl	8007a28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006dc4:	f000 f8a8 	bl	8006f18 <xTaskResumeAll>
 8006dc8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d107      	bne.n	8006de0 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8006dd0:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <vTaskDelayUntil+0x108>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006de0:	bf00      	nop
 8006de2:	3728      	adds	r7, #40	@ 0x28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200007a8 	.word	0x200007a8
 8006dec:	20000784 	.word	0x20000784
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01a      	beq.n	8006e3c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e06:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <vTaskDelay+0x68>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <vTaskDelay+0x36>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	b672      	cpsid	i
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	b662      	cpsie	i
 8006e22:	60bb      	str	r3, [r7, #8]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006e2a:	f000 f867 	bl	8006efc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e2e:	2100      	movs	r1, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fdf9 	bl	8007a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e36:	f000 f86f 	bl	8006f18 <xTaskResumeAll>
 8006e3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d107      	bne.n	8006e52 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006e42:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <vTaskDelay+0x6c>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200007a8 	.word	0x200007a8
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee4 <vTaskStartScheduler+0x80>)
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	2280      	movs	r2, #128	@ 0x80
 8006e76:	491c      	ldr	r1, [pc, #112]	@ (8006ee8 <vTaskStartScheduler+0x84>)
 8006e78:	481c      	ldr	r0, [pc, #112]	@ (8006eec <vTaskStartScheduler+0x88>)
 8006e7a:	f7ff fdff 	bl	8006a7c <xTaskCreate>
 8006e7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d118      	bne.n	8006eb8 <vTaskStartScheduler+0x54>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	b672      	cpsid	i
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	b662      	cpsie	i
 8006e9a:	60bb      	str	r3, [r7, #8]
}
 8006e9c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e9e:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <vTaskStartScheduler+0x8c>)
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <vTaskStartScheduler+0x90>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006eac:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <vTaskStartScheduler+0x94>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eb2:	f000 fead 	bl	8007c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eb6:	e011      	b.n	8006edc <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d10d      	bne.n	8006edc <vTaskStartScheduler+0x78>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	b672      	cpsid	i
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	b662      	cpsie	i
 8006ed4:	607b      	str	r3, [r7, #4]
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <vTaskStartScheduler+0x74>
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	200007a4 	.word	0x200007a4
 8006ee8:	08009700 	.word	0x08009700
 8006eec:	08007501 	.word	0x08007501
 8006ef0:	200007a0 	.word	0x200007a0
 8006ef4:	2000078c 	.word	0x2000078c
 8006ef8:	20000784 	.word	0x20000784

08006efc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f00:	4b04      	ldr	r3, [pc, #16]	@ (8006f14 <vTaskSuspendAll+0x18>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	4a03      	ldr	r2, [pc, #12]	@ (8006f14 <vTaskSuspendAll+0x18>)
 8006f08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f0a:	bf00      	nop
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	200007a8 	.word	0x200007a8

08006f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f26:	4b43      	ldr	r3, [pc, #268]	@ (8007034 <xTaskResumeAll+0x11c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10d      	bne.n	8006f4a <xTaskResumeAll+0x32>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	b672      	cpsid	i
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	b662      	cpsie	i
 8006f42:	603b      	str	r3, [r7, #0]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f4a:	f000 fedf 	bl	8007d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f4e:	4b39      	ldr	r3, [pc, #228]	@ (8007034 <xTaskResumeAll+0x11c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	4a37      	ldr	r2, [pc, #220]	@ (8007034 <xTaskResumeAll+0x11c>)
 8006f56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f58:	4b36      	ldr	r3, [pc, #216]	@ (8007034 <xTaskResumeAll+0x11c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d161      	bne.n	8007024 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f60:	4b35      	ldr	r3, [pc, #212]	@ (8007038 <xTaskResumeAll+0x120>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d05d      	beq.n	8007024 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f68:	e02e      	b.n	8006fc8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f6a:	4b34      	ldr	r3, [pc, #208]	@ (800703c <xTaskResumeAll+0x124>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3318      	adds	r3, #24
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fe64 	bl	8005c44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe fe5f 	bl	8005c44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007040 <xTaskResumeAll+0x128>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	4a2a      	ldr	r2, [pc, #168]	@ (8007040 <xTaskResumeAll+0x128>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a27      	ldr	r2, [pc, #156]	@ (8007044 <xTaskResumeAll+0x12c>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe fdeb 	bl	8005b8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	4b23      	ldr	r3, [pc, #140]	@ (8007048 <xTaskResumeAll+0x130>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006fc2:	4b22      	ldr	r3, [pc, #136]	@ (800704c <xTaskResumeAll+0x134>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800703c <xTaskResumeAll+0x124>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1cc      	bne.n	8006f6a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fd6:	f000 fb29 	bl	800762c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fda:	4b1d      	ldr	r3, [pc, #116]	@ (8007050 <xTaskResumeAll+0x138>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d010      	beq.n	8007008 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fe6:	f000 f859 	bl	800709c <xTaskIncrementTick>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006ff0:	4b16      	ldr	r3, [pc, #88]	@ (800704c <xTaskResumeAll+0x134>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f1      	bne.n	8006fe6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007002:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <xTaskResumeAll+0x138>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007008:	4b10      	ldr	r3, [pc, #64]	@ (800704c <xTaskResumeAll+0x134>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007010:	2301      	movs	r3, #1
 8007012:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007014:	4b0f      	ldr	r3, [pc, #60]	@ (8007054 <xTaskResumeAll+0x13c>)
 8007016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007024:	f000 fea8 	bl	8007d78 <vPortExitCritical>

	return xAlreadyYielded;
 8007028:	68bb      	ldr	r3, [r7, #8]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200007a8 	.word	0x200007a8
 8007038:	20000780 	.word	0x20000780
 800703c:	20000740 	.word	0x20000740
 8007040:	20000788 	.word	0x20000788
 8007044:	20000684 	.word	0x20000684
 8007048:	20000680 	.word	0x20000680
 800704c:	20000794 	.word	0x20000794
 8007050:	20000790 	.word	0x20000790
 8007054:	e000ed04 	.word	0xe000ed04

08007058 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800705e:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <xTaskGetTickCount+0x1c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007064:	687b      	ldr	r3, [r7, #4]
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000784 	.word	0x20000784

08007078 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800707e:	f000 ff2d 	bl	8007edc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007086:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <xTaskGetTickCountFromISR+0x20>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800708c:	683b      	ldr	r3, [r7, #0]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000784 	.word	0x20000784

0800709c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a6:	4b50      	ldr	r3, [pc, #320]	@ (80071e8 <xTaskIncrementTick+0x14c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 808b 	bne.w	80071c6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b0:	4b4e      	ldr	r3, [pc, #312]	@ (80071ec <xTaskIncrementTick+0x150>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070b8:	4a4c      	ldr	r2, [pc, #304]	@ (80071ec <xTaskIncrementTick+0x150>)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d123      	bne.n	800710c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c4:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <xTaskIncrementTick+0x154>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00d      	beq.n	80070ea <xTaskIncrementTick+0x4e>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	b672      	cpsid	i
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	b662      	cpsie	i
 80070e2:	603b      	str	r3, [r7, #0]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <xTaskIncrementTick+0x4a>
 80070ea:	4b41      	ldr	r3, [pc, #260]	@ (80071f0 <xTaskIncrementTick+0x154>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	4b40      	ldr	r3, [pc, #256]	@ (80071f4 <xTaskIncrementTick+0x158>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3e      	ldr	r2, [pc, #248]	@ (80071f0 <xTaskIncrementTick+0x154>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	4a3e      	ldr	r2, [pc, #248]	@ (80071f4 <xTaskIncrementTick+0x158>)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b3e      	ldr	r3, [pc, #248]	@ (80071f8 <xTaskIncrementTick+0x15c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a3c      	ldr	r2, [pc, #240]	@ (80071f8 <xTaskIncrementTick+0x15c>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	f000 fa90 	bl	800762c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800710c:	4b3b      	ldr	r3, [pc, #236]	@ (80071fc <xTaskIncrementTick+0x160>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	d348      	bcc.n	80071a8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007116:	4b36      	ldr	r3, [pc, #216]	@ (80071f0 <xTaskIncrementTick+0x154>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007120:	4b36      	ldr	r3, [pc, #216]	@ (80071fc <xTaskIncrementTick+0x160>)
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	601a      	str	r2, [r3, #0]
					break;
 8007128:	e03e      	b.n	80071a8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712a:	4b31      	ldr	r3, [pc, #196]	@ (80071f0 <xTaskIncrementTick+0x154>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	d203      	bcs.n	800714a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <xTaskIncrementTick+0x160>)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007148:	e02e      	b.n	80071a8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3304      	adds	r3, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fd78 	bl	8005c44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3318      	adds	r3, #24
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fd6f 	bl	8005c44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	2201      	movs	r2, #1
 800716c:	409a      	lsls	r2, r3
 800716e:	4b24      	ldr	r3, [pc, #144]	@ (8007200 <xTaskIncrementTick+0x164>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4313      	orrs	r3, r2
 8007174:	4a22      	ldr	r2, [pc, #136]	@ (8007200 <xTaskIncrementTick+0x164>)
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4a1f      	ldr	r2, [pc, #124]	@ (8007204 <xTaskIncrementTick+0x168>)
 8007186:	441a      	add	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	3304      	adds	r3, #4
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f7fe fcfb 	bl	8005b8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <xTaskIncrementTick+0x16c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	429a      	cmp	r2, r3
 80071a0:	d3b9      	bcc.n	8007116 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80071a2:	2301      	movs	r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a6:	e7b6      	b.n	8007116 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071a8:	4b17      	ldr	r3, [pc, #92]	@ (8007208 <xTaskIncrementTick+0x16c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ae:	4915      	ldr	r1, [pc, #84]	@ (8007204 <xTaskIncrementTick+0x168>)
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d907      	bls.n	80071d0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e004      	b.n	80071d0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071c6:	4b11      	ldr	r3, [pc, #68]	@ (800720c <xTaskIncrementTick+0x170>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	4a0f      	ldr	r2, [pc, #60]	@ (800720c <xTaskIncrementTick+0x170>)
 80071ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <xTaskIncrementTick+0x174>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071dc:	697b      	ldr	r3, [r7, #20]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200007a8 	.word	0x200007a8
 80071ec:	20000784 	.word	0x20000784
 80071f0:	20000738 	.word	0x20000738
 80071f4:	2000073c 	.word	0x2000073c
 80071f8:	20000798 	.word	0x20000798
 80071fc:	200007a0 	.word	0x200007a0
 8007200:	20000788 	.word	0x20000788
 8007204:	20000684 	.word	0x20000684
 8007208:	20000680 	.word	0x20000680
 800720c:	20000790 	.word	0x20000790
 8007210:	20000794 	.word	0x20000794

08007214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800721a:	4b28      	ldr	r3, [pc, #160]	@ (80072bc <vTaskSwitchContext+0xa8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007222:	4b27      	ldr	r3, [pc, #156]	@ (80072c0 <vTaskSwitchContext+0xac>)
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007228:	e042      	b.n	80072b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800722a:	4b25      	ldr	r3, [pc, #148]	@ (80072c0 <vTaskSwitchContext+0xac>)
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007230:	4b24      	ldr	r3, [pc, #144]	@ (80072c4 <vTaskSwitchContext+0xb0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	fab3 f383 	clz	r3, r3
 800723c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	f1c3 031f 	rsb	r3, r3, #31
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	4920      	ldr	r1, [pc, #128]	@ (80072c8 <vTaskSwitchContext+0xb4>)
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10d      	bne.n	8007276 <vTaskSwitchContext+0x62>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725e:	b672      	cpsid	i
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	b662      	cpsie	i
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	e7fd      	b.n	8007272 <vTaskSwitchContext+0x5e>
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4a11      	ldr	r2, [pc, #68]	@ (80072c8 <vTaskSwitchContext+0xb4>)
 8007282:	4413      	add	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	605a      	str	r2, [r3, #4]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	3308      	adds	r3, #8
 8007298:	429a      	cmp	r2, r3
 800729a:	d104      	bne.n	80072a6 <vTaskSwitchContext+0x92>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	605a      	str	r2, [r3, #4]
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	4a07      	ldr	r2, [pc, #28]	@ (80072cc <vTaskSwitchContext+0xb8>)
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	200007a8 	.word	0x200007a8
 80072c0:	20000794 	.word	0x20000794
 80072c4:	20000788 	.word	0x20000788
 80072c8:	20000684 	.word	0x20000684
 80072cc:	20000680 	.word	0x20000680

080072d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10d      	bne.n	80072fc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	b672      	cpsid	i
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	b662      	cpsie	i
 80072f4:	60fb      	str	r3, [r7, #12]
}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	e7fd      	b.n	80072f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072fc:	4b07      	ldr	r3, [pc, #28]	@ (800731c <vTaskPlaceOnEventList+0x4c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3318      	adds	r3, #24
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7fe fc64 	bl	8005bd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800730a:	2101      	movs	r1, #1
 800730c:	6838      	ldr	r0, [r7, #0]
 800730e:	f000 fb8b 	bl	8007a28 <prvAddCurrentTaskToDelayedList>
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000680 	.word	0x20000680

08007320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10d      	bne.n	8007352 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
 800734a:	60fb      	str	r3, [r7, #12]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3318      	adds	r3, #24
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fc74 	bl	8005c44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800735c:	4b1d      	ldr	r3, [pc, #116]	@ (80073d4 <xTaskRemoveFromEventList+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11c      	bne.n	800739e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3304      	adds	r3, #4
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe fc6b 	bl	8005c44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007372:	2201      	movs	r2, #1
 8007374:	409a      	lsls	r2, r3
 8007376:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <xTaskRemoveFromEventList+0xb8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4313      	orrs	r3, r2
 800737c:	4a16      	ldr	r2, [pc, #88]	@ (80073d8 <xTaskRemoveFromEventList+0xb8>)
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4a13      	ldr	r2, [pc, #76]	@ (80073dc <xTaskRemoveFromEventList+0xbc>)
 800738e:	441a      	add	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fe fbf7 	bl	8005b8a <vListInsertEnd>
 800739c:	e005      	b.n	80073aa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3318      	adds	r3, #24
 80073a2:	4619      	mov	r1, r3
 80073a4:	480e      	ldr	r0, [pc, #56]	@ (80073e0 <xTaskRemoveFromEventList+0xc0>)
 80073a6:	f7fe fbf0 	bl	8005b8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ae:	4b0d      	ldr	r3, [pc, #52]	@ (80073e4 <xTaskRemoveFromEventList+0xc4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d905      	bls.n	80073c4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073b8:	2301      	movs	r3, #1
 80073ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <xTaskRemoveFromEventList+0xc8>)
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e001      	b.n	80073c8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80073c4:	2300      	movs	r3, #0
 80073c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073c8:	697b      	ldr	r3, [r7, #20]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200007a8 	.word	0x200007a8
 80073d8:	20000788 	.word	0x20000788
 80073dc:	20000684 	.word	0x20000684
 80073e0:	20000740 	.word	0x20000740
 80073e4:	20000680 	.word	0x20000680
 80073e8:	20000794 	.word	0x20000794

080073ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073f4:	4b06      	ldr	r3, [pc, #24]	@ (8007410 <vTaskInternalSetTimeOutState+0x24>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <vTaskInternalSetTimeOutState+0x28>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	605a      	str	r2, [r3, #4]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20000798 	.word	0x20000798
 8007414:	20000784 	.word	0x20000784

08007418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10d      	bne.n	8007444 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	b672      	cpsid	i
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	b662      	cpsie	i
 800743c:	613b      	str	r3, [r7, #16]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10d      	bne.n	8007466 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	b672      	cpsid	i
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	b662      	cpsie	i
 800745e:	60fb      	str	r3, [r7, #12]
}
 8007460:	bf00      	nop
 8007462:	bf00      	nop
 8007464:	e7fd      	b.n	8007462 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007466:	f000 fc51 	bl	8007d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800746a:	4b1d      	ldr	r3, [pc, #116]	@ (80074e0 <xTaskCheckForTimeOut+0xc8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d102      	bne.n	800748a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e023      	b.n	80074d2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <xTaskCheckForTimeOut+0xcc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d007      	beq.n	80074a6 <xTaskCheckForTimeOut+0x8e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	429a      	cmp	r2, r3
 800749e:	d302      	bcc.n	80074a6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e015      	b.n	80074d2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d20b      	bcs.n	80074c8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff ff95 	bl	80073ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
 80074c6:	e004      	b.n	80074d2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074d2:	f000 fc51 	bl	8007d78 <vPortExitCritical>

	return xReturn;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000784 	.word	0x20000784
 80074e4:	20000798 	.word	0x20000798

080074e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074ec:	4b03      	ldr	r3, [pc, #12]	@ (80074fc <vTaskMissedYield+0x14>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	bf00      	nop
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000794 	.word	0x20000794

08007500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007508:	f000 f852 	bl	80075b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <prvIdleTask+0x28>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d9f9      	bls.n	8007508 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007514:	4b05      	ldr	r3, [pc, #20]	@ (800752c <prvIdleTask+0x2c>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007524:	e7f0      	b.n	8007508 <prvIdleTask+0x8>
 8007526:	bf00      	nop
 8007528:	20000684 	.word	0x20000684
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007536:	2300      	movs	r3, #0
 8007538:	607b      	str	r3, [r7, #4]
 800753a:	e00c      	b.n	8007556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4a12      	ldr	r2, [pc, #72]	@ (8007590 <prvInitialiseTaskLists+0x60>)
 8007548:	4413      	add	r3, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe faf0 	bl	8005b30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3301      	adds	r3, #1
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d9ef      	bls.n	800753c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800755c:	480d      	ldr	r0, [pc, #52]	@ (8007594 <prvInitialiseTaskLists+0x64>)
 800755e:	f7fe fae7 	bl	8005b30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007562:	480d      	ldr	r0, [pc, #52]	@ (8007598 <prvInitialiseTaskLists+0x68>)
 8007564:	f7fe fae4 	bl	8005b30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007568:	480c      	ldr	r0, [pc, #48]	@ (800759c <prvInitialiseTaskLists+0x6c>)
 800756a:	f7fe fae1 	bl	8005b30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800756e:	480c      	ldr	r0, [pc, #48]	@ (80075a0 <prvInitialiseTaskLists+0x70>)
 8007570:	f7fe fade 	bl	8005b30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007574:	480b      	ldr	r0, [pc, #44]	@ (80075a4 <prvInitialiseTaskLists+0x74>)
 8007576:	f7fe fadb 	bl	8005b30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800757a:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <prvInitialiseTaskLists+0x78>)
 800757c:	4a05      	ldr	r2, [pc, #20]	@ (8007594 <prvInitialiseTaskLists+0x64>)
 800757e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007580:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <prvInitialiseTaskLists+0x7c>)
 8007582:	4a05      	ldr	r2, [pc, #20]	@ (8007598 <prvInitialiseTaskLists+0x68>)
 8007584:	601a      	str	r2, [r3, #0]
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000684 	.word	0x20000684
 8007594:	20000710 	.word	0x20000710
 8007598:	20000724 	.word	0x20000724
 800759c:	20000740 	.word	0x20000740
 80075a0:	20000754 	.word	0x20000754
 80075a4:	2000076c 	.word	0x2000076c
 80075a8:	20000738 	.word	0x20000738
 80075ac:	2000073c 	.word	0x2000073c

080075b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b6:	e019      	b.n	80075ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075b8:	f000 fba8 	bl	8007d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075bc:	4b10      	ldr	r3, [pc, #64]	@ (8007600 <prvCheckTasksWaitingTermination+0x50>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fb3b 	bl	8005c44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <prvCheckTasksWaitingTermination+0x54>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007604 <prvCheckTasksWaitingTermination+0x54>)
 80075d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <prvCheckTasksWaitingTermination+0x58>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3b01      	subs	r3, #1
 80075de:	4a0a      	ldr	r2, [pc, #40]	@ (8007608 <prvCheckTasksWaitingTermination+0x58>)
 80075e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075e2:	f000 fbc9 	bl	8007d78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f810 	bl	800760c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <prvCheckTasksWaitingTermination+0x58>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e1      	bne.n	80075b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000754 	.word	0x20000754
 8007604:	20000780 	.word	0x20000780
 8007608:	20000768 	.word	0x20000768

0800760c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fd73 	bl	8008104 <vPortFree>
			vPortFree( pxTCB );
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd70 	bl	8008104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007632:	4b0c      	ldr	r3, [pc, #48]	@ (8007664 <prvResetNextTaskUnblockTime+0x38>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800763c:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <prvResetNextTaskUnblockTime+0x3c>)
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007644:	e008      	b.n	8007658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007646:	4b07      	ldr	r3, [pc, #28]	@ (8007664 <prvResetNextTaskUnblockTime+0x38>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4a04      	ldr	r2, [pc, #16]	@ (8007668 <prvResetNextTaskUnblockTime+0x3c>)
 8007656:	6013      	str	r3, [r2, #0]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20000738 	.word	0x20000738
 8007668:	200007a0 	.word	0x200007a0

0800766c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007672:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <xTaskGetSchedulerState+0x34>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d102      	bne.n	8007680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800767a:	2301      	movs	r3, #1
 800767c:	607b      	str	r3, [r7, #4]
 800767e:	e008      	b.n	8007692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007680:	4b08      	ldr	r3, [pc, #32]	@ (80076a4 <xTaskGetSchedulerState+0x38>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007688:	2302      	movs	r3, #2
 800768a:	607b      	str	r3, [r7, #4]
 800768c:	e001      	b.n	8007692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800768e:	2300      	movs	r3, #0
 8007690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007692:	687b      	ldr	r3, [r7, #4]
	}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	2000078c 	.word	0x2000078c
 80076a4:	200007a8 	.word	0x200007a8

080076a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d069      	beq.n	8007792 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4b36      	ldr	r3, [pc, #216]	@ (800779c <xTaskPriorityInherit+0xf4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d259      	bcs.n	8007780 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db06      	blt.n	80076e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d4:	4b31      	ldr	r3, [pc, #196]	@ (800779c <xTaskPriorityInherit+0xf4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076da:	f1c3 0207 	rsb	r2, r3, #7
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6959      	ldr	r1, [r3, #20]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4a2b      	ldr	r2, [pc, #172]	@ (80077a0 <xTaskPriorityInherit+0xf8>)
 80076f4:	4413      	add	r3, r2
 80076f6:	4299      	cmp	r1, r3
 80076f8:	d13a      	bne.n	8007770 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe faa0 	bl	8005c44 <uxListRemove>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d115      	bne.n	8007736 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770e:	4924      	ldr	r1, [pc, #144]	@ (80077a0 <xTaskPriorityInherit+0xf8>)
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <xTaskPriorityInherit+0x8e>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	2201      	movs	r2, #1
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	43da      	mvns	r2, r3
 800772c:	4b1d      	ldr	r3, [pc, #116]	@ (80077a4 <xTaskPriorityInherit+0xfc>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4013      	ands	r3, r2
 8007732:	4a1c      	ldr	r2, [pc, #112]	@ (80077a4 <xTaskPriorityInherit+0xfc>)
 8007734:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007736:	4b19      	ldr	r3, [pc, #100]	@ (800779c <xTaskPriorityInherit+0xf4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	2201      	movs	r2, #1
 8007746:	409a      	lsls	r2, r3
 8007748:	4b16      	ldr	r3, [pc, #88]	@ (80077a4 <xTaskPriorityInherit+0xfc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4313      	orrs	r3, r2
 800774e:	4a15      	ldr	r2, [pc, #84]	@ (80077a4 <xTaskPriorityInherit+0xfc>)
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4a10      	ldr	r2, [pc, #64]	@ (80077a0 <xTaskPriorityInherit+0xf8>)
 8007760:	441a      	add	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3304      	adds	r3, #4
 8007766:	4619      	mov	r1, r3
 8007768:	4610      	mov	r0, r2
 800776a:	f7fe fa0e 	bl	8005b8a <vListInsertEnd>
 800776e:	e004      	b.n	800777a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <xTaskPriorityInherit+0xf4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800777a:	2301      	movs	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e008      	b.n	8007792 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007784:	4b05      	ldr	r3, [pc, #20]	@ (800779c <xTaskPriorityInherit+0xf4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778a:	429a      	cmp	r2, r3
 800778c:	d201      	bcs.n	8007792 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800778e:	2301      	movs	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007792:	68fb      	ldr	r3, [r7, #12]
	}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000680 	.word	0x20000680
 80077a0:	20000684 	.word	0x20000684
 80077a4:	20000788 	.word	0x20000788

080077a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d074      	beq.n	80078a8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077be:	4b3d      	ldr	r3, [pc, #244]	@ (80078b4 <xTaskPriorityDisinherit+0x10c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d00d      	beq.n	80077e4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	b672      	cpsid	i
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	b662      	cpsie	i
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	e7fd      	b.n	80077e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10d      	bne.n	8007808 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	b672      	cpsid	i
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	b662      	cpsie	i
 8007800:	60bb      	str	r3, [r7, #8]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780c:	1e5a      	subs	r2, r3, #1
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	429a      	cmp	r2, r3
 800781c:	d044      	beq.n	80078a8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007822:	2b00      	cmp	r3, #0
 8007824:	d140      	bne.n	80078a8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fa0a 	bl	8005c44 <uxListRemove>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d115      	bne.n	8007862 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783a:	491f      	ldr	r1, [pc, #124]	@ (80078b8 <xTaskPriorityDisinherit+0x110>)
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xTaskPriorityDisinherit+0xba>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007850:	2201      	movs	r2, #1
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43da      	mvns	r2, r3
 8007858:	4b18      	ldr	r3, [pc, #96]	@ (80078bc <xTaskPriorityDisinherit+0x114>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4013      	ands	r3, r2
 800785e:	4a17      	ldr	r2, [pc, #92]	@ (80078bc <xTaskPriorityDisinherit+0x114>)
 8007860:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	f1c3 0207 	rsb	r2, r3, #7
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787a:	2201      	movs	r2, #1
 800787c:	409a      	lsls	r2, r3
 800787e:	4b0f      	ldr	r3, [pc, #60]	@ (80078bc <xTaskPriorityDisinherit+0x114>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	4a0d      	ldr	r2, [pc, #52]	@ (80078bc <xTaskPriorityDisinherit+0x114>)
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4a08      	ldr	r2, [pc, #32]	@ (80078b8 <xTaskPriorityDisinherit+0x110>)
 8007896:	441a      	add	r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3304      	adds	r3, #4
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f7fe f973 	bl	8005b8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078a8:	697b      	ldr	r3, [r7, #20]
	}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000680 	.word	0x20000680
 80078b8:	20000684 	.word	0x20000684
 80078bc:	20000788 	.word	0x20000788

080078c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8089 	beq.w	80079ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10d      	bne.n	80078fe <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	b672      	cpsid	i
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	b662      	cpsie	i
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d902      	bls.n	800790e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	e002      	b.n	8007914 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007912:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	429a      	cmp	r2, r3
 800791c:	d066      	beq.n	80079ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	429a      	cmp	r2, r3
 8007926:	d161      	bne.n	80079ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007928:	4b32      	ldr	r3, [pc, #200]	@ (80079f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	429a      	cmp	r2, r3
 8007930:	d10d      	bne.n	800794e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007936:	b672      	cpsid	i
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	b662      	cpsie	i
 8007946:	60bb      	str	r3, [r7, #8]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	db04      	blt.n	800796c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	f1c3 0207 	rsb	r2, r3, #7
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	6959      	ldr	r1, [r3, #20]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4a1f      	ldr	r2, [pc, #124]	@ (80079f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800797c:	4413      	add	r3, r2
 800797e:	4299      	cmp	r1, r3
 8007980:	d134      	bne.n	80079ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	3304      	adds	r3, #4
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe f95c 	bl	8005c44 <uxListRemove>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d115      	bne.n	80079be <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007996:	4918      	ldr	r1, [pc, #96]	@ (80079f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	440b      	add	r3, r1
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	2201      	movs	r2, #1
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43da      	mvns	r2, r3
 80079b4:	4b11      	ldr	r3, [pc, #68]	@ (80079fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4013      	ands	r3, r2
 80079ba:	4a10      	ldr	r2, [pc, #64]	@ (80079fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	2201      	movs	r2, #1
 80079c4:	409a      	lsls	r2, r3
 80079c6:	4b0d      	ldr	r3, [pc, #52]	@ (80079fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	4a0b      	ldr	r2, [pc, #44]	@ (80079fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4a06      	ldr	r2, [pc, #24]	@ (80079f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079de:	441a      	add	r2, r3
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe f8cf 	bl	8005b8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079ec:	bf00      	nop
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000680 	.word	0x20000680
 80079f8:	20000684 	.word	0x20000684
 80079fc:	20000788 	.word	0x20000788

08007a00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a04:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a0c:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a12:	3201      	adds	r2, #1
 8007a14:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007a16:	4b03      	ldr	r3, [pc, #12]	@ (8007a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a18:	681b      	ldr	r3, [r3, #0]
	}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	20000680 	.word	0x20000680

08007a28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a32:	4b29      	ldr	r3, [pc, #164]	@ (8007ad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a38:	4b28      	ldr	r3, [pc, #160]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe f900 	bl	8005c44 <uxListRemove>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a4a:	4b24      	ldr	r3, [pc, #144]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	2201      	movs	r2, #1
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43da      	mvns	r2, r3
 8007a58:	4b21      	ldr	r3, [pc, #132]	@ (8007ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	4a20      	ldr	r2, [pc, #128]	@ (8007ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d10a      	bne.n	8007a80 <prvAddCurrentTaskToDelayedList+0x58>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a70:	4b1a      	ldr	r3, [pc, #104]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	481a      	ldr	r0, [pc, #104]	@ (8007ae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a7a:	f7fe f886 	bl	8005b8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a7e:	e026      	b.n	8007ace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a88:	4b14      	ldr	r3, [pc, #80]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d209      	bcs.n	8007aac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a98:	4b13      	ldr	r3, [pc, #76]	@ (8007ae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fe f894 	bl	8005bd2 <vListInsert>
}
 8007aaa:	e010      	b.n	8007ace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aac:	4b0f      	ldr	r3, [pc, #60]	@ (8007aec <prvAddCurrentTaskToDelayedList+0xc4>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fe f88a 	bl	8005bd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007abe:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d202      	bcs.n	8007ace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ac8:	4a09      	ldr	r2, [pc, #36]	@ (8007af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6013      	str	r3, [r2, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000784 	.word	0x20000784
 8007adc:	20000680 	.word	0x20000680
 8007ae0:	20000788 	.word	0x20000788
 8007ae4:	2000076c 	.word	0x2000076c
 8007ae8:	2000073c 	.word	0x2000073c
 8007aec:	20000738 	.word	0x20000738
 8007af0:	200007a0 	.word	0x200007a0

08007af4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3b04      	subs	r3, #4
 8007b04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b04      	subs	r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 0201 	bic.w	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b24:	4a0c      	ldr	r2, [pc, #48]	@ (8007b58 <pxPortInitialiseStack+0x64>)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b14      	subs	r3, #20
 8007b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f06f 0202 	mvn.w	r2, #2
 8007b42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3b20      	subs	r3, #32
 8007b48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	08007b5d 	.word	0x08007b5d

08007b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b66:	4b15      	ldr	r3, [pc, #84]	@ (8007bbc <prvTaskExitError+0x60>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d00d      	beq.n	8007b8c <prvTaskExitError+0x30>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	60fb      	str	r3, [r7, #12]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <prvTaskExitError+0x2c>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	60bb      	str	r3, [r7, #8]
}
 8007ba2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ba4:	bf00      	nop
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0fc      	beq.n	8007ba6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	2000003c 	.word	0x2000003c

08007bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bc0:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <pxCurrentTCBConst2>)
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	6808      	ldr	r0, [r1, #0]
 8007bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	f380 8809 	msr	PSP, r0
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8811 	msr	BASEPRI, r0
 8007bda:	4770      	bx	lr
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst2>:
 8007be0:	20000680 	.word	0x20000680
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop

08007be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007be8:	4808      	ldr	r0, [pc, #32]	@ (8007c0c <prvPortStartFirstTask+0x24>)
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f380 8808 	msr	MSP, r0
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8814 	msr	CONTROL, r0
 8007bfa:	b662      	cpsie	i
 8007bfc:	b661      	cpsie	f
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	df00      	svc	0
 8007c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c0a:	bf00      	nop
 8007c0c:	e000ed08 	.word	0xe000ed08

08007c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c16:	4b37      	ldr	r3, [pc, #220]	@ (8007cf4 <xPortStartScheduler+0xe4>)
 8007c18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	22ff      	movs	r2, #255	@ 0xff
 8007c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007cf8 <xPortStartScheduler+0xe8>)
 8007c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c40:	2207      	movs	r2, #7
 8007c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c44:	e009      	b.n	8007c5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c46:	4b2d      	ldr	r3, [pc, #180]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c62:	2b80      	cmp	r3, #128	@ 0x80
 8007c64:	d0ef      	beq.n	8007c46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c66:	4b25      	ldr	r3, [pc, #148]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1c3 0307 	rsb	r3, r3, #7
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d00d      	beq.n	8007c8e <xPortStartScheduler+0x7e>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	b672      	cpsid	i
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	b662      	cpsie	i
 8007c86:	60bb      	str	r3, [r7, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	e7fd      	b.n	8007c8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	4a19      	ldr	r2, [pc, #100]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c98:	4b18      	ldr	r3, [pc, #96]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ca0:	4a16      	ldr	r2, [pc, #88]	@ (8007cfc <xPortStartScheduler+0xec>)
 8007ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cac:	4b14      	ldr	r3, [pc, #80]	@ (8007d00 <xPortStartScheduler+0xf0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a13      	ldr	r2, [pc, #76]	@ (8007d00 <xPortStartScheduler+0xf0>)
 8007cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cb8:	4b11      	ldr	r3, [pc, #68]	@ (8007d00 <xPortStartScheduler+0xf0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a10      	ldr	r2, [pc, #64]	@ (8007d00 <xPortStartScheduler+0xf0>)
 8007cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cc4:	f000 f8dc 	bl	8007e80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d04 <xPortStartScheduler+0xf4>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cce:	f000 f8fb 	bl	8007ec8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <xPortStartScheduler+0xf8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d08 <xPortStartScheduler+0xf8>)
 8007cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cde:	f7ff ff83 	bl	8007be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ce2:	f7ff fa97 	bl	8007214 <vTaskSwitchContext>
	prvTaskExitError();
 8007ce6:	f7ff ff39 	bl	8007b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	e000e400 	.word	0xe000e400
 8007cf8:	200007ac 	.word	0x200007ac
 8007cfc:	200007b0 	.word	0x200007b0
 8007d00:	e000ed20 	.word	0xe000ed20
 8007d04:	2000003c 	.word	0x2000003c
 8007d08:	e000ef34 	.word	0xe000ef34

08007d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	b672      	cpsid	i
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	b662      	cpsie	i
 8007d26:	607b      	str	r3, [r7, #4]
}
 8007d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d2a:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <vPortEnterCritical+0x64>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	4a0f      	ldr	r2, [pc, #60]	@ (8007d70 <vPortEnterCritical+0x64>)
 8007d32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d34:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <vPortEnterCritical+0x64>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d112      	bne.n	8007d62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d74 <vPortEnterCritical+0x68>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <vPortEnterCritical+0x56>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	603b      	str	r3, [r7, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <vPortEnterCritical+0x52>
	}
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	2000003c 	.word	0x2000003c
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d7e:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <vPortExitCritical+0x54>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <vPortExitCritical+0x2a>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	607b      	str	r3, [r7, #4]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007da2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dcc <vPortExitCritical+0x54>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	4a08      	ldr	r2, [pc, #32]	@ (8007dcc <vPortExitCritical+0x54>)
 8007daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <vPortExitCritical+0x54>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d105      	bne.n	8007dc0 <vPortExitCritical+0x48>
 8007db4:	2300      	movs	r3, #0
 8007db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f383 8811 	msr	BASEPRI, r3
}
 8007dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	2000003c 	.word	0x2000003c

08007dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dd0:	f3ef 8009 	mrs	r0, PSP
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	4b15      	ldr	r3, [pc, #84]	@ (8007e30 <pxCurrentTCBConst>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f01e 0f10 	tst.w	lr, #16
 8007de0:	bf08      	it	eq
 8007de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	6010      	str	r0, [r2, #0]
 8007dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007df4:	b672      	cpsid	i
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	b662      	cpsie	i
 8007e04:	f7ff fa06 	bl	8007214 <vTaskSwitchContext>
 8007e08:	f04f 0000 	mov.w	r0, #0
 8007e0c:	f380 8811 	msr	BASEPRI, r0
 8007e10:	bc09      	pop	{r0, r3}
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	f01e 0f10 	tst.w	lr, #16
 8007e1e:	bf08      	it	eq
 8007e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e24:	f380 8809 	msr	PSP, r0
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop

08007e30 <pxCurrentTCBConst>:
 8007e30:	20000680 	.word	0x20000680
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	b672      	cpsid	i
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	b662      	cpsie	i
 8007e52:	607b      	str	r3, [r7, #4]
}
 8007e54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e56:	f7ff f921 	bl	800709c <xTaskIncrementTick>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e60:	4b06      	ldr	r3, [pc, #24]	@ (8007e7c <SysTick_Handler+0x44>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f383 8811 	msr	BASEPRI, r3
}
 8007e72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e84:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb4 <vPortSetupTimerInterrupt+0x34>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <vPortSetupTimerInterrupt+0x38>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e90:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <vPortSetupTimerInterrupt+0x3c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec0 <vPortSetupTimerInterrupt+0x40>)
 8007e96:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9a:	099b      	lsrs	r3, r3, #6
 8007e9c:	4a09      	ldr	r2, [pc, #36]	@ (8007ec4 <vPortSetupTimerInterrupt+0x44>)
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ea2:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <vPortSetupTimerInterrupt+0x34>)
 8007ea4:	2207      	movs	r2, #7
 8007ea6:	601a      	str	r2, [r3, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	e000e010 	.word	0xe000e010
 8007eb8:	e000e018 	.word	0xe000e018
 8007ebc:	20000030 	.word	0x20000030
 8007ec0:	10624dd3 	.word	0x10624dd3
 8007ec4:	e000e014 	.word	0xe000e014

08007ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ed8 <vPortEnableVFP+0x10>
 8007ecc:	6801      	ldr	r1, [r0, #0]
 8007ece:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ed2:	6001      	str	r1, [r0, #0]
 8007ed4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ed6:	bf00      	nop
 8007ed8:	e000ed88 	.word	0xe000ed88

08007edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ee2:	f3ef 8305 	mrs	r3, IPSR
 8007ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d917      	bls.n	8007f1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eee:	4a1a      	ldr	r2, [pc, #104]	@ (8007f58 <vPortValidateInterruptPriority+0x7c>)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ef8:	4b18      	ldr	r3, [pc, #96]	@ (8007f5c <vPortValidateInterruptPriority+0x80>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	7afa      	ldrb	r2, [r7, #11]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d20d      	bcs.n	8007f1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	b672      	cpsid	i
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	b662      	cpsie	i
 8007f16:	607b      	str	r3, [r7, #4]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f1e:	4b10      	ldr	r3, [pc, #64]	@ (8007f60 <vPortValidateInterruptPriority+0x84>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f26:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <vPortValidateInterruptPriority+0x88>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d90d      	bls.n	8007f4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
 8007f42:	603b      	str	r3, [r7, #0]
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	e7fd      	b.n	8007f46 <vPortValidateInterruptPriority+0x6a>
	}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	e000e3f0 	.word	0xe000e3f0
 8007f5c:	200007ac 	.word	0x200007ac
 8007f60:	e000ed0c 	.word	0xe000ed0c
 8007f64:	200007b0 	.word	0x200007b0

08007f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08a      	sub	sp, #40	@ 0x28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f74:	f7fe ffc2 	bl	8006efc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f78:	4b5d      	ldr	r3, [pc, #372]	@ (80080f0 <pvPortMalloc+0x188>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f80:	f000 f920 	bl	80081c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f84:	4b5b      	ldr	r3, [pc, #364]	@ (80080f4 <pvPortMalloc+0x18c>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f040 8094 	bne.w	80080ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d020      	beq.n	8007fda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007f98:	2208      	movs	r2, #8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d017      	beq.n	8007fda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00d      	beq.n	8007fda <pvPortMalloc+0x72>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	b672      	cpsid	i
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	b662      	cpsie	i
 8007fd2:	617b      	str	r3, [r7, #20]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d06c      	beq.n	80080ba <pvPortMalloc+0x152>
 8007fe0:	4b45      	ldr	r3, [pc, #276]	@ (80080f8 <pvPortMalloc+0x190>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d867      	bhi.n	80080ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fea:	4b44      	ldr	r3, [pc, #272]	@ (80080fc <pvPortMalloc+0x194>)
 8007fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fee:	4b43      	ldr	r3, [pc, #268]	@ (80080fc <pvPortMalloc+0x194>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ff4:	e004      	b.n	8008000 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d903      	bls.n	8008012 <pvPortMalloc+0xaa>
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f1      	bne.n	8007ff6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008012:	4b37      	ldr	r3, [pc, #220]	@ (80080f0 <pvPortMalloc+0x188>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008018:	429a      	cmp	r2, r3
 800801a:	d04e      	beq.n	80080ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2208      	movs	r2, #8
 8008022:	4413      	add	r3, r2
 8008024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	1ad2      	subs	r2, r2, r3
 8008036:	2308      	movs	r3, #8
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	429a      	cmp	r2, r3
 800803c:	d922      	bls.n	8008084 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800803e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4413      	add	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00d      	beq.n	800806c <pvPortMalloc+0x104>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	b672      	cpsid	i
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	b662      	cpsie	i
 8008064:	613b      	str	r3, [r7, #16]
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	e7fd      	b.n	8008068 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	1ad2      	subs	r2, r2, r3
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800807e:	69b8      	ldr	r0, [r7, #24]
 8008080:	f000 f902 	bl	8008288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008084:	4b1c      	ldr	r3, [pc, #112]	@ (80080f8 <pvPortMalloc+0x190>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	4a1a      	ldr	r2, [pc, #104]	@ (80080f8 <pvPortMalloc+0x190>)
 8008090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008092:	4b19      	ldr	r3, [pc, #100]	@ (80080f8 <pvPortMalloc+0x190>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b1a      	ldr	r3, [pc, #104]	@ (8008100 <pvPortMalloc+0x198>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d203      	bcs.n	80080a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800809e:	4b16      	ldr	r3, [pc, #88]	@ (80080f8 <pvPortMalloc+0x190>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a17      	ldr	r2, [pc, #92]	@ (8008100 <pvPortMalloc+0x198>)
 80080a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <pvPortMalloc+0x18c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080ba:	f7fe ff2d 	bl	8006f18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <pvPortMalloc+0x17c>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	b672      	cpsid	i
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	b662      	cpsie	i
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <pvPortMalloc+0x178>
	return pvReturn;
 80080e4:	69fb      	ldr	r3, [r7, #28]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3728      	adds	r7, #40	@ 0x28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	200043bc 	.word	0x200043bc
 80080f4:	200043c8 	.word	0x200043c8
 80080f8:	200043c0 	.word	0x200043c0
 80080fc:	200043b4 	.word	0x200043b4
 8008100:	200043c4 	.word	0x200043c4

08008104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d04e      	beq.n	80081b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008116:	2308      	movs	r3, #8
 8008118:	425b      	negs	r3, r3
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4413      	add	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	4b24      	ldr	r3, [pc, #144]	@ (80081bc <vPortFree+0xb8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4013      	ands	r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <vPortFree+0x4a>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <vPortFree+0x6e>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	60bb      	str	r3, [r7, #8]
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	e7fd      	b.n	800816e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	4b11      	ldr	r3, [pc, #68]	@ (80081bc <vPortFree+0xb8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d019      	beq.n	80081b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d115      	bne.n	80081b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <vPortFree+0xb8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	43db      	mvns	r3, r3
 8008192:	401a      	ands	r2, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008198:	f7fe feb0 	bl	8006efc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <vPortFree+0xbc>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	4a06      	ldr	r2, [pc, #24]	@ (80081c0 <vPortFree+0xbc>)
 80081a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081aa:	6938      	ldr	r0, [r7, #16]
 80081ac:	f000 f86c 	bl	8008288 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081b0:	f7fe feb2 	bl	8006f18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081b4:	bf00      	nop
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	200043c8 	.word	0x200043c8
 80081c0:	200043c0 	.word	0x200043c0

080081c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80081ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081d0:	4b27      	ldr	r3, [pc, #156]	@ (8008270 <prvHeapInit+0xac>)
 80081d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3307      	adds	r3, #7
 80081e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008270 <prvHeapInit+0xac>)
 80081f4:	4413      	add	r3, r2
 80081f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008274 <prvHeapInit+0xb0>)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008202:	4b1c      	ldr	r3, [pc, #112]	@ (8008274 <prvHeapInit+0xb0>)
 8008204:	2200      	movs	r2, #0
 8008206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4413      	add	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008210:	2208      	movs	r2, #8
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a15      	ldr	r2, [pc, #84]	@ (8008278 <prvHeapInit+0xb4>)
 8008224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008226:	4b14      	ldr	r3, [pc, #80]	@ (8008278 <prvHeapInit+0xb4>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2200      	movs	r2, #0
 800822c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800822e:	4b12      	ldr	r3, [pc, #72]	@ (8008278 <prvHeapInit+0xb4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008244:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <prvHeapInit+0xb4>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4a0a      	ldr	r2, [pc, #40]	@ (800827c <prvHeapInit+0xb8>)
 8008252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4a09      	ldr	r2, [pc, #36]	@ (8008280 <prvHeapInit+0xbc>)
 800825a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800825c:	4b09      	ldr	r3, [pc, #36]	@ (8008284 <prvHeapInit+0xc0>)
 800825e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	200007b4 	.word	0x200007b4
 8008274:	200043b4 	.word	0x200043b4
 8008278:	200043bc 	.word	0x200043bc
 800827c:	200043c4 	.word	0x200043c4
 8008280:	200043c0 	.word	0x200043c0
 8008284:	200043c8 	.word	0x200043c8

08008288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008290:	4b28      	ldr	r3, [pc, #160]	@ (8008334 <prvInsertBlockIntoFreeList+0xac>)
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e002      	b.n	800829c <prvInsertBlockIntoFreeList+0x14>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d8f7      	bhi.n	8008296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d108      	bne.n	80082ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	441a      	add	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	441a      	add	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d118      	bne.n	8008310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b15      	ldr	r3, [pc, #84]	@ (8008338 <prvInsertBlockIntoFreeList+0xb0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d00d      	beq.n	8008306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	441a      	add	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e008      	b.n	8008318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008306:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <prvInsertBlockIntoFreeList+0xb0>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e003      	b.n	8008318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d002      	beq.n	8008326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	200043b4 	.word	0x200043b4
 8008338:	200043bc 	.word	0x200043bc

0800833c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af02      	add	r7, sp, #8
 8008342:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	791b      	ldrb	r3, [r3, #4]
 8008352:	4619      	mov	r1, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	1d5a      	adds	r2, r3, #5
 8008358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2303      	movs	r3, #3
 8008360:	f7fa fb4c 	bl	80029fc <HAL_I2C_Master_Transmit>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8008380:	220f      	movs	r2, #15
 8008382:	2141      	movs	r1, #65	@ 0x41
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f80c 	bl	80083a2 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	f043 0304 	orr.w	r3, r3, #4
 8008390:	b2db      	uxtb	r3, r3
 8008392:	4619      	mov	r1, r3
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 f81f 	bl	80083d8 <MAX581x_Reference>
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
 80083ae:	4613      	mov	r3, r2
 80083b0:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	78ba      	ldrb	r2, [r7, #2]
 80083c2:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff ffb6 	bl	800833c <MAX581x_WriteCommand>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ff9d 	bl	800833c <MAX581x_WriteCommand>
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
 8008416:	4613      	mov	r3, r2
 8008418:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008420:	883b      	ldrh	r3, [r7, #0]
 8008422:	091b      	lsrs	r3, r3, #4
 8008424:	b29b      	uxth	r3, r3
 8008426:	b2da      	uxtb	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800842c:	883b      	ldrh	r3, [r7, #0]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f023 030f 	bic.w	r3, r3, #15
 8008436:	b2da      	uxtb	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff7d 	bl	800833c <MAX581x_WriteCommand>
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
 8008456:	4613      	mov	r3, r2
 8008458:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8008460:	b2da      	uxtb	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008466:	883b      	ldrh	r3, [r7, #0]
 8008468:	091b      	lsrs	r3, r3, #4
 800846a:	b29b      	uxth	r3, r3
 800846c:	b2da      	uxtb	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 8008472:	883b      	ldrh	r3, [r7, #0]
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f023 030f 	bic.w	r3, r3, #15
 800847c:	b2da      	uxtb	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ff5a 	bl	800833c <MAX581x_WriteCommand>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8008490:	b084      	sub	sp, #16
 8008492:	b4b0      	push	{r4, r5, r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	f107 001c 	add.w	r0, r7, #28
 800849e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	461d      	mov	r5, r3
 80084a6:	f107 041c 	add.w	r4, r7, #28
 80084aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80084b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	pid->error = 0;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f04f 0200 	mov.w	r2, #0
 80084c6:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	625a      	str	r2, [r3, #36]	@ 0x24

	pid->lastMeasure = 0;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->integral = 0;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	62da      	str	r2, [r3, #44]	@ 0x2c

	pid->enable = enable;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bcb0      	pop	{r4, r5, r7}
 80084f2:	b004      	add	sp, #16
 80084f4:	4770      	bx	lr

080084f6 <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b087      	sub	sp, #28
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8008502:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800850c:	2b01      	cmp	r3, #1
 800850e:	d006      	beq.n	800851e <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	629a      	str	r2, [r3, #40]	@ 0x28
		pid->output = reference;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 800851c:	e085      	b.n	800862a <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	ed93 7a07 	vldr	s14, [r3, #28]
 800852a:	edd7 7a01 	vldr	s15, [r7, #4]
 800852e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	edd3 6a08 	vldr	s13, [r3, #32]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	edd3 7a01 	vldr	s15, [r3, #4]
 800854a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800854e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	if (pid->integral > pid->params.integralMax)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	edd3 7a05 	vldr	s15, [r3, #20]
 8008564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856c:	dd04      	ble.n	8008578 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	695a      	ldr	r2, [r3, #20]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008576:	e014      	b.n	80085a2 <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	edd3 7a05 	vldr	s15, [r3, #20]
 8008584:	eef1 7a67 	vneg.f32	s15, s15
 8008588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800858c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008590:	d507      	bpl.n	80085a2 <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	edd3 7a05 	vldr	s15, [r3, #20]
 8008598:	eef1 7a67 	vneg.f32	s15, s15
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80085a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80085ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b0:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	edd3 7a00 	vldr	s15, [r3]
 80085c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80085ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80085d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80085d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (pid->output > pid->params.outputMax)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80085f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fa:	dd04      	ble.n	8008606 <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	625a      	str	r2, [r3, #36]	@ 0x24
 8008604:	e00e      	b.n	8008624 <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861a:	d503      	bpl.n	8008624 <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	pid->lastMeasure = measure;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8008640:	887b      	ldrh	r3, [r7, #2]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fa f92e 	bl	80028a6 <HAL_GPIO_TogglePin>
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <Board_GetID>:

uint16_t Board_GetID()
{
 8008654:	b598      	push	{r3, r4, r7, lr}
 8008656:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008658:	2102      	movs	r1, #2
 800865a:	481b      	ldr	r0, [pc, #108]	@ (80086c8 <Board_GetID+0x74>)
 800865c:	f7fa f8f2 	bl	8002844 <HAL_GPIO_ReadPin>
 8008660:	4603      	mov	r3, r0
 8008662:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8008664:	2101      	movs	r1, #1
 8008666:	4818      	ldr	r0, [pc, #96]	@ (80086c8 <Board_GetID+0x74>)
 8008668:	f7fa f8ec 	bl	8002844 <HAL_GPIO_ReadPin>
 800866c:	4603      	mov	r3, r0
 800866e:	005b      	lsls	r3, r3, #1
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008670:	b21b      	sxth	r3, r3
 8008672:	4323      	orrs	r3, r4
 8008674:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008676:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800867a:	4814      	ldr	r0, [pc, #80]	@ (80086cc <Board_GetID+0x78>)
 800867c:	f7fa f8e2 	bl	8002844 <HAL_GPIO_ReadPin>
 8008680:	4603      	mov	r3, r0
 8008682:	009b      	lsls	r3, r3, #2
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8008684:	b21b      	sxth	r3, r3
 8008686:	4323      	orrs	r3, r4
 8008688:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 800868a:	2104      	movs	r1, #4
 800868c:	4810      	ldr	r0, [pc, #64]	@ (80086d0 <Board_GetID+0x7c>)
 800868e:	f7fa f8d9 	bl	8002844 <HAL_GPIO_ReadPin>
 8008692:	4603      	mov	r3, r0
 8008694:	00db      	lsls	r3, r3, #3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008696:	b21b      	sxth	r3, r3
 8008698:	4323      	orrs	r3, r4
 800869a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 800869c:	2110      	movs	r1, #16
 800869e:	480d      	ldr	r0, [pc, #52]	@ (80086d4 <Board_GetID+0x80>)
 80086a0:	f7fa f8d0 	bl	8002844 <HAL_GPIO_ReadPin>
 80086a4:	4603      	mov	r3, r0
 80086a6:	011b      	lsls	r3, r3, #4
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 80086a8:	b21b      	sxth	r3, r3
 80086aa:	4323      	orrs	r3, r4
 80086ac:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 80086ae:	2110      	movs	r1, #16
 80086b0:	4809      	ldr	r0, [pc, #36]	@ (80086d8 <Board_GetID+0x84>)
 80086b2:	f7fa f8c7 	bl	8002844 <HAL_GPIO_ReadPin>
 80086b6:	4603      	mov	r3, r0
 80086b8:	015b      	lsls	r3, r3, #5
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 80086ba:	b21b      	sxth	r3, r3
 80086bc:	4323      	orrs	r3, r4
 80086be:	b21b      	sxth	r3, r3
 80086c0:	b29b      	uxth	r3, r3
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	bd98      	pop	{r3, r4, r7, pc}
 80086c6:	bf00      	nop
 80086c8:	40022400 	.word	0x40022400
 80086cc:	40022000 	.word	0x40022000
 80086d0:	40020400 	.word	0x40020400
 80086d4:	40020800 	.word	0x40020800
 80086d8:	40021c00 	.word	0x40021c00
 80086dc:	00000000 	.word	0x00000000

080086e0 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7c1b      	ldrb	r3, [r3, #16]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d002      	beq.n	80086fa <Encoder_Update+0x1a>
		return 0;
 80086f4:	f04f 0300 	mov.w	r3, #0
 80086f8:	e03a      	b.n	8008770 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 8008702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800870e:	eef0 7ae7 	vabs.f32	s15, s15
 8008712:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800871a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871e:	d502      	bpl.n	8008726 <Encoder_Update+0x46>
 8008720:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8008790 <Encoder_Update+0xb0>
 8008724:	e005      	b.n	8008732 <Encoder_Update+0x52>
 8008726:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008732:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 800873e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008742:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800874a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8008788 <Encoder_Update+0xa8>
 800874e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8008752:	edd7 7a00 	vldr	s15, [r7]
 8008756:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008794 <Encoder_Update+0xb4>
 800875a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800875e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008762:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008766:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800876a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 800876e:	68fb      	ldr	r3, [r7, #12]
}
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eeb0 0a67 	vmov.f32	s0, s15
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	f3af 8000 	nop.w
 8008788:	54442d18 	.word	0x54442d18
 800878c:	400921fb 	.word	0x400921fb
 8008790:	00000000 	.word	0x00000000
 8008794:	46000000 	.word	0x46000000

08008798 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
 80087a4:	4613      	mov	r3, r2
 80087a6:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	78ba      	ldrb	r2, [r7, #2]
 80087ac:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	motorDevice->outputID = motorID;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	78fa      	ldrb	r2, [r7, #3]
 80087b4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motorDevice->refSpeed = 0;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	671a      	str	r2, [r3, #112]	@ 0x70
	motorDevice->measSpeed = 0;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	675a      	str	r2, [r3, #116]	@ 0x74
	Motor_Enable(motorDevice, enable);
 80087c8:	78bb      	ldrb	r3, [r7, #2]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f857 	bl	8008880 <Motor_Enable>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed * WHEEL_GEAR_RATIO * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 80087ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80087ee:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80087f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80087f6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800887c <Motor_CLDrive+0xa0>
 80087fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008810:	eeb0 0a67 	vmov.f32	s0, s15
 8008814:	4610      	mov	r0, r2
 8008816:	f7ff ff63 	bl	80086e0 <Encoder_Update>
 800881a:	eef0 7a40 	vmov.f32	s15, s0
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8008832:	eef0 0a47 	vmov.f32	s1, s14
 8008836:	eeb0 0a67 	vmov.f32	s0, s15
 800883a:	4610      	mov	r0, r2
 800883c:	f7ff fe5b 	bl	80084f6 <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008846:	eef0 7ae7 	vabs.f32	s15, s15
 800884a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800884e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008856:	d503      	bpl.n	8008860 <Motor_CLDrive+0x84>
		motorDevice->pid.output = 0.0;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008866:	eeb0 0a67 	vmov.f32	s0, s15
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f84b 	bl	8008908 <Motor_SetVoltage>
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	3cdd82fd 	.word	0x3cdd82fd

08008880 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d109      	bne.n	80088ae <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088a4:	2200      	movs	r2, #0
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7f9 ffe4 	bl	8002874 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 80088ac:	e008      	b.n	80088c0 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088b8:	2201      	movs	r2, #1
 80088ba:	4619      	mov	r1, r3
 80088bc:	f7f9 ffda 	bl	8002874 <HAL_GPIO_WritePin>
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d109      	bne.n	80088ee <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088e4:	2200      	movs	r2, #0
 80088e6:	4619      	mov	r1, r3
 80088e8:	f7f9 ffc4 	bl	8002874 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 80088ec:	e008      	b.n	8008900 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088f8:	2201      	movs	r2, #1
 80088fa:	4619      	mov	r1, r3
 80088fc:	f7f9 ffba 	bl	8002874 <HAL_GPIO_WritePin>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 8008916:	edd7 7a01 	vldr	s15, [r7, #4]
 800891a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800891e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008922:	db1d      	blt.n	8008960 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	f7f9 ff9f 	bl	8002874 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8008936:	edd7 7a01 	vldr	s15, [r7, #4]
 800893a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800893e:	ee17 3a90 	vmov	r3, s15
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8008956:	461a      	mov	r2, r3
 8008958:	68b8      	ldr	r0, [r7, #8]
 800895a:	f7ff fd76 	bl	800844a <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 800895e:	e01e      	b.n	800899e <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800896a:	2200      	movs	r2, #0
 800896c:	4619      	mov	r1, r3
 800896e:	f7f9 ff81 	bl	8002874 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8008972:	edd7 7a01 	vldr	s15, [r7, #4]
 8008976:	eef0 7ae7 	vabs.f32	s15, s15
 800897a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897e:	ee17 3a90 	vmov	r3, s15
 8008982:	b29a      	uxth	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8008996:	461a      	mov	r2, r3
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	f7ff fd56 	bl	800844a <MAX581x_CodeLoad>
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6898      	ldr	r0, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8a5b      	ldrh	r3, [r3, #18]
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4619      	mov	r1, r3
 80089be:	f7f9 ff59 	bl	8002874 <HAL_GPIO_WritePin>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6858      	ldr	r0, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8a1b      	ldrh	r3, [r3, #16]
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	4619      	mov	r1, r3
 80089e2:	f7f9 ff47 	bl	8002874 <HAL_GPIO_WritePin>
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
 80089fa:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	887a      	ldrh	r2, [r7, #2]
 8008a0c:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8bba      	ldrh	r2, [r7, #28]
 8008a18:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff ffd4 	bl	80089ca <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8008a22:	2100      	movs	r1, #0
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff ffbe 	bl	80089a6 <nRF24_CE_State>
}
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af02      	add	r7, sp, #8
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	f107 020f 	add.w	r2, r7, #15
 8008a46:	1cf9      	adds	r1, r7, #3
 8008a48:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f7fb fed7 	bl	8004802 <HAL_SPI_TransmitReceive>
  return rxData;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	460b      	mov	r3, r1
 8008a68:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff ffac 	bl	80089ca <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff ffd8 	bl	8008a32 <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008a82:	21ff      	movs	r1, #255	@ 0xff
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff ffd4 	bl	8008a32 <nRF24_LL_RW>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008a8e:	2101      	movs	r1, #1
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff ff9a 	bl	80089ca <nRF24_CSN_State>

  return value;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
 8008aac:	4613      	mov	r3, r2
 8008aae:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ff89 	bl	80089ca <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	2b1f      	cmp	r3, #31
 8008abc:	d812      	bhi.n	8008ae4 <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8008abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ac2:	f003 031f 	and.w	r3, r3, #31
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	f043 0320 	orr.w	r3, r3, #32
 8008acc:	b25b      	sxtb	r3, r3
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ffad 	bl	8008a32 <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 8008ad8:	78bb      	ldrb	r3, [r7, #2]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ffa8 	bl	8008a32 <nRF24_LL_RW>
 8008ae2:	e015      	b.n	8008b10 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff ffa2 	bl	8008a32 <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	2be1      	cmp	r3, #225	@ 0xe1
 8008af2:	d00d      	beq.n	8008b10 <nRF24_WriteReg+0x70>
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	2be2      	cmp	r3, #226	@ 0xe2
 8008af8:	d00a      	beq.n	8008b10 <nRF24_WriteReg+0x70>
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	2be3      	cmp	r3, #227	@ 0xe3
 8008afe:	d007      	beq.n	8008b10 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	2bff      	cmp	r3, #255	@ 0xff
 8008b04:	d004      	beq.n	8008b10 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 8008b06:	78bb      	ldrb	r3, [r7, #2]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff ff91 	bl	8008a32 <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b10:	2101      	movs	r1, #1
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff ff59 	bl	80089ca <nRF24_CSN_State>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008b20:	b590      	push	{r4, r7, lr}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	72fb      	strb	r3, [r7, #11]
 8008b30:	4613      	mov	r3, r2
 8008b32:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008b34:	2100      	movs	r1, #0
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff ff47 	bl	80089ca <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8008b3c:	7afb      	ldrb	r3, [r7, #11]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff ff76 	bl	8008a32 <nRF24_LL_RW>
  while (count--)
 8008b46:	e008      	b.n	8008b5a <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008b48:	687c      	ldr	r4, [r7, #4]
 8008b4a:	1c63      	adds	r3, r4, #1
 8008b4c:	607b      	str	r3, [r7, #4]
 8008b4e:	21ff      	movs	r1, #255	@ 0xff
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff ff6e 	bl	8008a32 <nRF24_LL_RW>
 8008b56:	4603      	mov	r3, r0
 8008b58:	7023      	strb	r3, [r4, #0]
  while (count--)
 8008b5a:	7abb      	ldrb	r3, [r7, #10]
 8008b5c:	1e5a      	subs	r2, r3, #1
 8008b5e:	72ba      	strb	r2, [r7, #10]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1f1      	bne.n	8008b48 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b64:	2101      	movs	r1, #1
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff ff2f 	bl	80089ca <nRF24_CSN_State>
}
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <nRF24_WriteMBReg>:

void nRF24_WriteMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	460b      	mov	r3, r1
 8008b82:	72fb      	strb	r3, [r7, #11]
 8008b84:	4613      	mov	r3, r2
 8008b86:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008b88:	2100      	movs	r1, #0
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff ff1d 	bl	80089ca <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff ff4c 	bl	8008a32 <nRF24_LL_RW>
  while (count--)
 8008b9a:	e007      	b.n	8008bac <nRF24_WriteMBReg+0x38>
  {
    nRF24_LL_RW(device, *pBuf++);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff ff43 	bl	8008a32 <nRF24_LL_RW>
  while (count--)
 8008bac:	7abb      	ldrb	r3, [r7, #10]
 8008bae:	1e5a      	subs	r2, r3, #1
 8008bb0:	72ba      	strb	r2, [r7, #10]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f2      	bne.n	8008b9c <nRF24_WriteMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff ff06 	bl	80089ca <nRF24_CSN_State>
}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <nRF24_Init>:

void nRF24_Init(nRF24_Handler_t *device) {
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8008bce:	2208      	movs	r2, #8
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff ff64 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8008bd8:	223f      	movs	r2, #63	@ 0x3f
 8008bda:	2101      	movs	r1, #1
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff5f 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8008be2:	2203      	movs	r2, #3
 8008be4:	2102      	movs	r1, #2
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff ff5a 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 8008bec:	2203      	movs	r2, #3
 8008bee:	2103      	movs	r1, #3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff ff55 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	2104      	movs	r1, #4
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff ff50 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 8008c00:	2202      	movs	r2, #2
 8008c02:	2105      	movs	r1, #5
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff ff4b 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8008c0a:	220e      	movs	r2, #14
 8008c0c:	2106      	movs	r1, #6
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff ff46 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 8008c14:	2200      	movs	r2, #0
 8008c16:	2107      	movs	r1, #7
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff ff41 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2111      	movs	r1, #17
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff ff3c 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2112      	movs	r1, #18
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff ff37 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 8008c32:	2200      	movs	r2, #0
 8008c34:	2113      	movs	r1, #19
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff ff32 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2114      	movs	r1, #20
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff ff2d 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 8008c46:	2200      	movs	r2, #0
 8008c48:	2115      	movs	r1, #21
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff ff28 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8008c50:	2200      	movs	r2, #0
 8008c52:	2116      	movs	r1, #22
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ff23 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	211c      	movs	r1, #28
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ff1e 	bl	8008aa0 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8008c64:	2200      	movs	r2, #0
 8008c66:	211d      	movs	r1, #29
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff ff19 	bl	8008aa0 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa62 	bl	8009138 <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa52 	bl	800911e <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa69 	bl	8009152 <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008c80:	2101      	movs	r1, #1
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff fea1 	bl	80089ca <nRF24_CSN_State>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fedd 	bl	8008a5e <nRF24_ReadReg>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d104      	bne.n	8008cb8 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	f043 0302 	orr.w	r3, r3, #2
 8008cb4:	73fb      	strb	r3, [r7, #15]
 8008cb6:	e003      	b.n	8008cc0 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	f023 0302 	bic.w	r3, r3, #2
 8008cbe:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff feea 	bl	8008aa0 <nRF24_WriteReg>
}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff febb 	bl	8008a5e <nRF24_ReadReg>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8008cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	b25a      	sxtb	r2, r3
 8008cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fec6 	bl	8008aa0 <nRF24_WriteReg>
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	2105      	movs	r1, #5
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff feb6 	bl	8008aa0 <nRF24_WriteReg>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	460b      	mov	r3, r1
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	2b06      	cmp	r3, #6
 8008d4e:	f200 813e 	bhi.w	8008fce <nRF24_SetAddr+0x292>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <nRF24_SetAddr+0x1c>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d75 	.word	0x08008d75
 8008d5c:	08008dcb 	.word	0x08008dcb
 8008d60:	08008e21 	.word	0x08008e21
 8008d64:	08008e77 	.word	0x08008e77
 8008d68:	08008ecd 	.word	0x08008ecd
 8008d6c:	08008f23 	.word	0x08008f23
 8008d70:	08008f79 	.word	0x08008f79
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008d74:	2103      	movs	r1, #3
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fe71 	bl	8008a5e <nRF24_ReadReg>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	3301      	adds	r3, #1
 8008d80:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff fe1c 	bl	80089ca <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	4a90      	ldr	r2, [pc, #576]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008d96:	5cd3      	ldrb	r3, [r2, r3]
 8008d98:	f043 0320 	orr.w	r3, r3, #32
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7ff fe46 	bl	8008a32 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	1e5a      	subs	r2, r3, #1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	4619      	mov	r1, r3
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7ff fe3e 	bl	8008a32 <nRF24_LL_RW>
      } while (addr_width--);
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	1e5a      	subs	r2, r3, #1
 8008dba:	75fa      	strb	r2, [r7, #23]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f2      	bne.n	8008da6 <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff fe01 	bl	80089ca <nRF24_CSN_State>
      break;
 8008dc8:	e102      	b.n	8008fd0 <nRF24_SetAddr+0x294>

    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008dca:	2103      	movs	r1, #3
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fe46 	bl	8008a5e <nRF24_ReadReg>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008de0:	2100      	movs	r1, #0
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fdf1 	bl	80089ca <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	4a7b      	ldr	r2, [pc, #492]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008dec:	5cd3      	ldrb	r3, [r2, r3]
 8008dee:	f043 0320 	orr.w	r3, r3, #32
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	4619      	mov	r1, r3
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7ff fe1b 	bl	8008a32 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1e5a      	subs	r2, r3, #1
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	4619      	mov	r1, r3
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff fe13 	bl	8008a32 <nRF24_LL_RW>
      } while (addr_width--);
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	75fa      	strb	r2, [r7, #23]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f2      	bne.n	8008dfc <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008e16:	2101      	movs	r1, #1
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fdd6 	bl	80089ca <nRF24_CSN_State>
      break;
 8008e1e:	e0d7      	b.n	8008fd0 <nRF24_SetAddr+0x294>

    case nRF24_PIPE2:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008e20:	2103      	movs	r1, #3
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f7ff fe1b 	bl	8008a5e <nRF24_ReadReg>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008e36:	2100      	movs	r1, #0
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fdc6 	bl	80089ca <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	4a65      	ldr	r2, [pc, #404]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	f043 0320 	orr.w	r3, r3, #32
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fdf0 	bl	8008a32 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fde8 	bl	8008a32 <nRF24_LL_RW>
	  } while (addr_width--);
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	1e5a      	subs	r2, r3, #1
 8008e66:	75fa      	strb	r2, [r7, #23]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f2      	bne.n	8008e52 <nRF24_SetAddr+0x116>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f7ff fdab 	bl	80089ca <nRF24_CSN_State>
	  break;
 8008e74:	e0ac      	b.n	8008fd0 <nRF24_SetAddr+0x294>

    case nRF24_PIPE3:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008e76:	2103      	movs	r1, #3
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff fdf0 	bl	8008a5e <nRF24_ReadReg>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	3301      	adds	r3, #1
 8008e82:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	4413      	add	r3, r2
 8008e8a:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fd9b 	bl	80089ca <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	4a50      	ldr	r2, [pc, #320]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008e98:	5cd3      	ldrb	r3, [r2, r3]
 8008e9a:	f043 0320 	orr.w	r3, r3, #32
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff fdc5 	bl	8008a32 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	1e5a      	subs	r2, r3, #1
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fdbd 	bl	8008a32 <nRF24_LL_RW>
	  } while (addr_width--);
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	1e5a      	subs	r2, r3, #1
 8008ebc:	75fa      	strb	r2, [r7, #23]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1f2      	bne.n	8008ea8 <nRF24_SetAddr+0x16c>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fd80 	bl	80089ca <nRF24_CSN_State>
	  break;
 8008eca:	e081      	b.n	8008fd0 <nRF24_SetAddr+0x294>


    case nRF24_PIPE4:
    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008ecc:	2103      	movs	r1, #3
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fdc5 	bl	8008a5e <nRF24_ReadReg>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4413      	add	r3, r2
 8008ee0:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fd70 	bl	80089ca <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	4a3a      	ldr	r2, [pc, #232]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008eee:	5cd3      	ldrb	r3, [r2, r3]
 8008ef0:	f043 0320 	orr.w	r3, r3, #32
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fd9a 	bl	8008a32 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	4619      	mov	r1, r3
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fd92 	bl	8008a32 <nRF24_LL_RW>
	  } while (addr_width--);
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	1e5a      	subs	r2, r3, #1
 8008f12:	75fa      	strb	r2, [r7, #23]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f2      	bne.n	8008efe <nRF24_SetAddr+0x1c2>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008f18:	2101      	movs	r1, #1
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fd55 	bl	80089ca <nRF24_CSN_State>
	  break;
 8008f20:	e056      	b.n	8008fd0 <nRF24_SetAddr+0x294>


    case nRF24_PIPE5:

    	/* Get address width */
	  addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008f22:	2103      	movs	r1, #3
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f7ff fd9a 	bl	8008a5e <nRF24_ReadReg>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
	  /* Write address in reverse order (LSByte first) */
	  addr += addr_width;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4413      	add	r3, r2
 8008f36:	607b      	str	r3, [r7, #4]
	  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008f38:	2100      	movs	r1, #0
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff fd45 	bl	80089ca <nRF24_CSN_State>
	  nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	4a25      	ldr	r2, [pc, #148]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008f44:	5cd3      	ldrb	r3, [r2, r3]
 8008f46:	f043 0320 	orr.w	r3, r3, #32
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fd6f 	bl	8008a32 <nRF24_LL_RW>
	  do {
		nRF24_LL_RW(device, *addr--);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	1e5a      	subs	r2, r3, #1
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff fd67 	bl	8008a32 <nRF24_LL_RW>
	  } while (addr_width--);
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	1e5a      	subs	r2, r3, #1
 8008f68:	75fa      	strb	r2, [r7, #23]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f2      	bne.n	8008f54 <nRF24_SetAddr+0x218>
	  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008f6e:	2101      	movs	r1, #1
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff fd2a 	bl	80089ca <nRF24_CSN_State>
	  break;
 8008f76:	e02b      	b.n	8008fd0 <nRF24_SetAddr+0x294>


    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008f78:	2103      	movs	r1, #3
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f7ff fd6f 	bl	8008a5e <nRF24_ReadReg>
 8008f80:	4603      	mov	r3, r0
 8008f82:	3301      	adds	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008f8e:	2100      	movs	r1, #0
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fd1a 	bl	80089ca <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008f96:	7afb      	ldrb	r3, [r7, #11]
 8008f98:	4a0f      	ldr	r2, [pc, #60]	@ (8008fd8 <nRF24_SetAddr+0x29c>)
 8008f9a:	5cd3      	ldrb	r3, [r2, r3]
 8008f9c:	f043 0320 	orr.w	r3, r3, #32
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff fd44 	bl	8008a32 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff fd3c 	bl	8008a32 <nRF24_LL_RW>
      } while (addr_width--);
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	1e5a      	subs	r2, r3, #1
 8008fbe:	75fa      	strb	r2, [r7, #23]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f2      	bne.n	8008faa <nRF24_SetAddr+0x26e>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff fcff 	bl	80089ca <nRF24_CSN_State>
      break;
 8008fcc:	e000      	b.n	8008fd0 <nRF24_SetAddr+0x294>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 8008fce:	bf00      	nop
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08009738 	.word	0x08009738

08008fdc <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	70fb      	strb	r3, [r7, #3]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70bb      	strb	r3, [r7, #2]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff fd30 	bl	8008a5e <nRF24_ReadReg>
 8008ffe:	4603      	mov	r3, r0
 8009000:	b25a      	sxtb	r2, r3
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f303 	lsl.w	r3, r1, r3
 800900a:	b25b      	sxtb	r3, r3
 800900c:	4313      	orrs	r3, r2
 800900e:	b25b      	sxtb	r3, r3
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009016:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	461a      	mov	r2, r3
 800901c:	2102      	movs	r1, #2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff fd3e 	bl	8008aa0 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	4a1a      	ldr	r2, [pc, #104]	@ (8009090 <nRF24_SetRXPipe+0xb4>)
 8009028:	5cd1      	ldrb	r1, [r2, r3]
 800902a:	787b      	ldrb	r3, [r7, #1]
 800902c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fd33 	bl	8008aa0 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 800903a:	2101      	movs	r1, #1
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fd0e 	bl	8008a5e <nRF24_ReadReg>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 8009046:	78bb      	ldrb	r3, [r7, #2]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d10a      	bne.n	8009062 <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	2201      	movs	r2, #1
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	b25a      	sxtb	r2, r3
 8009056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800905a:	4313      	orrs	r3, r2
 800905c:	b25b      	sxtb	r3, r3
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e00b      	b.n	800907a <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	2201      	movs	r2, #1
 8009066:	fa02 f303 	lsl.w	r3, r2, r3
 800906a:	b25b      	sxtb	r3, r3
 800906c:	43db      	mvns	r3, r3
 800906e:	b25a      	sxtb	r2, r3
 8009070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009074:	4013      	ands	r3, r2
 8009076:	b25b      	sxtb	r3, r3
 8009078:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	461a      	mov	r2, r3
 800907e:	2101      	movs	r1, #1
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff fd0d 	bl	8008aa0 <nRF24_WriteReg>
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	08009730 	.word	0x08009730

08009094 <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	d905      	bls.n	80090b2 <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 80090a6:	2200      	movs	r2, #0
 80090a8:	2101      	movs	r1, #1
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fcf8 	bl	8008aa0 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 80090b0:	e017      	b.n	80090e2 <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 80090b2:	2101      	movs	r1, #1
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fcd2 	bl	8008a5e <nRF24_ReadReg>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	2201      	movs	r2, #1
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	b25b      	sxtb	r3, r3
 80090c8:	43db      	mvns	r3, r3
 80090ca:	b25a      	sxtb	r2, r3
 80090cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d0:	4013      	ands	r3, r2
 80090d2:	b25b      	sxtb	r3, r3
 80090d4:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	461a      	mov	r2, r3
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fcdf 	bl	8008aa0 <nRF24_WriteReg>
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 80090f2:	2107      	movs	r1, #7
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fcb2 	bl	8008a5e <nRF24_ReadReg>
 80090fa:	4603      	mov	r3, r0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <nRF24_GetConfig>:

uint8_t nRF24_GetConfig(nRF24_Handler_t *device) {
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_CONFIG);
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fca5 	bl	8008a5e <nRF24_ReadReg>
 8009114:	4603      	mov	r3, r0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8009126:	22ff      	movs	r2, #255	@ 0xff
 8009128:	21e1      	movs	r1, #225	@ 0xe1
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fcb8 	bl	8008aa0 <nRF24_WriteReg>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8009140:	22ff      	movs	r2, #255	@ 0xff
 8009142:	21e2      	movs	r1, #226	@ 0xe2
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff fcab 	bl	8008aa0 <nRF24_WriteReg>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800915a:	2107      	movs	r1, #7
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fc7e 	bl	8008a5e <nRF24_ReadReg>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800916c:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	461a      	mov	r2, r3
 8009172:	2107      	movs	r1, #7
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff fc93 	bl	8008aa0 <nRF24_WriteReg>
}
 800917a:	bf00      	nop
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <nRF24_ClearIRQFlagsTx>:

void nRF24_ClearIRQFlagsTx(nRF24_Handler_t *device) {
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 800918a:	2107      	movs	r1, #7
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff fc66 	bl	8008a5e <nRF24_ReadReg>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_TX;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800919c:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	461a      	mov	r2, r3
 80091a2:	2107      	movs	r1, #7
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fc7b 	bl	8008aa0 <nRF24_WriteReg>
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <nRF24_ClearIRQFlagsRx>:

void nRF24_ClearIRQFlagsRx(nRF24_Handler_t *device) {
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DRbits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 80091ba:	2107      	movs	r1, #7
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fc4e 	bl	8008a5e <nRF24_ReadReg>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ_RX;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091cc:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	461a      	mov	r2, r3
 80091d2:	2107      	movs	r1, #7
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff fc63 	bl	8008aa0 <nRF24_WriteReg>
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <nRF24_WritePayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	4613      	mov	r3, r2
 80091ee:	71fb      	strb	r3, [r7, #7]
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	21a0      	movs	r1, #160	@ 0xa0
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff fcbc 	bl	8008b74 <nRF24_WriteMBReg>
}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <nRF24_ReadPayload>:

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8009210:	2107      	movs	r1, #7
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff fc23 	bl	8008a5e <nRF24_ReadReg>
 8009218:	4603      	mov	r3, r0
 800921a:	105b      	asrs	r3, r3, #1
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	2b05      	cmp	r3, #5
 8009228:	d817      	bhi.n	800925a <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	4a0f      	ldr	r2, [pc, #60]	@ (800926c <nRF24_ReadPayload+0x68>)
 800922e:	5cd3      	ldrb	r3, [r2, r3]
 8009230:	4619      	mov	r1, r3
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff fc13 	bl	8008a5e <nRF24_ReadReg>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d006      	beq.n	8009256 <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	2161      	movs	r1, #97	@ 0x61
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7ff fc65 	bl	8008b20 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	e003      	b.n	8009262 <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 8009260:	23ff      	movs	r3, #255	@ 0xff
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	08009730 	.word	0x08009730

08009270 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af02      	add	r7, sp, #8
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 800927c:	887b      	ldrh	r3, [r7, #2]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b29b      	uxth	r3, r3
 8009282:	b2da      	uxtb	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 8009288:	887b      	ldrh	r3, [r7, #2]
 800928a:	b2da      	uxtb	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	791b      	ldrb	r3, [r3, #4]
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	b299      	uxth	r1, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f103 0209 	add.w	r2, r3, #9
 80092a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	2302      	movs	r3, #2
 80092ae:	f7f9 fba5 	bl	80029fc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	b299      	uxth	r1, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	1d5a      	adds	r2, r3, #5
 80092be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	2301      	movs	r3, #1
 80092c6:	f7f9 fc8d 	bl	8002be4 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	795b      	ldrb	r3, [r3, #5]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b086      	sub	sp, #24
 80092da:	af02      	add	r7, sp, #8
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	807b      	strh	r3, [r7, #2]
 80092e2:	4613      	mov	r3, r2
 80092e4:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 80092e6:	887b      	ldrh	r3, [r7, #2]
 80092e8:	0a1b      	lsrs	r3, r3, #8
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 80092f2:	887b      	ldrh	r3, [r7, #2]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	787a      	ldrb	r2, [r7, #1]
 8009306:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	b299      	uxth	r1, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f103 0209 	add.w	r2, r3, #9
 8009316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	2303      	movs	r3, #3
 800931e:	f7f9 fb6d 	bl	80029fc <HAL_I2C_Master_Transmit>
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	4613      	mov	r3, r2
 8009336:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	79fa      	ldrb	r2, [r7, #7]
 8009342:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8009344:	2100      	movs	r1, #0
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff ff92 	bl	8009270 <VL6180X_Read8>
 800934c:	4603      	mov	r3, r0
 800934e:	2bb4      	cmp	r3, #180	@ 0xb4
 8009350:	d001      	beq.n	8009356 <VL6180X_Init+0x2c>
    return false;
 8009352:	2300      	movs	r3, #0
 8009354:	e011      	b.n	800937a <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 8009356:	2116      	movs	r1, #22
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff ff89 	bl	8009270 <VL6180X_Read8>
 800935e:	4603      	mov	r3, r0
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f80a 	bl	8009382 <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 800936e:	2200      	movs	r2, #0
 8009370:	2116      	movs	r1, #22
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff ffaf 	bl	80092d6 <VL6180X_Write8>
  }

  return true;
 8009378:	2301      	movs	r3, #1
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 800938a:	2201      	movs	r2, #1
 800938c:	f240 2107 	movw	r1, #519	@ 0x207
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ffa0 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 8009396:	2201      	movs	r2, #1
 8009398:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff ff9a 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 80093a2:	2200      	movs	r2, #0
 80093a4:	2196      	movs	r1, #150	@ 0x96
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff ff95 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 80093ac:	22fd      	movs	r2, #253	@ 0xfd
 80093ae:	2197      	movs	r1, #151	@ 0x97
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ff90 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 80093b6:	2200      	movs	r2, #0
 80093b8:	21e3      	movs	r1, #227	@ 0xe3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff ff8b 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 80093c0:	2204      	movs	r2, #4
 80093c2:	21e4      	movs	r1, #228	@ 0xe4
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ff86 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 80093ca:	2202      	movs	r2, #2
 80093cc:	21e5      	movs	r1, #229	@ 0xe5
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff ff81 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 80093d4:	2201      	movs	r2, #1
 80093d6:	21e6      	movs	r1, #230	@ 0xe6
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ff7c 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 80093de:	2203      	movs	r2, #3
 80093e0:	21e7      	movs	r1, #231	@ 0xe7
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff ff77 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 80093e8:	2202      	movs	r2, #2
 80093ea:	21f5      	movs	r1, #245	@ 0xf5
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff ff72 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 80093f2:	2205      	movs	r2, #5
 80093f4:	21d9      	movs	r1, #217	@ 0xd9
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff ff6d 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 80093fc:	22ce      	movs	r2, #206	@ 0xce
 80093fe:	21db      	movs	r1, #219	@ 0xdb
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff ff68 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 8009406:	2203      	movs	r2, #3
 8009408:	21dc      	movs	r1, #220	@ 0xdc
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff ff63 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 8009410:	22f8      	movs	r2, #248	@ 0xf8
 8009412:	21dd      	movs	r1, #221	@ 0xdd
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff ff5e 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 800941a:	2200      	movs	r2, #0
 800941c:	219f      	movs	r1, #159	@ 0x9f
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ff59 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 8009424:	223c      	movs	r2, #60	@ 0x3c
 8009426:	21a3      	movs	r1, #163	@ 0xa3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff54 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 800942e:	2200      	movs	r2, #0
 8009430:	21b7      	movs	r1, #183	@ 0xb7
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff ff4f 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 8009438:	223c      	movs	r2, #60	@ 0x3c
 800943a:	21bb      	movs	r1, #187	@ 0xbb
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff ff4a 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 8009442:	2209      	movs	r2, #9
 8009444:	21b2      	movs	r1, #178	@ 0xb2
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff ff45 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 800944c:	2209      	movs	r2, #9
 800944e:	21ca      	movs	r1, #202	@ 0xca
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ff40 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 8009456:	2201      	movs	r2, #1
 8009458:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff3a 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 8009462:	2217      	movs	r2, #23
 8009464:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ff34 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800946e:	2200      	movs	r2, #0
 8009470:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff2e 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800947a:	2205      	movs	r2, #5
 800947c:	21ff      	movs	r1, #255	@ 0xff
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff ff29 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 8009484:	2205      	movs	r2, #5
 8009486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff ff23 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 8009490:	2205      	movs	r2, #5
 8009492:	f240 1199 	movw	r1, #409	@ 0x199
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff ff1d 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800949c:	221b      	movs	r2, #27
 800949e:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff ff17 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 80094a8:	223e      	movs	r2, #62	@ 0x3e
 80094aa:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff ff11 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 80094b4:	221f      	movs	r2, #31
 80094b6:	f240 11a7 	movw	r1, #423	@ 0x1a7
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff ff0b 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 80094c0:	2200      	movs	r2, #0
 80094c2:	2130      	movs	r1, #48	@ 0x30
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ff06 	bl	80092d6 <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 80094ca:	2210      	movs	r2, #16
 80094cc:	2111      	movs	r1, #17
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff ff01 	bl	80092d6 <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 80094d4:	2230      	movs	r2, #48	@ 0x30
 80094d6:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fefb 	bl	80092d6 <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 80094e0:	2246      	movs	r2, #70	@ 0x46
 80094e2:	213f      	movs	r1, #63	@ 0x3f
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff fef6 	bl	80092d6 <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 80094ea:	22ff      	movs	r2, #255	@ 0xff
 80094ec:	2131      	movs	r1, #49	@ 0x31
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fef1 	bl	80092d6 <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 80094f4:	2263      	movs	r2, #99	@ 0x63
 80094f6:	2141      	movs	r1, #65	@ 0x41
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff feec 	bl	80092d6 <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 80094fe:	2201      	movs	r2, #1
 8009500:	212e      	movs	r1, #46	@ 0x2e
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fee7 	bl	80092d6 <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 8009508:	2209      	movs	r2, #9
 800950a:	211b      	movs	r1, #27
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fee2 	bl	80092d6 <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 8009512:	2231      	movs	r2, #49	@ 0x31
 8009514:	213e      	movs	r1, #62	@ 0x3e
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff fedd 	bl	80092d6 <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 800951c:	2224      	movs	r2, #36	@ 0x24
 800951e:	2114      	movs	r1, #20
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff fed8 	bl	80092d6 <VL6180X_Write8>
                        // Ready threshold event'
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 8009536:	bf00      	nop
 8009538:	214d      	movs	r1, #77	@ 0x4d
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fe98 	bl	8009270 <VL6180X_Read8>
 8009540:	4603      	mov	r3, r0
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f6      	beq.n	8009538 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 800954a:	2201      	movs	r2, #1
 800954c:	2118      	movs	r1, #24
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fec1 	bl	80092d6 <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 8009554:	bf00      	nop
 8009556:	214f      	movs	r1, #79	@ 0x4f
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff fe89 	bl	8009270 <VL6180X_Read8>
 800955e:	4603      	mov	r3, r0
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0f6      	beq.n	8009556 <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 8009568:	2162      	movs	r1, #98	@ 0x62
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fe80 	bl	8009270 <VL6180X_Read8>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8009574:	2207      	movs	r2, #7
 8009576:	2115      	movs	r1, #21
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff feac 	bl	80092d6 <VL6180X_Write8>

  return range;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <memset>:
 8009588:	4402      	add	r2, r0
 800958a:	4603      	mov	r3, r0
 800958c:	4293      	cmp	r3, r2
 800958e:	d100      	bne.n	8009592 <memset+0xa>
 8009590:	4770      	bx	lr
 8009592:	f803 1b01 	strb.w	r1, [r3], #1
 8009596:	e7f9      	b.n	800958c <memset+0x4>

08009598 <__errno>:
 8009598:	4b01      	ldr	r3, [pc, #4]	@ (80095a0 <__errno+0x8>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20000040 	.word	0x20000040

080095a4 <__libc_init_array>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4d0d      	ldr	r5, [pc, #52]	@ (80095dc <__libc_init_array+0x38>)
 80095a8:	4c0d      	ldr	r4, [pc, #52]	@ (80095e0 <__libc_init_array+0x3c>)
 80095aa:	1b64      	subs	r4, r4, r5
 80095ac:	10a4      	asrs	r4, r4, #2
 80095ae:	2600      	movs	r6, #0
 80095b0:	42a6      	cmp	r6, r4
 80095b2:	d109      	bne.n	80095c8 <__libc_init_array+0x24>
 80095b4:	4d0b      	ldr	r5, [pc, #44]	@ (80095e4 <__libc_init_array+0x40>)
 80095b6:	4c0c      	ldr	r4, [pc, #48]	@ (80095e8 <__libc_init_array+0x44>)
 80095b8:	f000 f84a 	bl	8009650 <_init>
 80095bc:	1b64      	subs	r4, r4, r5
 80095be:	10a4      	asrs	r4, r4, #2
 80095c0:	2600      	movs	r6, #0
 80095c2:	42a6      	cmp	r6, r4
 80095c4:	d105      	bne.n	80095d2 <__libc_init_array+0x2e>
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095cc:	4798      	blx	r3
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7ee      	b.n	80095b0 <__libc_init_array+0xc>
 80095d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d6:	4798      	blx	r3
 80095d8:	3601      	adds	r6, #1
 80095da:	e7f2      	b.n	80095c2 <__libc_init_array+0x1e>
 80095dc:	08009748 	.word	0x08009748
 80095e0:	08009748 	.word	0x08009748
 80095e4:	08009748 	.word	0x08009748
 80095e8:	0800974c 	.word	0x0800974c

080095ec <memcpy>:
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095f4:	d100      	bne.n	80095f8 <memcpy+0xc>
 80095f6:	4770      	bx	lr
 80095f8:	b510      	push	{r4, lr}
 80095fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009602:	4291      	cmp	r1, r2
 8009604:	d1f9      	bne.n	80095fa <memcpy+0xe>
 8009606:	bd10      	pop	{r4, pc}

08009608 <sqrt>:
 8009608:	b508      	push	{r3, lr}
 800960a:	ed2d 8b04 	vpush	{d8-d9}
 800960e:	eeb0 8b40 	vmov.f64	d8, d0
 8009612:	f000 f819 	bl	8009648 <__ieee754_sqrt>
 8009616:	eeb4 8b48 	vcmp.f64	d8, d8
 800961a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961e:	d60c      	bvs.n	800963a <sqrt+0x32>
 8009620:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8009640 <sqrt+0x38>
 8009624:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962c:	d505      	bpl.n	800963a <sqrt+0x32>
 800962e:	f7ff ffb3 	bl	8009598 <__errno>
 8009632:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009636:	2321      	movs	r3, #33	@ 0x21
 8009638:	6003      	str	r3, [r0, #0]
 800963a:	ecbd 8b04 	vpop	{d8-d9}
 800963e:	bd08      	pop	{r3, pc}
	...

08009648 <__ieee754_sqrt>:
 8009648:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800964c:	4770      	bx	lr
	...

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
