
robot-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009018  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f0  080092f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092f8  080092f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004338  2000007c  0800937c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043b4  0800937c  000243b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5d4  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9b  00000000  00000000  0003b67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0003f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00040ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059a5  00000000  00000000  00042248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccd1  00000000  00000000  00047bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010450c  00000000  00000000  000648be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006678  00000000  00000000  00168e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009200 	.word	0x08009200

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08009200 	.word	0x08009200

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b09a      	sub	sp, #104	; 0x68
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f001 fdbe 	bl	80020ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8f1 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fbb9 	bl	8000cc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000556:	f000 fa1b 	bl	8000990 <MX_SPI1_Init>
  MX_I2C1_Init();
 800055a:	f000 f959 	bl	8000810 <MX_I2C1_Init>
  MX_I2C2_Init();
 800055e:	f000 f997 	bl	8000890 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000562:	f000 fa57 	bl	8000a14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000566:	f000 faa9 	bl	8000abc <MX_TIM3_Init>
  MX_TIM5_Init();
 800056a:	f000 fafd 	bl	8000b68 <MX_TIM5_Init>
  MX_TIM8_Init();
 800056e:	f000 fb51 	bl	8000c14 <MX_TIM8_Init>
  MX_I2C3_Init();
 8000572:	f000 f9cd 	bl	8000910 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	/* Define wheels angles in motor.h */
	kinematic[0][0] = sin(WHEEL_ANGlE_1); kinematic[0][1] = -cos(WHEEL_ANGlE_1); kinematic[0][2] = -ROBOT_RADIO;
 8000576:	4b5a      	ldr	r3, [pc, #360]	; (80006e0 <main+0x19c>)
 8000578:	4a5a      	ldr	r2, [pc, #360]	; (80006e4 <main+0x1a0>)
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	4b58      	ldr	r3, [pc, #352]	; (80006e0 <main+0x19c>)
 800057e:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	4b56      	ldr	r3, [pc, #344]	; (80006e0 <main+0x19c>)
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <main+0x1a4>)
 8000588:	609a      	str	r2, [r3, #8]
	kinematic[1][0] = sin(WHEEL_ANGlE_2); kinematic[1][1] = -cos(WHEEL_ANGlE_2); kinematic[1][2] = -ROBOT_RADIO;
 800058a:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <main+0x19c>)
 800058c:	4a57      	ldr	r2, [pc, #348]	; (80006ec <main+0x1a8>)
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	4b53      	ldr	r3, [pc, #332]	; (80006e0 <main+0x19c>)
 8000592:	4a57      	ldr	r2, [pc, #348]	; (80006f0 <main+0x1ac>)
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	4b52      	ldr	r3, [pc, #328]	; (80006e0 <main+0x19c>)
 8000598:	4a53      	ldr	r2, [pc, #332]	; (80006e8 <main+0x1a4>)
 800059a:	615a      	str	r2, [r3, #20]
	kinematic[2][0] = sin(WHEEL_ANGlE_3); kinematic[2][1] = -cos(WHEEL_ANGlE_3); kinematic[2][2] = -ROBOT_RADIO;
 800059c:	4b50      	ldr	r3, [pc, #320]	; (80006e0 <main+0x19c>)
 800059e:	4a55      	ldr	r2, [pc, #340]	; (80006f4 <main+0x1b0>)
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <main+0x19c>)
 80005a4:	4a52      	ldr	r2, [pc, #328]	; (80006f0 <main+0x1ac>)
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b4d      	ldr	r3, [pc, #308]	; (80006e0 <main+0x19c>)
 80005aa:	4a4f      	ldr	r2, [pc, #316]	; (80006e8 <main+0x1a4>)
 80005ac:	621a      	str	r2, [r3, #32]
	kinematic[3][0] = sin(WHEEL_ANGlE_4); kinematic[3][1] = -cos(WHEEL_ANGlE_4); kinematic[3][2] = -ROBOT_RADIO;
 80005ae:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <main+0x19c>)
 80005b0:	4a51      	ldr	r2, [pc, #324]	; (80006f8 <main+0x1b4>)
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <main+0x19c>)
 80005b6:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
 80005bc:	4b48      	ldr	r3, [pc, #288]	; (80006e0 <main+0x19c>)
 80005be:	4a4a      	ldr	r2, [pc, #296]	; (80006e8 <main+0x1a4>)
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c

	for (uint8_t i = 0; i < 10; i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80005c8:	e016      	b.n	80005f8 <main+0xb4>
	{
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_1);
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	484b      	ldr	r0, [pc, #300]	; (80006fc <main+0x1b8>)
 80005d0:	f007 ff20 	bl	8008414 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_2);
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4848      	ldr	r0, [pc, #288]	; (80006fc <main+0x1b8>)
 80005da:	f007 ff1b 	bl	8008414 <Board_LedToggle>
		Board_LedToggle(BOARD_LED_GPIO, BOARD_LED_PIN_3);
 80005de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e2:	4846      	ldr	r0, [pc, #280]	; (80006fc <main+0x1b8>)
 80005e4:	f007 ff16 	bl	8008414 <Board_LedToggle>
		HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f001 fd9b 	bl	8002124 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++)
 80005ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005f2:	3301      	adds	r3, #1
 80005f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80005f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d9e4      	bls.n	80005ca <main+0x86>
	}
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of kickFlag */
  osMutexDef(kickFlag);
 8000600:	2300      	movs	r3, #0
 8000602:	663b      	str	r3, [r7, #96]	; 0x60
  kickFlagHandle = osMutexCreate(osMutex(kickFlag));
 8000604:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000608:	4618      	mov	r0, r3
 800060a:	f005 f847 	bl	800569c <osMutexCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a3b      	ldr	r2, [pc, #236]	; (8000700 <main+0x1bc>)
 8000612:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of kickQueue */
  osMessageQDef(kickQueue, 1, uint16_t);
 8000614:	4a3b      	ldr	r2, [pc, #236]	; (8000704 <main+0x1c0>)
 8000616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	e883 0003 	stmia.w	r3, {r0, r1}
  kickQueueHandle = osMessageCreate(osMessageQ(kickQueue), NULL);
 8000622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 f8c7 	bl	80057bc <osMessageCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a35      	ldr	r2, [pc, #212]	; (8000708 <main+0x1c4>)
 8000632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(nrf24Check, 16, uint16_t);
 8000634:	4a35      	ldr	r2, [pc, #212]	; (800070c <main+0x1c8>)
 8000636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800063a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063e:	e883 0003 	stmia.w	r3, {r0, r1}
  nrf24CheckHandle = osMessageCreate(osMessageQ(nrf24Check), NULL);
 8000642:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f005 f8b7 	bl	80057bc <osMessageCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <main+0x1cc>)
 8000652:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of driveTask */
  osThreadDef(driveTask, DriveFunction, osPriorityAboveNormal, 0, 128);
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <main+0x1d0>)
 8000656:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	682b      	ldr	r3, [r5, #0]
 8000662:	6023      	str	r3, [r4, #0]
  driveTaskHandle = osThreadCreate(osThread(driveTask), NULL);
 8000664:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 ffdb 	bl	8005626 <osThreadCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a29      	ldr	r2, [pc, #164]	; (8000718 <main+0x1d4>)
 8000674:	6013      	str	r3, [r2, #0]

  /* definition and creation of radioTask */
  osThreadDef(radioTask, RadioFunction, osPriorityNormal, 0, 128);
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <main+0x1d8>)
 8000678:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	682b      	ldr	r3, [r5, #0]
 8000684:	6023      	str	r3, [r4, #0]
  radioTaskHandle = osThreadCreate(osThread(radioTask), NULL);
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 ffca 	bl	8005626 <osThreadCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <main+0x1dc>)
 8000696:	6013      	str	r3, [r2, #0]

  /* definition and creation of kickTask */
  osThreadDef(kickTask, KickFunction, osPriorityLow, 0, 128);
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <main+0x1e0>)
 800069a:	f107 0414 	add.w	r4, r7, #20
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	682b      	ldr	r3, [r5, #0]
 80006a6:	6023      	str	r3, [r4, #0]
  kickTaskHandle = osThreadCreate(osThread(kickTask), NULL);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 ffb9 	bl	8005626 <osThreadCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <main+0x1e4>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(ballDetectorTask, BallDetectorFunction, osPriorityLow, 0, 128);
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <main+0x1e8>)
 80006bc:	463c      	mov	r4, r7
 80006be:	461d      	mov	r5, r3
 80006c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	6023      	str	r3, [r4, #0]
  ballDetectorTaskHandle = osThreadCreate(osThread(ballDetectorTask), NULL);
 80006c8:	463b      	mov	r3, r7
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 ffaa 	bl	8005626 <osThreadCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a16      	ldr	r2, [pc, #88]	; (8000730 <main+0x1ec>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006d8:	f004 ff8e 	bl	80055f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x198>
 80006de:	bf00      	nop
 80006e0:	2000035c 	.word	0x2000035c
 80006e4:	3f5db3d7 	.word	0x3f5db3d7
 80006e8:	bda83e42 	.word	0xbda83e42
 80006ec:	3f441b7d 	.word	0x3f441b7d
 80006f0:	3f248dbb 	.word	0x3f248dbb
 80006f4:	bf441b7d 	.word	0xbf441b7d
 80006f8:	bf5db3d7 	.word	0xbf5db3d7
 80006fc:	40022000 	.word	0x40022000
 8000700:	20000338 	.word	0x20000338
 8000704:	08009250 	.word	0x08009250
 8000708:	20000334 	.word	0x20000334
 800070c:	08009258 	.word	0x08009258
 8000710:	20000340 	.word	0x20000340
 8000714:	08009260 	.word	0x08009260
 8000718:	20000328 	.word	0x20000328
 800071c:	08009274 	.word	0x08009274
 8000720:	2000032c 	.word	0x2000032c
 8000724:	08009288 	.word	0x08009288
 8000728:	20000330 	.word	0x20000330
 800072c:	0800929c 	.word	0x0800929c
 8000730:	2000033c 	.word	0x2000033c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	; 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f008 fd30 	bl	80091a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <SystemClock_Config+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a25      	ldr	r2, [pc, #148]	; (800080c <SystemClock_Config+0xd8>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007a0:	23d8      	movs	r3, #216	; 0xd8
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fd81 	bl	80032bc <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007c0:	f001 f954 	bl	8001a6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c4:	f002 fd2a 	bl	800321c <HAL_PWREx_EnableOverDrive>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ce:	f001 f94d 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2107      	movs	r1, #7
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 f811 	bl	8003818 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007fc:	f001 f936 	bl	8001a6c <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3750      	adds	r7, #80	; 0x50
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	; (8000884 <MX_I2C1_Init+0x74>)
 800084c:	f001 ff68 	bl	8002720 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000856:	f001 f909 	bl	8001a6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_I2C1_Init+0x74>)
 800085e:	f002 fc45 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f001 f900 	bl	8001a6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2C1_Init+0x74>)
 8000870:	f002 fc87 	bl	8003182 <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f001 f8f7 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000098 	.word	0x20000098
 8000888:	40005400 	.word	0x40005400
 800088c:	6000030d 	.word	0x6000030d

08000890 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C2_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C2_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C2_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C2_Init+0x74>)
 80008cc:	f001 ff28 	bl	8002720 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f001 f8c9 	bl	8001a6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C2_Init+0x74>)
 80008de:	f002 fc05 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f001 f8c0 	bl	8001a6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2C2_Init+0x74>)
 80008f0:	f002 fc47 	bl	8003182 <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f001 f8b7 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000ec 	.word	0x200000ec
 8000908:	40005800 	.word	0x40005800
 800090c:	6000030d 	.word	0x6000030d

08000910 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_I2C3_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_I2C3_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_I2C3_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_I2C3_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_I2C3_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_I2C3_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_I2C3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_I2C3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_I2C3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_I2C3_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_I2C3_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <MX_I2C3_Init+0x74>)
 800094c:	f001 fee8 	bl	8002720 <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000956:	f001 f889 	bl	8001a6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <MX_I2C3_Init+0x74>)
 800095e:	f002 fbc5 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000968:	f001 f880 	bl	8001a6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C3_Init+0x74>)
 8000970:	f002 fc07 	bl	8003182 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800097a:	f001 f877 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000140 	.word	0x20000140
 8000988:	40005c00 	.word	0x40005c00
 800098c:	6000030d 	.word	0x6000030d

08000990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_SPI1_Init+0x7c>)
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <MX_SPI1_Init+0x80>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_SPI1_Init+0x7c>)
 800099c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009c6:	2218      	movs	r2, #24
 80009c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MX_SPI1_Init+0x7c>)
 80009f0:	f003 fd7e 	bl	80044f0 <HAL_SPI_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f001 f837 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
	//LL_SPI_WriteReg(SPI1, CR2, SPI_CR2_FRXTH_Msk);
	WRITE_REG(hspi1.Instance->CR2, SPI_CR2_FRXTH_Msk);
 80009fe:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <MX_SPI1_Init+0x7c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a06:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000194 	.word	0x20000194
 8000a10:	40013000 	.word	0x40013000

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2224      	movs	r2, #36	; 0x24
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f008 fbc0 	bl	80091a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a72:	2301      	movs	r3, #1
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000a86:	f004 fa53 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a90:	f000 ffec 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_TIM2_Init+0xa4>)
 8000aa2:	f004 fcd3 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000aac:	f000 ffde 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200001f8 	.word	0x200001f8

08000abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2224      	movs	r2, #36	; 0x24
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 fb6c 	bl	80091a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <MX_TIM3_Init+0xa8>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b00:	2303      	movs	r3, #3
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000b2c:	f004 fa00 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b36:	f000 ff99 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM3_Init+0xa4>)
 8000b48:	f004 fc80 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b52:	f000 ff8b 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000244 	.word	0x20000244
 8000b64:	40000400 	.word	0x40000400

08000b68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2224      	movs	r2, #36	; 0x24
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f008 fb16 	bl	80091a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <MX_TIM5_Init+0xa8>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bac:	2303      	movs	r3, #3
 8000bae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000bd8:	f004 f9aa 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000be2:	f000 ff43 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_TIM5_Init+0xa4>)
 8000bf4:	f004 fc2a 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000bfe:	f000 ff35 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3730      	adds	r7, #48	; 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000290 	.word	0x20000290
 8000c10:	40000c00 	.word	0x40000c00

08000c14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2224      	movs	r2, #36	; 0x24
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f008 fac0 	bl	80091a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c34:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <MX_TIM8_Init+0xb0>)
 8000c36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c76:	2301      	movs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000c8a:	f004 f951 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c94:	f000 feea 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_TIM8_Init+0xac>)
 8000caa:	f004 fbcf 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000cb4:	f000 feda 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200002dc 	.word	0x200002dc
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b090      	sub	sp, #64	; 0x40
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cde:	4bb3      	ldr	r3, [pc, #716]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4ab2      	ldr	r2, [pc, #712]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4bb0      	ldr	r3, [pc, #704]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf6:	4bad      	ldr	r3, [pc, #692]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4aac      	ldr	r2, [pc, #688]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4baa      	ldr	r3, [pc, #680]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	4ba7      	ldr	r3, [pc, #668]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4aa6      	ldr	r2, [pc, #664]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4ba4      	ldr	r3, [pc, #656]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4ba1      	ldr	r3, [pc, #644]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4aa0      	ldr	r2, [pc, #640]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b9e      	ldr	r3, [pc, #632]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b9b      	ldr	r3, [pc, #620]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a9a      	ldr	r2, [pc, #616]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b98      	ldr	r3, [pc, #608]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b95      	ldr	r3, [pc, #596]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a94      	ldr	r2, [pc, #592]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b92      	ldr	r3, [pc, #584]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d6e:	4b8f      	ldr	r3, [pc, #572]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a8e      	ldr	r2, [pc, #568]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b8c      	ldr	r3, [pc, #560]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b89      	ldr	r3, [pc, #548]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a88      	ldr	r2, [pc, #544]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b86      	ldr	r3, [pc, #536]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9e:	4b83      	ldr	r3, [pc, #524]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a82      	ldr	r2, [pc, #520]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b80      	ldr	r3, [pc, #512]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000db6:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a7c      	ldr	r2, [pc, #496]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b7a      	ldr	r3, [pc, #488]	; (8000fac <MX_GPIO_Init+0x2e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000dd4:	4876      	ldr	r0, [pc, #472]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000dd6:	f001 fc6f 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f640 0138 	movw	r1, #2104	; 0x838
 8000de0:	4874      	ldr	r0, [pc, #464]	; (8000fb4 <MX_GPIO_Init+0x2ec>)
 8000de2:	f001 fc69 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000dec:	4872      	ldr	r0, [pc, #456]	; (8000fb8 <MX_GPIO_Init+0x2f0>)
 8000dee:	f001 fc63 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	4870      	ldr	r0, [pc, #448]	; (8000fbc <MX_GPIO_Init+0x2f4>)
 8000dfa:	f001 fc5d 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e04:	486e      	ldr	r0, [pc, #440]	; (8000fc0 <MX_GPIO_Init+0x2f8>)
 8000e06:	f001 fc57 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000e10:	486c      	ldr	r0, [pc, #432]	; (8000fc4 <MX_GPIO_Init+0x2fc>)
 8000e12:	f001 fc51 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2101      	movs	r1, #1
 8000e1a:	486b      	ldr	r0, [pc, #428]	; (8000fc8 <MX_GPIO_Init+0x300>)
 8000e1c:	f001 fc4c 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8000e26:	4869      	ldr	r0, [pc, #420]	; (8000fcc <MX_GPIO_Init+0x304>)
 8000e28:	f001 fc46 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	21c0      	movs	r1, #192	; 0xc0
 8000e30:	4867      	ldr	r0, [pc, #412]	; (8000fd0 <MX_GPIO_Init+0x308>)
 8000e32:	f001 fc41 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000e36:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4858      	ldr	r0, [pc, #352]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000e50:	f001 fa6e 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8000e54:	f640 0338 	movw	r3, #2104	; 0x838
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4851      	ldr	r0, [pc, #324]	; (8000fb4 <MX_GPIO_Init+0x2ec>)
 8000e6e:	f001 fa5f 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e72:	2310      	movs	r3, #16
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4853      	ldr	r0, [pc, #332]	; (8000fd4 <MX_GPIO_Init+0x30c>)
 8000e86:	f001 fa53 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4849      	ldr	r0, [pc, #292]	; (8000fc4 <MX_GPIO_Init+0x2fc>)
 8000e9e:	f001 fa47 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4841      	ldr	r0, [pc, #260]	; (8000fbc <MX_GPIO_Init+0x2f4>)
 8000eb6:	f001 fa3b 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <MX_GPIO_Init+0x2e8>)
 8000ed0:	f001 fa2e 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4834      	ldr	r0, [pc, #208]	; (8000fb8 <MX_GPIO_Init+0x2f0>)
 8000ee8:	f001 fa22 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ4 PJ6 PJ7 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000eec:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	482c      	ldr	r0, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x2f0>)
 8000f06:	f001 fa13 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4826      	ldr	r0, [pc, #152]	; (8000fbc <MX_GPIO_Init+0x2f4>)
 8000f24:	f001 fa04 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <MX_GPIO_Init+0x2f8>)
 8000f42:	f001 f9f5 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <MX_GPIO_Init+0x2fc>)
 8000f60:	f001 f9e6 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0x300>)
 8000f7c:	f001 f9d8 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f80:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_GPIO_Init+0x304>)
 8000f9a:	f001 f9c9 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e016      	b.n	8000fd8 <MX_GPIO_Init+0x310>
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	40021400 	.word	0x40021400
 8000fb8:	40022400 	.word	0x40022400
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40022800 	.word	0x40022800
 8000fd4:	40021c00 	.word	0x40021c00
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_GPIO_Init+0x32c>)
 8000fe6:	f001 f9a3 	bl	8002330 <HAL_GPIO_Init>

}
 8000fea:	bf00      	nop
 8000fec:	3740      	adds	r7, #64	; 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40022800 	.word	0x40022800

08000ff8 <setSpeed>:

/* USER CODE BEGIN 4 */
float v_vel[3];
void setSpeed(uint8_t *buffer, float *velocity, uint8_t *turn)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	/* Last velocities */
	float prv_Vx = v_vel[0], prv_Vy = v_vel[1];
 8001004:	4bb1      	ldr	r3, [pc, #708]	; (80012cc <setSpeed+0x2d4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
 800100a:	4bb0      	ldr	r3, [pc, #704]	; (80012cc <setSpeed+0x2d4>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Velocities vector: vx, vy and vr respectively */
	v_vel[0] = (buffer[1] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0xC0) << 1 | (uint16_t)(buffer[1] & 0x7F)) / 100.0f;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b25b      	sxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	da16      	bge.n	800104a <setSpeed+0x52>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3304      	adds	r3, #4
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001032:	4313      	orrs	r3, r2
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	eeb1 7a67 	vneg.f32	s14, s15
 8001040:	eddf 6aa3 	vldr	s13, [pc, #652]	; 80012d0 <setSpeed+0x2d8>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	e013      	b.n	8001072 <setSpeed+0x7a>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3304      	adds	r3, #4
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001060:	4313      	orrs	r3, r2
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	eddf 6a99 	vldr	s13, [pc, #612]	; 80012d0 <setSpeed+0x2d8>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	4b96      	ldr	r3, [pc, #600]	; (80012cc <setSpeed+0x2d4>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
	v_vel[1] = (buffer[2] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x30) << 3 | (uint16_t)(buffer[2] & 0x7F)) / 100.0f;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3302      	adds	r3, #2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	da16      	bge.n	80010b2 <setSpeed+0xba>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3304      	adds	r3, #4
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3302      	adds	r3, #2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800109a:	4313      	orrs	r3, r2
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	eeb1 7a67 	vneg.f32	s14, s15
 80010a8:	eddf 6a89 	vldr	s13, [pc, #548]	; 80012d0 <setSpeed+0x2d8>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	e013      	b.n	80010da <setSpeed+0xe2>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3304      	adds	r3, #4
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	f403 72c0 	and.w	r2, r3, #384	; 0x180
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3302      	adds	r3, #2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	4313      	orrs	r3, r2
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80012d0 <setSpeed+0x2d8>
 80010d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010da:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <setSpeed+0x2d4>)
 80010dc:	edc3 7a01 	vstr	s15, [r3, #4]
	v_vel[2] = (buffer[3] & 0x80) ? -(float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f : (float)((uint16_t)(buffer[4] & 0x0F) << 7 | (uint16_t)(buffer[3] & 0x7F)) / 100.0f;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3303      	adds	r3, #3
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da16      	bge.n	800111a <setSpeed+0x122>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3304      	adds	r3, #4
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	01db      	lsls	r3, r3, #7
 80010f4:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3303      	adds	r3, #3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001102:	4313      	orrs	r3, r2
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	eeb1 7a67 	vneg.f32	s14, s15
 8001110:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80012d0 <setSpeed+0x2d8>
 8001114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001118:	e013      	b.n	8001142 <setSpeed+0x14a>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3304      	adds	r3, #4
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	01db      	lsls	r3, r3, #7
 8001122:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3303      	adds	r3, #3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001130:	4313      	orrs	r3, r2
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	eddf 6a65 	vldr	s13, [pc, #404]	; 80012d0 <setSpeed+0x2d8>
 800113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <setSpeed+0x2d4>)
 8001144:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Check if acceleration is not too high */
	float Ax = v_vel[0] - prv_Vx, Ay = v_vel[1] - prv_Vy;
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <setSpeed+0x2d4>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001156:	edc7 7a08 	vstr	s15, [r7, #32]
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <setSpeed+0x2d4>)
 800115c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001160:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	edc7 7a07 	vstr	s15, [r7, #28]
	float acc_sum = Ax * Ax + Ay * Ay;
 800116c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001170:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001174:	edd7 7a07 	vldr	s15, [r7, #28]
 8001178:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	edc7 7a06 	vstr	s15, [r7, #24]
	acc_sum = sqrt(acc_sum);
 8001184:	edd7 7a06 	vldr	s15, [r7, #24]
 8001188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118c:	eeb0 0b47 	vmov.f64	d0, d7
 8001190:	f008 f812 	bl	80091b8 <sqrt>
 8001194:	eeb0 7b40 	vmov.f64	d7, d0
 8001198:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800119c:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float norm_Ax = Ax / acc_sum, norm_Ay = Ay / acc_sum;
 80011a0:	edd7 6a08 	vldr	s13, [r7, #32]
 80011a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80011b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	edc7 7a04 	vstr	s15, [r7, #16]
	
	if(acc_sum > ROBOT_MAX_LINEAR_ACC)
 80011c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80012d4 <setSpeed+0x2dc>
 80011c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	dd23      	ble.n	800121a <setSpeed+0x222>
	{
		acc_sum = ROBOT_MAX_LINEAR_ACC;
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <setSpeed+0x2e0>)
 80011d4:	61bb      	str	r3, [r7, #24]
		Ax = norm_Ax * acc_sum;
 80011d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80011da:	edd7 7a06 	vldr	s15, [r7, #24]
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	edc7 7a08 	vstr	s15, [r7, #32]
		Ay = norm_Ay * acc_sum;
 80011e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	edc7 7a07 	vstr	s15, [r7, #28]
		
		v_vel[0] = prv_Vx + Ax;
 80011f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <setSpeed+0x2d4>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
		v_vel[1] = prv_Vy + Ay;
 8001208:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <setSpeed+0x2d4>)
 8001216:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	
	for (uint8_t i = 0; i < 4; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001220:	e04b      	b.n	80012ba <setSpeed+0x2c2>
	{
		/* Temporal speed variable. Calculate each wheel speed respect to robot kinematic model */
		float t_vel = 0;
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 8001228:	2300      	movs	r3, #0
 800122a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800122e:	e020      	b.n	8001272 <setSpeed+0x27a>
		{
			t_vel += kinematic[i][j] * v_vel[j];
 8001230:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001234:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001238:	4828      	ldr	r0, [pc, #160]	; (80012dc <setSpeed+0x2e4>)
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	440b      	add	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4403      	add	r3, r0
 8001246:	ed93 7a00 	vldr	s14, [r3]
 800124a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800124e:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <setSpeed+0x2d4>)
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		for (uint8_t j = 0; j < 3; j++)
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800126c:	3301      	adds	r3, #1
 800126e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001276:	2b02      	cmp	r3, #2
 8001278:	d9da      	bls.n	8001230 <setSpeed+0x238>
		}
		/* Check velocity direction */
		turn[i] = (t_vel > 0) ? WHEEL_P_ROTATION : WHEEL_N_ROTATION;
 800127a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800127e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	bfcc      	ite	gt
 8001288:	2301      	movgt	r3, #1
 800128a:	2300      	movle	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]

		/* Fill speed array. Speed in [m/s] */
		velocity[i] = t_vel;
 80012a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	4413      	add	r3, r2
 80012ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ae:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 80012b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012b4:	3301      	adds	r3, #1
 80012b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d9af      	bls.n	8001222 <setSpeed+0x22a>
	}
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200005f0 	.word	0x200005f0
 80012d0:	42c80000 	.word	0x42c80000
 80012d4:	3dcccccd 	.word	0x3dcccccd
 80012d8:	3dcccccd 	.word	0x3dcccccd
 80012dc:	2000035c 	.word	0x2000035c

080012e0 <getDribbler_speed>:

uint8_t getDribbler_speed(uint8_t *buffer)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t dribbler_vel = (buffer[0] & 0x1C) >> 2;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	109b      	asrs	r3, r3, #2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	73fb      	strb	r3, [r7, #15]

	return dribbler_vel;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <getKickerStatus>:

uint8_t getKickerStatus(uint8_t *buffer)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	/* Extract info from data packet */
	uint8_t kick_stat = buffer[0] & 0x02 ? 0x01 : 0x00;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	105b      	asrs	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]

	return kick_stat;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <BallDetectorFunction>:

uint16_t ball_range;
uint16_t ball_accum;
uint8_t ball_meas_set[10];

void BallDetectorFunction(void const * argument) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  //uint32_t timeToWait = osKernelSysTick();
  VL6180X_Init(&range_sensor, &hi2c3, VL6180X_DEFAULT_I2C_ADDR);
 8001330:	2229      	movs	r2, #41	; 0x29
 8001332:	4928      	ldr	r1, [pc, #160]	; (80013d4 <BallDetectorFunction+0xac>)
 8001334:	4828      	ldr	r0, [pc, #160]	; (80013d8 <BallDetectorFunction+0xb0>)
 8001336:	f007 fdd0 	bl	8008eda <VL6180X_Init>
  ball_range = VL6180X_ReadRange(&range_sensor);
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <BallDetectorFunction+0xb0>)
 800133c:	f007 fecf 	bl	80090de <VL6180X_ReadRange>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <BallDetectorFunction+0xb4>)
 8001346:	801a      	strh	r2, [r3, #0]
  memset(ball_meas_set, ball_range, 10);
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <BallDetectorFunction+0xb4>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	220a      	movs	r2, #10
 800134e:	4619      	mov	r1, r3
 8001350:	4823      	ldr	r0, [pc, #140]	; (80013e0 <BallDetectorFunction+0xb8>)
 8001352:	f007 ff29 	bl	80091a8 <memset>

  for (;;) {
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 8001356:	4820      	ldr	r0, [pc, #128]	; (80013d8 <BallDetectorFunction+0xb0>)
 8001358:	f007 fec1 	bl	80090de <VL6180X_ReadRange>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <BallDetectorFunction+0xb8>)
 8001362:	701a      	strb	r2, [r3, #0]
    ball_accum = ball_meas_set[0];
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <BallDetectorFunction+0xb8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <BallDetectorFunction+0xbc>)
 800136c:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 9; i > 0; i--) {
 800136e:	2309      	movs	r3, #9
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e013      	b.n	800139c <BallDetectorFunction+0x74>
      ball_accum += ball_meas_set[i];
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <BallDetectorFunction+0xb8>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <BallDetectorFunction+0xbc>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <BallDetectorFunction+0xbc>)
 8001386:	801a      	strh	r2, [r3, #0]
      ball_meas_set[i] = ball_meas_set[i - 1];
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	1e5a      	subs	r2, r3, #1
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	4914      	ldr	r1, [pc, #80]	; (80013e0 <BallDetectorFunction+0xb8>)
 8001390:	5c89      	ldrb	r1, [r1, r2]
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <BallDetectorFunction+0xb8>)
 8001394:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 9; i > 0; i--) {
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3b01      	subs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1e8      	bne.n	8001374 <BallDetectorFunction+0x4c>
    }
    ball_range = ball_accum / 10;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <BallDetectorFunction+0xbc>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <BallDetectorFunction+0xc0>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <BallDetectorFunction+0xb4>)
 80013b2:	801a      	strh	r2, [r3, #0]
    if (ball_range < VL6180X_THRESHOLD) {
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <BallDetectorFunction+0xb4>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	2b40      	cmp	r3, #64	; 0x40
 80013ba:	d803      	bhi.n	80013c4 <BallDetectorFunction+0x9c>
      ball_posession = 0x01;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <BallDetectorFunction+0xc4>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e002      	b.n	80013ca <BallDetectorFunction+0xa2>
    }
    else ball_posession = 0x00;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <BallDetectorFunction+0xc4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f004 f952 	bl	8005674 <osDelay>
    ball_meas_set[0] = VL6180X_ReadRange(&range_sensor);
 80013d0:	e7c1      	b.n	8001356 <BallDetectorFunction+0x2e>
 80013d2:	bf00      	nop
 80013d4:	20000140 	.word	0x20000140
 80013d8:	200005dc 	.word	0x200005dc
 80013dc:	200005fc 	.word	0x200005fc
 80013e0:	20000600 	.word	0x20000600
 80013e4:	200005fe 	.word	0x200005fe
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	200005ec 	.word	0x200005ec

080013f0 <DriveFunction>:
	*/

osEvent kick_event;
/* USER CODE END Header_DriveFunction */
void DriveFunction(void const * argument)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b098      	sub	sp, #96	; 0x60
 80013f4:	af06      	add	r7, sp, #24
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Init PID sampler */
	uint32_t timeToWait = osKernelSysTick();
 80013f8:	f004 f905 	bl	8005606 <osKernelSysTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
	/* Init robot_id */
	robot_id = Board_GetID();
 8001400:	f007 f818 	bl	8008434 <Board_GetID>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4bbd      	ldr	r3, [pc, #756]	; (8001700 <DriveFunction+0x310>)
 800140a:	801a      	strh	r2, [r3, #0]
	
	/* Init wheels motors DAC: 2.0[V] ref */
	MAX581x_Handler_t driveDAC;
	MAX581x_Init(&driveDAC, &hi2c1, MAX581x_REF_20);
 800140c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001410:	2202      	movs	r2, #2
 8001412:	49bc      	ldr	r1, [pc, #752]	; (8001704 <DriveFunction+0x314>)
 8001414:	4618      	mov	r0, r3
 8001416:	f006 fe99 	bl	800814c <MAX581x_Init>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_A, 0.0);
 800141a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f006 fee1 	bl	80081ea <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_B, 0.0);
 8001428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f006 feda 	bl	80081ea <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_C, 0.0);
 8001436:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800143a:	2200      	movs	r2, #0
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f006 fed3 	bl	80081ea <MAX581x_Code>
	MAX581x_Code(&driveDAC, MAX581x_OUTPUT_D, 0.0);
 8001444:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001448:	2200      	movs	r2, #0
 800144a:	2103      	movs	r1, #3
 800144c:	4618      	mov	r0, r3
 800144e:	f006 fecc 	bl	80081ea <MAX581x_Code>
	
	/* Init dribbler motor DAC: 2.0[V] ref */
	MAX581x_Handler_t dribblerDAC;
	MAX581x_Init(&dribblerDAC, &hi2c2, MAX581x_REF_20);
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2202      	movs	r2, #2
 8001458:	49ab      	ldr	r1, [pc, #684]	; (8001708 <DriveFunction+0x318>)
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fe76 	bl	800814c <MAX581x_Init>
	MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, 0.0);
 8001460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 febe 	bl	80081ea <MAX581x_Code>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_8, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	48a5      	ldr	r0, [pc, #660]	; (800170c <DriveFunction+0x31c>)
 8001476:	f001 f91f 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_7, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	48a3      	ldr	r0, [pc, #652]	; (800170c <DriveFunction+0x31c>)
 8001480:	f001 f91a 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_6, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	48a0      	ldr	r0, [pc, #640]	; (800170c <DriveFunction+0x31c>)
 800148a:	f001 f915 	bl	80026b8 <HAL_GPIO_WritePin>
	
	/* Config motors GPIO and TIM */
	/* Motor 1 */
	motor[0].enablePin.GPIOx = GPIOA;
 800148e:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <DriveFunction+0x320>)
 8001490:	4aa0      	ldr	r2, [pc, #640]	; (8001714 <DriveFunction+0x324>)
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
	motor[0].enablePin.GPIO_Pin = GPIO_PIN_10;
 8001494:	4b9e      	ldr	r3, [pc, #632]	; (8001710 <DriveFunction+0x320>)
 8001496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	motor[0].dirPin.GPIOx = GPIOA;
 800149e:	4b9c      	ldr	r3, [pc, #624]	; (8001710 <DriveFunction+0x320>)
 80014a0:	4a9c      	ldr	r2, [pc, #624]	; (8001714 <DriveFunction+0x324>)
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c
	motor[0].dirPin.GPIO_Pin = GPIO_PIN_9;
 80014a4:	4b9a      	ldr	r3, [pc, #616]	; (8001710 <DriveFunction+0x320>)
 80014a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	motor[0].brakePin.GPIOx = GPIOA;
 80014ae:	4b98      	ldr	r3, [pc, #608]	; (8001710 <DriveFunction+0x320>)
 80014b0:	4a98      	ldr	r2, [pc, #608]	; (8001714 <DriveFunction+0x324>)
 80014b2:	665a      	str	r2, [r3, #100]	; 0x64
	motor[0].brakePin.GPIO_Pin = GPIO_PIN_8;
 80014b4:	4b96      	ldr	r3, [pc, #600]	; (8001710 <DriveFunction+0x320>)
 80014b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	
	motor[0].encoder.count = &TIM3->CNT;
 80014be:	4b94      	ldr	r3, [pc, #592]	; (8001710 <DriveFunction+0x320>)
 80014c0:	4a95      	ldr	r2, [pc, #596]	; (8001718 <DriveFunction+0x328>)
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
	motor[0].encoder.oldPos = TIM3->CNT / ENCODER_CPR;
 80014c4:	4b95      	ldr	r3, [pc, #596]	; (800171c <DriveFunction+0x32c>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80014d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001720 <DriveFunction+0x330>
 80014dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e0:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <DriveFunction+0x320>)
 80014e2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	motor[0].encoder.enable = ENCODER_STATUS_ENABLE;
 80014e6:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <DriveFunction+0x320>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	motor[0].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <DriveFunction+0x320>)
 80014f0:	4a8c      	ldr	r2, [pc, #560]	; (8001724 <DriveFunction+0x334>)
 80014f2:	64da      	str	r2, [r3, #76]	; 0x4c
	TIM3->CR1 = TIM_CR1_CEN;
 80014f4:	4b89      	ldr	r3, [pc, #548]	; (800171c <DriveFunction+0x32c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
	
	/* Motor 2 */
	motor[1].enablePin.GPIOx = GPIOC;
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <DriveFunction+0x320>)
 80014fc:	4a8a      	ldr	r2, [pc, #552]	; (8001728 <DriveFunction+0x338>)
 80014fe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	motor[1].enablePin.GPIO_Pin = GPIO_PIN_11;
 8001502:	4b83      	ldr	r3, [pc, #524]	; (8001710 <DriveFunction+0x320>)
 8001504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001508:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	motor[1].dirPin.GPIOx = GPIOC;
 800150c:	4b80      	ldr	r3, [pc, #512]	; (8001710 <DriveFunction+0x320>)
 800150e:	4a86      	ldr	r2, [pc, #536]	; (8001728 <DriveFunction+0x338>)
 8001510:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	motor[1].dirPin.GPIO_Pin = GPIO_PIN_12;
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <DriveFunction+0x320>)
 8001516:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800151a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	motor[1].brakePin.GPIOx = GPIOD;
 800151e:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <DriveFunction+0x320>)
 8001520:	4a82      	ldr	r2, [pc, #520]	; (800172c <DriveFunction+0x33c>)
 8001522:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	motor[1].brakePin.GPIO_Pin = GPIO_PIN_0;
 8001526:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <DriveFunction+0x320>)
 8001528:	2201      	movs	r2, #1
 800152a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	
	motor[1].encoder.count = &TIM8->CNT;
 800152e:	4b78      	ldr	r3, [pc, #480]	; (8001710 <DriveFunction+0x320>)
 8001530:	4a7f      	ldr	r2, [pc, #508]	; (8001730 <DriveFunction+0x340>)
 8001532:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	motor[1].encoder.oldPos = TIM8->CNT / ENCODER_CPR;
 8001536:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <DriveFunction+0x344>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001542:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001720 <DriveFunction+0x330>
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <DriveFunction+0x320>)
 8001554:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	motor[1].encoder.enable = ENCODER_STATUS_ENABLE;
 8001558:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <DriveFunction+0x320>)
 800155a:	2201      	movs	r2, #1
 800155c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	motor[1].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <DriveFunction+0x320>)
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <DriveFunction+0x334>)
 8001564:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	TIM8->CR1 = TIM_CR1_CEN;
 8001568:	4b72      	ldr	r3, [pc, #456]	; (8001734 <DriveFunction+0x344>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
	
	/* Motor 3 */
	motor[2].enablePin.GPIOx = GPIOK;
 800156e:	4b68      	ldr	r3, [pc, #416]	; (8001710 <DriveFunction+0x320>)
 8001570:	4a71      	ldr	r2, [pc, #452]	; (8001738 <DriveFunction+0x348>)
 8001572:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	motor[2].enablePin.GPIO_Pin = GPIO_PIN_7;
 8001576:	4b66      	ldr	r3, [pc, #408]	; (8001710 <DriveFunction+0x320>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	motor[2].dirPin.GPIOx = GPIOG;
 800157e:	4b64      	ldr	r3, [pc, #400]	; (8001710 <DriveFunction+0x320>)
 8001580:	4a6e      	ldr	r2, [pc, #440]	; (800173c <DriveFunction+0x34c>)
 8001582:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	motor[2].dirPin.GPIO_Pin = GPIO_PIN_15;
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <DriveFunction+0x320>)
 8001588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800158c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
	motor[2].brakePin.GPIOx = GPIOK;
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <DriveFunction+0x320>)
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <DriveFunction+0x348>)
 8001594:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	motor[2].brakePin.GPIO_Pin = GPIO_PIN_6;
 8001598:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <DriveFunction+0x320>)
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	
	motor[2].encoder.count = &TIM2->CNT;
 80015a0:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <DriveFunction+0x320>)
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <DriveFunction+0x350>)
 80015a4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	motor[2].encoder.oldPos = TIM2->CNT / ENCODER_CPR;
 80015a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80015ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015be:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001720 <DriveFunction+0x330>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <DriveFunction+0x320>)
 80015c8:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	motor[2].encoder.enable = ENCODER_STATUS_ENABLE;
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <DriveFunction+0x320>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	motor[2].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 80015d4:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <DriveFunction+0x320>)
 80015d6:	4a53      	ldr	r2, [pc, #332]	; (8001724 <DriveFunction+0x334>)
 80015d8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	TIM2->CR1 = TIM_CR1_CEN;
 80015dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
	
	/* Motor 4 */
	motor[3].enablePin.GPIOx = GPIOF;
 80015e4:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <DriveFunction+0x320>)
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <DriveFunction+0x354>)
 80015e8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	motor[3].enablePin.GPIO_Pin = GPIO_PIN_5;
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <DriveFunction+0x320>)
 80015ee:	2220      	movs	r2, #32
 80015f0:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	motor[3].dirPin.GPIOx = GPIOF;
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <DriveFunction+0x320>)
 80015f6:	4a53      	ldr	r2, [pc, #332]	; (8001744 <DriveFunction+0x354>)
 80015f8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	motor[3].dirPin.GPIO_Pin = GPIO_PIN_3;
 80015fc:	4b44      	ldr	r3, [pc, #272]	; (8001710 <DriveFunction+0x320>)
 80015fe:	2208      	movs	r2, #8
 8001600:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	motor[3].brakePin.GPIOx = GPIOF;
 8001604:	4b42      	ldr	r3, [pc, #264]	; (8001710 <DriveFunction+0x320>)
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <DriveFunction+0x354>)
 8001608:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	motor[3].brakePin.GPIO_Pin = GPIO_PIN_4;
 800160c:	4b40      	ldr	r3, [pc, #256]	; (8001710 <DriveFunction+0x320>)
 800160e:	2210      	movs	r2, #16
 8001610:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc

	motor[3].encoder.count = &TIM5->CNT;
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <DriveFunction+0x320>)
 8001616:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <DriveFunction+0x358>)
 8001618:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	motor[3].encoder.oldPos = TIM5->CNT / ENCODER_CPR;
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <DriveFunction+0x35c>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001628:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800162c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001630:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001720 <DriveFunction+0x330>
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <DriveFunction+0x320>)
 800163a:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
	motor[3].encoder.enable = ENCODER_STATUS_ENABLE;
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <DriveFunction+0x320>)
 8001640:	2201      	movs	r2, #1
 8001642:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	motor[3].encoder.minSpeed = WHEEL_MAX_SPEED_RAD * 0.01f;
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <DriveFunction+0x320>)
 8001648:	4a36      	ldr	r2, [pc, #216]	; (8001724 <DriveFunction+0x334>)
 800164a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	TIM5->CR1 = TIM_CR1_CEN;
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <DriveFunction+0x35c>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
	
	/* Config PID */
	PID_Params_t pidParams;
	pidParams.Kp = 12.0f;
 8001654:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <DriveFunction+0x360>)
 8001656:	60fb      	str	r3, [r7, #12]
	pidParams.Ki = 4.5f;
 8001658:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <DriveFunction+0x364>)
 800165a:	613b      	str	r3, [r7, #16]
	pidParams.Kd = 0.0f;
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
	pidParams.outputMax = (float)(/*WHEEL_MAX_SPEED_RAD * 10.0f*/ 4095.0f);
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <DriveFunction+0x368>)
 8001664:	61bb      	str	r3, [r7, #24]
	pidParams.outputMin = (float)(/*-WHEEL_MAX_SPEED_RAD * 10.0f*/ -4095.0f);
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <DriveFunction+0x36c>)
 8001668:	61fb      	str	r3, [r7, #28]
	pidParams.integralMax = pidParams.outputMax / 5.0f;
 800166a:	ed97 7a06 	vldr	s14, [r7, #24]
 800166e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001676:	edc7 7a08 	vstr	s15, [r7, #32]
	pidParams.sampleTime = PID_SAMPLE_TIME / 1000.0f;
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <DriveFunction+0x370>)
 800167c:	627b      	str	r3, [r7, #36]	; 0x24


	/* Enable motors and disable brake */
	for (uint8_t i = 0; i < 4; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001684:	e034      	b.n	80016f0 <DriveFunction+0x300>
	{
		Motor_Init(&motor[i], i, MOTOR_STATUS_ENABLE);
 8001686:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800168a:	4613      	mov	r3, r2
 800168c:	015b      	lsls	r3, r3, #5
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <DriveFunction+0x320>)
 8001694:	4413      	add	r3, r2
 8001696:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800169a:	2201      	movs	r2, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f006 ff6b 	bl	8008578 <Motor_Init>
		Motor_SetBrake(&motor[i], MOTOR_BRAKE_DISABLE);
 80016a2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80016a6:	4613      	mov	r3, r2
 80016a8:	015b      	lsls	r3, r3, #5
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <DriveFunction+0x320>)
 80016b0:	4413      	add	r3, r2
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 fff7 	bl	80086a8 <Motor_SetBrake>
		PID_Init(&motor[i].pid, pidParams, PID_STATUS_ENABLE);
 80016ba:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80016be:	4613      	mov	r3, r2
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <DriveFunction+0x320>)
 80016c8:	189d      	adds	r5, r3, r2
 80016ca:	2301      	movs	r3, #1
 80016cc:	9304      	str	r3, [sp, #16]
 80016ce:	466c      	mov	r4, sp
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e0:	4628      	mov	r0, r5
 80016e2:	f006 fdc5 	bl	8008270 <PID_Init>
	for (uint8_t i = 0; i < 4; i++)
 80016e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016ea:	3301      	adds	r3, #1
 80016ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80016f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d9c6      	bls.n	8001686 <DriveFunction+0x296>

	//Motor_Enable(&motor[0], MOTOR_STATUS_ENABLE);
	/* Infinite loop */
	for(;;)
	{						
		for (uint8_t i = 0; i < 4; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80016fe:	e059      	b.n	80017b4 <DriveFunction+0x3c4>
 8001700:	2000057c 	.word	0x2000057c
 8001704:	20000098 	.word	0x20000098
 8001708:	200000ec 	.word	0x200000ec
 800170c:	40022400 	.word	0x40022400
 8001710:	2000038c 	.word	0x2000038c
 8001714:	40020000 	.word	0x40020000
 8001718:	40000424 	.word	0x40000424
 800171c:	40000400 	.word	0x40000400
 8001720:	45000000 	.word	0x45000000
 8001724:	3f714639 	.word	0x3f714639
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40010424 	.word	0x40010424
 8001734:	40010400 	.word	0x40010400
 8001738:	40022800 	.word	0x40022800
 800173c:	40021800 	.word	0x40021800
 8001740:	40000024 	.word	0x40000024
 8001744:	40021400 	.word	0x40021400
 8001748:	40000c24 	.word	0x40000c24
 800174c:	40000c00 	.word	0x40000c00
 8001750:	41400000 	.word	0x41400000
 8001754:	40900000 	.word	0x40900000
 8001758:	457ff000 	.word	0x457ff000
 800175c:	c57ff000 	.word	0xc57ff000
 8001760:	3a83126f 	.word	0x3a83126f
		{
			/* Execute open loop (Motor_OLDrive) or closed loop (Motor_CLDrive) routine */
			Motor_CLDrive(&motor[i], &driveDAC, speed[i]);
 8001764:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001768:	4613      	mov	r3, r2
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4a2a      	ldr	r2, [pc, #168]	; (800181c <DriveFunction+0x42c>)
 8001772:	441a      	add	r2, r3
 8001774:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001778:	4929      	ldr	r1, [pc, #164]	; (8001820 <DriveFunction+0x430>)
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f006 ff15 	bl	80085bc <Motor_CLDrive>
			
			/* TODO: make dribbler files, variable speeds */
			MAX581x_Code(&dribblerDAC, MAX581x_OUTPUT_A, Dribbler_SpeedSet[dribbler_sel]);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <DriveFunction+0x434>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <DriveFunction+0x438>)
 800179a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 fd20 	bl	80081ea <MAX581x_Code>
		for (uint8_t i = 0; i < 4; i++)
 80017aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017ae:	3301      	adds	r3, #1
 80017b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80017b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d9d3      	bls.n	8001764 <DriveFunction+0x374>
		}

    if(ball_posession && kick_sel && kick_flag == KICKER_CHARGED) {
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <DriveFunction+0x43c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01d      	beq.n	8001800 <DriveFunction+0x410>
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <DriveFunction+0x440>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d019      	beq.n	8001800 <DriveFunction+0x410>
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <DriveFunction+0x444>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d115      	bne.n	8001800 <DriveFunction+0x410>
      osMutexWait(kickFlagHandle, osWaitForever);
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <DriveFunction+0x448>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 ff69 	bl	80056b4 <osMutexWait>
      kick_flag = KICKER_START;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <DriveFunction+0x444>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	701a      	strb	r2, [r3, #0]
      osMutexRelease(kickFlagHandle);
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <DriveFunction+0x448>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 ffaf 	bl	8005750 <osMutexRelease>
      osMessagePut(kickQueueHandle, 0, 0);
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <DriveFunction+0x44c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fff0 	bl	80057e0 <osMessagePut>
    }   
		
		osMessagePut(nrf24CheckHandle, 0, 0);
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <DriveFunction+0x450>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f003 ffe9 	bl	80057e0 <osMessagePut>
		osDelayUntil(&timeToWait, (uint32_t)PID_SAMPLE_TIME);
 800180e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f004 f897 	bl	8005948 <osDelayUntil>
		for (uint8_t i = 0; i < 4; i++)
 800181a:	e76d      	b.n	80016f8 <DriveFunction+0x308>
 800181c:	2000038c 	.word	0x2000038c
 8001820:	2000034c 	.word	0x2000034c
 8001824:	2000057e 	.word	0x2000057e
 8001828:	080092b8 	.word	0x080092b8
 800182c:	200005ec 	.word	0x200005ec
 8001830:	2000057f 	.word	0x2000057f
 8001834:	20000580 	.word	0x20000580
 8001838:	20000338 	.word	0x20000338
 800183c:	20000334 	.word	0x20000334
 8001840:	20000340 	.word	0x20000340

08001844 <RadioFunction>:
* @retval None
*/

/* USER CODE END Header_RadioFunction */
void RadioFunction(void const * argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af02      	add	r7, sp, #8
 800184a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN RadioFunction */
  nRF24_HW_Init(&nrf_device, &hspi1, GPIOG, GPIO_PIN_10, GPIOG, GPIO_PIN_9);
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <RadioFunction+0x10c>)
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185a:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <RadioFunction+0x10c>)
 800185c:	493d      	ldr	r1, [pc, #244]	; (8001954 <RadioFunction+0x110>)
 800185e:	483e      	ldr	r0, [pc, #248]	; (8001958 <RadioFunction+0x114>)
 8001860:	f006 ffb5 	bl	80087ce <nRF24_HW_Init>
  nRF24_Init(&nrf_device);
 8001864:	483c      	ldr	r0, [pc, #240]	; (8001958 <RadioFunction+0x114>)
 8001866:	f007 f875 	bl	8008954 <nRF24_Init>
  nRF24_SetAddr(&nrf_device, nRF24_PIPE0, rx_node_addr);
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <RadioFunction+0x118>)
 800186c:	2100      	movs	r1, #0
 800186e:	483a      	ldr	r0, [pc, #232]	; (8001958 <RadioFunction+0x114>)
 8001870:	f007 f92c 	bl	8008acc <nRF24_SetAddr>
  nRF24_SetRFChannel(&nrf_device, nRF24L01_SYSMIC_CHANNEL);
 8001874:	216a      	movs	r1, #106	; 0x6a
 8001876:	4838      	ldr	r0, [pc, #224]	; (8001958 <RadioFunction+0x114>)
 8001878:	f007 f917 	bl	8008aaa <nRF24_SetRFChannel>
  nRF24_SetRXPipe(&nrf_device, nRF24_PIPE0, nRF24_AA_OFF, 30);
 800187c:	231e      	movs	r3, #30
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	4835      	ldr	r0, [pc, #212]	; (8001958 <RadioFunction+0x114>)
 8001884:	f007 f9d0 	bl	8008c28 <nRF24_SetRXPipe>
  nRF24_DisableAA(&nrf_device, nRF24_PIPETX);
 8001888:	2106      	movs	r1, #6
 800188a:	4833      	ldr	r0, [pc, #204]	; (8001958 <RadioFunction+0x114>)
 800188c:	f007 fa28 	bl	8008ce0 <nRF24_DisableAA>
  nRF24_SetPowerMode(&nrf_device, nRF24_PWR_UP);
 8001890:	2102      	movs	r1, #2
 8001892:	4831      	ldr	r0, [pc, #196]	; (8001958 <RadioFunction+0x114>)
 8001894:	f007 f8c3 	bl	8008a1e <nRF24_SetPowerMode>
  nRF24_SetOperationalMode(&nrf_device, nRF24_MODE_RX);
 8001898:	2101      	movs	r1, #1
 800189a:	482f      	ldr	r0, [pc, #188]	; (8001958 <RadioFunction+0x114>)
 800189c:	f007 f8e1 	bl	8008a62 <nRF24_SetOperationalMode>
  nRF24_RX_ON(&nrf_device);
 80018a0:	2101      	movs	r1, #1
 80018a2:	482d      	ldr	r0, [pc, #180]	; (8001958 <RadioFunction+0x114>)
 80018a4:	f006 ff6f 	bl	8008786 <nRF24_CE_State>
	checkSPI = nRF24_Check();
	memset(rxAddr, 0xE7, 5);
	nRF24_SetAddr(0, rxAddr);
	*/
	
	memset(nrf_device.rx_data, 0, 30);
 80018a8:	221e      	movs	r2, #30
 80018aa:	2100      	movs	r1, #0
 80018ac:	482c      	ldr	r0, [pc, #176]	; (8001960 <RadioFunction+0x11c>)
 80018ae:	f007 fc7b 	bl	80091a8 <memset>
	/* Infinite loop */
	for(;;)
	{
		osMessageGet(nrf24CheckHandle, osWaitForever);
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <RadioFunction+0x120>)
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	463b      	mov	r3, r7
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ffcf 	bl	8005860 <osMessageGet>
		status = nRF24_GetStatus(&nrf_device);
 80018c2:	4825      	ldr	r0, [pc, #148]	; (8001958 <RadioFunction+0x114>)
 80018c4:	f007 fa37 	bl	8008d36 <nRF24_GetStatus>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <RadioFunction+0x124>)
 80018ce:	701a      	strb	r2, [r3, #0]
		
		//if(nRF24_GetStatus_RXFIFO() == nRF24_STATUS_RXFIFO_DATA)
		if(status & nRF24_FLAG_RX_DR)
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <RadioFunction+0x124>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ea      	beq.n	80018b2 <RadioFunction+0x6e>
		{
			nRF24_ReadPayload(&nrf_device, nrf_device.rx_data, &rx_len);
 80018dc:	4a23      	ldr	r2, [pc, #140]	; (800196c <RadioFunction+0x128>)
 80018de:	4920      	ldr	r1, [pc, #128]	; (8001960 <RadioFunction+0x11c>)
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <RadioFunction+0x114>)
 80018e2:	f007 fa67 	bl	8008db4 <nRF24_ReadPayload>
			nRF24_FlushRX(&nrf_device);
 80018e6:	481c      	ldr	r0, [pc, #112]	; (8001958 <RadioFunction+0x114>)
 80018e8:	f007 fa3f 	bl	8008d6a <nRF24_FlushRX>
			nRF24_ClearIRQFlags(&nrf_device);
 80018ec:	481a      	ldr	r0, [pc, #104]	; (8001958 <RadioFunction+0x114>)
 80018ee:	f007 fa49 	bl	8008d84 <nRF24_ClearIRQFlags>
						
			/* Obtain speed from nrf24L01+ packet */
			setSpeed(nrf_device.rx_data + 5 * robot_id, speed, direction);
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <RadioFunction+0x12c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <RadioFunction+0x11c>)
 8001902:	4413      	add	r3, r2
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <RadioFunction+0x130>)
 8001906:	491c      	ldr	r1, [pc, #112]	; (8001978 <RadioFunction+0x134>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fb75 	bl	8000ff8 <setSpeed>
			dribbler_sel = getDribbler_speed(nrf_device.rx_data + 5 * robot_id);
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <RadioFunction+0x12c>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	461a      	mov	r2, r3
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <RadioFunction+0x11c>)
 800191e:	4413      	add	r3, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fcdd 	bl	80012e0 <getDribbler_speed>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <RadioFunction+0x138>)
 800192c:	701a      	strb	r2, [r3, #0]
			kick_sel = getKickerStatus(nrf_device.rx_data + 5 * robot_id);		
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <RadioFunction+0x12c>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	461a      	mov	r2, r3
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <RadioFunction+0x11c>)
 800193e:	4413      	add	r3, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fcdf 	bl	8001304 <getKickerStatus>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <RadioFunction+0x13c>)
 800194c:	701a      	strb	r2, [r3, #0]
		osMessageGet(nrf24CheckHandle, osWaitForever);
 800194e:	e7b0      	b.n	80018b2 <RadioFunction+0x6e>
 8001950:	40021800 	.word	0x40021800
 8001954:	20000194 	.word	0x20000194
 8001958:	20000584 	.word	0x20000584
 800195c:	20000000 	.word	0x20000000
 8001960:	200005ba 	.word	0x200005ba
 8001964:	20000340 	.word	0x20000340
 8001968:	20000345 	.word	0x20000345
 800196c:	20000344 	.word	0x20000344
 8001970:	2000057c 	.word	0x2000057c
 8001974:	20000348 	.word	0x20000348
 8001978:	2000034c 	.word	0x2000034c
 800197c:	2000057e 	.word	0x2000057e
 8001980:	2000057f 	.word	0x2000057f

08001984 <KickFunction>:
* @retval None
*/
osEvent kicker_side;
/* USER CODE END Header_KickFunction */
void KickFunction(void const * argument)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN KickFunction */
  /* Infinite loop */
  for(;;)
  {

    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2110      	movs	r1, #16
 8001990:	4826      	ldr	r0, [pc, #152]	; (8001a2c <KickFunction+0xa8>)
 8001992:	f000 fe91 	bl	80026b8 <HAL_GPIO_WritePin>
    osDelay(4000);
 8001996:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800199a:	f003 fe6b 	bl	8005674 <osDelay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2110      	movs	r1, #16
 80019a2:	4822      	ldr	r0, [pc, #136]	; (8001a2c <KickFunction+0xa8>)
 80019a4:	f000 fe88 	bl	80026b8 <HAL_GPIO_WritePin>

    osMutexWait(kickFlagHandle, osWaitForever);
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <KickFunction+0xac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fe7f 	bl	80056b4 <osMutexWait>
    kick_flag = KICKER_CHARGED;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <KickFunction+0xb0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    osMutexRelease(kickFlagHandle);
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <KickFunction+0xac>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fec5 	bl	8005750 <osMutexRelease>

		kicker_side = osMessageGet(kickQueueHandle, osWaitForever);
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <KickFunction+0xb4>)
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	4c1c      	ldr	r4, [pc, #112]	; (8001a3c <KickFunction+0xb8>)
 80019cc:	463b      	mov	r3, r7
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 ff44 	bl	8005860 <osMessageGet>
 80019d8:	463b      	mov	r3, r7
 80019da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019de:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e8:	4815      	ldr	r0, [pc, #84]	; (8001a40 <KickFunction+0xbc>)
 80019ea:	f000 fe65 	bl	80026b8 <HAL_GPIO_WritePin>
		osDelay(10);
 80019ee:	200a      	movs	r0, #10
 80019f0:	f003 fe40 	bl	8005674 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fa:	4811      	ldr	r0, [pc, #68]	; (8001a40 <KickFunction+0xbc>)
 80019fc:	f000 fe5c 	bl	80026b8 <HAL_GPIO_WritePin>

		osMutexWait(kickFlagHandle, osWaitForever);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <KickFunction+0xac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fe53 	bl	80056b4 <osMutexWait>
    kick_flag = KICKER_DISCHARGED;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <KickFunction+0xb0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
    osMutexRelease(kickFlagHandle);
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <KickFunction+0xac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fe99 	bl	8005750 <osMutexRelease>

		kick_count++;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <KickFunction+0xc0>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <KickFunction+0xc0>)
 8001a28:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_4, GPIO_PIN_SET);
 8001a2a:	e7af      	b.n	800198c <KickFunction+0x8>
 8001a2c:	40022400 	.word	0x40022400
 8001a30:	20000338 	.word	0x20000338
 8001a34:	20000580 	.word	0x20000580
 8001a38:	20000334 	.word	0x20000334
 8001a3c:	2000060c 	.word	0x2000060c
 8001a40:	40021400 	.word	0x40021400
 8001a44:	20000582 	.word	0x20000582

08001a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a5a:	f000 fb43 	bl	80020e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40010000 	.word	0x40010000

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	f06f 0001 	mvn.w	r0, #1
 8001aba:	f000 fc0f 	bl	80022dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0b2      	sub	sp, #200	; 0xc8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	2290      	movs	r2, #144	; 0x90
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f007 fb5b 	bl	80091a8 <memset>
  if(hi2c->Instance==I2C1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_I2C_MspInit+0x1c0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d13d      	bne.n	8001b78 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001afc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 f8c7 	bl	8003ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b18:	f7ff ffa8 	bl	8001a6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4a5b      	ldr	r2, [pc, #364]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6313      	str	r3, [r2, #48]	; 0x30
 8001b28:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b34:	23c0      	movs	r3, #192	; 0xc0
 8001b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b56:	4619      	mov	r1, r3
 8001b58:	484e      	ldr	r0, [pc, #312]	; (8001c94 <HAL_I2C_MspInit+0x1c8>)
 8001b5a:	f000 fbe9 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b5e:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b76:	e085      	b.n	8001c84 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a46      	ldr	r2, [pc, #280]	; (8001c98 <HAL_I2C_MspInit+0x1cc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13d      	bne.n	8001bfe <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 f884 	bl	8003ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001b9e:	f7ff ff65 	bl	8001a6c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a3a      	ldr	r2, [pc, #232]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	482f      	ldr	r0, [pc, #188]	; (8001c9c <HAL_I2C_MspInit+0x1d0>)
 8001be0:	f000 fba6 	bl	8002330 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
}
 8001bfc:	e042      	b.n	8001c84 <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <HAL_I2C_MspInit+0x1d4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d13d      	bne.n	8001c84 <HAL_I2C_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 f841 	bl	8003ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_MspInit+0x15c>
      Error_Handler();
 8001c24:	f7ff ff22 	bl	8001a6c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c48:	2312      	movs	r3, #18
 8001c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c64:	4619      	mov	r1, r3
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <HAL_I2C_MspInit+0x1d8>)
 8001c68:	f000 fb62 	bl	8002330 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_I2C_MspInit+0x1c4>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	37c8      	adds	r7, #200	; 0xc8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40005800 	.word	0x40005800
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40005c00 	.word	0x40005c00
 8001ca4:	40021c00 	.word	0x40021c00

08001ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_SPI_MspInit+0x7c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d127      	bne.n	8001d1a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_SPI_MspInit+0x80>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_SPI_MspInit+0x80>)
 8001cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_SPI_MspInit+0x80>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_SPI_MspInit+0x80>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_SPI_MspInit+0x80>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_SPI_MspInit+0x80>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cfa:	23e0      	movs	r3, #224	; 0xe0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_SPI_MspInit+0x84>)
 8001d16:	f000 fb0b 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40013000 	.word	0x40013000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000

08001d30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b090      	sub	sp, #64	; 0x40
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d50:	d128      	bne.n	8001da4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d52:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d92:	2301      	movs	r3, #1
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4849      	ldr	r0, [pc, #292]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x194>)
 8001d9e:	f000 fac7 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001da2:	e089      	b.n	8001eb8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x198>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d128      	bne.n	8001e00 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a43      	ldr	r2, [pc, #268]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dde:	23c0      	movs	r3, #192	; 0xc0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dee:	2302      	movs	r3, #2
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4834      	ldr	r0, [pc, #208]	; (8001ecc <HAL_TIM_Encoder_MspInit+0x19c>)
 8001dfa:	f000 fa99 	bl	8002330 <HAL_GPIO_Init>
}
 8001dfe:	e05b      	b.n	8001eb8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d129      	bne.n	8001e5e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e54:	4619      	mov	r1, r3
 8001e56:	481f      	ldr	r0, [pc, #124]	; (8001ed4 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001e58:	f000 fa6a 	bl	8002330 <HAL_GPIO_Init>
}
 8001e5c:	e02c      	b.n	8001eb8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d127      	bne.n	8001eb8 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	6453      	str	r3, [r2, #68]	; 0x44
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x190>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e98:	2360      	movs	r3, #96	; 0x60
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480a      	ldr	r0, [pc, #40]	; (8001edc <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001eb4:	f000 fa3c 	bl	8002330 <HAL_GPIO_Init>
}
 8001eb8:	bf00      	nop
 8001eba:	3740      	adds	r7, #64	; 0x40
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40021c00 	.word	0x40021c00
 8001ed8:	40010400 	.word	0x40010400
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_InitTick+0xd0>)
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <HAL_InitTick+0xd0>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6453      	str	r3, [r2, #68]	; 0x44
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_InitTick+0xd0>)
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f08:	f107 020c 	add.w	r2, r7, #12
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 fe92 	bl	8003c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f18:	f001 fe7c 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_InitTick+0xd4>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0c9b      	lsrs	r3, r3, #18
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f32:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_InitTick+0xdc>)
 8001f34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f56:	4818      	ldr	r0, [pc, #96]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f58:	f002 ff10 	bl	8004d7c <HAL_TIM_Base_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11b      	bne.n	8001fa2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f6a:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <HAL_InitTick+0xd8>)
 8001f6c:	f002 ff68 	bl	8004e40 <HAL_TIM_Base_Start_IT>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d111      	bne.n	8001fa2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f7e:	2019      	movs	r0, #25
 8001f80:	f000 f9c8 	bl	8002314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	d808      	bhi.n	8001f9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	2019      	movs	r0, #25
 8001f90:	f000 f9a4 	bl	80022dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_InitTick+0xe0>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e002      	b.n	8001fa2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3730      	adds	r7, #48	; 0x30
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	431bde83 	.word	0x431bde83
 8001fb8:	20000618 	.word	0x20000618
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <MemManage_Handler+0x4>

08001fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ffe:	f003 f83d 	bl	800507c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000618 	.word	0x20000618

0800200c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <SystemInit+0x5c>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <SystemInit+0x5c>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <SystemInit+0x60>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <SystemInit+0x60>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <SystemInit+0x60>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <SystemInit+0x60>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	490d      	ldr	r1, [pc, #52]	; (800206c <SystemInit+0x60>)
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <SystemInit+0x64>)
 800203a:	4013      	ands	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <SystemInit+0x60>)
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <SystemInit+0x68>)
 8002042:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <SystemInit+0x60>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a08      	ldr	r2, [pc, #32]	; (800206c <SystemInit+0x60>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <SystemInit+0x60>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SystemInit+0x5c>)
 8002058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800205c:	609a      	str	r2, [r3, #8]
#endif
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00
 800206c:	40023800 	.word	0x40023800
 8002070:	fef6ffff 	.word	0xfef6ffff
 8002074:	24003010 	.word	0x24003010

08002078 <Reset_Handler>:
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b0 <LoopFillZerobss+0x12>
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <LoopFillZerobss+0x16>)
 800207e:	490e      	ldr	r1, [pc, #56]	; (80020b8 <LoopFillZerobss+0x1a>)
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <LoopFillZerobss+0x1e>)
 8002082:	2300      	movs	r3, #0
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:
 8002086:	58d4      	ldr	r4, [r2, r3]
 8002088:	50c4      	str	r4, [r0, r3]
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:
 800208c:	18c4      	adds	r4, r0, r3
 800208e:	428c      	cmp	r4, r1
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <LoopFillZerobss+0x22>)
 8002094:	4c0b      	ldr	r4, [pc, #44]	; (80020c4 <LoopFillZerobss+0x26>)
 8002096:	2300      	movs	r3, #0
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:
 800209e:	42a2      	cmp	r2, r4
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>
 80020a2:	f7ff ffb3 	bl	800200c <SystemInit>
 80020a6:	f007 f84d 	bl	8009144 <__libc_init_array>
 80020aa:	f7fe fa4b 	bl	8000544 <main>
 80020ae:	4770      	bx	lr
 80020b0:	20080000 	.word	0x20080000
 80020b4:	20000000 	.word	0x20000000
 80020b8:	2000007c 	.word	0x2000007c
 80020bc:	08009300 	.word	0x08009300
 80020c0:	2000007c 	.word	0x2000007c
 80020c4:	200043b4 	.word	0x200043b4

080020c8 <ADC_IRQHandler>:
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>

080020ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ce:	2003      	movs	r0, #3
 80020d0:	f000 f8f9 	bl	80022c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff ff03 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020da:	f7ff fccf 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010
 8002108:	20000664 	.word	0x20000664

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000664 	.word	0x20000664

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_Delay+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffde 	bl	800210c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000010 	.word	0x20000010

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <__NVIC_SetPriorityGrouping+0x40>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x40>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	05fa0000 	.word	0x05fa0000

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4c 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ee:	f7ff ff61 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7ff ffb1 	bl	8002260 <NVIC_EncodePriority>
 80022fe:	4602      	mov	r2, r0
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff80 	bl	800220c <__NVIC_SetPriority>
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff54 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e175      	b.n	800263c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8164 	bne.w	8002636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <HAL_GPIO_Init+0x56>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d130      	bne.n	80023e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0201 	and.w	r2, r3, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d017      	beq.n	8002424 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d123      	bne.n	8002478 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80be 	beq.w	8002636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_GPIO_Init+0x324>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a65      	ldr	r2, [pc, #404]	; (8002654 <HAL_GPIO_Init+0x324>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_GPIO_Init+0x324>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024d2:	4a61      	ldr	r2, [pc, #388]	; (8002658 <HAL_GPIO_Init+0x328>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_GPIO_Init+0x32c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d037      	beq.n	800256e <HAL_GPIO_Init+0x23e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_GPIO_Init+0x330>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_GPIO_Init+0x23a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_GPIO_Init+0x334>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02b      	beq.n	8002566 <HAL_GPIO_Init+0x236>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_GPIO_Init+0x338>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d025      	beq.n	8002562 <HAL_GPIO_Init+0x232>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a54      	ldr	r2, [pc, #336]	; (800266c <HAL_GPIO_Init+0x33c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01f      	beq.n	800255e <HAL_GPIO_Init+0x22e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a53      	ldr	r2, [pc, #332]	; (8002670 <HAL_GPIO_Init+0x340>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d019      	beq.n	800255a <HAL_GPIO_Init+0x22a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_GPIO_Init+0x344>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0x226>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a51      	ldr	r2, [pc, #324]	; (8002678 <HAL_GPIO_Init+0x348>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00d      	beq.n	8002552 <HAL_GPIO_Init+0x222>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a50      	ldr	r2, [pc, #320]	; (800267c <HAL_GPIO_Init+0x34c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <HAL_GPIO_Init+0x21e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4f      	ldr	r2, [pc, #316]	; (8002680 <HAL_GPIO_Init+0x350>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_GPIO_Init+0x21a>
 8002546:	2309      	movs	r3, #9
 8002548:	e012      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800254a:	230a      	movs	r3, #10
 800254c:	e010      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800254e:	2308      	movs	r3, #8
 8002550:	e00e      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002552:	2307      	movs	r3, #7
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002556:	2306      	movs	r3, #6
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <HAL_GPIO_Init+0x328>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <HAL_GPIO_Init+0x354>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a34      	ldr	r2, [pc, #208]	; (8002684 <HAL_GPIO_Init+0x354>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_GPIO_Init+0x354>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_GPIO_Init+0x354>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_GPIO_Init+0x354>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <HAL_GPIO_Init+0x354>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_GPIO_Init+0x354>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_GPIO_Init+0x354>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae86 	bls.w	8002350 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40021c00 	.word	0x40021c00
 800267c:	40022000 	.word	0x40022000
 8002680:	40022400 	.word	0x40022400
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e001      	b.n	80026aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026fc:	887a      	ldrh	r2, [r7, #2]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	041a      	lsls	r2, r3, #16
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43d9      	mvns	r1, r3
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	400b      	ands	r3, r1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff f9c0 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e006      	b.n	80027a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d104      	bne.n	80027ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_I2C_Init+0x11c>)
 80027c6:	430b      	orrs	r3, r1
 80027c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69d9      	ldr	r1, [r3, #28]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1a      	ldr	r2, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	02008000 	.word	0x02008000

08002840 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
 8002850:	4613      	mov	r3, r2
 8002852:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80da 	bne.w	8002a16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x30>
 800286c:	2302      	movs	r3, #2
 800286e:	e0d3      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002878:	f7ff fc48 	bl	800210c <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2319      	movs	r3, #25
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f9e6 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0be      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2210      	movs	r2, #16
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	893a      	ldrh	r2, [r7, #8]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	d90e      	bls.n	80028ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	22ff      	movs	r2, #255	; 0xff
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	8979      	ldrh	r1, [r7, #10]
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fbd0 	bl	8003088 <I2C_TransferConfig>
 80028e8:	e06c      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fbbf 	bl	8003088 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800290a:	e05b      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6a39      	ldr	r1, [r7, #32]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f9e3 	bl	8002cdc <I2C_WaitOnTXISFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e07b      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d034      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d130      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2200      	movs	r2, #0
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f975 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04d      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fb73 	bl	8003088 <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fb62 	bl	8003088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d19e      	bne.n	800290c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f9c2 	bl	8002d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e01a      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2220      	movs	r2, #32
 80029e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e4>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	80002000 	.word	0x80002000
 8002a24:	fe00e800 	.word	0xfe00e800

08002a28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	817b      	strh	r3, [r7, #10]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	f040 80db 	bne.w	8002c00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2C_Master_Receive+0x30>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0d4      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a60:	f7ff fb54 	bl	800210c <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2319      	movs	r3, #25
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8f2 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0bf      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2222      	movs	r2, #34	; 0x22
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	893a      	ldrh	r2, [r7, #8]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d90e      	bls.n	8002ad2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_I2C_Master_Receive+0x1e4>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fadc 	bl	8003088 <I2C_TransferConfig>
 8002ad0:	e06d      	b.n	8002bae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_I2C_Master_Receive+0x1e4>)
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 facb 	bl	8003088 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002af2:	e05c      	b.n	8002bae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f96b 	bl	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e07c      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d034      	beq.n	8002bae <HAL_I2C_Master_Receive+0x186>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d130      	bne.n	8002bae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f880 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e04d      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2bff      	cmp	r3, #255	; 0xff
 8002b6e:	d90e      	bls.n	8002b8e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa7e 	bl	8003088 <I2C_TransferConfig>
 8002b8c:	e00f      	b.n	8002bae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fa6d 	bl	8003088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d19d      	bne.n	8002af4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f8cd 	bl	8002d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e01a      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_I2C_Master_Receive+0x1e8>)
 8002be0:	400b      	ands	r3, r1
 8002be2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	80002400 	.word	0x80002400
 8002c10:	fe00e800 	.word	0xfe00e800

08002c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d103      	bne.n	8002c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d007      	beq.n	8002c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	619a      	str	r2, [r3, #24]
  }
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6c:	e022      	b.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d01e      	beq.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7ff fa49 	bl	800210c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d113      	bne.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e00f      	b.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d0cd      	beq.n	8002c6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ce8:	e02c      	b.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f8ea 	bl	8002ec8 <I2C_IsErrorOccurred>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e02a      	b.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d01e      	beq.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d06:	f7ff fa01 	bl	800210c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d113      	bne.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e007      	b.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d1cb      	bne.n	8002cea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d68:	e028      	b.n	8002dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8aa 	bl	8002ec8 <I2C_IsErrorOccurred>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e026      	b.n	8002dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff f9c5 	bl	800210c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e007      	b.n	8002dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d1cf      	bne.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de0:	e064      	b.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f86e 	bl	8002ec8 <I2C_IsErrorOccurred>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e062      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d138      	bne.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d105      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e04e      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d107      	bne.n	8002e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2210      	movs	r2, #16
 8002e32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2204      	movs	r2, #4
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
 8002e3a:	e002      	b.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2220      	movs	r2, #32
 8002e48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002e56:	400b      	ands	r3, r1
 8002e58:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e022      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7ff f949 	bl	800210c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d193      	bne.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	fe00e800 	.word	0xfe00e800

08002ec8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d068      	beq.n	8002fc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002efc:	e049      	b.n	8002f92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d045      	beq.n	8002f92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7ff f901 	bl	800210c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_IsErrorOccurred+0x54>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d13a      	bne.n	8002f92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3e:	d121      	bne.n	8002f84 <I2C_IsErrorOccurred+0xbc>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f46:	d01d      	beq.n	8002f84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d01a      	beq.n	8002f84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f5e:	f7ff f8d5 	bl	800210c <HAL_GetTick>
 8002f62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f64:	e00e      	b.n	8002f84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f66:	f7ff f8d1 	bl	800210c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b19      	cmp	r3, #25
 8002f72:	d907      	bls.n	8002f84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f043 0320 	orr.w	r3, r3, #32
 8002f7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f82:	e006      	b.n	8002f92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d1e9      	bne.n	8002f66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d003      	beq.n	8002fa8 <I2C_IsErrorOccurred+0xe0>
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0aa      	beq.n	8002efe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d103      	bne.n	8002fb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff fde9 	bl	8002c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <I2C_IsErrorOccurred+0x1bc>)
 800304e:	400b      	ands	r3, r1
 8003050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	fe00e800 	.word	0xfe00e800

08003088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	4613      	mov	r3, r2
 8003098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a0:	7a7b      	ldrb	r3, [r7, #9]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	0d5b      	lsrs	r3, r3, #21
 80030c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <I2C_TransferConfig+0x60>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	43db      	mvns	r3, r3
 80030cc:	ea02 0103 	and.w	r1, r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	03ff63ff 	.word	0x03ff63ff

080030ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d138      	bne.n	8003174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800310c:	2302      	movs	r3, #2
 800310e:	e032      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	d139      	bne.n	800320c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e033      	b.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2224      	movs	r2, #36	; 0x24
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800324a:	f7fe ff5f 	bl	800210c <HAL_GetTick>
 800324e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003250:	e009      	b.n	8003266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003252:	f7fe ff5b 	bl	800210c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003260:	d901      	bls.n	8003266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e022      	b.n	80032ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003272:	d1ee      	bne.n	8003252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003280:	f7fe ff44 	bl	800210c <HAL_GetTick>
 8003284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003286:	e009      	b.n	800329c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003288:	f7fe ff40 	bl	800210c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003296:	d901      	bls.n	800329c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e007      	b.n	80032ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a8:	d1ee      	bne.n	8003288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e29b      	b.n	800380a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8087 	beq.w	80033ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e0:	4b96      	ldr	r3, [pc, #600]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d00c      	beq.n	8003306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ec:	4b93      	ldr	r3, [pc, #588]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d112      	bne.n	800331e <HAL_RCC_OscConfig+0x62>
 80032f8:	4b90      	ldr	r3, [pc, #576]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d06c      	beq.n	80033ec <HAL_RCC_OscConfig+0x130>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d168      	bne.n	80033ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e275      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x7a>
 8003328:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a83      	ldr	r2, [pc, #524]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e02e      	b.n	8003394 <HAL_RCC_OscConfig+0xd8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x9c>
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7b      	ldr	r2, [pc, #492]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xd8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0xc0>
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a72      	ldr	r2, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xd8>
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6b      	ldr	r2, [pc, #428]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe feb6 	bl	800210c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe feb2 	bl	800210c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e229      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fea2 	bl	800210c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fe9e 	bl	800210c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e215      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x110>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d069      	beq.n	80034ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x190>
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x17a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1e9      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	493d      	ldr	r1, [pc, #244]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e040      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d023      	beq.n	800349c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a38      	ldr	r2, [pc, #224]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fe54 	bl	800210c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fe50 	bl	800210c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1c7      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4929      	ldr	r1, [pc, #164]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
 800349a:	e018      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe fe30 	bl	800210c <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b0:	f7fe fe2c 	bl	800210c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1a3      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d038      	beq.n	800354c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d019      	beq.n	8003516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	4a15      	ldr	r2, [pc, #84]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe fe0d 	bl	800210c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f6:	f7fe fe09 	bl	800210c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e180      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x23a>
 8003514:	e01a      	b.n	800354c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe fdf3 	bl	800210c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fdef 	bl	800210c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d903      	bls.n	8003540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e166      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
 800353c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ee      	bne.n	800352a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a4 	beq.w	80036a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355a:	4b8c      	ldr	r3, [pc, #560]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10d      	bne.n	8003582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a88      	ldr	r2, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b86      	ldr	r3, [pc, #536]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003582:	4b83      	ldr	r3, [pc, #524]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800358e:	4b80      	ldr	r3, [pc, #512]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7f      	ldr	r2, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fe fdb7 	bl	800210c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fe fdb3 	bl	800210c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	; 0x64
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e12a      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b4:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x31a>
 80035c8:	4b70      	ldr	r3, [pc, #448]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a6f      	ldr	r2, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	e02d      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x33c>
 80035de:	4b6b      	ldr	r3, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ea:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a67      	ldr	r2, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	e01c      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d10c      	bne.n	800361a <HAL_RCC_OscConfig+0x35e>
 8003600:	4b62      	ldr	r3, [pc, #392]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a61      	ldr	r2, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	4b5f      	ldr	r3, [pc, #380]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a5e      	ldr	r2, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	e00b      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
 800361a:	4b5c      	ldr	r3, [pc, #368]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a5b      	ldr	r2, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d015      	beq.n	8003666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe fd67 	bl	800210c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe fd63 	bl	800210c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0d8      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ee      	beq.n	8003642 <HAL_RCC_OscConfig+0x386>
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe fd51 	bl	800210c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fd4d 	bl	800210c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0c2      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	4b41      	ldr	r3, [pc, #260]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ee      	bne.n	800366e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a3c      	ldr	r2, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80ae 	beq.w	8003808 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d06d      	beq.n	8003794 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d14b      	bne.n	8003758 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fd1e 	bl	800210c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe fd1a 	bl	800210c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e091      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	3b01      	subs	r3, #1
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fcec 	bl	800210c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fce8 	bl	800210c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e05f      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x47c>
 8003756:	e057      	b.n	8003808 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fcd2 	bl	800210c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fcce 	bl	800210c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e045      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x4b0>
 800378a:	e03d      	b.n	8003808 <HAL_RCC_OscConfig+0x54c>
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_RCC_OscConfig+0x558>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d030      	beq.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d129      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d122      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d119      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d10f      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d0      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 020f 	bic.w	r2, r3, #15
 8003846:	4965      	ldr	r1, [pc, #404]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a58      	ldr	r2, [pc, #352]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d040      	beq.n	800393c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d115      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b41      	ldr	r3, [pc, #260]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e073      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4936      	ldr	r1, [pc, #216]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fe fbfe 	bl	800210c <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe fbfa 	bl	800210c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e053      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b27      	ldr	r3, [pc, #156]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d210      	bcs.n	800396c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 020f 	bic.w	r2, r3, #15
 8003952:	4922      	ldr	r1, [pc, #136]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f821 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x1cc>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1d0>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1d4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fa88 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00
 80039e0:	40023800 	.word	0x40023800
 80039e4:	080092c8 	.word	0x080092c8
 80039e8:	20000008 	.word	0x20000008
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b094      	sub	sp, #80	; 0x50
 80039f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
 80039fc:	2300      	movs	r3, #0
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	2300      	movs	r3, #0
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a08:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d00d      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x40>
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	f200 80e1 	bhi.w	8003bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x34>
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a22:	e0db      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a28:	e0db      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2a:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2e:	e0d8      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a30:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d063      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a62:	4622      	mov	r2, r4
 8003a64:	462b      	mov	r3, r5
 8003a66:	f04f 0000 	mov.w	r0, #0
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	0159      	lsls	r1, r3, #5
 8003a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a74:	0150      	lsls	r0, r2, #5
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	1a51      	subs	r1, r2, r1
 8003a7e:	6139      	str	r1, [r7, #16]
 8003a80:	4629      	mov	r1, r5
 8003a82:	eb63 0301 	sbc.w	r3, r3, r1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a94:	4659      	mov	r1, fp
 8003a96:	018b      	lsls	r3, r1, #6
 8003a98:	4651      	mov	r1, sl
 8003a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	018a      	lsls	r2, r1, #6
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac2:	4690      	mov	r8, r2
 8003ac4:	4699      	mov	r9, r3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	eb18 0303 	adds.w	r3, r8, r3
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	462b      	mov	r3, r5
 8003ad0:	eb49 0303 	adc.w	r3, r9, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	024b      	lsls	r3, r1, #9
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aec:	4621      	mov	r1, r4
 8003aee:	024a      	lsls	r2, r1, #9
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af6:	2200      	movs	r2, #0
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b00:	f7fc fb9e 	bl	8000240 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	e058      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	2200      	movs	r2, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	4611      	mov	r1, r2
 8003b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	f04f 0000 	mov.w	r0, #0
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	0159      	lsls	r1, r3, #5
 8003b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3a:	0150      	lsls	r0, r2, #5
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4641      	mov	r1, r8
 8003b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b46:	4649      	mov	r1, r9
 8003b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b60:	ebb2 040a 	subs.w	r4, r2, sl
 8003b64:	eb63 050b 	sbc.w	r5, r3, fp
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	00eb      	lsls	r3, r5, #3
 8003b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b76:	00e2      	lsls	r2, r4, #3
 8003b78:	4614      	mov	r4, r2
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	4643      	mov	r3, r8
 8003b7e:	18e3      	adds	r3, r4, r3
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	464b      	mov	r3, r9
 8003b84:	eb45 0303 	adc.w	r3, r5, r3
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b96:	4629      	mov	r1, r5
 8003b98:	028b      	lsls	r3, r1, #10
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	028a      	lsls	r2, r1, #10
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	61fa      	str	r2, [r7, #28]
 8003bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb4:	f7fc fb44 	bl	8000240 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3750      	adds	r7, #80	; 0x50
 8003be8:	46bd      	mov	sp, r7
 8003bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200

08003bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000008 	.word	0x20000008

08003c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0b5b      	lsrs	r3, r3, #13
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	080092d8 	.word	0x080092d8

08003c3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	220f      	movs	r2, #15
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCC_GetClockConfig+0x60>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cd2:	6093      	str	r3, [r2, #8]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cdc:	4964      	ldr	r1, [pc, #400]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d017      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	4959      	ldr	r1, [pc, #356]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d18:	d101      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d017      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	494a      	ldr	r1, [pc, #296]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 808b 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d90:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d9c:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da8:	f7fe f9b0 	bl	800210c <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fe f9ac 	bl	800210c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e38f      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d035      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d02e      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dec:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df6:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a1a      	ldr	r2, [pc, #104]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d114      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe f974 	bl	800210c <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe f970 	bl	800210c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e351      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ee      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e56:	d111      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e66:	400b      	ands	r3, r1
 8003e68:	4901      	ldr	r1, [pc, #4]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40007000 	.word	0x40007000
 8003e78:	0ffffcff 	.word	0x0ffffcff
 8003e7c:	4bac      	ldr	r3, [pc, #688]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4aab      	ldr	r2, [pc, #684]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e86:	6093      	str	r3, [r2, #8]
 8003e88:	4ba9      	ldr	r3, [pc, #676]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	49a6      	ldr	r1, [pc, #664]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea6:	4ba2      	ldr	r3, [pc, #648]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eac:	4aa0      	ldr	r2, [pc, #640]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003eb6:	4b9e      	ldr	r3, [pc, #632]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	499b      	ldr	r1, [pc, #620]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed4:	4b96      	ldr	r3, [pc, #600]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee2:	4993      	ldr	r1, [pc, #588]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ef6:	4b8e      	ldr	r3, [pc, #568]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f04:	498a      	ldr	r1, [pc, #552]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f18:	4b85      	ldr	r3, [pc, #532]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f26:	4982      	ldr	r1, [pc, #520]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4979      	ldr	r1, [pc, #484]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5c:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	4971      	ldr	r1, [pc, #452]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f023 020c 	bic.w	r2, r3, #12
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	4968      	ldr	r1, [pc, #416]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa0:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	4960      	ldr	r1, [pc, #384]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	4957      	ldr	r1, [pc, #348]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fe4:	4b52      	ldr	r3, [pc, #328]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	494f      	ldr	r1, [pc, #316]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004006:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	4946      	ldr	r1, [pc, #280]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004028:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	493e      	ldr	r1, [pc, #248]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004058:	4935      	ldr	r1, [pc, #212]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800407a:	492d      	ldr	r1, [pc, #180]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d011      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409c:	4924      	ldr	r1, [pc, #144]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ac:	d101      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ce:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040dc:	4914      	ldr	r1, [pc, #80]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004100:	490b      	ldr	r1, [pc, #44]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004124:	4902      	ldr	r1, [pc, #8]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800412c:	e002      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004140:	4b8a      	ldr	r3, [pc, #552]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004146:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	4986      	ldr	r1, [pc, #536]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004164:	4b81      	ldr	r3, [pc, #516]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004174:	497d      	ldr	r1, [pc, #500]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d006      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80d6 	beq.w	800433c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004190:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a75      	ldr	r2, [pc, #468]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd ffb6 	bl	800210c <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041a4:	f7fd ffb2 	bl	800210c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e195      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b6:	4b6d      	ldr	r3, [pc, #436]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d021      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11d      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041e4:	4b61      	ldr	r3, [pc, #388]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ea:	0e1b      	lsrs	r3, r3, #24
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	019a      	lsls	r2, r3, #6
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	071b      	lsls	r3, r3, #28
 800420a:	4958      	ldr	r1, [pc, #352]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423c:	d129      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800423e:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800424c:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	0f1b      	lsrs	r3, r3, #28
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	019a      	lsls	r2, r3, #6
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	493e      	ldr	r1, [pc, #248]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800427a:	4b3c      	ldr	r3, [pc, #240]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004280:	f023 021f 	bic.w	r2, r3, #31
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	3b01      	subs	r3, #1
 800428a:	4938      	ldr	r1, [pc, #224]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ac:	4b2f      	ldr	r3, [pc, #188]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	0f1b      	lsrs	r3, r3, #28
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	019a      	lsls	r2, r3, #6
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	431a      	orrs	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	4926      	ldr	r1, [pc, #152]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d011      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	019a      	lsls	r2, r3, #6
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	491a      	ldr	r1, [pc, #104]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004316:	f7fd fef9 	bl	800210c <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800431e:	f7fd fef5 	bl	800210c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b64      	cmp	r3, #100	; 0x64
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0d8      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 80ce 	bne.w	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a08      	ldr	r2, [pc, #32]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fd fedc 	bl	800210c <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004356:	e00b      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004358:	f7fd fed8 	bl	800210c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d904      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0bb      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004370:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437c:	d0ec      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02e      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d12a      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043a6:	4b51      	ldr	r3, [pc, #324]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043b4:	4b4d      	ldr	r3, [pc, #308]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	0f1b      	lsrs	r3, r3, #28
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	019a      	lsls	r2, r3, #6
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	071b      	lsls	r3, r3, #28
 80043da:	4944      	ldr	r1, [pc, #272]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043e2:	4b42      	ldr	r3, [pc, #264]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	493d      	ldr	r1, [pc, #244]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d022      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004410:	d11d      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	0e1b      	lsrs	r3, r3, #24
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004420:	4b32      	ldr	r3, [pc, #200]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	0f1b      	lsrs	r3, r3, #28
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	019a      	lsls	r2, r3, #6
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	431a      	orrs	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	071b      	lsls	r3, r3, #28
 8004446:	4929      	ldr	r1, [pc, #164]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d028      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004468:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	019a      	lsls	r2, r3, #6
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	4917      	ldr	r1, [pc, #92]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fd fe28 	bl	800210c <HAL_GetTick>
 80044bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044c0:	f7fd fe24 	bl	800210c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e007      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044de:	d1ef      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800

080044f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e09d      	b.n	800463e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004512:	d009      	beq.n	8004528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
 800451a:	e005      	b.n	8004528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fbb0 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004568:	d902      	bls.n	8004570 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e002      	b.n	8004576 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800457e:	d007      	beq.n	8004590 <HAL_SPI_Init+0xa0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	ea42 0103 	orr.w	r1, r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 0204 	and.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800460c:	ea42 0103 	orr.w	r1, r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08a      	sub	sp, #40	; 0x28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004654:	2301      	movs	r3, #1
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_SPI_TransmitReceive+0x26>
 8004668:	2302      	movs	r3, #2
 800466a:	e1fb      	b.n	8004a64 <HAL_SPI_TransmitReceive+0x41e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004674:	f7fd fd4a 	bl	800210c <HAL_GetTick>
 8004678:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004680:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004690:	7efb      	ldrb	r3, [r7, #27]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00e      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x6e>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469c:	d106      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x66>
 80046a6:	7efb      	ldrb	r3, [r7, #27]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d003      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80046b2:	e1cd      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x80>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x80>
 80046c0:	887b      	ldrh	r3, [r7, #2]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80046cc:	e1c0      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2205      	movs	r2, #5
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	887a      	ldrh	r2, [r7, #2]
 80046f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	887a      	ldrh	r2, [r7, #2]
 80046fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	887a      	ldrh	r2, [r7, #2]
 800470e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004724:	d802      	bhi.n	800472c <HAL_SPI_TransmitReceive+0xe6>
 8004726:	8a3b      	ldrh	r3, [r7, #16]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d908      	bls.n	800473e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	e007      	b.n	800474e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800474c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d007      	beq.n	800476c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d97c      	bls.n	8004870 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x13e>
 800477e:	8a7b      	ldrh	r3, [r7, #18]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d169      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a8:	e056      	b.n	8004858 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d11b      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x1aa>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_SPI_TransmitReceive+0x1aa>
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d113      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d11c      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x1f2>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	b292      	uxth	r2, r2
 8004816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004834:	2301      	movs	r3, #1
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004838:	f7fd fc68 	bl	800210c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004844:	429a      	cmp	r2, r3
 8004846:	d807      	bhi.n	8004858 <HAL_SPI_TransmitReceive+0x212>
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d003      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004856:	e0fb      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1a3      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x164>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d19d      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x164>
 800486e:	e0df      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_SPI_TransmitReceive+0x23a>
 8004878:	8a7b      	ldrh	r3, [r7, #18]
 800487a:	2b01      	cmp	r3, #1
 800487c:	f040 80cb 	bne.w	8004a16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d912      	bls.n	80048b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	1c9a      	adds	r2, r3, #2
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b02      	subs	r3, #2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ae:	e0b2      	b.n	8004a16 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d6:	e09e      	b.n	8004a16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d134      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x30a>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02f      	beq.n	8004950 <HAL_SPI_TransmitReceive+0x30a>
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d12c      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d912      	bls.n	8004926 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b02      	subs	r3, #2
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004924:	e012      	b.n	800494c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d148      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x3aa>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d042      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d923      	bls.n	80049be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	b292      	uxth	r2, r2
 8004982:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	1c9a      	adds	r2, r3, #2
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b02      	subs	r3, #2
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d81f      	bhi.n	80049ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	e016      	b.n	80049ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f103 020c 	add.w	r2, r3, #12
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049ec:	2301      	movs	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049f0:	f7fd fb8c 	bl	800210c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d803      	bhi.n	8004a08 <HAL_SPI_TransmitReceive+0x3c2>
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d102      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x3c8>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a14:	e01c      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f af5b 	bne.w	80048d8 <HAL_SPI_TransmitReceive+0x292>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f47f af54 	bne.w	80048d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f937 	bl	8004ca8 <SPI_EndRxTxTransaction>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a4c:	e000      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3728      	adds	r7, #40	; 0x28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a7c:	f7fd fb46 	bl	800210c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a8c:	f7fd fb3e 	bl	800210c <HAL_GetTick>
 8004a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	015b      	lsls	r3, r3, #5
 8004a98:	0d1b      	lsrs	r3, r3, #20
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa2:	e054      	b.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d050      	beq.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aac:	f7fd fb2e 	bl	800210c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d902      	bls.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d13d      	bne.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ada:	d111      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d004      	beq.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aee:	d107      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b08:	d10f      	bne.n	8004b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e017      	b.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d19b      	bne.n	8004aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3720      	adds	r7, #32
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000008 	.word	0x20000008

08004b7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b8e:	f7fd fabd 	bl	800210c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b9e:	f7fd fab5 	bl	800210c <HAL_GetTick>
 8004ba2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bac:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00da      	lsls	r2, r3, #3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	0d1b      	lsrs	r3, r3, #20
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bc4:	e060      	b.n	8004c88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bcc:	d107      	bne.n	8004bde <SPI_WaitFifoStateUntilTimeout+0x62>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d050      	beq.n	8004c88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be6:	f7fd fa91 	bl	800210c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d902      	bls.n	8004bfc <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d13d      	bne.n	8004c78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c14:	d111      	bne.n	8004c3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1e:	d004      	beq.n	8004c2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c28:	d107      	bne.n	8004c3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	d10f      	bne.n	8004c64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e010      	b.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d196      	bne.n	8004bc6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000008 	.word	0x20000008

08004ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff5b 	bl	8004b7c <SPI_WaitFifoStateUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e046      	b.n	8004d6a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <SPI_EndRxTxTransaction+0xcc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <SPI_EndRxTxTransaction+0xd0>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0d5b      	lsrs	r3, r3, #21
 8004ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cec:	fb02 f303 	mul.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfa:	d112      	bne.n	8004d22 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff feb0 	bl	8004a6c <SPI_WaitFlagStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e023      	b.n	8004d6a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d0f2      	beq.n	8004d22 <SPI_EndRxTxTransaction+0x7a>
 8004d3c:	e000      	b.n	8004d40 <SPI_EndRxTxTransaction+0x98>
        break;
 8004d3e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff ff15 	bl	8004b7c <SPI_WaitFifoStateUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	f043 0220 	orr.w	r2, r3, #32
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e000      	b.n	8004d6a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000008 	.word	0x20000008
 8004d78:	165e9f81 	.word	0x165e9f81

08004d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e049      	b.n	8004e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f841 	bl	8004e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 faa6 	bl	800530c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e054      	b.n	8004f02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d01d      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d115      	bne.n	8004eec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_TIM_Base_Start_IT+0xec>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d015      	beq.n	8004efe <HAL_TIM_Base_Start_IT+0xbe>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed8:	d011      	beq.n	8004efe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	e008      	b.n	8004efe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e000      	b.n	8004f00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40001800 	.word	0x40001800
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e08f      	b.n	8005064 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fc fee9 	bl	8001d30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6899      	ldr	r1, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b3e      	ldr	r3, [pc, #248]	; (800506c <HAL_TIM_Encoder_Init+0x13c>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 f9c3 	bl	800530c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_TIM_Encoder_Init+0x140>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_TIM_Encoder_Init+0x144>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <HAL_TIM_Encoder_Init+0x148>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	011a      	lsls	r2, r3, #4
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	031b      	lsls	r3, r3, #12
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	4313      	orrs	r3, r2
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	fffebff8 	.word	0xfffebff8
 8005070:	fffffcfc 	.word	0xfffffcfc
 8005074:	fffff3f3 	.word	0xfffff3f3
 8005078:	ffff0f0f 	.word	0xffff0f0f

0800507c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b02      	cmp	r3, #2
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0202 	mvn.w	r2, #2
 80050a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f905 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8f7 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f908 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0204 	mvn.w	r2, #4
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8db 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8cd 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8de 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b08      	cmp	r3, #8
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b08      	cmp	r3, #8
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0208 	mvn.w	r2, #8
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2204      	movs	r2, #4
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8b1 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8a3 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8b4 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b10      	cmp	r3, #16
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b10      	cmp	r3, #16
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0210 	mvn.w	r2, #16
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2208      	movs	r2, #8
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f887 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f879 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f88a 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d10e      	bne.n	8005200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0201 	mvn.w	r2, #1
 80051f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc fc24 	bl	8001a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	d10e      	bne.n	800522c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005218:	2b80      	cmp	r3, #128	; 0x80
 800521a:	d107      	bne.n	800522c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9a8 	bl	800557c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	d10e      	bne.n	800525a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d107      	bne.n	800525a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f99b 	bl	8005590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d10e      	bne.n	8005286 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d107      	bne.n	8005286 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800527e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f838 	bl	80052f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b20      	cmp	r3, #32
 8005292:	d10e      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d107      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0220 	mvn.w	r2, #32
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f95b 	bl	8005568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a40      	ldr	r2, [pc, #256]	; (8005420 <TIM_Base_SetConfig+0x114>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d00f      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3d      	ldr	r2, [pc, #244]	; (8005424 <TIM_Base_SetConfig+0x118>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a3c      	ldr	r2, [pc, #240]	; (8005428 <TIM_Base_SetConfig+0x11c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <TIM_Base_SetConfig+0x120>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a3a      	ldr	r2, [pc, #232]	; (8005430 <TIM_Base_SetConfig+0x124>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d108      	bne.n	800535e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <TIM_Base_SetConfig+0x114>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536c:	d027      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2c      	ldr	r2, [pc, #176]	; (8005424 <TIM_Base_SetConfig+0x118>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d023      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2b      	ldr	r2, [pc, #172]	; (8005428 <TIM_Base_SetConfig+0x11c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01f      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2a      	ldr	r2, [pc, #168]	; (800542c <TIM_Base_SetConfig+0x120>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a29      	ldr	r2, [pc, #164]	; (8005430 <TIM_Base_SetConfig+0x124>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d017      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a28      	ldr	r2, [pc, #160]	; (8005434 <TIM_Base_SetConfig+0x128>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a27      	ldr	r2, [pc, #156]	; (8005438 <TIM_Base_SetConfig+0x12c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00f      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a26      	ldr	r2, [pc, #152]	; (800543c <TIM_Base_SetConfig+0x130>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <TIM_Base_SetConfig+0x134>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d007      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a24      	ldr	r2, [pc, #144]	; (8005444 <TIM_Base_SetConfig+0x138>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a23      	ldr	r2, [pc, #140]	; (8005448 <TIM_Base_SetConfig+0x13c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <TIM_Base_SetConfig+0x114>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0xf8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a0c      	ldr	r2, [pc, #48]	; (8005430 <TIM_Base_SetConfig+0x124>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	615a      	str	r2, [r3, #20]
}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800
 8005440:	40001800 	.word	0x40001800
 8005444:	40001c00 	.word	0x40001c00
 8005448:	40002000 	.word	0x40002000

0800544c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e06d      	b.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a30      	ldr	r2, [pc, #192]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800549e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d01d      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a16      	ldr	r2, [pc, #88]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10c      	bne.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40010000 	.word	0x40010000
 8005550:	40010400 	.word	0x40010400
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b6:	2b84      	cmp	r3, #132	; 0x84
 80055b8:	d005      	beq.n	80055c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	3303      	adds	r3, #3
 80055c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055da:	f3ef 8305 	mrs	r3, IPSR
 80055de:	607b      	str	r3, [r7, #4]
  return(result);
 80055e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055fc:	f001 fb3a 	bl	8006c74 <vTaskStartScheduler>
  
  return osOK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	bd80      	pop	{r7, pc}

08005606 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800560a:	f7ff ffe3 	bl	80055d4 <inHandlerMode>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005614:	f001 fc36 	bl	8006e84 <xTaskGetTickCountFromISR>
 8005618:	4603      	mov	r3, r0
 800561a:	e002      	b.n	8005622 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800561c:	f001 fc22 	bl	8006e64 <xTaskGetTickCount>
 8005620:	4603      	mov	r3, r0
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	bd80      	pop	{r7, pc}

08005626 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005628:	b087      	sub	sp, #28
 800562a:	af02      	add	r7, sp, #8
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685c      	ldr	r4, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563c:	b29e      	uxth	r6, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff ffad 	bl	80055a4 <makeFreeRtosPriority>
 800564a:	4602      	mov	r2, r0
 800564c:	f107 030c 	add.w	r3, r7, #12
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	9200      	str	r2, [sp, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4632      	mov	r2, r6
 8005658:	4629      	mov	r1, r5
 800565a:	4620      	mov	r0, r4
 800565c:	f001 f91c 	bl	8006898 <xTaskCreate>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800566a:	68fb      	ldr	r3, [r7, #12]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005674 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <osDelay+0x16>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	e000      	b.n	800568c <osDelay+0x18>
 800568a:	2301      	movs	r3, #1
 800568c:	4618      	mov	r0, r3
 800568e:	f001 fabb 	bl	8006c08 <vTaskDelay>
  
  return osOK;
 8005692:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80056a4:	2001      	movs	r0, #1
 80056a6:	f000 fafa 	bl	8005c9e <xQueueCreateMutex>
 80056aa:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <osMutexWait+0x18>
    return osErrorParameter;
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	e03a      	b.n	8005742 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d103      	bne.n	80056e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e009      	b.n	80056f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <osMutexWait+0x40>
      ticks = 1;
 80056f0:	2301      	movs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80056f4:	f7ff ff6e 	bl	80055d4 <inHandlerMode>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d017      	beq.n	800572e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	461a      	mov	r2, r3
 8005704:	2100      	movs	r1, #0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 ff18 	bl	800653c <xQueueReceiveFromISR>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d001      	beq.n	8005716 <osMutexWait+0x62>
      return osErrorOS;
 8005712:	23ff      	movs	r3, #255	; 0xff
 8005714:	e015      	b.n	8005742 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <osMutexWait+0x8c>
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <osMutexWait+0x98>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	e008      	b.n	8005740 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fdef 	bl	8006314 <xQueueSemaphoreTake>
 8005736:	4603      	mov	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <osMutexWait+0x8c>
    return osErrorOS;
 800573c:	23ff      	movs	r3, #255	; 0xff
 800573e:	e000      	b.n	8005742 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005760:	f7ff ff38 	bl	80055d4 <inHandlerMode>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fc53 	bl	800601c <xQueueGiveFromISR>
 8005776:	4603      	mov	r3, r0
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <osMutexRelease+0x30>
      return osErrorOS;
 800577c:	23ff      	movs	r3, #255	; 0xff
 800577e:	e017      	b.n	80057b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d013      	beq.n	80057ae <osMutexRelease+0x5e>
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <osMutexRelease+0x68>)
 8005788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	e00a      	b.n	80057ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa96 	bl	8005cd0 <xQueueGenericSend>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d001      	beq.n	80057ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80057aa:	23ff      	movs	r3, #255	; 0xff
 80057ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	4619      	mov	r1, r3
 80057d2:	f000 f9ed 	bl	8005bb0 <xQueueGenericCreate>
 80057d6:	4603      	mov	r3, r0
#endif
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <osMessagePut+0x1e>
    ticks = 1;
 80057fa:	2301      	movs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80057fe:	f7ff fee9 	bl	80055d4 <inHandlerMode>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d018      	beq.n	800583a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005808:	f107 0210 	add.w	r2, r7, #16
 800580c:	f107 0108 	add.w	r1, r7, #8
 8005810:	2300      	movs	r3, #0
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fb62 	bl	8005edc <xQueueGenericSendFromISR>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <osMessagePut+0x42>
      return osErrorOS;
 800581e:	23ff      	movs	r3, #255	; 0xff
 8005820:	e018      	b.n	8005854 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d014      	beq.n	8005852 <osMessagePut+0x72>
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <osMessagePut+0x7c>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	e00b      	b.n	8005852 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800583a:	f107 0108 	add.w	r1, r7, #8
 800583e:	2300      	movs	r3, #0
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fa44 	bl	8005cd0 <xQueueGenericSend>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <osMessagePut+0x72>
      return osErrorOS;
 800584e:	23ff      	movs	r3, #255	; 0xff
 8005850:	e000      	b.n	8005854 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b08b      	sub	sp, #44	; 0x2c
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	617b      	str	r3, [r7, #20]
    return event;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	461c      	mov	r4, r3
 8005882:	f107 0314 	add.w	r3, r7, #20
 8005886:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800588a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800588e:	e054      	b.n	800593a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	d103      	bne.n	80058a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	e009      	b.n	80058bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <osMessageGet+0x5c>
      ticks = 1;
 80058b8:	2301      	movs	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80058bc:	f7ff fe8a 	bl	80055d4 <inHandlerMode>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01c      	beq.n	8005900 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80058c6:	f107 0220 	add.w	r2, r7, #32
 80058ca:	f107 0314 	add.w	r3, r7, #20
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	68b8      	ldr	r0, [r7, #8]
 80058d4:	f000 fe32 	bl	800653c <xQueueReceiveFromISR>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d102      	bne.n	80058e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80058de:	2310      	movs	r3, #16
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e001      	b.n	80058e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01d      	beq.n	800592a <osMessageGet+0xca>
 80058ee:	4b15      	ldr	r3, [pc, #84]	; (8005944 <osMessageGet+0xe4>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	e014      	b.n	800592a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	3304      	adds	r3, #4
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	4619      	mov	r1, r3
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f000 fc1c 	bl	8006148 <xQueueReceive>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005916:	2310      	movs	r3, #16
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e006      	b.n	800592a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <osMessageGet+0xc6>
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <osMessageGet+0xc8>
 8005926:	2340      	movs	r3, #64	; 0x40
 8005928:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	461c      	mov	r4, r3
 800592e:	f107 0314 	add.w	r3, r7, #20
 8005932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	372c      	adds	r7, #44	; 0x2c
 800593e:	46bd      	mov	sp, r7
 8005940:	bd90      	pop	{r4, r7, pc}
 8005942:	bf00      	nop
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <osDelayUntil+0x18>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e000      	b.n	8005962 <osDelayUntil+0x1a>
 8005960:	2301      	movs	r3, #1
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f8cb 	bl	8006b00 <vTaskDelayUntil>
  
  return osOK;
 800596a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f04f 32ff 	mov.w	r2, #4294967295
 800598c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f103 0208 	add.w	r2, r3, #8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f103 0208 	add.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d103      	bne.n	8005a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e00c      	b.n	8005a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e002      	b.n	8005a44 <vListInsert+0x2e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d2f6      	bcs.n	8005a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6892      	ldr	r2, [r2, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6852      	ldr	r2, [r2, #4]
 8005aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d103      	bne.n	8005abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	1e5a      	subs	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10c      	bne.n	8005b0a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	b672      	cpsid	i
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	b662      	cpsie	i
 8005b04:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005b0a:	f001 fff7 	bl	8007afc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b1a:	fb01 f303 	mul.w	r3, r1, r3
 8005b1e:	441a      	add	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	68f9      	ldr	r1, [r7, #12]
 8005b3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	441a      	add	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d114      	bne.n	8005b8a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01a      	beq.n	8005b9e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3310      	adds	r3, #16
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fad9 	bl	8007124 <xTaskRemoveFromEventList>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <xQueueGenericReset+0xd0>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	e009      	b.n	8005b9e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3310      	adds	r3, #16
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fef0 	bl	8005974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff feeb 	bl	8005974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b9e:	f001 ffe1 	bl	8007b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ba2:	2301      	movs	r3, #1
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10c      	bne.n	8005bde <xQueueGenericCreate+0x2e>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	b672      	cpsid	i
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	b662      	cpsie	i
 8005bd8:	613b      	str	r3, [r7, #16]
}
 8005bda:	bf00      	nop
 8005bdc:	e7fe      	b.n	8005bdc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e004      	b.n	8005bf4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	3348      	adds	r3, #72	; 0x48
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 f8ab 	bl	8007d54 <pvPortMalloc>
 8005bfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3348      	adds	r3, #72	; 0x48
 8005c0e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c10:	79fa      	ldrb	r2, [r7, #7]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	4613      	mov	r3, r2
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f805 	bl	8005c2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c22:	69bb      	ldr	r3, [r7, #24]
	}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e002      	b.n	8005c4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	69b8      	ldr	r0, [r7, #24]
 8005c5e:	f7ff ff3d 	bl	8005adc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f81d 	bl	8005cd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6939      	ldr	r1, [r7, #16]
 8005cb6:	6978      	ldr	r0, [r7, #20]
 8005cb8:	f7ff ff7a 	bl	8005bb0 <xQueueGenericCreate>
 8005cbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ffd3 	bl	8005c6a <prvInitialiseMutex>

		return xNewQueue;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10c      	bne.n	8005d06 <xQueueGenericSend+0x36>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	b672      	cpsid	i
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	b662      	cpsie	i
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <xQueueGenericSend+0x44>
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <xQueueGenericSend+0x48>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <xQueueGenericSend+0x4a>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10c      	bne.n	8005d38 <xQueueGenericSend+0x68>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	b672      	cpsid	i
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	b662      	cpsie	i
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d34:	bf00      	nop
 8005d36:	e7fe      	b.n	8005d36 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d103      	bne.n	8005d46 <xQueueGenericSend+0x76>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <xQueueGenericSend+0x7a>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <xQueueGenericSend+0x7c>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10c      	bne.n	8005d6a <xQueueGenericSend+0x9a>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	b672      	cpsid	i
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	b662      	cpsie	i
 8005d64:	623b      	str	r3, [r7, #32]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d6a:	f001 fb7d 	bl	8007468 <xTaskGetSchedulerState>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <xQueueGenericSend+0xaa>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <xQueueGenericSend+0xae>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <xQueueGenericSend+0xb0>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <xQueueGenericSend+0xce>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	b672      	cpsid	i
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	b662      	cpsie	i
 8005d98:	61fb      	str	r3, [r7, #28]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d9e:	f001 fead 	bl	8007afc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d302      	bcc.n	8005db4 <xQueueGenericSend+0xe4>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d129      	bne.n	8005e08 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dba:	f000 fc5d 	bl	8006678 <prvCopyDataToQueue>
 8005dbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	3324      	adds	r3, #36	; 0x24
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f9a9 	bl	8007124 <xTaskRemoveFromEventList>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <xQueueGenericSend+0x208>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	e00a      	b.n	8005e00 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005df0:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <xQueueGenericSend+0x208>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e00:	f001 feb0 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e063      	b.n	8005ed0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e0e:	f001 fea9 	bl	8007b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	e05c      	b.n	8005ed0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 f9e3 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e26:	2301      	movs	r3, #1
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e2a:	f001 fe9b 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e2e:	f000 ff6d 	bl	8006d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e32:	f001 fe63 	bl	8007afc <vPortEnterCritical>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e3c:	b25b      	sxtb	r3, r3
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d103      	bne.n	8005e4c <xQueueGenericSend+0x17c>
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e52:	b25b      	sxtb	r3, r3
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d103      	bne.n	8005e62 <xQueueGenericSend+0x192>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e62:	f001 fe7f 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e66:	1d3a      	adds	r2, r7, #4
 8005e68:	f107 0314 	add.w	r3, r7, #20
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 f9d2 	bl	8007218 <xTaskCheckForTimeOut>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d124      	bne.n	8005ec4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7c:	f000 fcf4 	bl	8006868 <prvIsQueueFull>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d018      	beq.n	8005eb8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	3310      	adds	r3, #16
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 f922 	bl	80070d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e96:	f000 fc7f 	bl	8006798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e9a:	f000 ff45 	bl	8006d28 <xTaskResumeAll>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f47f af7c 	bne.w	8005d9e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <xQueueGenericSend+0x208>)
 8005ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	e772      	b.n	8005d9e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eba:	f000 fc6d 	bl	8006798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ebe:	f000 ff33 	bl	8006d28 <xTaskResumeAll>
 8005ec2:	e76c      	b.n	8005d9e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec6:	f000 fc67 	bl	8006798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eca:	f000 ff2d 	bl	8006d28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3738      	adds	r7, #56	; 0x38
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	b672      	cpsid	i
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	b662      	cpsie	i
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <xQueueGenericSendFromISR+0x40>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <xQueueGenericSendFromISR+0x44>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <xQueueGenericSendFromISR+0x46>
 8005f20:	2300      	movs	r3, #0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	b672      	cpsid	i
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	b662      	cpsie	i
 8005f3a:	623b      	str	r3, [r7, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d103      	bne.n	8005f4e <xQueueGenericSendFromISR+0x72>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <xQueueGenericSendFromISR+0x76>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueGenericSendFromISR+0x78>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	b672      	cpsid	i
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	b662      	cpsie	i
 8005f6c:	61fb      	str	r3, [r7, #28]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f72:	f001 feab 	bl	8007ccc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f76:	f3ef 8211 	mrs	r2, BASEPRI
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	b672      	cpsid	i
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	b662      	cpsie	i
 8005f8e:	61ba      	str	r2, [r7, #24]
 8005f90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <xQueueGenericSendFromISR+0xcc>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d12c      	bne.n	8006002 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fb8:	f000 fb5e 	bl	8006678 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d112      	bne.n	8005fec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	3324      	adds	r3, #36	; 0x24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 f8a6 	bl	8007124 <xTaskRemoveFromEventList>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00b      	beq.n	8005ffc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e007      	b.n	8005ffc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	b25a      	sxtb	r2, r3
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006000:	e001      	b.n	8006006 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006002:	2300      	movs	r3, #0
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006010:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006014:	4618      	mov	r0, r3
 8006016:	3738      	adds	r7, #56	; 0x38
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	; 0x38
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10c      	bne.n	800604a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	b672      	cpsid	i
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	b662      	cpsie	i
 8006044:	623b      	str	r3, [r7, #32]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <xQueueGiveFromISR+0x50>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	b672      	cpsid	i
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	b662      	cpsie	i
 8006066:	61fb      	str	r3, [r7, #28]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d103      	bne.n	800607c <xQueueGiveFromISR+0x60>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <xQueueGiveFromISR+0x64>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <xQueueGiveFromISR+0x66>
 8006080:	2300      	movs	r3, #0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10c      	bne.n	80060a0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	b672      	cpsid	i
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	b662      	cpsie	i
 800609a:	61bb      	str	r3, [r7, #24]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060a0:	f001 fe14 	bl	8007ccc <vPortValidateInterruptPriority>
	__asm volatile
 80060a4:	f3ef 8211 	mrs	r2, BASEPRI
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	b672      	cpsid	i
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	b662      	cpsie	i
 80060bc:	617a      	str	r2, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060c0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d22b      	bcs.n	800612c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d112      	bne.n	8006116 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d016      	beq.n	8006126 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3324      	adds	r3, #36	; 0x24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f811 	bl	8007124 <xTaskRemoveFromEventList>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00e      	beq.n	8006126 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e007      	b.n	8006126 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800611a:	3301      	adds	r3, #1
 800611c:	b2db      	uxtb	r3, r3
 800611e:	b25a      	sxtb	r2, r3
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
 800612a:	e001      	b.n	8006130 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800612c:	2300      	movs	r3, #0
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f383 8811 	msr	BASEPRI, r3
}
 800613a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800613e:	4618      	mov	r0, r3
 8006140:	3738      	adds	r7, #56	; 0x38
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <xQueueReceive+0x34>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	b672      	cpsid	i
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	b662      	cpsie	i
 8006176:	623b      	str	r3, [r7, #32]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <xQueueReceive+0x42>
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <xQueueReceive+0x46>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueReceive+0x48>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <xQueueReceive+0x66>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	b672      	cpsid	i
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	b662      	cpsie	i
 80061a8:	61fb      	str	r3, [r7, #28]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ae:	f001 f95b 	bl	8007468 <xTaskGetSchedulerState>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xQueueReceive+0x76>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueReceive+0x7a>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueReceive+0x7c>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10c      	bne.n	80061e2 <xQueueReceive+0x9a>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	b672      	cpsid	i
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	b662      	cpsie	i
 80061dc:	61bb      	str	r3, [r7, #24]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e2:	f001 fc8b 	bl	8007afc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01f      	beq.n	8006232 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 faa9 	bl	800674c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	3310      	adds	r3, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ff88 	bl	8007124 <xTaskRemoveFromEventList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800621a:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <xQueueReceive+0x1c8>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800622a:	f001 fc9b 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 800622e:	2301      	movs	r3, #1
 8006230:	e069      	b.n	8006306 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006238:	f001 fc94 	bl	8007b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800623c:	2300      	movs	r3, #0
 800623e:	e062      	b.n	8006306 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006246:	f107 0310 	add.w	r3, r7, #16
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ffce 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006254:	f001 fc86 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006258:	f000 fd58 	bl	8006d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625c:	f001 fc4e 	bl	8007afc <vPortEnterCritical>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006266:	b25b      	sxtb	r3, r3
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d103      	bne.n	8006276 <xQueueReceive+0x12e>
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627c:	b25b      	sxtb	r3, r3
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d103      	bne.n	800628c <xQueueReceive+0x144>
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628c:	f001 fc6a 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006290:	1d3a      	adds	r2, r7, #4
 8006292:	f107 0310 	add.w	r3, r7, #16
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ffbd 	bl	8007218 <xTaskCheckForTimeOut>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d123      	bne.n	80062ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a6:	f000 fac9 	bl	800683c <prvIsQueueEmpty>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 ff0d 	bl	80070d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c0:	f000 fa6a 	bl	8006798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c4:	f000 fd30 	bl	8006d28 <xTaskResumeAll>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d189      	bne.n	80061e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80062ce:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xQueueReceive+0x1c8>)
 80062d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	e780      	b.n	80061e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e2:	f000 fa59 	bl	8006798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e6:	f000 fd1f 	bl	8006d28 <xTaskResumeAll>
 80062ea:	e77a      	b.n	80061e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	f000 fa53 	bl	8006798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f2:	f000 fd19 	bl	8006d28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f8:	f000 faa0 	bl	800683c <prvIsQueueEmpty>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f43f af6f 	beq.w	80061e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006306:	4618      	mov	r0, r3
 8006308:	3730      	adds	r7, #48	; 0x30
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	; 0x38
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10c      	bne.n	800634a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	b672      	cpsid	i
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	b662      	cpsie	i
 8006344:	623b      	str	r3, [r7, #32]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	b672      	cpsid	i
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	b662      	cpsie	i
 8006366:	61fb      	str	r3, [r7, #28]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800636c:	f001 f87c 	bl	8007468 <xTaskGetSchedulerState>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <xQueueSemaphoreTake+0x68>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <xQueueSemaphoreTake+0x6c>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <xQueueSemaphoreTake+0x6e>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10c      	bne.n	80063a0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	61bb      	str	r3, [r7, #24]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063a0:	f001 fbac 	bl	8007afc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d024      	beq.n	80063fa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	1e5a      	subs	r2, r3, #1
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063c0:	f001 fa18 	bl	80077f4 <pvTaskIncrementMutexHeldCount>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00f      	beq.n	80063f2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	3310      	adds	r3, #16
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fea4 	bl	8007124 <xTaskRemoveFromEventList>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063e2:	4b55      	ldr	r3, [pc, #340]	; (8006538 <xQueueSemaphoreTake+0x224>)
 80063e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063f2:	f001 fbb7 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e099      	b.n	800652e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d113      	bne.n	8006428 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	b672      	cpsid	i
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	b662      	cpsie	i
 800641a:	617b      	str	r3, [r7, #20]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006420:	f001 fba0 	bl	8007b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006424:	2300      	movs	r3, #0
 8006426:	e082      	b.n	800652e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	4618      	mov	r0, r3
 8006434:	f000 feda 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800643c:	f001 fb92 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006440:	f000 fc64 	bl	8006d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006444:	f001 fb5a 	bl	8007afc <vPortEnterCritical>
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800644e:	b25b      	sxtb	r3, r3
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d103      	bne.n	800645e <xQueueSemaphoreTake+0x14a>
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006464:	b25b      	sxtb	r3, r3
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d103      	bne.n	8006474 <xQueueSemaphoreTake+0x160>
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006474:	f001 fb76 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006478:	463a      	mov	r2, r7
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	4611      	mov	r1, r2
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fec9 	bl	8007218 <xTaskCheckForTimeOut>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d132      	bne.n	80064f2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800648c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800648e:	f000 f9d5 	bl	800683c <prvIsQueueEmpty>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d026      	beq.n	80064e6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80064a0:	f001 fb2c 	bl	8007afc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fffb 	bl	80074a4 <xTaskPriorityInherit>
 80064ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064b0:	f001 fb58 	bl	8007b64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	3324      	adds	r3, #36	; 0x24
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fe0b 	bl	80070d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064c4:	f000 f968 	bl	8006798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064c8:	f000 fc2e 	bl	8006d28 <xTaskResumeAll>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f af66 	bne.w	80063a0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80064d4:	4b18      	ldr	r3, [pc, #96]	; (8006538 <xQueueSemaphoreTake+0x224>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	e75c      	b.n	80063a0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e8:	f000 f956 	bl	8006798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ec:	f000 fc1c 	bl	8006d28 <xTaskResumeAll>
 80064f0:	e756      	b.n	80063a0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f4:	f000 f950 	bl	8006798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f8:	f000 fc16 	bl	8006d28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064fe:	f000 f99d 	bl	800683c <prvIsQueueEmpty>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	f43f af4b 	beq.w	80063a0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00d      	beq.n	800652c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006510:	f001 faf4 	bl	8007afc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006516:	f000 f897 	bl	8006648 <prvGetDisinheritPriorityAfterTimeout>
 800651a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f8c8 	bl	80076b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006528:	f001 fb1c 	bl	8007b64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800652c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800652e:	4618      	mov	r0, r3
 8006530:	3738      	adds	r7, #56	; 0x38
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08e      	sub	sp, #56	; 0x38
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10c      	bne.n	800656c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	623b      	str	r3, [r7, #32]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <xQueueReceiveFromISR+0x3e>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueReceiveFromISR+0x42>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueReceiveFromISR+0x44>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10c      	bne.n	800659e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	61fb      	str	r3, [r7, #28]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659e:	f001 fb95 	bl	8007ccc <vPortValidateInterruptPriority>
	__asm volatile
 80065a2:	f3ef 8211 	mrs	r2, BASEPRI
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	b672      	cpsid	i
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	b662      	cpsie	i
 80065ba:	61ba      	str	r2, [r7, #24]
 80065bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02f      	beq.n	800662e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065dc:	f000 f8b6 	bl	800674c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	1e5a      	subs	r2, r3, #1
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d112      	bne.n	8006618 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	3310      	adds	r3, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fd90 	bl	8007124 <xTaskRemoveFromEventList>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e007      	b.n	8006628 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661c:	3301      	adds	r3, #1
 800661e:	b2db      	uxtb	r3, r3
 8006620:	b25a      	sxtb	r2, r3
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006628:	2301      	movs	r3, #1
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
 800662c:	e001      	b.n	8006632 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800662e:	2300      	movs	r3, #0
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f383 8811 	msr	BASEPRI, r3
}
 800663c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006640:	4618      	mov	r0, r3
 8006642:	3738      	adds	r7, #56	; 0x38
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1c3 0307 	rsb	r3, r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e001      	b.n	800666a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800666a:	68fb      	ldr	r3, [r7, #12]
	}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d14d      	bne.n	800673a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 ff7e 	bl	80075a4 <xTaskPriorityDisinherit>
 80066a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	e043      	b.n	800673a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d119      	bne.n	80066ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6858      	ldr	r0, [r3, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	461a      	mov	r2, r3
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	f002 fd62 	bl	800918c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d32b      	bcc.n	800673a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	e026      	b.n	800673a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68d8      	ldr	r0, [r3, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	461a      	mov	r2, r3
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	f002 fd48 	bl	800918c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	425b      	negs	r3, r3
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d207      	bcs.n	8006728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	425b      	negs	r3, r3
 8006722:	441a      	add	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d105      	bne.n	800673a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3b01      	subs	r3, #1
 8006738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006742:	697b      	ldr	r3, [r7, #20]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d018      	beq.n	8006790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	441a      	add	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d303      	bcc.n	8006780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68d9      	ldr	r1, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	461a      	mov	r2, r3
 800678a:	6838      	ldr	r0, [r7, #0]
 800678c:	f002 fcfe 	bl	800918c <memcpy>
	}
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a0:	f001 f9ac 	bl	8007afc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ac:	e011      	b.n	80067d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fcb2 	bl	8007124 <xTaskRemoveFromEventList>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067c6:	f000 fd8d 	bl	80072e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dce9      	bgt.n	80067ae <prvUnlockQueue+0x16>
 80067da:	e000      	b.n	80067de <prvUnlockQueue+0x46>
					break;
 80067dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067e6:	f001 f9bd 	bl	8007b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ea:	f001 f987 	bl	8007afc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067f6:	e011      	b.n	800681c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d012      	beq.n	8006826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3310      	adds	r3, #16
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fc8d 	bl	8007124 <xTaskRemoveFromEventList>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006810:	f000 fd68 	bl	80072e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	3b01      	subs	r3, #1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	dce9      	bgt.n	80067f8 <prvUnlockQueue+0x60>
 8006824:	e000      	b.n	8006828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	22ff      	movs	r2, #255	; 0xff
 800682c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006830:	f001 f998 	bl	8007b64 <vPortExitCritical>
}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006844:	f001 f95a 	bl	8007afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e001      	b.n	800685a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800685a:	f001 f983 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 800685e:	68fb      	ldr	r3, [r7, #12]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006870:	f001 f944 	bl	8007afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	429a      	cmp	r2, r3
 800687e:	d102      	bne.n	8006886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e001      	b.n	800688a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688a:	f001 f96b 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	; 0x30
 800689c:	af04      	add	r7, sp, #16
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fa51 	bl	8007d54 <pvPortMalloc>
 80068b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00e      	beq.n	80068d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068ba:	2054      	movs	r0, #84	; 0x54
 80068bc:	f001 fa4a 	bl	8007d54 <pvPortMalloc>
 80068c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	631a      	str	r2, [r3, #48]	; 0x30
 80068ce:	e005      	b.n	80068dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068d0:	6978      	ldr	r0, [r7, #20]
 80068d2:	f001 fb09 	bl	8007ee8 <vPortFree>
 80068d6:	e001      	b.n	80068dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d013      	beq.n	800690a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	2300      	movs	r3, #0
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	9302      	str	r3, [sp, #8]
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f80e 	bl	800691a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068fe:	69f8      	ldr	r0, [r7, #28]
 8006900:	f000 f894 	bl	8006a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006904:	2301      	movs	r3, #1
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	e002      	b.n	8006910 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
 800690e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006910:	69bb      	ldr	r3, [r7, #24]
	}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006932:	440b      	add	r3, r1
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	b672      	cpsid	i
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	b662      	cpsie	i
 8006960:	617b      	str	r3, [r7, #20]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01f      	beq.n	80069ac <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e012      	b.n	8006998 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	7819      	ldrb	r1, [r3, #0]
 800697a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	3334      	adds	r3, #52	; 0x34
 8006982:	460a      	mov	r2, r1
 8006984:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b0f      	cmp	r3, #15
 800699c:	d9e9      	bls.n	8006972 <prvInitialiseNewTask+0x58>
 800699e:	e000      	b.n	80069a2 <prvInitialiseNewTask+0x88>
			{
				break;
 80069a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069aa:	e003      	b.n	80069b4 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b06      	cmp	r3, #6
 80069b8:	d901      	bls.n	80069be <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069ba:	2306      	movs	r3, #6
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2200      	movs	r2, #0
 80069ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe ffed 	bl	80059b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	3318      	adds	r3, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe ffe8 	bl	80059b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f1c3 0207 	rsb	r2, r3, #7
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2200      	movs	r2, #0
 80069fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	69b8      	ldr	r0, [r7, #24]
 8006a0e:	f000 ff6b 	bl	80078e8 <pxPortInitialiseStack>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a24:	bf00      	nop
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a34:	f001 f862 	bl	8007afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a38:	4b2a      	ldr	r3, [pc, #168]	; (8006ae4 <prvAddNewTaskToReadyList+0xb8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <prvAddNewTaskToReadyList+0xb8>)
 8006a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a42:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <prvAddNewTaskToReadyList+0xbc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a4a:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <prvAddNewTaskToReadyList+0xbc>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a50:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <prvAddNewTaskToReadyList+0xb8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d110      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a58:	f000 fc68 	bl	800732c <prvInitialiseTaskLists>
 8006a5c:	e00d      	b.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a5e:	4b23      	ldr	r3, [pc, #140]	; (8006aec <prvAddNewTaskToReadyList+0xc0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a66:	4b20      	ldr	r3, [pc, #128]	; (8006ae8 <prvAddNewTaskToReadyList+0xbc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d802      	bhi.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a74:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <prvAddNewTaskToReadyList+0xbc>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <prvAddNewTaskToReadyList+0xcc>)
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f7fe ff8e 	bl	80059ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ab2:	f001 f857 	bl	8007b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <prvAddNewTaskToReadyList+0xc0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00e      	beq.n	8006adc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006abe:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <prvAddNewTaskToReadyList+0xbc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d207      	bcs.n	8006adc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000768 	.word	0x20000768
 8006ae8:	20000668 	.word	0x20000668
 8006aec:	20000774 	.word	0x20000774
 8006af0:	20000784 	.word	0x20000784
 8006af4:	20000770 	.word	0x20000770
 8006af8:	2000066c 	.word	0x2000066c
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <vTaskDelayUntil+0x2e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	b672      	cpsid	i
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	b662      	cpsie	i
 8006b28:	617b      	str	r3, [r7, #20]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10c      	bne.n	8006b4e <vTaskDelayUntil+0x4e>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	b672      	cpsid	i
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	b662      	cpsie	i
 8006b48:	613b      	str	r3, [r7, #16]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8006b4e:	4b2b      	ldr	r3, [pc, #172]	; (8006bfc <vTaskDelayUntil+0xfc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00c      	beq.n	8006b70 <vTaskDelayUntil+0x70>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	b672      	cpsid	i
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	b662      	cpsie	i
 8006b6a:	60fb      	str	r3, [r7, #12]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8006b70:	f000 f8cc 	bl	8006d0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006b74:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <vTaskDelayUntil+0x100>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4413      	add	r3, r2
 8006b82:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d20b      	bcs.n	8006ba6 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d211      	bcs.n	8006bbc <vTaskDelayUntil+0xbc>
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d90d      	bls.n	8006bbc <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	e00a      	b.n	8006bbc <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d303      	bcc.n	8006bb8 <vTaskDelayUntil+0xb8>
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d901      	bls.n	8006bbc <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fe23 	bl	800781c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006bd6:	f000 f8a7 	bl	8006d28 <xTaskResumeAll>
 8006bda:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d107      	bne.n	8006bf2 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vTaskDelayUntil+0x104>)
 8006be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bf2:	bf00      	nop
 8006bf4:	3728      	adds	r7, #40	; 0x28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000790 	.word	0x20000790
 8006c00:	2000076c 	.word	0x2000076c
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d019      	beq.n	8006c4e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1a:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <vTaskDelay+0x64>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00c      	beq.n	8006c3c <vTaskDelay+0x34>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	b672      	cpsid	i
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	b662      	cpsie	i
 8006c36:	60bb      	str	r3, [r7, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006c3c:	f000 f866 	bl	8006d0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fdea 	bl	800781c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c48:	f000 f86e 	bl	8006d28 <xTaskResumeAll>
 8006c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d107      	bne.n	8006c64 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <vTaskDelay+0x68>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000790 	.word	0x20000790
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <vTaskStartScheduler+0x80>)
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	491c      	ldr	r1, [pc, #112]	; (8006cf8 <vTaskStartScheduler+0x84>)
 8006c88:	481c      	ldr	r0, [pc, #112]	; (8006cfc <vTaskStartScheduler+0x88>)
 8006c8a:	f7ff fe05 	bl	8006898 <xTaskCreate>
 8006c8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d118      	bne.n	8006cc8 <vTaskStartScheduler+0x54>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	b672      	cpsid	i
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	b662      	cpsie	i
 8006caa:	60bb      	str	r3, [r7, #8]
}
 8006cac:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <vTaskStartScheduler+0x8c>)
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <vTaskStartScheduler+0x90>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cbc:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <vTaskStartScheduler+0x94>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cc2:	f000 fe9d 	bl	8007a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cc6:	e010      	b.n	8006cea <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d10c      	bne.n	8006cea <vTaskStartScheduler+0x76>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	b672      	cpsid	i
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	607b      	str	r3, [r7, #4]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <vTaskStartScheduler+0x74>
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	2000078c 	.word	0x2000078c
 8006cf8:	080092b0 	.word	0x080092b0
 8006cfc:	080072fd 	.word	0x080072fd
 8006d00:	20000788 	.word	0x20000788
 8006d04:	20000774 	.word	0x20000774
 8006d08:	2000076c 	.word	0x2000076c

08006d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <vTaskSuspendAll+0x18>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <vTaskSuspendAll+0x18>)
 8006d18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006d1a:	bf00      	nop
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000790 	.word	0x20000790

08006d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d36:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10c      	bne.n	8006d58 <xTaskResumeAll+0x30>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	b672      	cpsid	i
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	b662      	cpsie	i
 8006d52:	603b      	str	r3, [r7, #0]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d58:	f000 fed0 	bl	8007afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d5c:	4b38      	ldr	r3, [pc, #224]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d66:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d161      	bne.n	8006e32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d6e:	4b35      	ldr	r3, [pc, #212]	; (8006e44 <xTaskResumeAll+0x11c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d05d      	beq.n	8006e32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d76:	e02e      	b.n	8006dd6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d78:	4b33      	ldr	r3, [pc, #204]	; (8006e48 <xTaskResumeAll+0x120>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3318      	adds	r3, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe fe7f 	bl	8005a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fe7a 	bl	8005a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	2201      	movs	r2, #1
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <xTaskResumeAll+0x124>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <xTaskResumeAll+0x124>)
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <xTaskResumeAll+0x128>)
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fe fe06 	bl	80059ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <xTaskResumeAll+0x12c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d302      	bcc.n	8006dd6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006dd0:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <xTaskResumeAll+0x130>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <xTaskResumeAll+0x120>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1cc      	bne.n	8006d78 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006de4:	f000 fb20 	bl	8007428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006de8:	4b1c      	ldr	r3, [pc, #112]	; (8006e5c <xTaskResumeAll+0x134>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006df4:	f000 f858 	bl	8006ea8 <xTaskIncrementTick>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <xTaskResumeAll+0x130>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f1      	bne.n	8006df4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006e10:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <xTaskResumeAll+0x134>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <xTaskResumeAll+0x130>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <xTaskResumeAll+0x138>)
 8006e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e32:	f000 fe97 	bl	8007b64 <vPortExitCritical>

	return xAlreadyYielded;
 8006e36:	68bb      	ldr	r3, [r7, #8]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000790 	.word	0x20000790
 8006e44:	20000768 	.word	0x20000768
 8006e48:	20000728 	.word	0x20000728
 8006e4c:	20000770 	.word	0x20000770
 8006e50:	2000066c 	.word	0x2000066c
 8006e54:	20000668 	.word	0x20000668
 8006e58:	2000077c 	.word	0x2000077c
 8006e5c:	20000778 	.word	0x20000778
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <xTaskGetTickCount+0x1c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e70:	687b      	ldr	r3, [r7, #4]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	2000076c 	.word	0x2000076c

08006e84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e8a:	f000 ff1f 	bl	8007ccc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <xTaskGetTickCountFromISR+0x20>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e98:	683b      	ldr	r3, [r7, #0]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000076c 	.word	0x2000076c

08006ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb2:	4b4f      	ldr	r3, [pc, #316]	; (8006ff0 <xTaskIncrementTick+0x148>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 808a 	bne.w	8006fd0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ebc:	4b4d      	ldr	r3, [pc, #308]	; (8006ff4 <xTaskIncrementTick+0x14c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ec4:	4a4b      	ldr	r2, [pc, #300]	; (8006ff4 <xTaskIncrementTick+0x14c>)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d122      	bne.n	8006f16 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ed0:	4b49      	ldr	r3, [pc, #292]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	b672      	cpsid	i
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	b662      	cpsie	i
 8006eee:	603b      	str	r3, [r7, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <xTaskIncrementTick+0x4a>
 8006ef4:	4b40      	ldr	r3, [pc, #256]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	4b40      	ldr	r3, [pc, #256]	; (8006ffc <xTaskIncrementTick+0x154>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a3e      	ldr	r2, [pc, #248]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4a3e      	ldr	r2, [pc, #248]	; (8006ffc <xTaskIncrementTick+0x154>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b3d      	ldr	r3, [pc, #244]	; (8007000 <xTaskIncrementTick+0x158>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	4a3c      	ldr	r2, [pc, #240]	; (8007000 <xTaskIncrementTick+0x158>)
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	f000 fa89 	bl	8007428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f16:	4b3b      	ldr	r3, [pc, #236]	; (8007004 <xTaskIncrementTick+0x15c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d348      	bcc.n	8006fb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f20:	4b35      	ldr	r3, [pc, #212]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2a:	4b36      	ldr	r3, [pc, #216]	; (8007004 <xTaskIncrementTick+0x15c>)
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	601a      	str	r2, [r3, #0]
					break;
 8006f32:	e03e      	b.n	8006fb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f34:	4b30      	ldr	r3, [pc, #192]	; (8006ff8 <xTaskIncrementTick+0x150>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d203      	bcs.n	8006f54 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <xTaskIncrementTick+0x15c>)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f52:	e02e      	b.n	8006fb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fd95 	bl	8005a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3318      	adds	r3, #24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fd8c 	bl	8005a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	2201      	movs	r2, #1
 8006f76:	409a      	lsls	r2, r3
 8006f78:	4b23      	ldr	r3, [pc, #140]	; (8007008 <xTaskIncrementTick+0x160>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	4a22      	ldr	r2, [pc, #136]	; (8007008 <xTaskIncrementTick+0x160>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <xTaskIncrementTick+0x164>)
 8006f90:	441a      	add	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fe fd18 	bl	80059ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <xTaskIncrementTick+0x168>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d3b9      	bcc.n	8006f20 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb0:	e7b6      	b.n	8006f20 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fb2:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xTaskIncrementTick+0x168>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4914      	ldr	r1, [pc, #80]	; (800700c <xTaskIncrementTick+0x164>)
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d907      	bls.n	8006fda <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e004      	b.n	8006fda <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <xTaskIncrementTick+0x16c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a0f      	ldr	r2, [pc, #60]	; (8007014 <xTaskIncrementTick+0x16c>)
 8006fd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006fda:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <xTaskIncrementTick+0x170>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006fe6:	697b      	ldr	r3, [r7, #20]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000790 	.word	0x20000790
 8006ff4:	2000076c 	.word	0x2000076c
 8006ff8:	20000720 	.word	0x20000720
 8006ffc:	20000724 	.word	0x20000724
 8007000:	20000780 	.word	0x20000780
 8007004:	20000788 	.word	0x20000788
 8007008:	20000770 	.word	0x20000770
 800700c:	2000066c 	.word	0x2000066c
 8007010:	20000668 	.word	0x20000668
 8007014:	20000778 	.word	0x20000778
 8007018:	2000077c 	.word	0x2000077c

0800701c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007022:	4b28      	ldr	r3, [pc, #160]	; (80070c4 <vTaskSwitchContext+0xa8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800702a:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <vTaskSwitchContext+0xac>)
 800702c:	2201      	movs	r2, #1
 800702e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007030:	e041      	b.n	80070b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007032:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <vTaskSwitchContext+0xac>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007038:	4b24      	ldr	r3, [pc, #144]	; (80070cc <vTaskSwitchContext+0xb0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	fab3 f383 	clz	r3, r3
 8007044:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	f1c3 031f 	rsb	r3, r3, #31
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	4920      	ldr	r1, [pc, #128]	; (80070d0 <vTaskSwitchContext+0xb4>)
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10c      	bne.n	800707c <vTaskSwitchContext+0x60>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	b672      	cpsid	i
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	b662      	cpsie	i
 8007076:	607b      	str	r3, [r7, #4]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <vTaskSwitchContext+0x5e>
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <vTaskSwitchContext+0xb4>)
 8007088:	4413      	add	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	3308      	adds	r3, #8
 800709e:	429a      	cmp	r2, r3
 80070a0:	d104      	bne.n	80070ac <vTaskSwitchContext+0x90>
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	605a      	str	r2, [r3, #4]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <vTaskSwitchContext+0xb8>)
 80070b4:	6013      	str	r3, [r2, #0]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000790 	.word	0x20000790
 80070c8:	2000077c 	.word	0x2000077c
 80070cc:	20000770 	.word	0x20000770
 80070d0:	2000066c 	.word	0x2000066c
 80070d4:	20000668 	.word	0x20000668

080070d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10c      	bne.n	8007102 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	b672      	cpsid	i
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	b662      	cpsie	i
 80070fc:	60fb      	str	r3, [r7, #12]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007102:	4b07      	ldr	r3, [pc, #28]	; (8007120 <vTaskPlaceOnEventList+0x48>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3318      	adds	r3, #24
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fe fc83 	bl	8005a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007110:	2101      	movs	r1, #1
 8007112:	6838      	ldr	r0, [r7, #0]
 8007114:	f000 fb82 	bl	800781c <prvAddCurrentTaskToDelayedList>
}
 8007118:	bf00      	nop
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000668 	.word	0x20000668

08007124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10c      	bne.n	8007154 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	b672      	cpsid	i
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	b662      	cpsie	i
 800714e:	60fb      	str	r3, [r7, #12]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3318      	adds	r3, #24
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fc95 	bl	8005a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <xTaskRemoveFromEventList+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d11c      	bne.n	80071a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3304      	adds	r3, #4
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fc8c 	bl	8005a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	2201      	movs	r2, #1
 8007176:	409a      	lsls	r2, r3
 8007178:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <xTaskRemoveFromEventList+0xb4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4313      	orrs	r3, r2
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <xTaskRemoveFromEventList+0xb4>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4a13      	ldr	r2, [pc, #76]	; (80071dc <xTaskRemoveFromEventList+0xb8>)
 8007190:	441a      	add	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3304      	adds	r3, #4
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f7fe fc18 	bl	80059ce <vListInsertEnd>
 800719e:	e005      	b.n	80071ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3318      	adds	r3, #24
 80071a4:	4619      	mov	r1, r3
 80071a6:	480e      	ldr	r0, [pc, #56]	; (80071e0 <xTaskRemoveFromEventList+0xbc>)
 80071a8:	f7fe fc11 	bl	80059ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <xTaskRemoveFromEventList+0xc0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d905      	bls.n	80071c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071be:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <xTaskRemoveFromEventList+0xc4>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e001      	b.n	80071ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071ca:	697b      	ldr	r3, [r7, #20]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000790 	.word	0x20000790
 80071d8:	20000770 	.word	0x20000770
 80071dc:	2000066c 	.word	0x2000066c
 80071e0:	20000728 	.word	0x20000728
 80071e4:	20000668 	.word	0x20000668
 80071e8:	2000077c 	.word	0x2000077c

080071ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <vTaskInternalSetTimeOutState+0x24>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <vTaskInternalSetTimeOutState+0x28>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20000780 	.word	0x20000780
 8007214:	2000076c 	.word	0x2000076c

08007218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10c      	bne.n	8007242 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	b672      	cpsid	i
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	b662      	cpsie	i
 800723c:	613b      	str	r3, [r7, #16]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10c      	bne.n	8007262 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	b672      	cpsid	i
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	b662      	cpsie	i
 800725c:	60fb      	str	r3, [r7, #12]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007262:	f000 fc4b 	bl	8007afc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007266:	4b1d      	ldr	r3, [pc, #116]	; (80072dc <xTaskCheckForTimeOut+0xc4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d102      	bne.n	8007286 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	e023      	b.n	80072ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <xTaskCheckForTimeOut+0xc8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d007      	beq.n	80072a2 <xTaskCheckForTimeOut+0x8a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	429a      	cmp	r2, r3
 800729a:	d302      	bcc.n	80072a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800729c:	2301      	movs	r3, #1
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e015      	b.n	80072ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d20b      	bcs.n	80072c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff97 	bl	80071ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e004      	b.n	80072ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072ce:	f000 fc49 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 80072d2:	69fb      	ldr	r3, [r7, #28]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3720      	adds	r7, #32
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	2000076c 	.word	0x2000076c
 80072e0:	20000780 	.word	0x20000780

080072e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072e8:	4b03      	ldr	r3, [pc, #12]	; (80072f8 <vTaskMissedYield+0x14>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
}
 80072ee:	bf00      	nop
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	2000077c 	.word	0x2000077c

080072fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007304:	f000 f852 	bl	80073ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <prvIdleTask+0x28>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d9f9      	bls.n	8007304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <prvIdleTask+0x2c>)
 8007312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007320:	e7f0      	b.n	8007304 <prvIdleTask+0x8>
 8007322:	bf00      	nop
 8007324:	2000066c 	.word	0x2000066c
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007332:	2300      	movs	r3, #0
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	e00c      	b.n	8007352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4a12      	ldr	r2, [pc, #72]	; (800738c <prvInitialiseTaskLists+0x60>)
 8007344:	4413      	add	r3, r2
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fb14 	bl	8005974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3301      	adds	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b06      	cmp	r3, #6
 8007356:	d9ef      	bls.n	8007338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007358:	480d      	ldr	r0, [pc, #52]	; (8007390 <prvInitialiseTaskLists+0x64>)
 800735a:	f7fe fb0b 	bl	8005974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800735e:	480d      	ldr	r0, [pc, #52]	; (8007394 <prvInitialiseTaskLists+0x68>)
 8007360:	f7fe fb08 	bl	8005974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007364:	480c      	ldr	r0, [pc, #48]	; (8007398 <prvInitialiseTaskLists+0x6c>)
 8007366:	f7fe fb05 	bl	8005974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800736a:	480c      	ldr	r0, [pc, #48]	; (800739c <prvInitialiseTaskLists+0x70>)
 800736c:	f7fe fb02 	bl	8005974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007370:	480b      	ldr	r0, [pc, #44]	; (80073a0 <prvInitialiseTaskLists+0x74>)
 8007372:	f7fe faff 	bl	8005974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <prvInitialiseTaskLists+0x78>)
 8007378:	4a05      	ldr	r2, [pc, #20]	; (8007390 <prvInitialiseTaskLists+0x64>)
 800737a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <prvInitialiseTaskLists+0x7c>)
 800737e:	4a05      	ldr	r2, [pc, #20]	; (8007394 <prvInitialiseTaskLists+0x68>)
 8007380:	601a      	str	r2, [r3, #0]
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	2000066c 	.word	0x2000066c
 8007390:	200006f8 	.word	0x200006f8
 8007394:	2000070c 	.word	0x2000070c
 8007398:	20000728 	.word	0x20000728
 800739c:	2000073c 	.word	0x2000073c
 80073a0:	20000754 	.word	0x20000754
 80073a4:	20000720 	.word	0x20000720
 80073a8:	20000724 	.word	0x20000724

080073ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073b2:	e019      	b.n	80073e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073b4:	f000 fba2 	bl	8007afc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b8:	4b10      	ldr	r3, [pc, #64]	; (80073fc <prvCheckTasksWaitingTermination+0x50>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fb5f 	bl	8005a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ca:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <prvCheckTasksWaitingTermination+0x54>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	4a0b      	ldr	r2, [pc, #44]	; (8007400 <prvCheckTasksWaitingTermination+0x54>)
 80073d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <prvCheckTasksWaitingTermination+0x58>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3b01      	subs	r3, #1
 80073da:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <prvCheckTasksWaitingTermination+0x58>)
 80073dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073de:	f000 fbc1 	bl	8007b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f810 	bl	8007408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <prvCheckTasksWaitingTermination+0x58>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e1      	bne.n	80073b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	2000073c 	.word	0x2000073c
 8007400:	20000768 	.word	0x20000768
 8007404:	20000750 	.word	0x20000750

08007408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fd67 	bl	8007ee8 <vPortFree>
			vPortFree( pxTCB );
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fd64 	bl	8007ee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <prvResetNextTaskUnblockTime+0x38>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <prvResetNextTaskUnblockTime+0x3c>)
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007440:	e008      	b.n	8007454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <prvResetNextTaskUnblockTime+0x38>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4a04      	ldr	r2, [pc, #16]	; (8007464 <prvResetNextTaskUnblockTime+0x3c>)
 8007452:	6013      	str	r3, [r2, #0]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000720 	.word	0x20000720
 8007464:	20000788 	.word	0x20000788

08007468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <xTaskGetSchedulerState+0x34>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007476:	2301      	movs	r3, #1
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	e008      	b.n	800748e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <xTaskGetSchedulerState+0x38>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007484:	2302      	movs	r3, #2
 8007486:	607b      	str	r3, [r7, #4]
 8007488:	e001      	b.n	800748e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800748e:	687b      	ldr	r3, [r7, #4]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20000774 	.word	0x20000774
 80074a0:	20000790 	.word	0x20000790

080074a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d069      	beq.n	800758e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074be:	4b36      	ldr	r3, [pc, #216]	; (8007598 <xTaskPriorityInherit+0xf4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d259      	bcs.n	800757c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	db06      	blt.n	80074de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d0:	4b31      	ldr	r3, [pc, #196]	; (8007598 <xTaskPriorityInherit+0xf4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f1c3 0207 	rsb	r2, r3, #7
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6959      	ldr	r1, [r3, #20]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4a2b      	ldr	r2, [pc, #172]	; (800759c <xTaskPriorityInherit+0xf8>)
 80074f0:	4413      	add	r3, r2
 80074f2:	4299      	cmp	r1, r3
 80074f4:	d13a      	bne.n	800756c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fac4 	bl	8005a88 <uxListRemove>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d115      	bne.n	8007532 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	4924      	ldr	r1, [pc, #144]	; (800759c <xTaskPriorityInherit+0xf8>)
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <xTaskPriorityInherit+0x8e>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2201      	movs	r2, #1
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	43da      	mvns	r2, r3
 8007528:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <xTaskPriorityInherit+0xfc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4013      	ands	r3, r2
 800752e:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <xTaskPriorityInherit+0xfc>)
 8007530:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007532:	4b19      	ldr	r3, [pc, #100]	; (8007598 <xTaskPriorityInherit+0xf4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	2201      	movs	r2, #1
 8007542:	409a      	lsls	r2, r3
 8007544:	4b16      	ldr	r3, [pc, #88]	; (80075a0 <xTaskPriorityInherit+0xfc>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4313      	orrs	r3, r2
 800754a:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <xTaskPriorityInherit+0xfc>)
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4a10      	ldr	r2, [pc, #64]	; (800759c <xTaskPriorityInherit+0xf8>)
 800755c:	441a      	add	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe fa32 	bl	80059ce <vListInsertEnd>
 800756a:	e004      	b.n	8007576 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <xTaskPriorityInherit+0xf4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	e008      	b.n	800758e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <xTaskPriorityInherit+0xf4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	429a      	cmp	r2, r3
 8007588:	d201      	bcs.n	800758e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800758a:	2301      	movs	r3, #1
 800758c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800758e:	68fb      	ldr	r3, [r7, #12]
	}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000668 	.word	0x20000668
 800759c:	2000066c 	.word	0x2000066c
 80075a0:	20000770 	.word	0x20000770

080075a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d072      	beq.n	80076a0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075ba:	4b3c      	ldr	r3, [pc, #240]	; (80076ac <xTaskPriorityDisinherit+0x108>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d00c      	beq.n	80075de <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	60fb      	str	r3, [r7, #12]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10c      	bne.n	8007600 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	b672      	cpsid	i
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	b662      	cpsie	i
 80075fa:	60bb      	str	r3, [r7, #8]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007604:	1e5a      	subs	r2, r3, #1
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	429a      	cmp	r2, r3
 8007614:	d044      	beq.n	80076a0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761a:	2b00      	cmp	r3, #0
 800761c:	d140      	bne.n	80076a0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fa30 	bl	8005a88 <uxListRemove>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d115      	bne.n	800765a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007632:	491f      	ldr	r1, [pc, #124]	; (80076b0 <xTaskPriorityDisinherit+0x10c>)
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xTaskPriorityDisinherit+0xb6>
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	2201      	movs	r2, #1
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	43da      	mvns	r2, r3
 8007650:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <xTaskPriorityDisinherit+0x110>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4013      	ands	r3, r2
 8007656:	4a17      	ldr	r2, [pc, #92]	; (80076b4 <xTaskPriorityDisinherit+0x110>)
 8007658:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f1c3 0207 	rsb	r2, r3, #7
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	2201      	movs	r2, #1
 8007674:	409a      	lsls	r2, r3
 8007676:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <xTaskPriorityDisinherit+0x110>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4313      	orrs	r3, r2
 800767c:	4a0d      	ldr	r2, [pc, #52]	; (80076b4 <xTaskPriorityDisinherit+0x110>)
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <xTaskPriorityDisinherit+0x10c>)
 800768e:	441a      	add	r2, r3
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7fe f999 	bl	80059ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076a0:	697b      	ldr	r3, [r7, #20]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000668 	.word	0x20000668
 80076b0:	2000066c 	.word	0x2000066c
 80076b4:	20000770 	.word	0x20000770

080076b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076c6:	2301      	movs	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8087 	beq.w	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10c      	bne.n	80076f4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	b672      	cpsid	i
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	b662      	cpsie	i
 80076ee:	60fb      	str	r3, [r7, #12]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d902      	bls.n	8007704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	e002      	b.n	800770a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007708:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	429a      	cmp	r2, r3
 8007712:	d065      	beq.n	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	429a      	cmp	r2, r3
 800771c:	d160      	bne.n	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800771e:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	429a      	cmp	r2, r3
 8007726:	d10c      	bne.n	8007742 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	b672      	cpsid	i
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	b662      	cpsie	i
 800773c:	60bb      	str	r3, [r7, #8]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	db04      	blt.n	8007760 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f1c3 0207 	rsb	r2, r3, #7
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	6959      	ldr	r1, [r3, #20]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4a1f      	ldr	r2, [pc, #124]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007770:	4413      	add	r3, r2
 8007772:	4299      	cmp	r1, r3
 8007774:	d134      	bne.n	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	3304      	adds	r3, #4
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe f984 	bl	8005a88 <uxListRemove>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d115      	bne.n	80077b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	4918      	ldr	r1, [pc, #96]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	2201      	movs	r2, #1
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43da      	mvns	r2, r3
 80077a8:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4013      	ands	r3, r2
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	2201      	movs	r2, #1
 80077b8:	409a      	lsls	r2, r3
 80077ba:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4313      	orrs	r3, r2
 80077c0:	4a0b      	ldr	r2, [pc, #44]	; (80077f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4a06      	ldr	r2, [pc, #24]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80077d2:	441a      	add	r2, r3
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe f8f7 	bl	80059ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e0:	bf00      	nop
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000668 	.word	0x20000668
 80077ec:	2000066c 	.word	0x2000066c
 80077f0:	20000770 	.word	0x20000770

080077f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <pvTaskIncrementMutexHeldCount+0x24>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <pvTaskIncrementMutexHeldCount+0x24>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007806:	3201      	adds	r2, #1
 8007808:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800780a:	4b03      	ldr	r3, [pc, #12]	; (8007818 <pvTaskIncrementMutexHeldCount+0x24>)
 800780c:	681b      	ldr	r3, [r3, #0]
	}
 800780e:	4618      	mov	r0, r3
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	20000668 	.word	0x20000668

0800781c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007826:	4b29      	ldr	r3, [pc, #164]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800782c:	4b28      	ldr	r3, [pc, #160]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3304      	adds	r3, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe f928 	bl	8005a88 <uxListRemove>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	2201      	movs	r2, #1
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43da      	mvns	r2, r3
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4013      	ands	r3, r2
 8007852:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007854:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d10a      	bne.n	8007874 <prvAddCurrentTaskToDelayedList+0x58>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007864:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3304      	adds	r3, #4
 800786a:	4619      	mov	r1, r3
 800786c:	481a      	ldr	r0, [pc, #104]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800786e:	f7fe f8ae 	bl	80059ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007872:	e026      	b.n	80078c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800787c:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	429a      	cmp	r2, r3
 800788a:	d209      	bcs.n	80078a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788c:	4b13      	ldr	r3, [pc, #76]	; (80078dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3304      	adds	r3, #4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fe f8bc 	bl	8005a16 <vListInsert>
}
 800789e:	e010      	b.n	80078c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a0:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7fe f8b2 	bl	8005a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078b2:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d202      	bcs.n	80078c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078bc:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6013      	str	r3, [r2, #0]
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	2000076c 	.word	0x2000076c
 80078d0:	20000668 	.word	0x20000668
 80078d4:	20000770 	.word	0x20000770
 80078d8:	20000754 	.word	0x20000754
 80078dc:	20000724 	.word	0x20000724
 80078e0:	20000720 	.word	0x20000720
 80078e4:	20000788 	.word	0x20000788

080078e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3b04      	subs	r3, #4
 80078f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b04      	subs	r3, #4
 8007906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0201 	bic.w	r2, r3, #1
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3b04      	subs	r3, #4
 8007916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007918:	4a0c      	ldr	r2, [pc, #48]	; (800794c <pxPortInitialiseStack+0x64>)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3b14      	subs	r3, #20
 8007922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3b04      	subs	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f06f 0202 	mvn.w	r2, #2
 8007936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3b20      	subs	r3, #32
 800793c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	08007951 	.word	0x08007951

08007950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800795a:	4b14      	ldr	r3, [pc, #80]	; (80079ac <prvTaskExitError+0x5c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d00c      	beq.n	800797e <prvTaskExitError+0x2e>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	b672      	cpsid	i
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	b662      	cpsie	i
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <prvTaskExitError+0x2c>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	b672      	cpsid	i
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	b662      	cpsie	i
 8007992:	60bb      	str	r3, [r7, #8]
}
 8007994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007996:	bf00      	nop
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0fc      	beq.n	8007998 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000014 	.word	0x20000014

080079b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <pxCurrentTCBConst2>)
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	f380 8809 	msr	PSP, r0
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8811 	msr	BASEPRI, r0
 80079ca:	4770      	bx	lr
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst2>:
 80079d0:	20000668 	.word	0x20000668
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079d8:	4808      	ldr	r0, [pc, #32]	; (80079fc <prvPortStartFirstTask+0x24>)
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	6800      	ldr	r0, [r0, #0]
 80079de:	f380 8808 	msr	MSP, r0
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8814 	msr	CONTROL, r0
 80079ea:	b662      	cpsie	i
 80079ec:	b661      	cpsie	f
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	df00      	svc	0
 80079f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079fa:	bf00      	nop
 80079fc:	e000ed08 	.word	0xe000ed08

08007a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a06:	4b37      	ldr	r3, [pc, #220]	; (8007ae4 <xPortStartScheduler+0xe4>)
 8007a08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ae8 <xPortStartScheduler+0xe8>)
 8007a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a2e:	4b2f      	ldr	r3, [pc, #188]	; (8007aec <xPortStartScheduler+0xec>)
 8007a30:	2207      	movs	r2, #7
 8007a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a34:	e009      	b.n	8007a4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007a36:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <xPortStartScheduler+0xec>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4a2b      	ldr	r2, [pc, #172]	; (8007aec <xPortStartScheduler+0xec>)
 8007a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d0ef      	beq.n	8007a36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a56:	4b25      	ldr	r3, [pc, #148]	; (8007aec <xPortStartScheduler+0xec>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1c3 0307 	rsb	r3, r3, #7
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d00c      	beq.n	8007a7c <xPortStartScheduler+0x7c>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	60bb      	str	r3, [r7, #8]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <xPortStartScheduler+0xec>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	4a1a      	ldr	r2, [pc, #104]	; (8007aec <xPortStartScheduler+0xec>)
 8007a84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a86:	4b19      	ldr	r3, [pc, #100]	; (8007aec <xPortStartScheduler+0xec>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <xPortStartScheduler+0xec>)
 8007a90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a9a:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007aa6:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a11      	ldr	r2, [pc, #68]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007aac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ab0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ab2:	f000 f8dd 	bl	8007c70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <xPortStartScheduler+0xf4>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007abc:	f000 f8fc 	bl	8007cb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ac0:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <xPortStartScheduler+0xf8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <xPortStartScheduler+0xf8>)
 8007ac6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007aca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007acc:	f7ff ff84 	bl	80079d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ad0:	f7ff faa4 	bl	800701c <vTaskSwitchContext>
	prvTaskExitError();
 8007ad4:	f7ff ff3c 	bl	8007950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	e000e400 	.word	0xe000e400
 8007ae8:	20000794 	.word	0x20000794
 8007aec:	20000798 	.word	0x20000798
 8007af0:	e000ed20 	.word	0xe000ed20
 8007af4:	20000014 	.word	0x20000014
 8007af8:	e000ef34 	.word	0xe000ef34

08007afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	607b      	str	r3, [r7, #4]
}
 8007b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b1a:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <vPortEnterCritical+0x60>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	4a0e      	ldr	r2, [pc, #56]	; (8007b5c <vPortEnterCritical+0x60>)
 8007b22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <vPortEnterCritical+0x60>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d111      	bne.n	8007b50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <vPortEnterCritical+0x64>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <vPortEnterCritical+0x54>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	b672      	cpsid	i
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	b662      	cpsie	i
 8007b4a:	603b      	str	r3, [r7, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vPortEnterCritical+0x52>
	}
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000014 	.word	0x20000014
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10c      	bne.n	8007b8c <vPortExitCritical+0x28>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	b672      	cpsid	i
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	b662      	cpsie	i
 8007b86:	607b      	str	r3, [r7, #4]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <vPortExitCritical+0x46>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f383 8811 	msr	BASEPRI, r3
}
 8007ba8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20000014 	.word	0x20000014
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bc0:	f3ef 8009 	mrs	r0, PSP
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <pxCurrentTCBConst>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f01e 0f10 	tst.w	lr, #16
 8007bd0:	bf08      	it	eq
 8007bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007be4:	b672      	cpsid	i
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	b662      	cpsie	i
 8007bf4:	f7ff fa12 	bl	800701c <vTaskSwitchContext>
 8007bf8:	f04f 0000 	mov.w	r0, #0
 8007bfc:	f380 8811 	msr	BASEPRI, r0
 8007c00:	bc09      	pop	{r0, r3}
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f01e 0f10 	tst.w	lr, #16
 8007c0e:	bf08      	it	eq
 8007c10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c14:	f380 8809 	msr	PSP, r0
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop

08007c20 <pxCurrentTCBConst>:
 8007c20:	20000668 	.word	0x20000668
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	607b      	str	r3, [r7, #4]
}
 8007c44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c46:	f7ff f92f 	bl	8006ea8 <xTaskIncrementTick>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <SysTick_Handler+0x44>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	f383 8811 	msr	BASEPRI, r3
}
 8007c62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c74:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <vPortSetupTimerInterrupt+0x34>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <vPortSetupTimerInterrupt+0x38>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vPortSetupTimerInterrupt+0x3c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <vPortSetupTimerInterrupt+0x40>)
 8007c86:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8a:	099b      	lsrs	r3, r3, #6
 8007c8c:	4a09      	ldr	r2, [pc, #36]	; (8007cb4 <vPortSetupTimerInterrupt+0x44>)
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c92:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <vPortSetupTimerInterrupt+0x34>)
 8007c94:	2207      	movs	r2, #7
 8007c96:	601a      	str	r2, [r3, #0]
}
 8007c98:	bf00      	nop
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	e000e010 	.word	0xe000e010
 8007ca8:	e000e018 	.word	0xe000e018
 8007cac:	20000008 	.word	0x20000008
 8007cb0:	10624dd3 	.word	0x10624dd3
 8007cb4:	e000e014 	.word	0xe000e014

08007cb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cc8 <vPortEnableVFP+0x10>
 8007cbc:	6801      	ldr	r1, [r0, #0]
 8007cbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cc2:	6001      	str	r1, [r0, #0]
 8007cc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cc6:	bf00      	nop
 8007cc8:	e000ed88 	.word	0xe000ed88

08007ccc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cd2:	f3ef 8305 	mrs	r3, IPSR
 8007cd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b0f      	cmp	r3, #15
 8007cdc:	d916      	bls.n	8007d0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cde:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <vPortValidateInterruptPriority+0x78>)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ce8:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <vPortValidateInterruptPriority+0x7c>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	7afa      	ldrb	r2, [r7, #11]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d20c      	bcs.n	8007d0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	b672      	cpsid	i
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	b662      	cpsie	i
 8007d06:	607b      	str	r3, [r7, #4]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <vPortValidateInterruptPriority+0x80>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d14:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <vPortValidateInterruptPriority+0x84>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d90c      	bls.n	8007d36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	b672      	cpsid	i
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	b662      	cpsie	i
 8007d30:	603b      	str	r3, [r7, #0]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <vPortValidateInterruptPriority+0x68>
	}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	e000e3f0 	.word	0xe000e3f0
 8007d48:	20000794 	.word	0x20000794
 8007d4c:	e000ed0c 	.word	0xe000ed0c
 8007d50:	20000798 	.word	0x20000798

08007d54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08a      	sub	sp, #40	; 0x28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d60:	f7fe ffd4 	bl	8006d0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d64:	4b5b      	ldr	r3, [pc, #364]	; (8007ed4 <pvPortMalloc+0x180>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d6c:	f000 f91a 	bl	8007fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d70:	4b59      	ldr	r3, [pc, #356]	; (8007ed8 <pvPortMalloc+0x184>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8092 	bne.w	8007ea2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01f      	beq.n	8007dc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007d84:	2208      	movs	r2, #8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d016      	beq.n	8007dc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <pvPortMalloc+0x70>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	617b      	str	r3, [r7, #20]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d06b      	beq.n	8007ea2 <pvPortMalloc+0x14e>
 8007dca:	4b44      	ldr	r3, [pc, #272]	; (8007edc <pvPortMalloc+0x188>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d866      	bhi.n	8007ea2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dd4:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <pvPortMalloc+0x18c>)
 8007dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dd8:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <pvPortMalloc+0x18c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dde:	e004      	b.n	8007dea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d903      	bls.n	8007dfc <pvPortMalloc+0xa8>
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f1      	bne.n	8007de0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dfc:	4b35      	ldr	r3, [pc, #212]	; (8007ed4 <pvPortMalloc+0x180>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d04d      	beq.n	8007ea2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	4413      	add	r3, r2
 8007e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	2308      	movs	r3, #8
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d921      	bls.n	8007e6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <pvPortMalloc+0x100>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	b672      	cpsid	i
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	b662      	cpsie	i
 8007e4e:	613b      	str	r3, [r7, #16]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e66:	69b8      	ldr	r0, [r7, #24]
 8007e68:	f000 f8fe 	bl	8008068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <pvPortMalloc+0x188>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	4a19      	ldr	r2, [pc, #100]	; (8007edc <pvPortMalloc+0x188>)
 8007e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e7a:	4b18      	ldr	r3, [pc, #96]	; (8007edc <pvPortMalloc+0x188>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <pvPortMalloc+0x190>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d203      	bcs.n	8007e8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <pvPortMalloc+0x188>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <pvPortMalloc+0x190>)
 8007e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <pvPortMalloc+0x184>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ea2:	f7fe ff41 	bl	8006d28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <pvPortMalloc+0x176>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	b672      	cpsid	i
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	b662      	cpsie	i
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <pvPortMalloc+0x174>
	return pvReturn;
 8007eca:	69fb      	ldr	r3, [r7, #28]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3728      	adds	r7, #40	; 0x28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	200043a4 	.word	0x200043a4
 8007ed8:	200043b0 	.word	0x200043b0
 8007edc:	200043a8 	.word	0x200043a8
 8007ee0:	2000439c 	.word	0x2000439c
 8007ee4:	200043ac 	.word	0x200043ac

08007ee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d04c      	beq.n	8007f94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007efa:	2308      	movs	r3, #8
 8007efc:	425b      	negs	r3, r3
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <vPortFree+0xb4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4013      	ands	r3, r2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10c      	bne.n	8007f30 <vPortFree+0x48>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	b672      	cpsid	i
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	b662      	cpsie	i
 8007f2a:	60fb      	str	r3, [r7, #12]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00c      	beq.n	8007f52 <vPortFree+0x6a>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	b672      	cpsid	i
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	b662      	cpsie	i
 8007f4c:	60bb      	str	r3, [r7, #8]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <vPortFree+0xb4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d019      	beq.n	8007f94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d115      	bne.n	8007f94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <vPortFree+0xb4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	43db      	mvns	r3, r3
 8007f72:	401a      	ands	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f78:	f7fe fec8 	bl	8006d0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <vPortFree+0xb8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4413      	add	r3, r2
 8007f86:	4a06      	ldr	r2, [pc, #24]	; (8007fa0 <vPortFree+0xb8>)
 8007f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f8a:	6938      	ldr	r0, [r7, #16]
 8007f8c:	f000 f86c 	bl	8008068 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f90:	f7fe feca 	bl	8006d28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f94:	bf00      	nop
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200043b0 	.word	0x200043b0
 8007fa0:	200043a8 	.word	0x200043a8

08007fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fb0:	4b27      	ldr	r3, [pc, #156]	; (8008050 <prvHeapInit+0xac>)
 8007fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <prvHeapInit+0xac>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <prvHeapInit+0xb0>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <prvHeapInit+0xb0>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a15      	ldr	r2, [pc, #84]	; (8008058 <prvHeapInit+0xb4>)
 8008004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <prvHeapInit+0xb4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <prvHeapInit+0xb4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008024:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvHeapInit+0xb4>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a0a      	ldr	r2, [pc, #40]	; (800805c <prvHeapInit+0xb8>)
 8008032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	4a09      	ldr	r2, [pc, #36]	; (8008060 <prvHeapInit+0xbc>)
 800803a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <prvHeapInit+0xc0>)
 800803e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	2000079c 	.word	0x2000079c
 8008054:	2000439c 	.word	0x2000439c
 8008058:	200043a4 	.word	0x200043a4
 800805c:	200043ac 	.word	0x200043ac
 8008060:	200043a8 	.word	0x200043a8
 8008064:	200043b0 	.word	0x200043b0

08008068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <prvInsertBlockIntoFreeList+0xac>)
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	e002      	b.n	800807c <prvInsertBlockIntoFreeList+0x14>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d8f7      	bhi.n	8008076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d108      	bne.n	80080aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	441a      	add	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d118      	bne.n	80080f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d00d      	beq.n	80080e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e008      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080e6:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e003      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d002      	beq.n	8008106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000439c 	.word	0x2000439c
 8008118:	200043a4 	.word	0x200043a4

0800811c <MAX581x_WriteCommand>:
#include "MAX581x.h"

void MAX581x_WriteCommand(MAX581x_Handler_t *dacDevice)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af02      	add	r7, sp, #8
 8008122:	6078      	str	r0, [r7, #4]
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	b299      	uxth	r1, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	1d5a      	adds	r2, r3, #5
 8008138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2303      	movs	r3, #3
 8008140:	f7fa fb7e 	bl	8002840 <HAL_I2C_Master_Transmit>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <MAX581x_Init>:
	dacDevice->i2cAddress = (0x10 | MAX581x_ADDRESS) << 1;
	HAL_I2C_Master_Transmit(dacDevice->i2cHandler, dacDevice->i2cAddress, dacDevice->txBuffer, 3, 1000);
}

void MAX581x_Init(MAX581x_Handler_t *dacDevice, I2C_HandleTypeDef *hi2c, uint8_t dacRefSelector)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	71fb      	strb	r3, [r7, #7]
	dacDevice->i2cHandler = hi2c;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	601a      	str	r2, [r3, #0]

	MAX581x_Config(dacDevice, MAX581x_DISABLE_LATCH | MAX581x_SEL_ALL, MAX581x_SEL_A | MAX581x_SEL_B | MAX581x_SEL_C | MAX581x_SEL_D);
 8008160:	220f      	movs	r2, #15
 8008162:	2141      	movs	r1, #65	; 0x41
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f80c 	bl	8008182 <MAX581x_Config>
	MAX581x_Reference(dacDevice, dacRefSelector | MAX581x_REF_PWR_ON);
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	f043 0304 	orr.w	r3, r3, #4
 8008170:	b2db      	uxtb	r3, r3
 8008172:	4619      	mov	r1, r3
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f81f 	bl	80081b8 <MAX581x_Reference>
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <MAX581x_Config>:

void MAX581x_Config(MAX581x_Handler_t *dacDevice, uint8_t dacLatch, uint8_t dacConfigSelector)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
 800818e:	4613      	mov	r3, r2
 8008190:	70bb      	strb	r3, [r7, #2]
	dacDevice->txBuffer[0] = MAX581x_CMD_CONFIG | dacLatch;
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008198:	b2da      	uxtb	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = dacConfigSelector;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	78ba      	ldrb	r2, [r7, #2]
 80081a2:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff ffb6 	bl	800811c <MAX581x_WriteCommand>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <MAX581x_Reference>:

void MAX581x_Reference(MAX581x_Handler_t *dacDevice, uint8_t dacRefConfig)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
	dacDevice->txBuffer[0] = MAX581x_CMD_REF | dacRefConfig;
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = 0x00;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = 0x00;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff9d 	bl	800811c <MAX581x_WriteCommand>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <MAX581x_Code>:

void MAX581x_Code(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
 80081f6:	4613      	mov	r3, r2
 80081f8:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn | dacSelector;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008200:	883b      	ldrh	r3, [r7, #0]
 8008202:	091b      	lsrs	r3, r3, #4
 8008204:	b29b      	uxth	r3, r3
 8008206:	b2da      	uxtb	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 800820c:	883b      	ldrh	r3, [r7, #0]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f023 030f 	bic.w	r3, r3, #15
 8008216:	b2da      	uxtb	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff ff7d 	bl	800811c <MAX581x_WriteCommand>
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <MAX581x_CodeLoad>:

	MAX581x_WriteCommand(dacDevice);
}

void MAX581x_CodeLoad(MAX581x_Handler_t *dacDevice, uint8_t dacSelector, uint16_t dacData)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
 8008236:	4613      	mov	r3, r2
 8008238:	803b      	strh	r3, [r7, #0]
	dacDevice->txBuffer[0] = MAX581x_CMD_CODEn_LOADn | dacSelector;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008240:	b2da      	uxtb	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	715a      	strb	r2, [r3, #5]
	dacDevice->txBuffer[1] = (uint8_t)((dacData >> MAX581x_RIGHT_SHIFT) & 0xFF);
 8008246:	883b      	ldrh	r3, [r7, #0]
 8008248:	091b      	lsrs	r3, r3, #4
 800824a:	b29b      	uxth	r3, r3
 800824c:	b2da      	uxtb	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	719a      	strb	r2, [r3, #6]
	dacDevice->txBuffer[2] = (uint8_t)((dacData << MAX581x_LEFT_SHIFT) & 0xF0);
 8008252:	883b      	ldrh	r3, [r7, #0]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	b2db      	uxtb	r3, r3
 8008258:	f023 030f 	bic.w	r3, r3, #15
 800825c:	b2da      	uxtb	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	71da      	strb	r2, [r3, #7]

	MAX581x_WriteCommand(dacDevice);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff ff5a 	bl	800811c <MAX581x_WriteCommand>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <PID_Init>:
 */

#include "pid.h"

void PID_Init(PID_Handler_t *pid, PID_Params_t params, PID_Status_t enable)
{
 8008270:	b084      	sub	sp, #16
 8008272:	b4b0      	push	{r4, r5, r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	f107 001c 	add.w	r0, r7, #28
 800827e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pid->params = params;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	461d      	mov	r5, r3
 8008286:	f107 041c 	add.w	r4, r7, #28
 800828a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800828c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800828e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008292:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	pid->enable = enable;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800829c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid->error = 0;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	621a      	str	r2, [r3, #32]
	pid->output = 0;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lastMeasure = 0;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->integral = 0;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->enable = enable;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bcb0      	pop	{r4, r5, r7}
 80082d2:	b004      	add	sp, #16
 80082d4:	4770      	bx	lr

080082d6 <PID_CloseLoop>:

void PID_CloseLoop(PID_Handler_t *pid, float reference, float measure)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b087      	sub	sp, #28
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	ed87 0a02 	vstr	s0, [r7, #8]
 80082e2:	edc7 0a01 	vstr	s1, [r7, #4]
	if(pid->enable != PID_STATUS_ENABLE)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d006      	beq.n	80082fe <PID_CloseLoop+0x28>
	{
		pid->lastMeasure = measure;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	629a      	str	r2, [r3, #40]	; 0x28
		pid->output = reference;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24
		return;
 80082fc:	e085      	b.n	800840a <PID_CloseLoop+0x134>
	}
	pid->ref = reference;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	61da      	str	r2, [r3, #28]
	pid->error = pid->ref - measure;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	ed93 7a07 	vldr	s14, [r3, #28]
 800830a:	edd7 7a01 	vldr	s15, [r7, #4]
 800830e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->integral += pid->error * pid->params.Ki;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	edd3 6a08 	vldr	s13, [r3, #32]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	edd3 7a01 	vldr	s15, [r3, #4]
 800832a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800832e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	if (pid->integral > pid->params.integralMax)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	edd3 7a05 	vldr	s15, [r3, #20]
 8008344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834c:	dd04      	ble.n	8008358 <PID_CloseLoop+0x82>
	{
		pid->integral = pid->params.integralMax;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	695a      	ldr	r2, [r3, #20]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	62da      	str	r2, [r3, #44]	; 0x2c
 8008356:	e014      	b.n	8008382 <PID_CloseLoop+0xac>
	}
	else if (pid->integral < -pid->params.integralMax)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	edd3 7a05 	vldr	s15, [r3, #20]
 8008364:	eef1 7a67 	vneg.f32	s15, s15
 8008368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800836c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008370:	d507      	bpl.n	8008382 <PID_CloseLoop+0xac>
	{
		pid->integral = -pid->params.integralMax;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	edd3 7a05 	vldr	s15, [r3, #20]
 8008378:	eef1 7a67 	vneg.f32	s15, s15
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	}
	
	float measDiff = measure - pid->lastMeasure;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008388:	ed97 7a01 	vldr	s14, [r7, #4]
 800838c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008390:	edc7 7a05 	vstr	s15, [r7, #20]
		
	pid->output = pid->error * pid->params.Kp + pid->integral + measDiff * pid->params.Kd;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	ed93 7a08 	vldr	s14, [r3, #32]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	edd3 7a00 	vldr	s15, [r3]
 80083a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80083aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80083b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80083b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (pid->output > pid->params.outputMax)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80083d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083da:	dd04      	ble.n	80083e6 <PID_CloseLoop+0x110>
	{
		pid->output = pid->params.outputMax;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	625a      	str	r2, [r3, #36]	; 0x24
 80083e4:	e00e      	b.n	8008404 <PID_CloseLoop+0x12e>
	}		
	else if (pid->output < pid->params.outputMin)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80083f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fa:	d503      	bpl.n	8008404 <PID_CloseLoop+0x12e>
	{
		pid->output = pid->params.outputMin;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	625a      	str	r2, [r3, #36]	; 0x24
	}

	pid->lastMeasure = measure;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	629a      	str	r2, [r3, #40]	; 0x28
}
 800840a:	371c      	adds	r7, #28
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <Board_LedToggle>:
	/* Include HAL or LL function */
	HAL_GPIO_WritePin(Led_GPIO, Led_Pin, GPIO_PIN_RESET);
}

void Board_LedToggle(GPIO_TypeDef* Led_GPIO, uint16_t Led_Pin)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
	/* Include HAL or LL function */
	HAL_GPIO_TogglePin(Led_GPIO, Led_Pin);
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fa f960 	bl	80026ea <HAL_GPIO_TogglePin>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <Board_GetID>:

uint16_t Board_GetID()
{
 8008434:	b598      	push	{r3, r4, r7, lr}
 8008436:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008438:	2102      	movs	r1, #2
 800843a:	481b      	ldr	r0, [pc, #108]	; (80084a8 <Board_GetID+0x74>)
 800843c:	f7fa f924 	bl	8002688 <HAL_GPIO_ReadPin>
 8008440:	4603      	mov	r3, r0
 8008442:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8008444:	2101      	movs	r1, #1
 8008446:	4818      	ldr	r0, [pc, #96]	; (80084a8 <Board_GetID+0x74>)
 8008448:	f7fa f91e 	bl	8002688 <HAL_GPIO_ReadPin>
 800844c:	4603      	mov	r3, r0
 800844e:	005b      	lsls	r3, r3, #1
	return (HAL_GPIO_ReadPin(DS_GPIO_1, DS_PIN_1)|
 8008450:	b21b      	sxth	r3, r3
 8008452:	4323      	orrs	r3, r4
 8008454:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800845a:	4814      	ldr	r0, [pc, #80]	; (80084ac <Board_GetID+0x78>)
 800845c:	f7fa f914 	bl	8002688 <HAL_GPIO_ReadPin>
 8008460:	4603      	mov	r3, r0
 8008462:	009b      	lsls	r3, r3, #2
	HAL_GPIO_ReadPin(DS_GPIO_2, DS_PIN_2) << 1|
 8008464:	b21b      	sxth	r3, r3
 8008466:	4323      	orrs	r3, r4
 8008468:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 800846a:	2104      	movs	r1, #4
 800846c:	4810      	ldr	r0, [pc, #64]	; (80084b0 <Board_GetID+0x7c>)
 800846e:	f7fa f90b 	bl	8002688 <HAL_GPIO_ReadPin>
 8008472:	4603      	mov	r3, r0
 8008474:	00db      	lsls	r3, r3, #3
	HAL_GPIO_ReadPin(DS_GPIO_3, DS_PIN_3) << 2|
 8008476:	b21b      	sxth	r3, r3
 8008478:	4323      	orrs	r3, r4
 800847a:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 800847c:	2110      	movs	r1, #16
 800847e:	480d      	ldr	r0, [pc, #52]	; (80084b4 <Board_GetID+0x80>)
 8008480:	f7fa f902 	bl	8002688 <HAL_GPIO_ReadPin>
 8008484:	4603      	mov	r3, r0
 8008486:	011b      	lsls	r3, r3, #4
	HAL_GPIO_ReadPin(DS_GPIO_4, DS_PIN_4) << 3|
 8008488:	b21b      	sxth	r3, r3
 800848a:	4323      	orrs	r3, r4
 800848c:	b21c      	sxth	r4, r3
	HAL_GPIO_ReadPin(DS_GPIO_6, DS_PIN_6) << 5);
 800848e:	2110      	movs	r1, #16
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <Board_GetID+0x84>)
 8008492:	f7fa f8f9 	bl	8002688 <HAL_GPIO_ReadPin>
 8008496:	4603      	mov	r3, r0
 8008498:	015b      	lsls	r3, r3, #5
	HAL_GPIO_ReadPin(DS_GPIO_5, DS_PIN_5) << 4|
 800849a:	b21b      	sxth	r3, r3
 800849c:	4323      	orrs	r3, r4
 800849e:	b21b      	sxth	r3, r3
 80084a0:	b29b      	uxth	r3, r3
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	bd98      	pop	{r3, r4, r7, pc}
 80084a6:	bf00      	nop
 80084a8:	40022400 	.word	0x40022400
 80084ac:	40022000 	.word	0x40022000
 80084b0:	40020400 	.word	0x40020400
 80084b4:	40020800 	.word	0x40020800
 80084b8:	40021c00 	.word	0x40021c00
 80084bc:	00000000 	.word	0x00000000

080084c0 <Encoder_Update>:
 */

#include "encoder.h"

float Encoder_Update(Encoder_Handler_t *encoderDevice, float sampleTime)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	ed87 0a00 	vstr	s0, [r7]
	if(encoderDevice->enable != ENCODER_STATUS_ENABLE)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7c1b      	ldrb	r3, [r3, #16]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d002      	beq.n	80084da <Encoder_Update+0x1a>
		return 0;
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	e03a      	b.n	8008550 <Encoder_Update+0x90>
	{
		speed = 0.0f;
	}
	*/
	/* TESTING */
	int16_t encPos = (int16_t)*encoderDevice->count;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	82fb      	strh	r3, [r7, #22]
	float encPosF = fabs((float)encPos) < 2.0f ? 0.0f : (float)encPos;
 80084e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084ee:	eef0 7ae7 	vabs.f32	s15, s15
 80084f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80084f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fe:	d502      	bpl.n	8008506 <Encoder_Update+0x46>
 8008500:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8008570 <Encoder_Update+0xb0>
 8008504:	e005      	b.n	8008512 <Encoder_Update+0x52>
 8008506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008512:	edc7 7a04 	vstr	s15, [r7, #16]

	*encoderDevice->count = 0;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
	float speed = encPosF * 2 * M_PI / (ENCODER_CPR * sampleTime);
 800851e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008522:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008526:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800852a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8008568 <Encoder_Update+0xa8>
 800852e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8008532:	edd7 7a00 	vldr	s15, [r7]
 8008536:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008574 <Encoder_Update+0xb4>
 800853a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800853e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008542:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008546:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800854a:	edc7 7a03 	vstr	s15, [r7, #12]

	//return encPosF;
	return speed;
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eeb0 0a67 	vmov.f32	s0, s15
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	f3af 8000 	nop.w
 8008568:	54442d18 	.word	0x54442d18
 800856c:	400921fb 	.word	0x400921fb
 8008570:	00000000 	.word	0x00000000
 8008574:	46000000 	.word	0x46000000

08008578 <Motor_Init>:
 */

#include "motor.h"

void Motor_Init(Motor_Handler_t *motorDevice, uint8_t motorID, Motor_Status_t enable)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
 8008584:	4613      	mov	r3, r2
 8008586:	70bb      	strb	r3, [r7, #2]
	motorDevice->enable = enable;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	78ba      	ldrb	r2, [r7, #2]
 800858c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	motorDevice->outputID = motorID;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	motorDevice->refSpeed = 0;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f04f 0200 	mov.w	r2, #0
 800859e:	671a      	str	r2, [r3, #112]	; 0x70
	motorDevice->measSpeed = 0;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	675a      	str	r2, [r3, #116]	; 0x74
	Motor_Enable(motorDevice, enable);
 80085a8:	78bb      	ldrb	r3, [r7, #2]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f857 	bl	8008660 <Motor_Enable>
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <Motor_CLDrive>:

	Motor_SetVoltage(motorDevice, dacDevice, speed * WHEEL_GEAR_RATIO * MOTOR_SPEED_CONV);
}

void Motor_CLDrive(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	ed87 0a01 	vstr	s0, [r7, #4]
  /*
  if (motorDevice->refSpeed == 0.0f) Motor_Enable(motorDevice, MOTOR_STATUS_DISABLE);
  else Motor_Enable(motorDevice, MOTOR_STATUS_ENABLE);
  */
	/* Apply PID */
	motorDevice->refSpeed = speed * SPEED_CNT_RATIO;
 80085ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80085ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80085d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80085d6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800865c <Motor_CLDrive+0xa0>
 80085da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	motorDevice->measSpeed = Encoder_Update(&motorDevice->encoder, motorDevice->pid.params.sampleTime);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80085f0:	eeb0 0a67 	vmov.f32	s0, s15
 80085f4:	4610      	mov	r0, r2
 80085f6:	f7ff ff63 	bl	80084c0 <Encoder_Update>
 80085fa:	eef0 7a40 	vmov.f32	s15, s0
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	PID_CloseLoop(&motorDevice->pid, motorDevice->refSpeed, motorDevice->measSpeed);
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8008612:	eef0 0a47 	vmov.f32	s1, s14
 8008616:	eeb0 0a67 	vmov.f32	s0, s15
 800861a:	4610      	mov	r0, r2
 800861c:	f7ff fe5b 	bl	80082d6 <PID_CloseLoop>
	
	if(fabs(motorDevice->pid.output) < 4.0)	{
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008626:	eef0 7ae7 	vabs.f32	s15, s15
 800862a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800862e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008636:	d503      	bpl.n	8008640 <Motor_CLDrive+0x84>
		motorDevice->pid.output = 0.0;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	Motor_SetVoltage(motorDevice, dacDevice, motorDevice->pid.output);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008646:	eeb0 0a67 	vmov.f32	s0, s15
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f84b 	bl	80086e8 <Motor_SetVoltage>
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	3cdd82fd 	.word	0x3cdd82fd

08008660 <Motor_Enable>:

void Motor_Enable(Motor_Handler_t *motorDevice, Motor_Status_t enable)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
	motorDevice->enable = enable;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	if(enable == MOTOR_STATUS_DISABLE)
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <Motor_Enable+0x2e>
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_RESET);	
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008684:	2200      	movs	r2, #0
 8008686:	4619      	mov	r1, r3
 8008688:	f7fa f816 	bl	80026b8 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
	}		
}
 800868c:	e008      	b.n	80086a0 <Motor_Enable+0x40>
		HAL_GPIO_WritePin(motorDevice->enablePin.GPIOx, motorDevice->enablePin.GPIO_Pin, GPIO_PIN_SET);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008698:	2201      	movs	r2, #1
 800869a:	4619      	mov	r1, r3
 800869c:	f7fa f80c 	bl	80026b8 <HAL_GPIO_WritePin>
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <Motor_SetBrake>:

void Motor_SetBrake(Motor_Handler_t *motorDevice, uint8_t brake)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
	if(brake == MOTOR_BRAKE_ENABLE)
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d109      	bne.n	80086ce <Motor_SetBrake+0x26>
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_RESET);	
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086c4:	2200      	movs	r2, #0
 80086c6:	4619      	mov	r1, r3
 80086c8:	f7f9 fff6 	bl	80026b8 <HAL_GPIO_WritePin>
	}		
	else
	{
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
	}	
}
 80086cc:	e008      	b.n	80086e0 <Motor_SetBrake+0x38>
		HAL_GPIO_WritePin(motorDevice->brakePin.GPIOx, motorDevice->brakePin.GPIO_Pin, GPIO_PIN_SET);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086d8:	2201      	movs	r2, #1
 80086da:	4619      	mov	r1, r3
 80086dc:	f7f9 ffec 	bl	80026b8 <HAL_GPIO_WritePin>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <Motor_SetVoltage>:

void Motor_SetVoltage(Motor_Handler_t *motorDevice, MAX581x_Handler_t *dacDevice, float speed)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed >= (float)0.0)
 80086f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80086fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008702:	db1d      	blt.n	8008740 <Motor_SetVoltage+0x58>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_SET);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800870e:	2201      	movs	r2, #1
 8008710:	4619      	mov	r1, r3
 8008712:	f7f9 ffd1 	bl	80026b8 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(speed);
 8008716:	edd7 7a01 	vldr	s15, [r7, #4]
 800871a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871e:	ee17 3a90 	vmov	r3, s15
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8008736:	461a      	mov	r2, r3
 8008738:	68b8      	ldr	r0, [r7, #8]
 800873a:	f7ff fd76 	bl	800822a <MAX581x_CodeLoad>
	{
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
		motorDevice->voltage = (uint16_t)(fabs(speed));
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
	}	
}
 800873e:	e01e      	b.n	800877e <Motor_SetVoltage+0x96>
		HAL_GPIO_WritePin(motorDevice->dirPin.GPIOx, motorDevice->dirPin.GPIO_Pin, GPIO_PIN_RESET);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800874a:	2200      	movs	r2, #0
 800874c:	4619      	mov	r1, r3
 800874e:	f7f9 ffb3 	bl	80026b8 <HAL_GPIO_WritePin>
		motorDevice->voltage = (uint16_t)(fabs(speed));
 8008752:	edd7 7a01 	vldr	s15, [r7, #4]
 8008756:	eef0 7ae7 	vabs.f32	s15, s15
 800875a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800875e:	ee17 3a90 	vmov	r3, s15
 8008762:	b29a      	uxth	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		MAX581x_CodeLoad(dacDevice, motorDevice->outputID, motorDevice->voltage);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8008776:	461a      	mov	r2, r3
 8008778:	68b8      	ldr	r0, [r7, #8]
 800877a:	f7ff fd56 	bl	800822a <MAX581x_CodeLoad>
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6898      	ldr	r0, [r3, #8]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8a5b      	ldrh	r3, [r3, #18]
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	4619      	mov	r1, r3
 800879e:	f7f9 ff8b 	bl	80026b8 <HAL_GPIO_WritePin>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6858      	ldr	r0, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8a1b      	ldrh	r3, [r3, #16]
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7f9 ff79 	bl	80026b8 <HAL_GPIO_WritePin>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	887a      	ldrh	r2, [r7, #2]
 80087ec:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8bba      	ldrh	r2, [r7, #28]
 80087f8:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 80087fa:	2101      	movs	r1, #1
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff ffd4 	bl	80087aa <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 8008802:	2100      	movs	r1, #0
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff ffbe 	bl	8008786 <nRF24_CE_State>
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 8008812:	b580      	push	{r7, lr}
 8008814:	b086      	sub	sp, #24
 8008816:	af02      	add	r7, sp, #8
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	f107 020f 	add.w	r2, r7, #15
 8008826:	1cf9      	adds	r1, r7, #3
 8008828:	f242 7310 	movw	r3, #10000	; 0x2710
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2301      	movs	r3, #1
 8008830:	f7fb ff09 	bl	8004646 <HAL_SPI_TransmitReceive>
  return rxData;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff ffac 	bl	80087aa <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ffd8 	bl	8008812 <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008862:	21ff      	movs	r1, #255	; 0xff
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff ffd4 	bl	8008812 <nRF24_LL_RW>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 800886e:	2101      	movs	r1, #1
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff ff9a 	bl	80087aa <nRF24_CSN_State>

  return value;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
 800888c:	4613      	mov	r3, r2
 800888e:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff ff89 	bl	80087aa <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	2b1f      	cmp	r3, #31
 800889c:	d812      	bhi.n	80088c4 <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800889e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088a2:	f003 031f 	and.w	r3, r3, #31
 80088a6:	b25b      	sxtb	r3, r3
 80088a8:	f043 0320 	orr.w	r3, r3, #32
 80088ac:	b25b      	sxtb	r3, r3
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff ffad 	bl	8008812 <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 80088b8:	78bb      	ldrb	r3, [r7, #2]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff ffa8 	bl	8008812 <nRF24_LL_RW>
 80088c2:	e015      	b.n	80088f0 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ffa2 	bl	8008812 <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	2be1      	cmp	r3, #225	; 0xe1
 80088d2:	d00d      	beq.n	80088f0 <nRF24_WriteReg+0x70>
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2be2      	cmp	r3, #226	; 0xe2
 80088d8:	d00a      	beq.n	80088f0 <nRF24_WriteReg+0x70>
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	2be3      	cmp	r3, #227	; 0xe3
 80088de:	d007      	beq.n	80088f0 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	2bff      	cmp	r3, #255	; 0xff
 80088e4:	d004      	beq.n	80088f0 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 80088e6:	78bb      	ldrb	r3, [r7, #2]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ff91 	bl	8008812 <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 80088f0:	2101      	movs	r1, #1
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff ff59 	bl	80087aa <nRF24_CSN_State>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8008900:	b590      	push	{r4, r7, lr}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	461a      	mov	r2, r3
 800890c:	460b      	mov	r3, r1
 800890e:	72fb      	strb	r3, [r7, #11]
 8008910:	4613      	mov	r3, r2
 8008912:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008914:	2100      	movs	r1, #0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff ff47 	bl	80087aa <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	4619      	mov	r1, r3
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff ff76 	bl	8008812 <nRF24_LL_RW>
  while (count--)
 8008926:	e008      	b.n	800893a <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8008928:	687c      	ldr	r4, [r7, #4]
 800892a:	1c63      	adds	r3, r4, #1
 800892c:	607b      	str	r3, [r7, #4]
 800892e:	21ff      	movs	r1, #255	; 0xff
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7ff ff6e 	bl	8008812 <nRF24_LL_RW>
 8008936:	4603      	mov	r3, r0
 8008938:	7023      	strb	r3, [r4, #0]
  while (count--)
 800893a:	7abb      	ldrb	r3, [r7, #10]
 800893c:	1e5a      	subs	r2, r3, #1
 800893e:	72ba      	strb	r2, [r7, #10]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1f1      	bne.n	8008928 <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008944:	2101      	movs	r1, #1
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff ff2f 	bl	80087aa <nRF24_CSN_State>
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	bd90      	pop	{r4, r7, pc}

08008954 <nRF24_Init>:
    nRF24_LL_RW(device, *pBuf++);
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
}

void nRF24_Init(nRF24_Handler_t *device) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 800895c:	2208      	movs	r2, #8
 800895e:	2100      	movs	r1, #0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff ff8d 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 8008966:	223f      	movs	r2, #63	; 0x3f
 8008968:	2101      	movs	r1, #1
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff ff88 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 8008970:	2203      	movs	r2, #3
 8008972:	2102      	movs	r1, #2
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ff83 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 800897a:	2203      	movs	r2, #3
 800897c:	2103      	movs	r1, #3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ff7e 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 8008984:	2203      	movs	r2, #3
 8008986:	2104      	movs	r1, #4
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff ff79 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 800898e:	2202      	movs	r2, #2
 8008990:	2105      	movs	r1, #5
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff ff74 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 8008998:	220e      	movs	r2, #14
 800899a:	2106      	movs	r1, #6
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff ff6f 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2107      	movs	r1, #7
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff ff6a 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 80089ac:	2200      	movs	r2, #0
 80089ae:	2111      	movs	r1, #17
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff65 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 80089b6:	2200      	movs	r2, #0
 80089b8:	2112      	movs	r1, #18
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff ff60 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 80089c0:	2200      	movs	r2, #0
 80089c2:	2113      	movs	r1, #19
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff ff5b 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2114      	movs	r1, #20
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff ff56 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 80089d4:	2200      	movs	r2, #0
 80089d6:	2115      	movs	r1, #21
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff51 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 80089de:	2200      	movs	r2, #0
 80089e0:	2116      	movs	r1, #22
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff ff4c 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 80089e8:	2200      	movs	r2, #0
 80089ea:	211c      	movs	r1, #28
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff ff47 	bl	8008880 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 80089f2:	2200      	movs	r2, #0
 80089f4:	211d      	movs	r1, #29
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff ff42 	bl	8008880 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9b4 	bl	8008d6a <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9a4 	bl	8008d50 <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f9bb 	bl	8008d84 <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8008a0e:	2101      	movs	r1, #1
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff feca 	bl	80087aa <nRF24_CSN_State>
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff ff06 	bl	800883e <nRF24_ReadReg>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d104      	bne.n	8008a46 <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	f043 0302 	orr.w	r3, r3, #2
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	e003      	b.n	8008a4e <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	f023 0302 	bic.w	r3, r3, #2
 8008a4c:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	461a      	mov	r2, r3
 8008a52:	2100      	movs	r1, #0
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ff13 	bl	8008880 <nRF24_WriteReg>
}
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff fee4 	bl	800883e <nRF24_ReadReg>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8008a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	b25a      	sxtb	r2, r3
 8008a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b25b      	sxtb	r3, r3
 8008a94:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff feef 	bl	8008880 <nRF24_WriteReg>
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <nRF24_SetRFChannel>:
  reg &= ~nRF24_MASK_CRC;
  reg |= (scheme & nRF24_MASK_CRC);
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
}

void nRF24_SetRFChannel(nRF24_Handler_t *device, uint8_t channel) {
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70fb      	strb	r3, [r7, #3]
  nRF24_WriteReg(device, nRF24_REG_RF_CH, channel);
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	2105      	movs	r1, #5
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fedf 	bl	8008880 <nRF24_WriteReg>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	2b06      	cmp	r3, #6
 8008ade:	f200 809c 	bhi.w	8008c1a <nRF24_SetAddr+0x14e>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <nRF24_SetAddr+0x1c>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	08008b5b 	.word	0x08008b5b
 8008af0:	08008bb1 	.word	0x08008bb1
 8008af4:	08008bb1 	.word	0x08008bb1
 8008af8:	08008bb1 	.word	0x08008bb1
 8008afc:	08008bb1 	.word	0x08008bb1
 8008b00:	08008bc5 	.word	0x08008bc5
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008b04:	2103      	movs	r1, #3
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fe99 	bl	800883e <nRF24_ReadReg>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	3301      	adds	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4413      	add	r3, r2
 8008b18:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff fe44 	bl	80087aa <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <nRF24_SetAddr+0x158>)
 8008b26:	5cd3      	ldrb	r3, [r2, r3]
 8008b28:	f043 0320 	orr.w	r3, r3, #32
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	4619      	mov	r1, r3
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fe6e 	bl	8008812 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff fe66 	bl	8008812 <nRF24_LL_RW>
      } while (addr_width--);
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	75fa      	strb	r2, [r7, #23]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f2      	bne.n	8008b36 <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008b50:	2101      	movs	r1, #1
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fe29 	bl	80087aa <nRF24_CSN_State>
      break;
 8008b58:	e060      	b.n	8008c1c <nRF24_SetAddr+0x150>
    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fe6e 	bl	800883e <nRF24_ReadReg>
 8008b62:	4603      	mov	r3, r0
 8008b64:	3301      	adds	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008b70:	2100      	movs	r1, #0
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7ff fe19 	bl	80087aa <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	4a2a      	ldr	r2, [pc, #168]	; (8008c24 <nRF24_SetAddr+0x158>)
 8008b7c:	5cd3      	ldrb	r3, [r2, r3]
 8008b7e:	f043 0320 	orr.w	r3, r3, #32
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	4619      	mov	r1, r3
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7ff fe43 	bl	8008812 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	1e5a      	subs	r2, r3, #1
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff fe3b 	bl	8008812 <nRF24_LL_RW>
      } while (addr_width--);
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	1e5a      	subs	r2, r3, #1
 8008ba0:	75fa      	strb	r2, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f2      	bne.n	8008b8c <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fdfe 	bl	80087aa <nRF24_CSN_State>
      break;
 8008bae:	e035      	b.n	8008c1c <nRF24_SetAddr+0x150>
    case nRF24_PIPE2:
    case nRF24_PIPE3:
    case nRF24_PIPE4:
    case nRF24_PIPE5:
      /* Write address LSBbyte (only first byte from the addr buffer) */
      nRF24_WriteReg(device, nRF24_ADDR_REGS[pipe], *addr);
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	4a1c      	ldr	r2, [pc, #112]	; (8008c24 <nRF24_SetAddr+0x158>)
 8008bb4:	5cd1      	ldrb	r1, [r2, r3]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f7ff fe5f 	bl	8008880 <nRF24_WriteReg>
      break;
 8008bc2:	e02b      	b.n	8008c1c <nRF24_SetAddr+0x150>
    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8008bc4:	2103      	movs	r1, #3
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff fe39 	bl	800883e <nRF24_ReadReg>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	3301      	adds	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8008bda:	2100      	movs	r1, #0
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fde4 	bl	80087aa <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008be2:	7afb      	ldrb	r3, [r7, #11]
 8008be4:	4a0f      	ldr	r2, [pc, #60]	; (8008c24 <nRF24_SetAddr+0x158>)
 8008be6:	5cd3      	ldrb	r3, [r2, r3]
 8008be8:	f043 0320 	orr.w	r3, r3, #32
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff fe0e 	bl	8008812 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	1e5a      	subs	r2, r3, #1
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff fe06 	bl	8008812 <nRF24_LL_RW>
      } while (addr_width--);
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	1e5a      	subs	r2, r3, #1
 8008c0a:	75fa      	strb	r2, [r7, #23]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f2      	bne.n	8008bf6 <nRF24_SetAddr+0x12a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8008c10:	2101      	movs	r1, #1
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fdc9 	bl	80087aa <nRF24_CSN_State>
      break;
 8008c18:	e000      	b.n	8008c1c <nRF24_SetAddr+0x150>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 8008c1a:	bf00      	nop
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	080092e8 	.word	0x080092e8

08008c28 <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	70fb      	strb	r3, [r7, #3]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70bb      	strb	r3, [r7, #2]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8008c42:	2102      	movs	r1, #2
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff fdfa 	bl	800883e <nRF24_ReadReg>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	b25a      	sxtb	r2, r3
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	2101      	movs	r1, #1
 8008c52:	fa01 f303 	lsl.w	r3, r1, r3
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	b25b      	sxtb	r3, r3
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c62:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	461a      	mov	r2, r3
 8008c68:	2102      	movs	r1, #2
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff fe08 	bl	8008880 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	4a1a      	ldr	r2, [pc, #104]	; (8008cdc <nRF24_SetRXPipe+0xb4>)
 8008c74:	5cd1      	ldrb	r1, [r2, r3]
 8008c76:	787b      	ldrb	r3, [r7, #1]
 8008c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff fdfd 	bl	8008880 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8008c86:	2101      	movs	r1, #1
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff fdd8 	bl	800883e <nRF24_ReadReg>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 8008c92:	78bb      	ldrb	r3, [r7, #2]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d10a      	bne.n	8008cae <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	b25a      	sxtb	r2, r3
 8008ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	b25b      	sxtb	r3, r3
 8008caa:	73fb      	strb	r3, [r7, #15]
 8008cac:	e00b      	b.n	8008cc6 <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	b25b      	sxtb	r3, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	b25a      	sxtb	r2, r3
 8008cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	b25b      	sxtb	r3, r3
 8008cc4:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2101      	movs	r1, #1
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff fdd7 	bl	8008880 <nRF24_WriteReg>
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	080092e0 	.word	0x080092e0

08008ce0 <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d905      	bls.n	8008cfe <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fdc2 	bl	8008880 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 8008cfc:	e017      	b.n	8008d2e <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8008cfe:	2101      	movs	r1, #1
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fd9c 	bl	800883e <nRF24_ReadReg>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	b25b      	sxtb	r3, r3
 8008d14:	43db      	mvns	r3, r3
 8008d16:	b25a      	sxtb	r2, r3
 8008d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	b25b      	sxtb	r3, r3
 8008d20:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	461a      	mov	r2, r3
 8008d26:	2101      	movs	r1, #1
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fda9 	bl	8008880 <nRF24_WriteReg>
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 8008d3e:	2107      	movs	r1, #7
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff fd7c 	bl	800883e <nRF24_ReadReg>
 8008d46:	4603      	mov	r3, r0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8008d58:	22ff      	movs	r2, #255	; 0xff
 8008d5a:	21e1      	movs	r1, #225	; 0xe1
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff fd8f 	bl	8008880 <nRF24_WriteReg>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8008d72:	22ff      	movs	r2, #255	; 0xff
 8008d74:	21e2      	movs	r1, #226	; 0xe2
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fd82 	bl	8008880 <nRF24_WriteReg>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 8008d8c:	2107      	movs	r1, #7
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fd55 	bl	800883e <nRF24_ReadReg>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008d9e:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	461a      	mov	r2, r3
 8008da4:	2107      	movs	r1, #7
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff fd6a 	bl	8008880 <nRF24_WriteReg>
}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <nRF24_ReadPayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

nRF24_RXResult nRF24_ReadPayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t *length) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  uint8_t pipe;

  /* Extract a payload pipe number from the STATUS register */
  pipe = (nRF24_ReadReg(device, nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8008dc0:	2107      	movs	r1, #7
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff fd3b 	bl	800883e <nRF24_ReadReg>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	105b      	asrs	r3, r3, #1
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	75fb      	strb	r3, [r7, #23]

  /* RX FIFO empty? */
  if (pipe < 6)
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b05      	cmp	r3, #5
 8008dd8:	d817      	bhi.n	8008e0a <nRF24_ReadPayload+0x56>
  {
    /* Get payload length */
    *length = nRF24_ReadReg(device, nRF24_RX_PW_PIPE[pipe]);
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	4a0f      	ldr	r2, [pc, #60]	; (8008e1c <nRF24_ReadPayload+0x68>)
 8008dde:	5cd3      	ldrb	r3, [r2, r3]
 8008de0:	4619      	mov	r1, r3
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fd2b 	bl	800883e <nRF24_ReadReg>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	701a      	strb	r2, [r3, #0]

    /* Read a payload from the RX FIFO */
    if (*length)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d006      	beq.n	8008e06 <nRF24_ReadPayload+0x52>
    {
      nRF24_ReadMBReg(device, nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	2161      	movs	r1, #97	; 0x61
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff fd7d 	bl	8008900 <nRF24_ReadMBReg>
    }

    return ((nRF24_RXResult)pipe);
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	e003      	b.n	8008e12 <nRF24_ReadPayload+0x5e>
  }

  /* The RX FIFO is empty */
  *length = 0;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	701a      	strb	r2, [r3, #0]

  return nRF24_RX_EMPTY;
 8008e10:	23ff      	movs	r3, #255	; 0xff
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	080092e0 	.word	0x080092e0

08008e20 <VL6180X_Read8>:
    @brief  I2C low level interfacing
*/
/**************************************************************************/

// Read 1 byte from the VL6180X at 'address'
uint8_t VL6180X_Read8(VL6180X_Handler_t* device, uint16_t command) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 8008e2c:	887b      	ldrh	r3, [r7, #2]
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	791b      	ldrb	r3, [r3, #4]
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 2, 1000);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	b299      	uxth	r1, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f103 0209 	add.w	r2, r3, #9
 8008e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	f7f9 fcef 	bl	8002840 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 1, 1000);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	b299      	uxth	r1, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	1d5a      	adds	r2, r3, #5
 8008e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2301      	movs	r3, #1
 8008e76:	f7f9 fdd7 	bl	8002a28 <HAL_I2C_Master_Receive>
  return device->rxBuffer[0];
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	795b      	ldrb	r3, [r3, #5]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <VL6180X_Write8>:
  HAL_I2C_Master_Receive(device->i2cHandler, send_address, device->rxBuffer, 2, 1000);
  return ((uint16_t)(device->rxBuffer[0]) << 8) | ((uint16_t)(device->rxBuffer[1]));
}

// write 1 byte
void VL6180X_Write8(VL6180X_Handler_t* device, uint16_t command, uint8_t data) {
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af02      	add	r7, sp, #8
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	807b      	strh	r3, [r7, #2]
 8008e92:	4613      	mov	r3, r2
 8008e94:	707b      	strb	r3, [r7, #1]
  device->txBuffer[0] = (uint8_t)(command >> 8);
 8008e96:	887b      	ldrh	r3, [r7, #2]
 8008e98:	0a1b      	lsrs	r3, r3, #8
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	725a      	strb	r2, [r3, #9]
  device->txBuffer[1] = (uint8_t)(command & 0xFF);
 8008ea2:	887b      	ldrh	r3, [r7, #2]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	729a      	strb	r2, [r3, #10]
  uint8_t send_address = device->i2cAddress << 1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	791b      	ldrb	r3, [r3, #4]
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	73fb      	strb	r3, [r7, #15]

  device->txBuffer[2] = data;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	787a      	ldrb	r2, [r7, #1]
 8008eb6:	72da      	strb	r2, [r3, #11]
  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 3, 1000);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	b299      	uxth	r1, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f103 0209 	add.w	r2, r3, #9
 8008ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	2303      	movs	r3, #3
 8008ece:	f7f9 fcb7 	bl	8002840 <HAL_I2C_Master_Transmit>
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <VL6180X_Init>:
  uint8_t send_address = device->i2cAddress << 1;

  HAL_I2C_Master_Transmit(device->i2cHandler, send_address, device->txBuffer, 4, 1000);
}

bool VL6180X_Init(VL6180X_Handler_t *device, I2C_HandleTypeDef *i2cHandler, uint8_t i2cAddress) {
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	71fb      	strb	r3, [r7, #7]
  device->i2cHandler = i2cHandler;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	601a      	str	r2, [r3, #0]
  device->i2cAddress = i2cAddress;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	711a      	strb	r2, [r3, #4]

  if (VL6180X_Read8(device, VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f7ff ff92 	bl	8008e20 <VL6180X_Read8>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2bb4      	cmp	r3, #180	; 0xb4
 8008f00:	d001      	beq.n	8008f06 <VL6180X_Init+0x2c>
    return false;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e011      	b.n	8008f2a <VL6180X_Init+0x50>
  }

  if (VL6180X_Read8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET) & 0x01) {
 8008f06:	2116      	movs	r1, #22
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff ff89 	bl	8008e20 <VL6180X_Read8>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <VL6180X_Init+0x4e>
    VL6180X_LoadSettings(device);
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f80a 	bl	8008f32 <VL6180X_LoadSettings>
    VL6180X_Write8(device, VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2116      	movs	r1, #22
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff ffaf 	bl	8008e86 <VL6180X_Write8>
  }

  return true;
 8008f28:	2301      	movs	r3, #1
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <VL6180X_LoadSettings>:
/*!
    @brief  Load the settings for proximity/distance ranging
*/
/**************************************************************************/

void VL6180X_LoadSettings(VL6180X_Handler_t *device) {
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  // load settings!

  // private settings from page 24 of app note
  VL6180X_Write8(device, 0x0207, 0x01);
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f240 2107 	movw	r1, #519	; 0x207
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff ffa0 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0208, 0x01);
 8008f46:	2201      	movs	r2, #1
 8008f48:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff9a 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0096, 0x00);
 8008f52:	2200      	movs	r2, #0
 8008f54:	2196      	movs	r1, #150	; 0x96
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff ff95 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0097, 0xfd);
 8008f5c:	22fd      	movs	r2, #253	; 0xfd
 8008f5e:	2197      	movs	r1, #151	; 0x97
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff ff90 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e3, 0x00);
 8008f66:	2200      	movs	r2, #0
 8008f68:	21e3      	movs	r1, #227	; 0xe3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff ff8b 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e4, 0x04);
 8008f70:	2204      	movs	r2, #4
 8008f72:	21e4      	movs	r1, #228	; 0xe4
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff ff86 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e5, 0x02);
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	21e5      	movs	r1, #229	; 0xe5
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff ff81 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e6, 0x01);
 8008f84:	2201      	movs	r2, #1
 8008f86:	21e6      	movs	r1, #230	; 0xe6
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff ff7c 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00e7, 0x03);
 8008f8e:	2203      	movs	r2, #3
 8008f90:	21e7      	movs	r1, #231	; 0xe7
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ff77 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00f5, 0x02);
 8008f98:	2202      	movs	r2, #2
 8008f9a:	21f5      	movs	r1, #245	; 0xf5
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ff72 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00d9, 0x05);
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	21d9      	movs	r1, #217	; 0xd9
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff ff6d 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00db, 0xce);
 8008fac:	22ce      	movs	r2, #206	; 0xce
 8008fae:	21db      	movs	r1, #219	; 0xdb
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff ff68 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dc, 0x03);
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	21dc      	movs	r1, #220	; 0xdc
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ff63 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00dd, 0xf8);
 8008fc0:	22f8      	movs	r2, #248	; 0xf8
 8008fc2:	21dd      	movs	r1, #221	; 0xdd
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff ff5e 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x009f, 0x00);
 8008fca:	2200      	movs	r2, #0
 8008fcc:	219f      	movs	r1, #159	; 0x9f
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff ff59 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00a3, 0x3c);
 8008fd4:	223c      	movs	r2, #60	; 0x3c
 8008fd6:	21a3      	movs	r1, #163	; 0xa3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ff54 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b7, 0x00);
 8008fde:	2200      	movs	r2, #0
 8008fe0:	21b7      	movs	r1, #183	; 0xb7
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ff4f 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00bb, 0x3c);
 8008fe8:	223c      	movs	r2, #60	; 0x3c
 8008fea:	21bb      	movs	r1, #187	; 0xbb
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff ff4a 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00b2, 0x09);
 8008ff2:	2209      	movs	r2, #9
 8008ff4:	21b2      	movs	r1, #178	; 0xb2
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff ff45 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ca, 0x09);
 8008ffc:	2209      	movs	r2, #9
 8008ffe:	21ca      	movs	r1, #202	; 0xca
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff ff40 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0198, 0x01);
 8009006:	2201      	movs	r2, #1
 8009008:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ff3a 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01b0, 0x17);
 8009012:	2217      	movs	r2, #23
 8009014:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff ff34 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ad, 0x00);
 800901e:	2200      	movs	r2, #0
 8009020:	f240 11ad 	movw	r1, #429	; 0x1ad
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff ff2e 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x00ff, 0x05);
 800902a:	2205      	movs	r2, #5
 800902c:	21ff      	movs	r1, #255	; 0xff
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff ff29 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0100, 0x05);
 8009034:	2205      	movs	r2, #5
 8009036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff ff23 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0199, 0x05);
 8009040:	2205      	movs	r2, #5
 8009042:	f240 1199 	movw	r1, #409	; 0x199
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff ff1d 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a6, 0x1b);
 800904c:	221b      	movs	r2, #27
 800904e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff ff17 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01ac, 0x3e);
 8009058:	223e      	movs	r2, #62	; 0x3e
 800905a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7ff ff11 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x01a7, 0x1f);
 8009064:	221f      	movs	r2, #31
 8009066:	f240 11a7 	movw	r1, #423	; 0x1a7
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff ff0b 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x0030, 0x00);
 8009070:	2200      	movs	r2, #0
 8009072:	2130      	movs	r1, #48	; 0x30
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff ff06 	bl	8008e86 <VL6180X_Write8>

  // Recommended : Public registers - See data sheet for more detail
  VL6180X_Write8(device, 0x0011, 0x10); // Enables polling for 'New Sample ready'
 800907a:	2210      	movs	r2, #16
 800907c:	2111      	movs	r1, #17
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff ff01 	bl	8008e86 <VL6180X_Write8>
                        // when measurement completes
  VL6180X_Write8(device, 0x010a, 0x30); // Set the averaging sample period
 8009084:	2230      	movs	r2, #48	; 0x30
 8009086:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fefb 	bl	8008e86 <VL6180X_Write8>
                        // (compromise between lower noise and
                        // increased execution time)
  VL6180X_Write8(device, 0x003f, 0x46); // Sets the light and dark gain (upper
 8009090:	2246      	movs	r2, #70	; 0x46
 8009092:	213f      	movs	r1, #63	; 0x3f
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fef6 	bl	8008e86 <VL6180X_Write8>
                        // nibble). Dark gain should not be
                        // changed.
  VL6180X_Write8(device, 0x0031, 0xFF); // sets the # of range measurements after
 800909a:	22ff      	movs	r2, #255	; 0xff
 800909c:	2131      	movs	r1, #49	; 0x31
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fef1 	bl	8008e86 <VL6180X_Write8>
                        // which auto calibration of system is
                        // performed
  VL6180X_Write8(device, 0x0041, 0x63); // Set ALS integration time to 100ms
 80090a4:	2263      	movs	r2, #99	; 0x63
 80090a6:	2141      	movs	r1, #65	; 0x41
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff feec 	bl	8008e86 <VL6180X_Write8>
  VL6180X_Write8(device, 0x002e, 0x01); // perform a single temperature calibration
 80090ae:	2201      	movs	r2, #1
 80090b0:	212e      	movs	r1, #46	; 0x2e
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fee7 	bl	8008e86 <VL6180X_Write8>
                        // of the ranging sensor

  // Optional: Public registers - See data sheet for more detail
  VL6180X_Write8(device, SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 80090b8:	2209      	movs	r2, #9
 80090ba:	211b      	movs	r1, #27
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff fee2 	bl	8008e86 <VL6180X_Write8>
                        // Set default ranging inter-measurement
                        // period to 100ms
  VL6180X_Write8(device, 0x003e, 0x31); // Set default ALS inter-measurement period
 80090c2:	2231      	movs	r2, #49	; 0x31
 80090c4:	213e      	movs	r1, #62	; 0x3e
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fedd 	bl	8008e86 <VL6180X_Write8>
                        // to 500ms
  VL6180X_Write8(device, 0x0014, 0x24); // Configures interrupt on 'New Sample
 80090cc:	2224      	movs	r2, #36	; 0x24
 80090ce:	2114      	movs	r1, #20
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fed8 	bl	8008e86 <VL6180X_Write8>
                        // Ready threshold event'
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <VL6180X_ReadRange>:
   readRangeStatus} to before using the return value!
    @return Distance in millimeters if valid
*/
/**************************************************************************/

uint8_t VL6180X_ReadRange(VL6180X_Handler_t *device) {
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  // wait for device to be ready for range measurement
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
 80090e6:	bf00      	nop
 80090e8:	214d      	movs	r1, #77	; 0x4d
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fe98 	bl	8008e20 <VL6180X_Read8>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0f6      	beq.n	80090e8 <VL6180X_ReadRange+0xa>

  // Start a range measurement
  VL6180X_Write8(device, VL6180X_REG_SYSRANGE_START, 0x01);
 80090fa:	2201      	movs	r2, #1
 80090fc:	2118      	movs	r1, #24
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fec1 	bl	8008e86 <VL6180X_Write8>

  // Poll until bit 2 is set
  while (!(VL6180X_Read8(device, VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
 8009104:	bf00      	nop
 8009106:	214f      	movs	r1, #79	; 0x4f
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fe89 	bl	8008e20 <VL6180X_Read8>
 800910e:	4603      	mov	r3, r0
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0f6      	beq.n	8009106 <VL6180X_ReadRange+0x28>

  // read range in mm
  uint8_t range = VL6180X_Read8(device, VL6180X_REG_RESULT_RANGE_VAL);
 8009118:	2162      	movs	r1, #98	; 0x62
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fe80 	bl	8008e20 <VL6180X_Read8>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

  // clear interrupt
  VL6180X_Write8(device, VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8009124:	2207      	movs	r2, #7
 8009126:	2115      	movs	r1, #21
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff feac 	bl	8008e86 <VL6180X_Write8>

  return range;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	; (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000018 	.word	0x20000018

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4d0d      	ldr	r5, [pc, #52]	; (800917c <__libc_init_array+0x38>)
 8009148:	4c0d      	ldr	r4, [pc, #52]	; (8009180 <__libc_init_array+0x3c>)
 800914a:	1b64      	subs	r4, r4, r5
 800914c:	10a4      	asrs	r4, r4, #2
 800914e:	2600      	movs	r6, #0
 8009150:	42a6      	cmp	r6, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	4d0b      	ldr	r5, [pc, #44]	; (8009184 <__libc_init_array+0x40>)
 8009156:	4c0c      	ldr	r4, [pc, #48]	; (8009188 <__libc_init_array+0x44>)
 8009158:	f000 f852 	bl	8009200 <_init>
 800915c:	1b64      	subs	r4, r4, r5
 800915e:	10a4      	asrs	r4, r4, #2
 8009160:	2600      	movs	r6, #0
 8009162:	42a6      	cmp	r6, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f855 3b04 	ldr.w	r3, [r5], #4
 800916c:	4798      	blx	r3
 800916e:	3601      	adds	r6, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f855 3b04 	ldr.w	r3, [r5], #4
 8009176:	4798      	blx	r3
 8009178:	3601      	adds	r6, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	080092f8 	.word	0x080092f8
 8009180:	080092f8 	.word	0x080092f8
 8009184:	080092f8 	.word	0x080092f8
 8009188:	080092fc 	.word	0x080092fc

0800918c <memcpy>:
 800918c:	440a      	add	r2, r1
 800918e:	4291      	cmp	r1, r2
 8009190:	f100 33ff 	add.w	r3, r0, #4294967295
 8009194:	d100      	bne.n	8009198 <memcpy+0xc>
 8009196:	4770      	bx	lr
 8009198:	b510      	push	{r4, lr}
 800919a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800919e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a2:	4291      	cmp	r1, r2
 80091a4:	d1f9      	bne.n	800919a <memcpy+0xe>
 80091a6:	bd10      	pop	{r4, pc}

080091a8 <memset>:
 80091a8:	4402      	add	r2, r0
 80091aa:	4603      	mov	r3, r0
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d100      	bne.n	80091b2 <memset+0xa>
 80091b0:	4770      	bx	lr
 80091b2:	f803 1b01 	strb.w	r1, [r3], #1
 80091b6:	e7f9      	b.n	80091ac <memset+0x4>

080091b8 <sqrt>:
 80091b8:	b508      	push	{r3, lr}
 80091ba:	ed2d 8b04 	vpush	{d8-d9}
 80091be:	eeb0 8b40 	vmov.f64	d8, d0
 80091c2:	f000 f819 	bl	80091f8 <__ieee754_sqrt>
 80091c6:	eeb4 8b48 	vcmp.f64	d8, d8
 80091ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ce:	d60c      	bvs.n	80091ea <sqrt+0x32>
 80091d0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80091f0 <sqrt+0x38>
 80091d4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	d505      	bpl.n	80091ea <sqrt+0x32>
 80091de:	f7ff ffab 	bl	8009138 <__errno>
 80091e2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80091e6:	2321      	movs	r3, #33	; 0x21
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	ecbd 8b04 	vpop	{d8-d9}
 80091ee:	bd08      	pop	{r3, pc}
	...

080091f8 <__ieee754_sqrt>:
 80091f8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80091fc:	4770      	bx	lr
	...

08009200 <_init>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	bf00      	nop
 8009204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009206:	bc08      	pop	{r3}
 8009208:	469e      	mov	lr, r3
 800920a:	4770      	bx	lr

0800920c <_fini>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	bf00      	nop
 8009210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009212:	bc08      	pop	{r3}
 8009214:	469e      	mov	lr, r3
 8009216:	4770      	bx	lr
